<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C++类与对象</title>
      <link href="/archives/9b3a1cc9.html"/>
      <url>/archives/9b3a1cc9.html</url>
      
        <content type="html"><![CDATA[<hr>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 笔记 </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown数学公式</title>
      <link href="/archives/fc50cd32.html"/>
      <url>/archives/fc50cd32.html</url>
      
        <content type="html"><![CDATA[<hr><h1 id="上下标"><a href="#上下标" class="headerlink" title="上下标"></a>上下标</h1><table><thead><tr><th align="center">算式</th><th align="center">Markdown</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">$a_{i}$</td><td align="center"><code>$a_&#123;i&#125;$</code></td><td align="center">上标</td></tr><tr><td align="center">$a^{2}$</td><td align="center"><code>$a^&#123;2&#125;$</code></td><td align="center">下标</td></tr></tbody></table><h1 id="括号"><a href="#括号" class="headerlink" title="括号"></a>括号</h1><h2 id="基础括号"><a href="#基础括号" class="headerlink" title="基础括号"></a>基础括号</h2><table><thead><tr><th align="center">算式</th><th align="center">Markdown</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">$()$</td><td align="center"><code>$()$</code></td><td align="center">小括号</td></tr><tr><td align="center">$[]$</td><td align="center"><code>$[]$</code></td><td align="center">中括号</td></tr><tr><td align="center">$⟨⟩$</td><td align="center"><code>$\lang\rang$</code> 或 <code>$\langle\rangle$</code></td><td align="center">尖括号</td></tr><tr><td align="center">$\lvert\rvert$</td><td align="center"><code>$\lvert\rvert$</code></td><td align="center">绝对值</td></tr><tr><td align="center">$\lVert\rVert$</td><td align="center"><code>$\lVert\rVert$</code></td><td align="center">双竖线</td></tr><tr><td align="center">$\lbrace\rbrace$</td><td align="center"><code>$\lbrace\rbrace$</code>或<code>$\&#123;\&#125;$</code></td><td align="center">花括号</td></tr></tbody></table><h2 id="增大括号"><a href="#增大括号" class="headerlink" title="增大括号"></a>增大括号</h2><table><thead><tr><th align="center">算式</th><th align="center">Markdown</th></tr></thead><tbody><tr><td align="center">$(x)$</td><td align="center"><code>$(x)$</code></td></tr><tr><td align="center">$\big( x \big)$</td><td align="center"><code>$\big( x \big)$</code></td></tr><tr><td align="center">$\Big( x \Big)$</td><td align="center"><code>$\Big( x \Big)$</code></td></tr><tr><td align="center">$\bigg( x \bigg)$</td><td align="center"><code>$\bigg( x \bigg)$</code></td></tr><tr><td align="center">$\Bigg( x \Bigg)$</td><td align="center"><code>$\Bigg( x \Bigg)$</code></td></tr></tbody></table><p><strong>注：其他的括号用法一样。</strong></p><h1 id="分数"><a href="#分数" class="headerlink" title="分数"></a>分数</h1><table><thead><tr><th align="center">算式</th><th align="center">Markdown</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">$\frac{a}{b}$</td><td align="center"><code>$\frac&#123;a&#125;&#123;b&#125;$</code></td><td align="center">分数</td></tr></tbody></table><h1 id="开方"><a href="#开方" class="headerlink" title="开方"></a>开方</h1><table><thead><tr><th align="center">算式</th><th align="center">Markdown</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">$\sqrt[n]{a + b}$</td><td align="center"><code>$\sqrt[n]&#123;a + b&#125;$</code></td><td align="center">开方</td></tr></tbody></table><h1 id="累加-累乘"><a href="#累加-累乘" class="headerlink" title="累加/累乘"></a>累加/累乘</h1><table><thead><tr><th align="center">算式</th><th align="center">Markdown</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">$\sum_{x = 1}^{n}f(x)$</td><td align="center"><code>$\sum_&#123;x = 1&#125;^&#123;n&#125;f(x)$</code></td><td align="center">累加</td></tr><tr><td align="center">$\prod_{x = 1}^{n}f(x)$</td><td align="center"><code>$\prod_&#123;x = 1&#125;^&#123;n&#125;f(x)$</code></td><td align="center">累乘</td></tr></tbody></table><h1 id="三角函数"><a href="#三角函数" class="headerlink" title="三角函数"></a>三角函数</h1><table><thead><tr><th align="center">算式</th><th align="center">Markdown</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">$\sin$</td><td align="center"><code>$\sin$</code></td><td align="center">正弦</td></tr><tr><td align="center">$\cos$</td><td align="center"><code>$\cos$</code></td><td align="center">余弦</td></tr><tr><td align="center">$\tan$</td><td align="center"><code>$\tan$</code></td><td align="center">正切</td></tr><tr><td align="center">$\cot$</td><td align="center"><code>$\cot$</code></td><td align="center">余切</td></tr><tr><td align="center">$\sec$</td><td align="center"><code>$\sec$</code></td><td align="center">正割</td></tr><tr><td align="center">$\csc$</td><td align="center"><code>$\csc$</code></td><td align="center">余割</td></tr><tr><td align="center">$\bot$</td><td align="center"><code>$\bot$</code></td><td align="center">垂直</td></tr><tr><td align="center">$\angle$</td><td align="center"><code>$\angle$</code></td><td align="center">角</td></tr><tr><td align="center">$360^\circ$</td><td align="center"><code>$360^\circ$</code></td><td align="center">度</td></tr></tbody></table><h1 id="二元运算符"><a href="#二元运算符" class="headerlink" title="二元运算符"></a>二元运算符</h1><table><thead><tr><th align="center">算式</th><th align="center">Markdown</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">$\pm$</td><td align="center"><code>$\pm$</code></td><td align="center">正负</td></tr><tr><td align="center">$\mp$</td><td align="center"><code>$\mp$</code></td><td align="center">负正</td></tr><tr><td align="center">$\times$</td><td align="center"><code>$\times$</code></td><td align="center">乘</td></tr><tr><td align="center">$\div$</td><td align="center"><code>$\div$</code></td><td align="center">除</td></tr><tr><td align="center">$\ast$</td><td align="center"><code>$\ast$</code></td><td align="center">星</td></tr><tr><td align="center">$\star$</td><td align="center"><code>$\star$</code></td><td align="center">星星</td></tr><tr><td align="center">$\mid$</td><td align="center"><code>$\mid$</code></td><td align="center">整除</td></tr><tr><td align="center">$\nmid$</td><td align="center"><code>$\nmid$</code></td><td align="center">不整除</td></tr><tr><td align="center">$\circ$</td><td align="center"><code>$\circ$</code></td><td align="center">空心圆圈</td></tr><tr><td align="center">$\bullet$</td><td align="center"><code>$\bullet$</code></td><td align="center">实心圆圈</td></tr><tr><td align="center">$\cdot$</td><td align="center"><code>$\cdot$</code></td><td align="center">点</td></tr><tr><td align="center">$\wr$</td><td align="center"><code>$\wr$</code></td><td align="center">波浪</td></tr><tr><td align="center">$\diamond$</td><td align="center"><code>$\diamond$</code></td><td align="center">菱形</td></tr><tr><td align="center">$\Diamond$</td><td align="center"><code>$\Diamond$</code></td><td align="center">大菱形</td></tr><tr><td align="center">$\triangle$</td><td align="center"><code>$\triangle$</code></td><td align="center">三角形</td></tr><tr><td align="center">$\bigtriangleup$</td><td align="center"><code>$\bigtriangleup$</code></td><td align="center">大正三角</td></tr><tr><td align="center">$\bigtriangledown$</td><td align="center"><code>$\bigtriangledown$</code></td><td align="center">大倒三角</td></tr><tr><td align="center">$\triangleleft$</td><td align="center"><code>$\triangleleft$</code></td><td align="center">子群</td></tr><tr><td align="center">$\triangleright$</td><td align="center"><code>$\triangleright$</code></td><td align="center">子群</td></tr><tr><td align="center">$\unlhd$</td><td align="center"><code>$\unlhd$</code></td><td align="center">正规子群</td></tr><tr><td align="center">$\unrhd$</td><td align="center"><code>$\unrhd$</code></td><td align="center">正规子群</td></tr><tr><td align="center">$\bigcirc$</td><td align="center"><code>$\bigcirc$</code></td><td align="center">大空心圆圈</td></tr><tr><td align="center">$\odot$</td><td align="center"><code>$\odot$</code></td><td align="center">圆心</td></tr><tr><td align="center">$\bigodot$</td><td align="center"><code>$\bigodot$</code></td><td align="center">点积</td></tr><tr><td align="center">$\oslash$</td><td align="center"><code>$\oslash$</code></td><td align="center">圈斜</td></tr><tr><td align="center">$\ominus$</td><td align="center"><code>$\ominus$</code></td><td align="center">圈减</td></tr><tr><td align="center">$\otimes$</td><td align="center"><code>$\otimes$</code></td><td align="center">圈乘</td></tr><tr><td align="center">$\oplus$</td><td align="center"><code>$\oplus$</code></td><td align="center">圈加</td></tr><tr><td align="center">$\bigoplus$</td><td align="center"><code>$\bigoplus$</code></td><td align="center">异或</td></tr><tr><td align="center">$\dagger$</td><td align="center"><code>$\dagger$</code></td><td align="center">短剑</td></tr><tr><td align="center">$\ddagger$</td><td align="center"><code>$\ddagger$</code></td><td align="center">双短剑</td></tr><tr><td align="center">$\amalg$</td><td align="center"><code>$\amalg$</code></td><td align="center">合并</td></tr></tbody></table><h1 id="关系符号"><a href="#关系符号" class="headerlink" title="关系符号"></a>关系符号</h1><table><thead><tr><th align="center">算式</th><th align="center">Markdown</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">$\leq$</td><td align="center"><code>$\leq$</code></td><td align="center">小于等于</td></tr><tr><td align="center">$\geq$</td><td align="center"><code>$\geq$</code></td><td align="center">大于等于</td></tr><tr><td align="center">$\equiv$</td><td align="center"><code>$\equiv$</code></td><td align="center">全等于</td></tr><tr><td align="center">$\models$</td><td align="center"><code>$\models$</code></td><td align="center">模型</td></tr><tr><td align="center">$\prec$</td><td align="center"><code>$\prec$</code></td><td align="center">子群</td></tr><tr><td align="center">$\succ$</td><td align="center"><code>$\succ$</code></td><td align="center">子群</td></tr><tr><td align="center">$\sim$</td><td align="center"><code>$\sim$</code></td><td align="center">颚化符</td></tr><tr><td align="center">$\perp$</td><td align="center"><code>$\perp$</code></td><td align="center">正规子群</td></tr><tr><td align="center">$\preceq$</td><td align="center"><code>$\preceq$</code></td><td align="center">正规子群</td></tr><tr><td align="center">$\simeq$</td><td align="center"><code>$\simeq$</code></td><td align="center">渐近等于</td></tr><tr><td align="center">$\ll$</td><td align="center"><code>$\ll$</code></td><td align="center">远小于</td></tr><tr><td align="center">$\gg$</td><td align="center"><code>$\gg$</code></td><td align="center">远大于</td></tr><tr><td align="center">$\asymp$</td><td align="center"><code>$\asymp$</code></td><td align="center">等价于</td></tr><tr><td align="center">$\parallel$</td><td align="center"><code>$\parallel$</code></td><td align="center">平行于</td></tr><tr><td align="center">$\approx$</td><td align="center"><code>$\approx$</code></td><td align="center">约等于</td></tr><tr><td align="center">$\cong$</td><td align="center"><code>$\cong$</code></td><td align="center">近似等于</td></tr><tr><td align="center">$\neq$</td><td align="center"><code>$\neq$</code></td><td align="center">不等于</td></tr><tr><td align="center">$\doteq$</td><td align="center"><code>$\doteq$</code></td><td align="center">接近极限</td></tr><tr><td align="center">$\propto$</td><td align="center"><code>$\propto$</code></td><td align="center">比例</td></tr><tr><td align="center">$\bowtie$</td><td align="center"><code>$\bowtie$</code></td><td align="center">蝴蝶结</td></tr><tr><td align="center">$\Join$</td><td align="center"><code>$\Join$</code></td><td align="center">蝴蝶结</td></tr><tr><td align="center">$\vdash$</td><td align="center"><code>$\vdash$</code></td><td align="center">右丁字</td></tr><tr><td align="center">$\dashv$</td><td align="center"><code>$\dashv$</code></td><td align="center">左丁字</td></tr></tbody></table><h1 id="极限"><a href="#极限" class="headerlink" title="极限"></a>极限</h1><table><thead><tr><th align="center">算式</th><th align="center">Markdown</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">$\lim$</td><td align="center"><code>$\lim$</code></td><td align="center">极限</td></tr><tr><td align="center">$\rightarrow$</td><td align="center"><code>$\rightarrow$</code></td><td align="center">右箭头</td></tr><tr><td align="center">$\infty$</td><td align="center"><code>$\infty$</code></td><td align="center">无穷</td></tr></tbody></table><h1 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h1><table><thead><tr><th align="center">算式</th><th align="center">Markdown</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">$\vec{a}$</td><td align="center"><code>$\vec&#123;a&#125;$</code></td><td align="center">向量</td></tr></tbody></table><h1 id="箭头"><a href="#箭头" class="headerlink" title="箭头"></a>箭头</h1><table><thead><tr><th align="center">算式</th><th align="center">Markdown</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">$\uparrow$</td><td align="center"><code>$\uparrow$</code></td><td align="center">上箭头</td></tr><tr><td align="center">$\downarrow$</td><td align="center"><code>$\downarrow$</code></td><td align="center">下箭头</td></tr><tr><td align="center">$\updownarrow$</td><td align="center"><code>$\updownarrow$</code></td><td align="center">上下箭头</td></tr><tr><td align="center">$\Uparrow$</td><td align="center"><code>$\Uparrow$</code></td><td align="center">上箭头</td></tr><tr><td align="center">$\Downarrow$</td><td align="center"><code>$\Downarrow$</code></td><td align="center">下箭头</td></tr><tr><td align="center">$\Updownarrow$</td><td align="center"><code>$\Updownarrow$</code></td><td align="center">上下箭头</td></tr><tr><td align="center">$\rightarrow$</td><td align="center"><code>$\rightarrow$</code></td><td align="center">右箭头</td></tr><tr><td align="center">$\leftarrow$</td><td align="center"><code>$\leftarrow$</code></td><td align="center">左箭头</td></tr><tr><td align="center">$\leftrightarrow$</td><td align="center"><code>$\leftrightarrow$</code></td><td align="center">左右箭头</td></tr><tr><td align="center">$\Rightarrow$</td><td align="center"><code>$\Rightarrow$</code></td><td align="center">右箭头</td></tr><tr><td align="center">$\Leftarrow$</td><td align="center"><code>$\Leftarrow$</code></td><td align="center">左箭头</td></tr><tr><td align="center">$\Leftrightarrow$</td><td align="center"><code>$\Leftrightarrow$</code></td><td align="center">左右箭头</td></tr><tr><td align="center">$\longrightarrow$</td><td align="center"><code>$\longrightarrow$</code></td><td align="center">右长箭头</td></tr><tr><td align="center">$\longleftarrow$</td><td align="center"><code>$\longleftarrow$</code></td><td align="center">左长箭头</td></tr><tr><td align="center">$\longleftrightarrow$</td><td align="center"><code>$\longleftrightarrow$</code></td><td align="center">左右长箭头</td></tr><tr><td align="center">$\Longrightarrow$</td><td align="center"><code>$\Longrightarrow$</code></td><td align="center">右长箭头</td></tr><tr><td align="center">$\Longleftarrow$</td><td align="center"><code>$\Longleftarrow$</code></td><td align="center">左长箭头</td></tr><tr><td align="center">$\Longleftrightarrow$</td><td align="center"><code>$\Longleftrightarrow$</code></td><td align="center">左右长箭头</td></tr><tr><td align="center">$\mapsto$</td><td align="center"><code>$\mapsto$</code></td><td align="center">映射箭头</td></tr><tr><td align="center">$\longmapsto$</td><td align="center"><code>$\longmapsto$</code></td><td align="center">映射长箭头</td></tr><tr><td align="center">$\hookleftarrow$</td><td align="center"><code>$\hookleftarrow$</code></td><td align="center">左勾箭头</td></tr><tr><td align="center">$\hookrightarrow$</td><td align="center"><code>$\hookrightarrow$</code></td><td align="center">右勾箭头</td></tr><tr><td align="center">$\rightharpoonup$</td><td align="center"><code>$\rightharpoonup$</code></td><td align="center">右鱼叉上箭头</td></tr><tr><td align="center">$\leftharpoondown$</td><td align="center"><code>$\leftharpoondown$</code></td><td align="center">左鱼叉下箭头</td></tr><tr><td align="center">$\rightleftharpoons$</td><td align="center"><code>$\rightleftharpoons$</code></td><td align="center">左右鱼叉箭头</td></tr><tr><td align="center">$\leftharpoonup$</td><td align="center"><code>$\leftharpoonup$</code></td><td align="center">左鱼叉上箭头</td></tr><tr><td align="center">$\rightharpoondown$</td><td align="center"><code>$\rightharpoondown$</code></td><td align="center">右鱼叉下箭头</td></tr><tr><td align="center">$\leadsto$</td><td align="center"><code>$\leadsto$</code></td><td align="center">波浪箭头</td></tr><tr><td align="center">$\nearrow$</td><td align="center"><code>$\nearrow$</code></td><td align="center">右上箭头</td></tr><tr><td align="center">$\searrow$</td><td align="center"><code>$\searrow$</code></td><td align="center">右下箭头</td></tr><tr><td align="center">$\swarrow$</td><td align="center"><code>$\swarrow$</code></td><td align="center">左下箭头</td></tr><tr><td align="center">$\nwarrow$</td><td align="center"><code>$\nwarrow$</code></td><td align="center">左上箭头</td></tr></tbody></table><h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><table><thead><tr><th align="center">算式</th><th align="center">Markdown</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">$\emptyset$</td><td align="center"><code>$\emptyset$</code></td><td align="center">空集</td></tr><tr><td align="center">$\in$</td><td align="center"><code>$\in$</code></td><td align="center">属于</td></tr><tr><td align="center">$\ni$</td><td align="center"><code>$\ni$</code></td><td align="center">属于</td></tr><tr><td align="center">$\notin$</td><td align="center"><code>$\notin$</code></td><td align="center">不属于</td></tr><tr><td align="center">$\subset$</td><td align="center"><code>$\subset$</code></td><td align="center">子集</td></tr><tr><td align="center">$\supset$</td><td align="center"><code>$\supset$</code></td><td align="center">子集</td></tr><tr><td align="center">$\not\subset$</td><td align="center"><code>$\not\subset$</code></td><td align="center">非子集</td></tr><tr><td align="center">$\subseteq$</td><td align="center"><code>$\subseteq$</code></td><td align="center">真子集</td></tr><tr><td align="center">$\supseteq$</td><td align="center"><code>$\supseteq$</code></td><td align="center">真子集</td></tr><tr><td align="center">$\cup$</td><td align="center"><code>$\cup$</code></td><td align="center">并集</td></tr><tr><td align="center">$\bigcup$</td><td align="center"><code>$\bigcup$</code></td><td align="center">并集</td></tr><tr><td align="center">$\cap$</td><td align="center"><code>$\cap$</code></td><td align="center">交集</td></tr><tr><td align="center">$\bigcap$</td><td align="center"><code>$\bigcap$</code></td><td align="center">交集</td></tr><tr><td align="center">$\uplus$</td><td align="center"><code>$\uplus$</code></td><td align="center">多重集</td></tr><tr><td align="center">$\biguplus$</td><td align="center"><code>$\biguplus$</code></td><td align="center">多重集</td></tr><tr><td align="center">$\sqsubset$</td><td align="center"><code>$\sqsubset$</code></td><td align="center">方形像</td></tr><tr><td align="center">$\sqsupset$</td><td align="center"><code>$\sqsupset$</code></td><td align="center">方形原</td></tr><tr><td align="center">$\sqcap$</td><td align="center"><code>$\sqcap$</code></td><td align="center">方形帽</td></tr><tr><td align="center">$\sqsubseteq$</td><td align="center"><code>$\sqsubseteq$</code></td><td align="center">不方形像或等于</td></tr><tr><td align="center">$\sqsupseteq$</td><td align="center"><code>$\sqsupseteq$</code></td><td align="center">不方形原或等于</td></tr><tr><td align="center">$\vee$</td><td align="center"><code>$\vee$</code></td><td align="center">逻辑或</td></tr><tr><td align="center">$\wedge$</td><td align="center"><code>$\wedge$</code></td><td align="center">逻辑与</td></tr><tr><td align="center">$\setminus$</td><td align="center"><code>$\setminus$</code></td><td align="center">集合中的减法</td></tr></tbody></table><h1 id="微积分"><a href="#微积分" class="headerlink" title="微积分"></a>微积分</h1><table><thead><tr><th align="center">算式</th><th align="center">Markdown</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">$\prime$</td><td align="center"><code>$\prime$</code></td><td align="center">求导</td></tr><tr><td align="center">$\int$</td><td align="center"><code>$\int$</code></td><td align="center">积分</td></tr><tr><td align="center">$\iint$</td><td align="center"><code>$\iint$</code></td><td align="center">双重积分</td></tr><tr><td align="center">$\iiint$</td><td align="center"><code>$\iiint$</code></td><td align="center">三重积分</td></tr><tr><td align="center">$\oint$</td><td align="center"><code>$\oint$</code></td><td align="center">曲线积分</td></tr><tr><td align="center">$\nabla$</td><td align="center"><code>$\nabla$</code></td><td align="center">梯度</td></tr></tbody></table><h1 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h1><table><thead><tr><th align="center">算式</th><th align="center">Markdown</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">$\because$</td><td align="center"><code>$\because$</code></td><td align="center">因为</td></tr><tr><td align="center">$\therefore$</td><td align="center"><code>$\therefore$</code></td><td align="center">所以</td></tr><tr><td align="center">$\forall$</td><td align="center"><code>$\forall$</code></td><td align="center">任意</td></tr><tr><td align="center">$∃$</td><td align="center"><code>$\exist$</code></td><td align="center">存在</td></tr><tr><td align="center">$\vee$</td><td align="center"><code>$\vee$</code></td><td align="center">逻辑或</td></tr><tr><td align="center">$\wedge$</td><td align="center"><code>$\wedge$</code></td><td align="center">逻辑与</td></tr><tr><td align="center">$\bigvee$</td><td align="center"><code>$\bigvee$</code></td><td align="center">逻辑或</td></tr><tr><td align="center">$\bigwedge$</td><td align="center"><code>$\bigwedge$</code></td><td align="center">逻辑与</td></tr></tbody></table><h1 id="上下标符号"><a href="#上下标符号" class="headerlink" title="上下标符号"></a>上下标符号</h1><table><thead><tr><th align="center">算式</th><th align="center">Markdown</th></tr></thead><tbody><tr><td align="center">$\bar{a}$</td><td align="center"><code>$\bar&#123;a&#125;$</code></td></tr><tr><td align="center">$\acute{a}$</td><td align="center"><code>$\acute&#123;a&#125;$</code></td></tr><tr><td align="center">$\breve{a}$</td><td align="center"><code>$\breve&#123;a&#125;$</code></td></tr><tr><td align="center">$\grave{a}$</td><td align="center"><code>$\grave&#123;a&#125;$</code></td></tr><tr><td align="center">$\dot{a}$</td><td align="center"><code>$\dot&#123;a&#125;$</code></td></tr><tr><td align="center">$\ddot{a}$</td><td align="center"><code>$\ddot&#123;a&#125;$</code></td></tr><tr><td align="center">$\hat{a}$</td><td align="center"><code>$\hat&#123;a&#125;$</code></td></tr><tr><td align="center">$\check{a}$</td><td align="center"><code>$\check&#123;a&#125;$</code></td></tr><tr><td align="center">$\breve{a}$</td><td align="center"><code>$\breve&#123;a&#125;$</code></td></tr><tr><td align="center">$\tilde{a}$</td><td align="center"><code>$\tilde&#123;a&#125;$</code></td></tr><tr><td align="center">$\vec{a}$</td><td align="center"><code>$\vec&#123;a&#125;$</code></td></tr><tr><td align="center">$\overline{a + b + c + d}$</td><td align="center"><code>$\overline&#123;a + b + c + d&#125;$</code></td></tr><tr><td align="center">$\underline{a + b + c + d}$</td><td align="center"><code>$\underline&#123;a + b + c + d&#125;$</code></td></tr><tr><td align="center">$\overbrace{a + b + c + d}$</td><td align="center"><code>$\overbrace&#123;a + b + c + d&#125;$</code></td></tr><tr><td align="center">$\underbrace{a + b + c + d}$</td><td align="center"><code>$\underbrace&#123;a + b + c + d&#125;$</code></td></tr><tr><td align="center">$\overbrace{a + \underbrace{b + c}_{1.0} + d}^{2.0}$</td><td align="center"><code>$\overbrace&#123;a + \underbrace&#123;b + c&#125;_&#123;1.0&#125; + d&#125;^&#123;2.0&#125;$</code></td></tr></tbody></table><h1 id="希腊字母"><a href="#希腊字母" class="headerlink" title="希腊字母"></a>希腊字母</h1><table><thead><tr><th align="center">大写</th><th align="center">Markdown</th><th align="center">小写</th><th align="center">Markdown</th></tr></thead><tbody><tr><td align="center">A</td><td align="center"><code>$\Alpha$</code></td><td align="center">$\alpha$</td><td align="center"><code>$\alpha$</code></td></tr><tr><td align="center">B</td><td align="center"><code>$\Beta$</code></td><td align="center">$\beta$</td><td align="center"><code>$\beta$</code></td></tr><tr><td align="center">$\Gamma$</td><td align="center"><code>$\Gamma$</code></td><td align="center">$\gamma$</td><td align="center"><code>$\gamma$</code></td></tr><tr><td align="center">$\Delta$</td><td align="center"><code>$\Delta$</code></td><td align="center">$\delta$</td><td align="center"><code>$\delta$</code></td></tr><tr><td align="center">E</td><td align="center"><code>$\Epsilon$</code></td><td align="center">$\epsilon$</td><td align="center"><code>$\epsilon$</code></td></tr><tr><td align="center"></td><td align="center"></td><td align="center">$\varepsilon$</td><td align="center"><code>$\varepsilon$</code></td></tr><tr><td align="center">Z</td><td align="center"><code>$\Zeta$</code></td><td align="center">$\zeta$</td><td align="center"><code>$\zeta$</code></td></tr><tr><td align="center">H</td><td align="center"><code>$\Eta$</code></td><td align="center">$\eta$</td><td align="center"><code>$\eta$</code></td></tr><tr><td align="center">$\Theta$</td><td align="center"><code>$\Theta$</code></td><td align="center">$\theta$</td><td align="center"><code>$\theta$</code></td></tr><tr><td align="center">I</td><td align="center"><code>$\Iota$</code></td><td align="center">$\iota$</td><td align="center"><code>$\iota$</code></td></tr><tr><td align="center">K</td><td align="center"><code>$\Kappa$</code></td><td align="center">$\kappa$</td><td align="center"><code>$\kappa$</code></td></tr><tr><td align="center">$\Lambda$</td><td align="center"><code>$\Lambda$</code></td><td align="center">$\lambda$</td><td align="center"><code>$\lambda$</code></td></tr><tr><td align="center">M</td><td align="center"><code>$\Mu$</code></td><td align="center">$\mu$</td><td align="center"><code>$\mu$</code></td></tr><tr><td align="center">N</td><td align="center"><code>$\Nu$</code></td><td align="center">$\nu$</td><td align="center"><code>$\nu$</code></td></tr><tr><td align="center">$\Xi$</td><td align="center"><code>$\Xi$</code></td><td align="center">$\xi$</td><td align="center"><code>$\xi$</code></td></tr><tr><td align="center">O</td><td align="center"><code>$\Omicron$</code></td><td align="center">$\omicron$</td><td align="center"><code>$\omicron$</code></td></tr><tr><td align="center">$\Pi$</td><td align="center"><code>$\Pi$</code></td><td align="center">$\pi$</td><td align="center"><code>$\pi$</code></td></tr><tr><td align="center">P</td><td align="center"><code>$\Rho$</code></td><td align="center">$\rho$</td><td align="center"><code>$\rho$</code></td></tr><tr><td align="center">$\Sigma$</td><td align="center"><code>$\Sigma$</code></td><td align="center">$\sigma$</td><td align="center"><code>$\sigma$</code></td></tr><tr><td align="center">T</td><td align="center"><code>$\Tau$</code></td><td align="center">$\tau$</td><td align="center"><code>$\tau$</code></td></tr><tr><td align="center">$\Upsilon$</td><td align="center"><code>$\Upsilon$</code></td><td align="center">$\upsilon$</td><td align="center"><code>$\upsilon$</code></td></tr><tr><td align="center">$\Phi$</td><td align="center"><code>$\Phi$</code></td><td align="center">$\phi$</td><td align="center"><code>$\phi$</code></td></tr><tr><td align="center"></td><td align="center"></td><td align="center">$\varphi$</td><td align="center"><code>$\varphi$</code></td></tr><tr><td align="center">X</td><td align="center"><code>$\Chi$</code></td><td align="center">$\chi$</td><td align="center"><code>$\chi$</code></td></tr><tr><td align="center">$\Psi$</td><td align="center"><code>$\Psi$</code></td><td align="center">$\psi$</td><td align="center"><code>$\psi$</code></td></tr><tr><td align="center">$\Omega$</td><td align="center"><code>$\Omega$</code></td><td align="center">$\omega$</td><td align="center"><code>$\omega$</code></td></tr></tbody></table><h1 id="省略号"><a href="#省略号" class="headerlink" title="省略号"></a>省略号</h1><table><thead><tr><th align="center">算式</th><th align="center">Markdown</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">$\dots$</td><td align="center"><code>$\dots$</code></td><td align="center">横向省略号</td></tr><tr><td align="center">$\ldots$</td><td align="center"><code>$\ldots$</code></td><td align="center">横向省略号</td></tr><tr><td align="center">$\cdots$</td><td align="center"><code>$\cdots$</code></td><td align="center">横向省略号</td></tr><tr><td align="center">$\vdots$</td><td align="center"><code>$\vdots$</code></td><td align="center">纵向省略号</td></tr><tr><td align="center">$\ddots$</td><td align="center"><code>$\ddots$</code></td><td align="center">斜向省略号</td></tr></tbody></table><hr>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 教程 </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习</title>
      <link href="/archives/498ab7d9.html"/>
      <url>/archives/498ab7d9.html</url>
      
        <content type="html"><![CDATA[<hr><h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><h2 id="监督学习"><a href="#监督学习" class="headerlink" title="监督学习"></a>监督学习</h2><p>常见的机器学习是<code>x-&gt;y</code>或输入到输出映射的算法，监督学习的关键特征是你给予学习算法示例，包括正确答案。也就是说包括给定的<code>x</code>和正确的标签<code>y</code>，通过学习算法进行学习，最后对于没有标签的<code>x</code>可以做出合理准确的预测或猜测。</p><h2 id="无监督学习"><a href="#无监督学习" class="headerlink" title="无监督学习"></a>无监督学习</h2><p>数据仅有输入<code>x</code>，但没有标签<code>y</code>，算法必须找到数据中的某种结构或某种模式或某些有趣的东西。</p><h2 id="相关符号"><a href="#相关符号" class="headerlink" title="相关符号"></a>相关符号</h2><ul><li>训练集：训练模型的数据集。</li><li>测试集：检验最终选择最优的模型的性能如何。</li><li>f：function的缩写，指模型。</li><li>x：作为输入的特征值。</li><li>y：作为结果的标签，指实际真实值。</li><li>m：训练样本总数。</li><li>(x, y)：一个训练样本。</li><li>($x^i$, $y^i$)：第<code>i</code>个训练样本。</li><li>$\hat{y}$：由<code>x</code>预测的结果，指预测值。</li></ul><h1 id="单变量线性回归"><a href="#单变量线性回归" class="headerlink" title="单变量线性回归"></a>单变量线性回归</h1><h2 id="模型函数"><a href="#模型函数" class="headerlink" title="模型函数"></a>模型函数</h2><p>现假设该模型只有一个特征值输入，则对于该线性回归，函数可以定义为：<br>$$<br>f_{w, b}(x) = wx + b<br>$$<br>该函数基于输入特征<code>x</code>的预测$\hat{y}$，并且取决于<code>w</code>和<code>b</code>的值，上述式子也可以进行简写。</p><p>$$<br>f(x) = wx + b<br>$$<br>显而易见，该函数为单变量线性回归，即只有一个特征值输入的线性回归。</p><p><code>w</code>和<code>b</code>为模型的参数，需要找到一个合适的值，获取一条直线，从而更好的拟合数据。因此我们需要想办法去找到合适的权重。</p><p>得到的模型用于测试，则预测值应该满足该函数：<br>$$<br>\hat{y}^{(i)} = f_{w,b}(x^{(i)}) = wx^{(i)}+b<br>$$<br>需要找到<code>w</code>和<code>b</code>，使其对每组样本$(x^{(i)},y^{(i)})$，$\hat{y}^{(i)}$的值尽可能接近${y}^{(i)}$。</p><h2 id="成本函数"><a href="#成本函数" class="headerlink" title="成本函数"></a>成本函数</h2><p>需要一个公式来计算每次的误差和是多少，该公式被称为成本函数公式，用于评判一个模型的好坏</p><p>首先应该计算每一次预测结果的差值：<br>$$<br>\hat{y}^{(i)}-{y}^{(i)}<br>$$<br>差值有正有负，因此对其进行平方：<br>$$<br>(\hat{y}^{(i)}-{y}^{(i)})^2<br>$$<br>共有<code>m</code>个样本，对这些样本误差求和并取平均值（在代码中下标从0开始）：<br>$$<br>\frac{1}{m}\sum_{i=1}^{m}(\hat{y}^{(i)}-{y}^{(i)})^2<br>$$<br>为了方便后续操作，一般会将该函数除以<code>2</code>，得到成本函数$J(w,b)$。<br>$$<br>J(w,b)=\frac{1}{2m}\sum_{i=1}^{m}(\hat{y}^{(i)}-{y}^{(i)})^2<br>$$</p><table><thead><tr><th align="center">条目</th><th align="center">函数</th></tr></thead><tbody><tr><td align="center">模型</td><td align="center">$f_{w, b}(x) = wx + b$</td></tr><tr><td align="center">参数</td><td align="center">$w,b$</td></tr><tr><td align="center">成本函数</td><td align="center">$J(w,b)=\frac{1}{2m}\sum_{i=1}^{m}(\hat{y}^{(i)}-{y}^{(i)})^2$</td></tr><tr><td align="center">目标</td><td align="center">$minimizi_{w,b}J(w,b)$</td></tr></tbody></table><h2 id="梯度下降"><a href="#梯度下降" class="headerlink" title="梯度下降"></a>梯度下降</h2><h3 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h3><p>梯度下降算法通俗来讲就是你现在在一座山上，然后每次环顾四周，找到你这一圈中下降最快（也就是坡最陡峭）的一条路，然后朝着这个方向稍微走一点。做完这些之后一直重复这个步骤，直到环顾四周后发现都是上升的，而不存在下降的坡。梯度下降的结果会取决于选定的初始值，如果初始值不一样，则会导致最后到达的山谷不一样。</p><p>先来看一下对于w的梯度下降的公式：<br>$$<br>w=w-\alpha\frac{\partial}{\partial{w}}J(w,b)<br>$$<br>在这个式子中，$\alpha$称之为学习率，学习率通常是介于0~1之间的一个小的正数，一般取0.01。可以理解为，学习率是从当前位置环顾四周后，选定好了下降最快的方向，朝这个方向迈的步子的大小。$\alpha$越大，则迈的步子越大，反之，步子越小。</p><p>可以发现，对于该线性回归模型，一共有两个参数，分别是w和b，因此同时对二者使用梯度下降：<br>$$<br>b=b-\alpha\frac{\partial}{\partial{b}}J(w,b)<br>$$<br>值得注意的是，如果先更新w的值，再更新b的值，会导致更新b的时候所用到的w不是原始的w，而是更新后的w。很显然，这是一种错误的做法，我们更希望他们同时更新，因此可以执行下面的操作，从而达到同时更新的效果。<br>$$<br>tmpw=w-\alpha\frac{\partial}{\partial{w}}J(w,b)<br>$$</p><p>$$<br>tmpb=b-\alpha\frac{\partial}{\partial{b}}J(w,b)<br>$$</p><p>$$<br>w=tmpw<br>$$</p><p>$$<br>b=tmpb<br>$$</p><h3 id="偏导"><a href="#偏导" class="headerlink" title="偏导"></a>偏导</h3><p>对于每一个参数的更新，都需要求得在该参数方向上的导数，即该参数的偏导数，之后用上一次迭代的该参数的值减去学习率乘以偏导数的值。</p><p>现在我们定义一个函数如下所示：<br>$$<br>f(x)=x^{2}-4x+6<br>$$<br>很容易知道，该函数的对称轴为直线$x=2$，开口向上，在$(-\infty,2)$上单调递减，在$(-\infty,2)$上单调递增。</p><p>那么上述函数的梯度下降公式为：<br>$$<br>x=x-\alpha\frac{\partial}{\partial{x}}f(x)<br>$$<br>根据梯度下降的步骤，首先应该随机选取一个初始点。</p><p>如果初始点的位置在对称轴左侧，由于该点所在位置为单调递减处，因此该点处的导数一定小于0，根据公式可知，减去一个负数相当于加上一个数字，那么$x$会向右移动，以此类推，最后会移动到对称轴的位置上。</p><p>如果初始点的位置在对称轴右侧，由于该点所在位置为单调递增处，因此该点处的导数一定大于0，根据公式可知，$x$会向左移动，以此类推，最后会移动到对称轴的位置上。</p><p>通过这种方式，可以使得该参数一点一点移动到可以使最终结果尽可能小的位置上，从而该参数的值可以让成本函数更低。</p><p><strong>总而言之，偏导数决定了梯度下降的方向。</strong></p><h3 id="学习率"><a href="#学习率" class="headerlink" title="学习率"></a>学习率</h3><p>对于学习率我们需要选择一个恰到好处的值，不能太大也不能太小，<strong>学习率决定了梯度下降的步长</strong>。</p><p>如果学习率太小，那么每一次参数的变化量都会非常非常小，这就导致如果要找到成本函数最小点，需要迭代很多次，使得运行时间非常长，收敛过慢。</p><p>如果学习率太大，那么每一次参数的变化量都会非常非常大，这就导致很有可能变化速度太快从而冲过了成本函数的最小点，最坏的情况可能发散，离目标位置越来越远。</p><h3 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h3><p>通过上述公式可以知道我们首先需要求得$\frac{\partial}{\partial{w}}J(w,b)$：<br>$$<br>\frac{\partial}{\partial{w}}J(w,b)=\frac{\partial}{\partial{w}}\frac{1}{2m}\sum_{i=1}^{m}(f_{w,b}(x^{(i)})-{y}^{(i)})^2<br>$$</p><p>$$<br>\frac{\partial}{\partial{w}}\frac{1}{2m}\sum_{i=1}^{m}(f_{w,b}(x^{(i)})-{y}^{(i)})^2=\frac{\partial}{\partial{w}}\frac{1}{2m}\sum_{i=1}^{m}(wx^{(i)}+b-{y}^{(i)})^2<br>$$</p><p>$$<br>\frac{\partial}{\partial{w}}\frac{1}{2m}\sum_{i=1}^{m}(wx^{(i)}+b-{y}^{(i)})^2=\frac{1}{2m}\sum_{i=1}^{m}(wx^{(i)}+b-{y}^{(i)})2x^{(i)}<br>$$</p><p>$$<br>\frac{1}{2m}\sum_{i=1}^{m}(wx^{(i)}+b-{y}^{(i)})2x^{(i)}=\frac{1}{m}\sum_{i=1}^{m}(f_{w,b}(x^{(i)})-{y}^{(i)})x^{(i)}<br>$$</p><p>最终我们得到了关于w的偏导数：<br>$$<br>\frac{\partial}{\partial{w}}J(w,b)=\frac{1}{m}\sum_{i=1}^{m}(f_{w,b}(x^{(i)})-{y}^{(i)})x^{(i)}<br>$$<br>同理，我们也可以得到关于b的偏导数：<br>$$<br>\frac{\partial}{\partial{b}}J(w,b)=\frac{1}{m}\sum_{i=1}^{m}(f_{w,b}(x^{(i)})-{y}^{(i)})<br>$$</p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment">#导入数据集</span></span><br><span class="line">x_train = np.array([<span class="number">1.0</span>, <span class="number">2.0</span>])  <span class="comment">#特征值</span></span><br><span class="line">y_train = np.array([<span class="number">300.0</span>, <span class="number">500.0</span>])  <span class="comment">#与之对应的标签</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#训练模型的参数</span></span><br><span class="line">m = <span class="built_in">len</span>(x_train)  <span class="comment">#样本数</span></span><br><span class="line">alpha = <span class="number">0.01</span>  <span class="comment">#学习率</span></span><br><span class="line">iterations = <span class="number">10000</span>  <span class="comment">#迭代次数</span></span><br><span class="line">w = <span class="number">0</span>  <span class="comment">#w初始值</span></span><br><span class="line">b = <span class="number">0</span>  <span class="comment">#b初始值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#计算成本</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compute_cost</span>(<span class="params">x, y, w, b</span>):</span><br><span class="line">    cost = <span class="number">0</span>  <span class="comment">#当前w和b的值所得到的成本函数</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        cost += (w * x[i] + b - y[i]) ** <span class="number">2</span>  <span class="comment">#每一个样本的成本</span></span><br><span class="line">    cost /= <span class="number">2</span> * m  <span class="comment">#求和后除以2m</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> cost  <span class="comment">#返回成本</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#计算偏导</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compute_gradient</span>(<span class="params">x, y, w, b</span>):</span><br><span class="line">    dj_dw = <span class="number">0</span>  <span class="comment">#w的偏导和</span></span><br><span class="line">    dj_db = <span class="number">0</span>  <span class="comment">#b的偏导和</span></span><br><span class="line">     </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        dj_dw += (w * x[i] + b - y[i]) * x[i]  <span class="comment">#w的偏导数</span></span><br><span class="line">        dj_db += (w * x[i] + b - y[i])  <span class="comment">#b的偏导数</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#求和后除以m</span></span><br><span class="line">    dj_dw /= m</span><br><span class="line">    dj_db /= m</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> dj_dw, dj_db</span><br><span class="line"></span><br><span class="line">x = []  <span class="comment">#画图横坐标</span></span><br><span class="line">y = []  <span class="comment">#画图纵坐标</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#迭代过程</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(iterations):</span><br><span class="line">    dj_dw, dj_db = compute_gradient(x_train, y_train, w, b)  <span class="comment">#获取偏导数</span></span><br><span class="line">    <span class="comment">#更新w和b</span></span><br><span class="line">    w -= alpha * dj_dw</span><br><span class="line">    b -= alpha * dj_db</span><br><span class="line">    <span class="keyword">if</span> (i + <span class="number">1</span>) % <span class="number">200</span> == <span class="number">0</span>:</span><br><span class="line">        cost = compute_cost(x_train, y_train, w, b)  <span class="comment">#计算当前成本</span></span><br><span class="line">        x.append(i + <span class="number">1</span>)</span><br><span class="line">        y.append(cost)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;第<span class="subst">&#123;i + <span class="number">1</span>&#125;</span>次迭代\nw:<span class="subst">&#123;w&#125;</span>\nb:<span class="subst">&#123;b&#125;</span>\n成本:<span class="subst">&#123;cost&#125;</span>\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = <span class="string">&#x27;FangSong&#x27;</span>  <span class="comment">#设置中文字体</span></span><br><span class="line">plt.plot(x, y, label = <span class="string">&#x27;成本&#x27;</span>)  <span class="comment">#配置参数</span></span><br><span class="line">plt.title(<span class="string">&quot;成本函数&quot;</span>)</span><br><span class="line">plt.legend()</span><br></pre></td></tr></table></figure><h3 id="C-C"><a href="#C-C" class="headerlink" title="C/C++"></a>C/C++</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">7</span>;  <span class="comment">//最大容量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//导入数据集</span></span><br><span class="line"><span class="type">float</span> x_train[N] = &#123; <span class="number">1.0</span>, <span class="number">2.0</span> &#125;;  <span class="comment">//特征值</span></span><br><span class="line"><span class="type">float</span> y_train[N] = &#123; <span class="number">300.0</span>, <span class="number">500.0</span> &#125;;  <span class="comment">//与之对应的标签</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//训练模型的参数</span></span><br><span class="line"><span class="type">int</span> m = <span class="number">2</span>;  <span class="comment">//样本数</span></span><br><span class="line"><span class="type">float</span> alpha = <span class="number">0.01</span>;  <span class="comment">//学习率</span></span><br><span class="line"><span class="type">int</span> iterations = <span class="number">10000</span>;  <span class="comment">//迭代次数</span></span><br><span class="line"><span class="type">float</span> w = <span class="number">0</span>;  <span class="comment">//w的初始值</span></span><br><span class="line"><span class="type">float</span> b = <span class="number">0</span>;  <span class="comment">//b的初始值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//计算成本</span></span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">compute_cost</span><span class="params">(<span class="type">float</span> w, <span class="type">float</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">float</span> cost = <span class="number">0</span>;  <span class="comment">//当前w和b的值所得到的成本函数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">cost += <span class="built_in">pow</span>((w * x_train[i] + b - y_train[i]), <span class="number">2</span>);  <span class="comment">//每一个样本的成本</span></span><br><span class="line">cost /= <span class="number">2.0</span> * m;  <span class="comment">//求和后除以2m</span></span><br><span class="line"><span class="keyword">return</span> cost;  <span class="comment">//返回成本</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算偏导</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">compute_gradient</span><span class="params">(<span class="type">float</span>&amp; dj_dw, <span class="type">float</span>&amp; dj_db)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">&#123;</span><br><span class="line">dj_dw += (w * x_train[i] + b - y_train[i]) * x_train[i];  <span class="comment">//w的偏导数</span></span><br><span class="line">dj_db += (w * x_train[i] + b - y_train[i]);  <span class="comment">//b的偏导数</span></span><br><span class="line">&#125;</span><br><span class="line">dj_dw /= m;</span><br><span class="line">dj_db /= m;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; iterations; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">float</span> dj_dw = <span class="number">0</span>;  <span class="comment">//w的偏导和</span></span><br><span class="line"><span class="type">float</span> dj_db = <span class="number">0</span>;  <span class="comment">//b的偏导和</span></span><br><span class="line"><span class="built_in">compute_gradient</span>(dj_dw, dj_db);  <span class="comment">//获取偏导数</span></span><br><span class="line"><span class="comment">//更新w和b</span></span><br><span class="line">w -= alpha * dj_dw;</span><br><span class="line">b -= alpha * dj_db;</span><br><span class="line"><span class="keyword">if</span> ((i + <span class="number">1</span>) % <span class="number">200</span> == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">float</span> cost = <span class="built_in">compute_cost</span>(w, b);  <span class="comment">//计算当前成本</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;第%d次迭代\nw：%f\n%b：%f\n成本：%f\n\n&quot;</span>, i + <span class="number">1</span>, w, b, cost);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="多元线性回归"><a href="#多元线性回归" class="headerlink" title="多元线性回归"></a>多元线性回归</h1><h2 id="多维特征"><a href="#多维特征" class="headerlink" title="多维特征"></a>多维特征</h2><p>在上述模型中，只有房间大小这一个特征值。但在实际情况中，会有许多因素影响房子的价格，因此需要引入多维特征这一概念。</p><p>这里将介绍几个相关符号：</p><ul><li>$x_j$：第$j$个特征。</li><li>$n$：特征总数。</li><li>$\vec{x}^{i}$：第$i$个特征向量。</li><li>$x_{j}^{(i)}$：第$i$个特征向量中的第$j$个特征。</li></ul><h2 id="模型函数-1"><a href="#模型函数-1" class="headerlink" title="模型函数"></a>模型函数</h2><p>对于多变量线性回归模型，有多个参数对最终的价格产生影响，因此我们需要将各个参数使用向量来进行存储，故：<br>$$<br>\vec{x}=[x_1,x_2,x_3\dots x_n]<br>$$<br>对于每一个特征，都应该有一个参数$w$与之对应，这些参数也可以组成一个维度为$n$的向量：<br>$$<br>\vec{w}=[w_1,w_2,w_3\dots w_n]<br>$$<br>因此该模型函数为：<br>$$<br>f_{\vec{w},b}(\vec{x})=\vec{w}\cdot\vec{x}+b=w_1x_1+w_2x_2+w_3x_3+\dots+w_nx_n+b<br>$$</p><p>由此可知，多元线性回归模型对应的成本函数为：<br>$$<br>J(\vec{w},b)=\frac{1}{2m}\sum_{i=1}^{m}(\hat{y}^{(i)}-{y}^{(i)})^2<br>$$</p><h2 id="向量化"><a href="#向量化" class="headerlink" title="向量化"></a>向量化</h2><p>很显然，在多元线性回归中，需要进行向量之间的点乘，因此，需要利用<code>NumPy</code>库来创建两个数组，用于存放参数$w$和样本$x$的所有特征。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">w = np.array([<span class="number">1.0</span>, <span class="number">2.5</span>, -<span class="number">3.3</span>])</span><br><span class="line">x = np.array([<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>])</span><br><span class="line">b = <span class="number">4</span></span><br></pre></td></tr></table></figure><p>接着获取特征数量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">len</span>(x)</span><br></pre></td></tr></table></figure><p>我们有三种方法来计算点乘</p><h3 id="直接计算"><a href="#直接计算" class="headerlink" title="直接计算"></a>直接计算</h3><p>这种方法直接列式子进行计算，将所有的参数和对应特征依次相乘再相加，最后加上$b$。<br>$$<br>f_{\vec{w},b}(\vec{x})=w_1x_1+w_2x_2+w_3x_3+b<br>$$<br>相应的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f = w[<span class="number">0</span>] * x[<span class="number">0</span>] + w[<span class="number">1</span>] * x[<span class="number">1</span>] + w[<span class="number">2</span>] * x[<span class="number">2</span>] + b</span><br></pre></td></tr></table></figure><p>很显然，这种方式在面对特征数量很多的情况使用起来非常困难，不推荐使用这种方式。</p><h3 id="循环累加"><a href="#循环累加" class="headerlink" title="循环累加"></a>循环累加</h3><p>这种方法直接利用循环，求得所有的累加值，最后加上$b$。<br>$$<br>f_{\vec{w},b}(\vec{x})=\sum_{i=1}^{n}w_jx_j+b<br>$$<br>相应的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    f += w[i] * x[i]</span><br><span class="line">f += b</span><br></pre></td></tr></table></figure><p>这种方式可以降低代码的冗余，利用循环高效率达成目标。</p><h3 id="使用点乘"><a href="#使用点乘" class="headerlink" title="使用点乘"></a>使用点乘</h3><p><code>Numpy</code>库中自带了关于向量的点乘操作，可以直接进行调用计算点乘，最后加上$b$。<br>$$<br>f_{\vec{w},b}(\vec{x})=\vec{w}\cdot\vec{x}+b<br>$$<br>相应的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="number">0</span></span><br><span class="line">f = np.dot(w, x) + b</span><br></pre></td></tr></table></figure><p>这种方式效率高，代码简洁。因为<code>NumPy</code>能调用并行硬件，所以它的效率比<code>for</code>循环或顺序计算要高得多。</p><h2 id="梯度下降-1"><a href="#梯度下降-1" class="headerlink" title="梯度下降"></a>梯度下降</h2><p>对于多元线性回归模型来说，进行梯度下降相当于对每个参数进行一次单变量线性回归的运算。<br>$$<br>w_1=w_1-\alpha\frac{1}{m}\sum_{i=1}^{m}(f_{\vec{w},b}(\vec{x}^{(i)})-{y}^{(i)})x_1^{(i)}<br>$$</p><p>$$<br>\vdots<br>$$</p><p>$$<br>w_n=w_n-\alpha\frac{1}{m}\sum_{i=1}^{m}(f_{\vec{w},b}(\vec{x}^{(i)})-{y}^{(i)})x_n^{(i)}<br>$$</p><p>$$<br>b=b-\alpha\frac{1}{m}\sum_{i=1}^{m}(f_{\vec{w},b}(\vec{x}^{(i)})-{y}^{(i)})<br>$$</p><h2 id="特征缩放"><a href="#特征缩放" class="headerlink" title="特征缩放"></a>特征缩放</h2><p>如果特征不止一个且取值范围差异较大，会面临一个问题：某一个特征参数改变很少一点，会导致成本函数的值变化得很大，最终导致没有办法快速收敛，使得梯度下降运行非常缓慢。举个实际的例子，如果房子价格由房子大小和厨房的数量所决定，那么很明显厨房的数量并不怎么影响房子的价格，这就导致厨房数量所对应的的参数变化量非常小，而房子大小所对应的参数的变化量非常大。通俗来说，每一次都会改变这两个参数的值，用于寻找最优值，但是对于房子大小，需要乘以一个很大的数字，那么只要其参数变化很少一点，就会对成本函数的值造成很大影响。反之厨房数量所对应的参数并不会造成很大影响，这就使得成本函数的等高线呈现出一种椭圆形的样子，会导致梯度下降的时候使其值反复横跳，没有办法快速收敛。</p><h3 id="最大值特征缩放"><a href="#最大值特征缩放" class="headerlink" title="最大值特征缩放"></a>最大值特征缩放</h3><p>该方法可以保证每一个值都在<code>0~1</code>之间。对于每一个特征，都会有一个取值范围，因此，我们可以令取值范围和该特征的所有特征值都除以取值范围的最大值来完成特征缩放。</p><p>接着用房子的例子，房子的大小取值范围为30$\leq$$x_1$$\leq$200，卧室数量的取值范围为0$\leq$$x_2$$\leq$5，那么使用最大值特征缩放，即：<br>$$<br>x_{1,scaled}=\frac{x_1}{200}<br>$$</p><p>$$<br>x_{2,scaled}=\frac{x_2}{5}<br>$$</p><p>最终房子大小的缩放结果为0.15$\leq$$x_{1,scaled}$$\leq$1，卧室数量的的缩放结果为0$\leq$$x_{2,scaled}$$\leq$1。</p><h3 id="均值归一化"><a href="#均值归一化" class="headerlink" title="均值归一化"></a>均值归一化</h3><p>该方法可以保证每一个值都在<code>-1~1</code>之间。对于每一个特征值和取值范围，均有如下的计算公式：<br>$$<br>x=\frac{x-\mu}{max-min}<br>$$<br>其中<code>x</code>为特征值或者取值范围，$\mu$为该特征的所有特征值的平均值，<code>max</code>和<code>min</code>分别为取值范围的最大值和最小值。</p><p>假设房子的大小的平均值为60，卧室数量的平均值为2.3，使用均值归一化：<br>$$<br>x_1=\frac{x_1-60}{200-30}<br>$$</p><p>$$<br>x_2=\frac{x_2-2.3}{5-0}<br>$$</p><p>最终房子大小的缩放结果为-0.18$\leq$$x_1$$\leq$0.82，卧室数量的缩放结果为-0.46$\leq$$x_2$$\leq$0.54。</p><h3 id="Z-score标准化"><a href="#Z-score标准化" class="headerlink" title="Z-score标准化"></a>Z-score标准化</h3><p>该方法利用标准差来进行计算。对于每一个特征值和取值范围，均有如下的计算公式：<br>$$<br>x=\frac{x-\mu}{\sigma}<br>$$<br>其中<code>x</code>为特征值或者取值范围，$\mu$和$\sigma$分别为该特征的所有特征值的平均值和标准差。</p><p>假设房子的大小的平均值为60，标准差为45，卧室数量的平均值为2.3，标准差为1.4，使用Z-score标准化：<br>$$<br>x_1=\frac{x_1-60}{45}<br>$$</p><p>$$<br>x_2=\frac{x_2-2.3}{1.4}<br>$$</p><p>最终房子大小的缩放结果为-0.67$\leq$$x_1$$\leq$3.1，卧室数量的缩放结果为-1.6$\leq$$x_2$$\leq$1.9。</p><h2 id="特征工程"><a href="#特征工程" class="headerlink" title="特征工程"></a>特征工程</h2><p>所谓特征工程就是利用初始给的特征创造新的更有用的特征。我们回到房子价格的问题上，如果给定了房子的占地长和占地宽，那么很明显，我们会想到两个特征的值相乘，得到面积，面积更能反映出一个房子的价格。根据上述推论，我们可以创造一个新的特征：<br>$$<br>x_3=x_1x_2<br>$$<br>创造新特征的过程被称为特征工程，则最后的模型函数为：<br>$$<br>f_{\vec{w},b}(\vec{x})=w_1x_1+w_2x_2+w_3x_3+b<br>$$</p><h1 id="逻辑回归"><a href="#逻辑回归" class="headerlink" title="逻辑回归"></a>逻辑回归</h1><p>逻辑回归是一种分类，并非一种线性回归模型，它的作用主要是给定输入，然后对输入进行分类，一般分为两类，给定<code>Yes</code>或者<code>No</code>。举个栗子：给定一封邮件，判断是否为垃圾邮件，给定一个肿瘤的信息，判断是否为良性肿瘤……</p><h2 id="Sigmoid函数"><a href="#Sigmoid函数" class="headerlink" title="Sigmoid函数"></a>Sigmoid函数</h2><p>Sigmoid函数是一个在生物学中常见的S型函数，也称为S型生长曲线。在信息科学中，由于其单增以及反函数单增等性质，Sigmoid函数常被用作神经网络的激活函数，将变量映射到0,1之间。</p><p>该函数为：<br>$$<br>g(z)=\frac{1}{1+e^{-z}}\quad 0&lt;g(z)&lt;1<br>$$</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Sigmoid%E5%87%BD%E6%95%B0.png" alt="Sigmoid函数"></p><p>其中z是图像的横轴，e为自然常数。</p><h2 id="逻辑回归模型"><a href="#逻辑回归模型" class="headerlink" title="逻辑回归模型"></a>逻辑回归模型</h2><p>逻辑回归模型可以理解为将特征输入到模型中，然后给出0或者1的结果。</p><p>将前面讲到的线性回归模型和逻辑回归模型组合使用（注：线性回归和逻辑回归本质上是两回事，一个是线性回归，一个是分类），可以先列出线性回归的模型：<br>$$<br>z=\vec{w}\cdot\vec{x}+b<br>$$<br>将这里的z传递给线性回归模型：<br>$$<br>f_{\vec{w},b}(\vec{x})=g(\vec{w}\cdot\vec{x}+b)=\frac{1}{1+e^{-(\vec{w}\cdot\vec{x}+b)}}<br>$$<br>如果现在有一个患者想要预测他的肿瘤是恶性还是良性，使用该模型得到的结果为0.7，即$f_{\vec{w},b}(\vec{x})=0.7$，那么说明这个人有70%的概率是恶性，30%的概率是良性。</p><p>用数学符号表示为：<br>$$<br>f_{\vec{w},b}(\vec{x})=P(y=1|\vec{x};\vec{w},b)=0.7<br>$$<br>该式表明参数<code>w</code>和<code>b</code>是影响计算的参数，在给定输入特征$\vec{x}$的前提下，<code>y=1</code>的概率是0.7。</p><p>由上述可见，一共分为两种情况，这两种情况概率相加应该是1，即：<br>$$<br>P(y=0)+P(y=1)=1<br>$$</p><h2 id="决策边界"><a href="#决策边界" class="headerlink" title="决策边界"></a>决策边界</h2><p>通过对逻辑回归模型的分析，观察图像，我们可以发现，0.5是一个分界点，如果预测结果大于0.5，那么预测值将会为1，反之将会为0。继续推导，我们发现，当预测值为0.5时，z的值应该为0。换言之，当回归模型的值为0时，将会得到一条分界线，用于分隔两种预测情况。</p><p>因此，在计算逻辑回归模型的参数时，就相当于求决策边界对应的曲线的参数。</p><h2 id="成本函数和损失函数"><a href="#成本函数和损失函数" class="headerlink" title="成本函数和损失函数"></a>成本函数和损失函数</h2><p>损失函数指的是对于单个样本而言相差的值，成本函数指的是所有的样本总的相差值。</p><p>在前面线性回归模型中，我们使用的成本函数为：<br>$$<br>J(\vec{w},b)=\frac{1}{2m}\sum_{i=1}^{m}(\hat{y}^{(i)}-{y}^{(i)})^2<br>$$<br>显而易见，这个成本函数很明显不适用于逻辑回归中，因为逻辑回归的值只有0和1，如果使用该成本函数，很难得到一个凸函数，会导致有很多的局部极小值，不能使用梯度下降来找成本函数的最小值，因此不能采用该成本函数。</p><p>对于逻辑回归模型，我们需要采用一种新的损失函数，将其定义为：<br>$$<br>L(f_{\vec{w},b}(\vec{x}^{(i)}),y^{(i)})<br>$$<br>该损失函数是关于$f(x)$和真实标签<code>y</code>的函数。</p><p>让我们先来看一下这个损失函数的定义：<br>$$<br>L(f_{\vec{w},b}(\vec{x}^{(i)}),y^{(i)})=-log(f_{\vec{w},b}(\vec{x}^{(i)}))\quad y^{(i)}=1<br>$$</p><p>$$<br>L(f_{\vec{w},b}(\vec{x}^{(i)}),y^{(i)})=-log(1-f_{\vec{w},b}(\vec{x}^{(i)}))\quad y^{(i)}=0<br>$$</p><p>该代价函数是用最大似然估计的统计原理推导出来的，这种代价函数具有凸函数的优点。</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0.jpg" alt="逻辑回归损失函数"></p><p>如图所示，红色代表真实标签为1，蓝色代表真实标签为0。</p><p>可以发现在真实标签为1时，预测值预测的概率越靠近1，则损失函数的值越小，反之越大；在真实标签为0时，预测值预测的概率越靠近0，则损失函数的值越小，反之越大。通过这种方式，可以使得成本函数变为一个凸函数，用于梯度下降。</p><p>因此，对于逻辑回归，其成本函数为：<br>$$<br>J(\vec{w},b)=\frac{1}{m}\sum_{i=1}^{m}L(f_{\vec{w},b}(\vec{x}^{(i)}),y^{(i)})<br>$$<br>对于上述的损失函数，可以进行简化。很容易发现，标签只能为0或者1，那么可以根据这个性质，将式子写作：<br>$$<br>L(f_{\vec{w},b}(\vec{x}^{(i)}),y^{(i)})=-y^{(i)}log(f_{\vec{w},b}(\vec{x}^{(i)}))-(1-y^{(i)})log(1-f_{\vec{w},b}(\vec{x}^{(i)}))<br>$$<br>因此，成本函数可以变为：<br>$$<br>J(\vec{w},b)=-\frac{1}{m}\sum_{i=1}^{m}[y^{(i)}log(f_{\vec{w},b}(\vec{x}^{(i)}))+(1-y^{(i)})log(1-f_{\vec{w},b}(\vec{x}^{(i)}))]<br>$$</p><h2 id="梯度下降-2"><a href="#梯度下降-2" class="headerlink" title="梯度下降"></a>梯度下降</h2><p>和线性回归一样，逻辑回归进行梯度下降也是相同的思路：<br>$$<br>w_j=w_j-\alpha\frac{\partial}{\partial{w_j}}J(\vec{w},b)<br>$$</p><p>$$<br>b=b-\alpha\frac{\partial}{\partial{b}}J(\vec{w},b)<br>$$</p><p>在上述中我们已经知道：<br>$$<br>f_{\vec{w},b}(\vec{x})=g(\vec{w}\cdot\vec{x}+b)=\frac{1}{1+e^{-(\vec{w}\cdot\vec{x}+b)}}<br>$$<br>因此，将该式子代入，求偏导可得：<br>$$<br>w_j=w_j-\alpha\frac{1}{m}\sum_{i=1}^{m}(f_{\vec{w},b}(\vec{x}^{(i)})-{y}^{(i)})x_j^{(i)}<br>$$</p><p>$$<br>b=b-\alpha\frac{1}{m}\sum_{i=1}^{m}(f_{\vec{w},b}(\vec{x}^{(i)})-{y}^{(i)})<br>$$</p><h1 id="过拟合问题"><a href="#过拟合问题" class="headerlink" title="过拟合问题"></a>过拟合问题</h1><h2 id="三种拟合情况"><a href="#三种拟合情况" class="headerlink" title="三种拟合情况"></a>三种拟合情况</h2><p>让我们先来看一个数据集：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%88%BF%E4%BB%B7%E9%A2%84%E6%B5%8B%E6%95%B0%E6%8D%AE%E9%9B%86.jpg" alt="房价预测数据集"></p><h3 id="欠拟合"><a href="#欠拟合" class="headerlink" title="欠拟合"></a>欠拟合</h3><p>在该数据集中，我们可以发现，这个是房子大小和价格的关系，我们可以使用线性回归来对数据集进行拟合，如图所示：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E4%B8%80%E6%AC%A1%E5%87%BD%E6%95%B0.jpg" alt="一次函数"></p><p>很明显，该算法不能很好地拟合训练数据，用专业术语描述，就是模型对训练数据的拟合不足（欠拟合），另一种术语是算法有高偏差。</p><h3 id="拟合"><a href="#拟合" class="headerlink" title="拟合"></a>拟合</h3><p>为了防止欠拟合，我们可以通过观察发现，这个函数可能是一个二次函数，那么我们可以尝试利用二次函数对这些训练集进行拟合：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E4%BA%8C%E6%AC%A1%E5%87%BD%E6%95%B0.jpg" alt="二次函数"></p><p>这里介绍一个名词：泛化(Generalization)，指的是算法也能适用于没出现在训练集中的样本的能力。</p><h3 id="过拟合"><a href="#过拟合" class="headerlink" title="过拟合"></a>过拟合</h3><p>那如果我们用一个多项式进行数据集的拟合，可以使得代价为0，让所有的点都在我们的模型上：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%A4%9A%E9%A1%B9%E5%BC%8F%E5%87%BD%E6%95%B0.jpg" alt="多项式函数"></p><p>很明显可以发现，虽然所有的数据集都在这条线上，与数据集吻合非常好，但是这个模型不具有泛化到新样本的能力。</p><p>综上所述，机器学习需要找到一个既不欠拟合，又不过拟合的模型、</p><h2 id="解决过拟合"><a href="#解决过拟合" class="headerlink" title="解决过拟合"></a>解决过拟合</h2><h3 id="增加数据集"><a href="#增加数据集" class="headerlink" title="增加数据集"></a>增加数据集</h3><p>如果使用一个多项式来进行数据的拟合，可能会导致过拟合，我们可以增加训练样本来解决该问题，使用这种方法仍然可以使用多项式来对数据进行拟合，也可以得到一个很好的结果。</p><h3 id="使用特征子集"><a href="#使用特征子集" class="headerlink" title="使用特征子集"></a>使用特征子集</h3><p>如果没有那么多数据集，那么可以降低特征的数量，可以使用最小的特征子集来进行操作，即挑选几个影响度最高的特征来进行模型的创建。</p><h3 id="正则化"><a href="#正则化" class="headerlink" title="正则化"></a>正则化</h3><p>正则化是一种比较温和的方式，可以利用正则化来减小参数的大小，正则化是一种非常常用也非常好用的训练算法模型的方法。</p><h2 id="正则化-1"><a href="#正则化-1" class="headerlink" title="正则化"></a>正则化</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>正则化简单来说就是使用一个小的参数去乘以参数<code>w</code>，一般来说我们管这个叫惩罚，越不重要的特征，我们对其惩罚的力度就越大，即乘以的参数就越小，可以有效降低该特征在曲线中的权重，但又不是完全没有影响。</p><p>如果我们有非常多的特征，并且不知道哪个特征影响大，哪个特征影响小，因此我们可以对所有的参数进行惩罚，即对所有的<code>w</code>进行正则化操作。</p><p>用之前的线性回归来举例子，先看一下他的成本函数：<br>$$<br>J(\vec{w},b)=\frac{1}{2m}\sum_{i=1}^{m}(f_{\vec{w},b}(\vec{x}^{(i)})-{y}^{(i)})^2<br>$$<br>在进行正则化之前，我们先引入一个参数$\lambda$，该参数代表惩罚力度，一般是一个很小的值。同时这个值应该除以<code>2m</code>，用于保证与前面的系数一致，在改变样本数量的时候，可以等比的放大缩小。<br>$$<br>J(\vec{w},b)=\frac{1}{2m}\sum_{i=1}^{m}(f_{\vec{w},b}(\vec{x}^{(i)})-{y}^{(i)})^2+\frac{\lambda}{2m}\sum_{j=1}^{n}w_j^2<br>$$<br>其中的<code>n</code>代表特征的数量，对所有的参数<code>w</code>进行正则化。</p><p>不仅可以对<code>w</code>进行正则化，也可以对<code>b</code>进行正则化，但事实上这么做的人很少，因为在实践过程中，正则化<code>b</code>产生的影响非常小，所以我们会更多地去正则化参数<code>w</code>而不是参数<code>b</code>。</p><p>当然，也可以对<code>b</code>进行正则化操作，即：<br>$$<br>J(\vec{w},b)=\frac{1}{2m}\sum_{i=1}^{m}(f_{\vec{w},b}(\vec{x}^{(i)})-{y}^{(i)})^2+\frac{\lambda}{2m}\sum_{j=1}^{n}w_j^2+\frac{\lambda}{2m}b^2<br>$$</p><h3 id="线性回归正则化"><a href="#线性回归正则化" class="headerlink" title="线性回归正则化"></a>线性回归正则化</h3><p>在梯度下降过程中，需要对式子进行求偏导运算，我们现在只对<code>w</code>进行正则化，不对<code>b</code>进行正则化，则梯度下降中公式为：<br>$$<br>w_j=w_j-\alpha\frac{\partial}{\partial{w_j}}J(\vec{w},b)<br>$$<br>其中成本函数应该变更为：<br>$$<br>J(\vec{w},b)=\frac{1}{2m}\sum_{i=1}^{m}(f_{\vec{w},b}(\vec{x}^{(i)})-{y}^{(i)})^2+\frac{\lambda}{2m}\sum_{j=1}^{n}w_j^2<br>$$</p><p>那么现在求偏导的结果应该为：<br>$$<br>\frac{1}{m}\sum_{i=1}^{m}(f_{\vec{w},b}(\vec{x}^{(i)})-{y}^{(i)})x_j^{(i)}+\frac{\lambda}{m}w_j<br>$$<br>因此，正则化后，更新结果应该为：<br>$$<br>w_j=w_j-\alpha[\frac{1}{m}\sum_{i=1}^{m}(f_{\vec{w},b}(\vec{x}^{(i)})-{y}^{(i)})x_j^{(i)}+\frac{\lambda}{m}w_j]<br>$$</p><p>$$<br>b=b-\alpha\frac{1}{m}\sum_{i=1}^{m}(f_{\vec{w},b}(\vec{x}^{(i)})-{y}^{(i)})<br>$$</p><h3 id="逻辑回归正则化"><a href="#逻辑回归正则化" class="headerlink" title="逻辑回归正则化"></a>逻辑回归正则化</h3><p>与线性回归相似，同样只正则化<code>w</code>，那么我们在成本函数中加上相应的正则化值：<br>$$<br>J(\vec{w},b)=-\frac{1}{m}\sum_{i=1}^{m}[y^{(i)}log(f_{\vec{w},b}(\vec{x}^{(i)}))+(1-y^{(i)})log(1-f_{\vec{w},b}(\vec{x}^{(i)}))]+\frac{\lambda}{2m}\sum_{j=1}^{n}w_j^2<br>$$<br>​    那么求偏导后的结果应该为：<br>$$<br>\frac{1}{m}\sum_{i=1}^{m}(f_{\vec{w},b}(\vec{x}^{(i)})-{y}^{(i)})x_j^{(i)}+\frac{\lambda}{m}w_j<br>$$</p><p>$$<br>b=b-\alpha\frac{1}{m}\sum_{i=1}^{m}(f_{\vec{w},b}(\vec{x}^{(i)})-{y}^{(i)})<br>$$</p><h1 id="神经网络"><a href="#神经网络" class="headerlink" title="神经网络"></a>神经网络</h1><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p>神经网络实际上就是来模拟人类大脑的运算过程，将若干个基础信息作为输入，然后中间有多个神经元。神经元与输入进行连接，每个神经元都可以获取到所有的输入，并根据自己的简易数学模型来挑选需要的输入进行运算，得到若干个新的参数，最后通过这几个新的参数来获得我们需要的最终结果。</p><p>我们拿一个实例来说明这件事，如果一件衣服的特征有：成本，运输费，营销，材料质量。根据这些特征，求出这件衣服被认为是十分划算的概率。</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B.jpg" alt="神经网络模型"></p><p>根据上图，最左边是输入的四个特征，被称为<strong>输入层</strong>，中间一共有三个<strong>神经元</strong>，第一个神经元代表可负担程度，通过成本和运费得到，第二个神经元代表品牌效应，由营销所决定，第三个是质量，由成本和材料质量所决定。这一层被称为<strong>隐藏层</strong>，每个参数都是由逻辑回归得到的，得到的新的参数被称之为激活值。最后这三个参数再进行一次逻辑回归，得到最终的结果，即这件衣服被认为是十分划算的概率，得到结果的这一层被称为<strong>输出层</strong>。</p><p>在实际中，我们只需要决定一共需要多少个层，和每一层有多少个神经元。神经网络作为一种很强的学习算法，因此不用具体考虑每一个神经元要干什么。这里有一个名词，有多层的神经网络被称为多层感知器。</p><p>总的来说，神经网络的工作原理就是每一层输入一个数字向量，应用一堆逻辑回归单元，然后计算另一个向量，一层接着一层，直到得到最终的输入层计算。</p><p>第几层的变量应该是在右上角标明，比如，第一层输出的值应该标为$\vec{a}^{[1]}$，第二层逻辑回归模型中的第三个神经元的参数<code>w</code>应该为$\vec{w}_3^{[2]}$，其中，输入层有时候也会被称之为第0层，神经网络的层数的计数方式是所有的隐藏层加上输出层，不包含输入层。</p><p>对于每一层的激活值，有一个通项公式：<br>$$<br>a_j^{[l]}=g(\vec{w}_j^{[l]}\cdot\vec{a}^{[l-1]}+b_j^{[l]})<br>$$<br>该公式中，<code>l</code>是<code>layer</code>的缩写，表示第<code>l</code>层神经网络，每一层的每一个神经元的的激活值的结果都等于该神经元的逻辑回归模型接收上一层的激活值所运算出的结果。<code>j</code>表示的是第<code>j</code>个神经元，<code>g</code>表示的是激活函数<code>Sigmoid</code>，该激活函数在上文中提到过，是一个<code>s</code>型函数。激活函数指的就是可以输出激活值的函数。还有一个注意点，输入的特征值$\vec{x}$（即输入层）在神经网络中也可以被称作$\vec{a}^{[0]}$。</p><h2 id="前向传播"><a href="#前向传播" class="headerlink" title="前向传播"></a>前向传播</h2><p>神经网络的前向传播指的是从左向右依次传播神经元的激活值。</p><p>用手写数字识别来举例，现在我们有一个需求，用来判定一个手写数字是0还是1，那么我们需要构建一个神经网络，如图所示：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%89%8D%E5%90%91%E4%BC%A0%E6%92%AD.jpg" alt="前向传播"></p><p>显然，该神经网络是一层一层向后进行传播的，每一层都会获取前一层的激活值，并根据这一层每一个神经元的逻辑回归，得到该层的激活值。这个操作就是神经网络的前向传播，按照从左到右前进的方向进行计算。</p><h2 id="推理实现"><a href="#推理实现" class="headerlink" title="推理实现"></a>推理实现</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>神经网络的一个显著特点是可以将相同的算法应用于许多不同的应用程序之中，对于不同的应用场景而言，很多时候只是神经网络的参数不同。当我们拥有针对某一场景的参数时，我们便可以在获得输入时准确预测输出结果，这一过程便被称之为神经网络推理。</p><h2 id="烘焙咖啡案例"><a href="#烘焙咖啡案例" class="headerlink" title="烘焙咖啡案例"></a>烘焙咖啡案例</h2><h3 id="案例讲解"><a href="#案例讲解" class="headerlink" title="案例讲解"></a>案例讲解</h3><p>我们现在用一个煮咖啡的例子，在烘焙咖啡豆的时候，一般来讲会有两个参数，一个是烘焙的温度（横轴），一个是烘焙的时间（纵轴）。我们现在需要做的是，训练一个神经网络，让其能够预测在某一特定温度和时间下，这个咖啡豆是否能煮出好咖啡。在下图中，红色的叉代表好咖啡，蓝色的圆圈代表坏咖啡。</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%92%96%E5%95%A1%E7%83%98%E7%84%99.jpg" alt="咖啡烘焙"></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%83%98%E7%84%99%E5%92%96%E5%95%A1%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B.jpg" alt="烘焙咖啡神经网络模型"></p><p>根据前面所学，该模型有一个输入层，一个隐藏层和一个输出层。对于烘焙咖啡这一场景而言，输入层一共有两个参数，分别是温度和时间。</p><p>首先设置一下输入层的参数，我们假设要推理的200度，17分钟情况下烘焙出的咖啡豆是否能煮出好咖啡。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = np.array([[<span class="number">200.0</span>, <span class="number">17.0</span>]])</span><br></pre></td></tr></table></figure><p>接下来创建第一层作为第一个隐藏层，使其含有三个神经元，这意味着该层中的三个隐藏单元用作激活函数，即<code>sigmoid</code>函数。下面这段代码中的<code>Dense</code>代表全连接层，每个神经元都与上一层的所有神经元相连接，这意味着每个神经元都接收来自上一层的所有输入，并产生一个输出。随着对神经网络的学习，会了解其他类型的层。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">layer_1 = Dense(units = <span class="number">3</span>, activation = <span class="string">&quot;sigmoid&quot;</span>)</span><br></pre></td></tr></table></figure><p>现在我们的神经网络的第一个隐藏层已经构建完成了，用一个变量去接收初始值传入后得到的结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a1 = layer_1(x)</span><br></pre></td></tr></table></figure><p>很明显，这个<code>a1</code>将包含三个元素，因为第一层有三个神经元，每个神经元都会产生一个输出结果。</p><p>以上就是第一层的构建，下面将进行第二层也就是输出层的构建。</p><p>第二层只有一个神经元建立方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">layer_2 = Dense(unites = <span class="number">1</span>, activation = <span class="string">&quot;sigmoid&quot;</span>)</span><br></pre></td></tr></table></figure><p>最后，我们可以得到输出层的结果，将用<code>a2</code>来进行存储。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a2 = layer_2(a1)</span><br></pre></td></tr></table></figure><p>这个结果将会是一个概率值，如果想要实现二分类，只需要再写一个判断语句，如果大于等于0.5，那么就是1，反之就是0。</p><h2 id="手写数字识别案例"><a href="#手写数字识别案例" class="headerlink" title="手写数字识别案例"></a>手写数字识别案例</h2><h3 id="案例讲解-1"><a href="#案例讲解-1" class="headerlink" title="案例讲解"></a>案例讲解</h3><p>该案例与上述极其相似，只需要更改隐藏层的层数和每一层神经元的个数即可，在此就不过多赘述了。</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB%E6%A8%A1%E5%9E%8B.jpg" alt="手写数字识别模型"></p><p>上述是手写数字识别的神经网络模型图。</p><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><p>相对于上述代码，只需要更改每一层神经元的个数即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x = np.array([[<span class="number">0.0</span>, ..., <span class="number">245</span>, ..., <span class="number">240</span>, ..., <span class="number">0</span>]])</span><br><span class="line">layer_1 = Dense(units = <span class="number">25</span>, activation = <span class="string">&quot;sigmoid&quot;</span>)</span><br><span class="line">a1 = layer_1(x)</span><br><span class="line">layer_2 = Dense(units = <span class="number">15</span>, activation = <span class="string">&quot;sigmoid&quot;</span>)</span><br><span class="line">a2 = layer_2(a1)</span><br><span class="line">layer_3 = Dense(units = <span class="number">1</span>, activation = <span class="string">&quot;sigmoid&quot;</span>)</span><br><span class="line">a3 = layer_3(a2)</span><br></pre></td></tr></table></figure><h2 id="TensorFlow中的数据形式"><a href="#TensorFlow中的数据形式" class="headerlink" title="TensorFlow中的数据形式"></a>TensorFlow中的数据形式</h2><h3 id="TensorFlow"><a href="#TensorFlow" class="headerlink" title="TensorFlow"></a>TensorFlow</h3><p><code>TensorFlow</code>是一个基于数据流编程的符号数学系统，被广泛应用于各类机器学习算法的编程实现，其前身是谷歌的神经网络算法库<code>DistBelief</code>。</p><p>现如今，<code>NumPy</code>已经成为了线性代数和<code>Python</code>的标准库，但是<code>NumPy</code>和<code>TensorFlow</code>中的数据表示方式存在一些不一致，因此，需要去学习这些约定，这样可以实现正确的代码，并有望在神经网络中运行。</p><h3 id="NumPy中的存储"><a href="#NumPy中的存储" class="headerlink" title="NumPy中的存储"></a>NumPy中的存储</h3><p>在上述咖啡的案例中可以发现，创建矩阵的时候，里面有两个中括号。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = np.array([[<span class="number">200.0</span>, <span class="number">17.0</span>]])</span><br></pre></td></tr></table></figure><p>在我们解决这个问题之前，首先来看两个例子。</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/NumPy%E7%9F%A9%E9%98%B5%E6%A0%BC%E5%BC%8F.jpg" alt="NumPy矩阵格式"></p><p>上图所表示的分别是$2\times3$和$4\times2$的矩阵，如果学过<code>C/C++</code>的话，你会发现这种表示方法和其中的二维数组很像，只不过一个用了花括号，一个用了中括号。在咖啡的例子中，我们可以把它理解成是一个$1\times2$的矩阵，也就是一个只有一行的二维数组。</p><p>同理可知：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = np.array([[<span class="number">200</span>, <span class="number">17</span>]])</span><br></pre></td></tr></table></figure><p>表示的是一个$1\times2$的矩阵。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = np.array([[<span class="number">200</span>], </span><br><span class="line">              [<span class="number">17</span>]])</span><br></pre></td></tr></table></figure><p>表示的是一个$2\times1$的矩阵。</p><p>上述的这两个所表示的都是二维的矩阵。</p><p>在之前学习线性回归存储数据的时候，使用的矩阵只有一个中括号而非两个，这种情况下我们称之为一维向量，可以通过数中括号套了几层来判断是几维矩阵。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = np.array([<span class="number">200</span>, <span class="number">17</span>])</span><br></pre></td></tr></table></figure><p>上述表示的是一个一维向量。</p><h3 id="TensorFlow中的存储"><a href="#TensorFlow中的存储" class="headerlink" title="TensorFlow中的存储"></a>TensorFlow中的存储</h3><p>在之前搭建神经网络的时候，我们写过如下这段代码：</p><p>首先设置一下输入层的参数，我们假设要推理的200度，17分钟情况下烘焙出的咖啡豆是否能煮出好咖啡。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = np.array([[<span class="number">200.0</span>, <span class="number">17.0</span>]])</span><br><span class="line">layer_1 = Dense(units = <span class="number">3</span>, activation = <span class="string">&quot;sigmoid&quot;</span>)</span><br><span class="line">a1 = layer_1(x)</span><br></pre></td></tr></table></figure><p>这里面的$a1$其实是一个$1\times3$的张量，如果输出这个$a1$的话，会显示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf.Tensor([[<span class="number">0.2</span> <span class="number">0.7</span> <span class="number">0.3</span>]], shape=(<span class="number">1</span>, <span class="number">3</span>), dtype=float32)</span><br></pre></td></tr></table></figure><p>在这里，中括号的三个数字代表这一层全连接层的计算结果，数量与这一层的神经元的数量相匹配，得到的是一个$1\times3$的矩阵，<code>float32</code>意味着它是一个32为的小数，<code>Tensor</code>表示的是张量，这种数据类型可以有效地存储和执行矩阵计算。</p><p>从技术上来讲，张量比矩阵更通用一些，在这里可以把张量看作是矩阵的一种方式。</p><p>可以使用一个函数将张量转换为<code>NumPy</code>数组：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a1.numpy()</span><br></pre></td></tr></table></figure><h2 id="搭建神经网络"><a href="#搭建神经网络" class="headerlink" title="搭建神经网络"></a>搭建神经网络</h2><h3 id="烘焙咖啡"><a href="#烘焙咖啡" class="headerlink" title="烘焙咖啡"></a>烘焙咖啡</h3><p>回顾一下之前烘焙咖啡的例子，我们要搭建的模型如下：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%83%98%E7%84%99%E5%92%96%E5%95%A1%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B.jpg" alt="烘焙咖啡神经网络模型"></p><p>现在我们要搭建一个这样的神经网络，并用其进行训练，训练数据如下：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%83%98%E7%84%99%E5%92%96%E5%95%A1%E6%95%B0%E6%8D%AE.jpg" alt="烘焙咖啡数据"></p><p>和之前一样，需要先建立两个层，一个是拥有三个神经元的全连接层，另一个是只有一个神经元的输出层：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">layer_1 = Dense(units = <span class="number">3</span>, activation = <span class="string">&quot;sigmoid&quot;</span>)</span><br><span class="line">layer_2 = Dense(units = <span class="number">1</span>, activation = <span class="string">&quot;sigmoid&quot;</span>)</span><br></pre></td></tr></table></figure><p>我们希望使用这两个层，将它们串在一起形成一个神经网络，可以使用下述代码来实现这一功能：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model = Sequential([layer_1, layer_2])</span><br></pre></td></tr></table></figure><p>这个函数是一种组合函数，可以将多个函数顺序连接起来，实现函数的组合。可以将多个函数视为一个整体，从而获得更高的效率。</p><p>接下来需要进行数据的导入，我们需要创建一个数据集：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = np.array([[<span class="number">200.0</span>, <span class="number">17.0</span>],</span><br><span class="line">              [<span class="number">120.0</span>, <span class="number">5.0</span>],</span><br><span class="line">              [<span class="number">425.0</span>, <span class="number">20.0</span>],</span><br><span class="line">              [<span class="number">212.0</span>, <span class="number">18.0</span>]])</span><br></pre></td></tr></table></figure><p>对于这个数据集，我们有相应的标签，因此需要创建一个标签集与数据集一一对应，表示当前参数下是否可以制作出好的咖啡：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y = np.array([<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>然后我们可以来训练神经网络了，使用之前组合好的函数<code>model</code>，首先对其进行编译，需要使用一些参数调用模型，具体的参数调用在接下来会写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.<span class="built_in">compile</span>(...)</span><br></pre></td></tr></table></figure><p>编译过后，就可以来进行训练了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.fit(x, y)</span><br></pre></td></tr></table></figure><p>该函数告诉张量流采用<code>model</code>所表示的神经网络，使用数据<code>x</code>和<code>y</code>进行训练。</p><p>训练完成后，如果我们要在上面推理新的数据集，只需要调用下述函数即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.predict(x_new)</span><br></pre></td></tr></table></figure><p>其中，<code>x_new</code>为新的数据集，即要进行推理预测的数据集。</p><h3 id="手写数字识别"><a href="#手写数字识别" class="headerlink" title="手写数字识别"></a>手写数字识别</h3><p>在手写数字识别的案例中，我们搭建了一个如下的神经网络：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB%E6%A8%A1%E5%9E%8B.jpg" alt="手写数字识别模型"></p><p>该部分的代码只需要更改神经元的个数和隐藏层的层数即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">layer_1 = Dense(units = <span class="number">25</span>, activation = <span class="string">&quot;sigmoid&quot;</span>)</span><br><span class="line">layer_2 = Dense(units = <span class="number">15</span>, activation = <span class="string">&quot;sigmoid&quot;</span>)</span><br><span class="line">layer_2 = Dense(units = <span class="number">1</span>, activation = <span class="string">&quot;sigmoid&quot;</span>)</span><br><span class="line">model = Sequential([layer_1, layer_2, layer_3])</span><br><span class="line">model.<span class="built_in">compile</span>(...) <span class="comment">#这部分为编译，需要使用一些参数，在后面会具体讲到</span></span><br><span class="line">x = np.array([[<span class="number">0</span>, ..., <span class="number">245</span>, ..., <span class="number">17</span>],</span><br><span class="line">              [<span class="number">0</span>, ..., <span class="number">200</span>, ..., <span class="number">184</span>]])</span><br><span class="line">y = np.array([<span class="number">1</span>, <span class="number">0</span>])</span><br><span class="line">model.fit(x, y)</span><br><span class="line">model.predict(x_new)</span><br></pre></td></tr></table></figure><p>第四行其实是相当于将前三行给整合到一起，因此我们也可以把前四行写成一整句话，前四行代码等价于：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">model = Sequential([</span><br><span class="line">    Dense(units = <span class="number">25</span>, activation = <span class="string">&quot;sigmoid&quot;</span>),</span><br><span class="line">    Dense(units = <span class="number">15</span>, activation = <span class="string">&quot;sigmoid&quot;</span>),</span><br><span class="line">    Dense(units = <span class="number">1</span>, activation = <span class="string">&quot;sigmoid&quot;</span>)])</span><br></pre></td></tr></table></figure><h2 id="单个网络层上的前向传播"><a href="#单个网络层上的前向传播" class="headerlink" title="单个网络层上的前向传播"></a>单个网络层上的前向传播</h2><p>我们接着使用之前的烘焙咖啡的例子，来看一看单个网络层上的神经网络都做了哪些事情。</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%8D%95%E4%B8%AA%E7%BD%91%E7%BB%9C%E5%B1%82%E6%A8%A1%E5%9E%8B.jpg" alt="单个网络层模型"></p><p>在<code>Python</code>中，将使用一维数组来表示所有这些向量和参数，因此只需要使用一个方括号，首先将输入层的数据存储起来：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = np.array([<span class="number">200</span>, <span class="number">17</span>])</span><br></pre></td></tr></table></figure><p>接下来我们要计算第一个神经元的参数，计算公式：<br>$$<br>a_1^{[1]}=g(\vec{w}_1^{[1]}\cdot\vec{x}+b_1^{[1]})<br>$$<br>现在是在进行模拟推理的过程，因此参数都是已经确定好的，只需要直接使用即可，所以现在不需要纠结这些参数是如何确定下来的。而实际上进行神经网络训练的时候，是没有事先确定好的参数的，因此我们需要用有监督学习来计算参数，方便以后的推理过程，在这种情况下，当前步骤的参数是随机初始化的，经过前向传播之后，对比预测结果，再通过反向传播来调整参数。</p><p>$\vec w_1^{[1]}$的两个参数分别为$1$和$2$，$b_1^{[1]}$的参数为$-1$，使用<code>Sigmoid</code>函数作为激活函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">w1_1 = np.array([<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line">b1_1 = np.array([-<span class="number">1</span>])</span><br><span class="line">z1_1 = np.dot(w1_1, x) + b1_1  <span class="comment">#该函数在上文中提到过，可以直接进行点乘操作，效率比循环要高</span></span><br><span class="line">a1_1 = sigmoid(z1_1)</span><br></pre></td></tr></table></figure><p>接下来我们要计算第二个神经元的参数，计算公式：<br>$$<br>a_2^{[1]}=g(\vec{w}_2^{[1]}\cdot\vec{x}+b_2^{[1]})<br>$$<br>$\vec w_2^{[1]}$的两个参数分别为$-3$和$4$，$b_2^{[1]}$的参数为$1$，使用<code>Sigmoid</code>函数作为激活函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">w1_2 = np.array([-<span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">b1_2 = np.array([<span class="number">1</span>])</span><br><span class="line">z1_2 = np.dot(w1_2, x) + b1_2</span><br><span class="line">a1_2 = sigmoid(z1_2)</span><br></pre></td></tr></table></figure><p>接下来我们要计算第三个神经元的参数，计算公式：<br>$$<br>a_3^{[1]}=g(\vec{w}_3^{[1]}\cdot\vec{x}+b_3^{[1]})<br>$$<br>$\vec w_3^{[1]}$的两个参数分别为$5$和$-6$，$b_3^{[1]}$的参数为$2$，使用<code>Sigmoid</code>函数作为激活函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">w1_3 = np.array([<span class="number">5</span>, -<span class="number">6</span>])</span><br><span class="line">b1_3 = np.array([<span class="number">2</span>])</span><br><span class="line">z1_3 = np.dot(w1_3, x) + b1_3</span><br><span class="line">a1_3 = sigmoid(z1_3)</span><br></pre></td></tr></table></figure><p>至此，三个神经元的参数均已计算完成，接下来需要将它们组合为一个新的向量，作为输入输入至下一层：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a1 = np.array([a1_1, a1_2, a1_3])</span><br></pre></td></tr></table></figure><p>在最后，需要计算输出层的结果，计算公式：<br>$$<br>a_1^{[2]}=g(\vec{w}_1^{[2]}\cdot\vec{a}^{[1]}+b_1^{[2]})<br>$$<br>$\vec w_1^{[2]}$的三个参数分别为$-7$，$8$和$2$（在这里需要有三个值才可以和该层输入进行点积操作），$b_1^{[2]}$的参数为$3$，使用<code>Sigmoid</code>函数作为激活函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">w2_1 = np.array([-<span class="number">7</span>, <span class="number">8</span>, <span class="number">2</span>])</span><br><span class="line">b2_1 = np.array([<span class="number">3</span>])</span><br><span class="line">z2_1 = np.dot(w2_1, a1) + b2_1</span><br><span class="line">a2_1 = sigmoid(z2_1)</span><br></pre></td></tr></table></figure><h2 id="前向传播的一般实现"><a href="#前向传播的一般实现" class="headerlink" title="前向传播的一般实现"></a>前向传播的一般实现</h2><h3 id="参数设置"><a href="#参数设置" class="headerlink" title="参数设置"></a>参数设置</h3><p>在上文中讲到了单个网络层上的前向传播，这部分将详细地讲一下如何实现<code>dense</code>函数，即全连接层的内部构造。</p><p>回顾一下单个网络层模型：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%8D%95%E4%B8%AA%E7%BD%91%E7%BB%9C%E5%B1%82%E6%A8%A1%E5%9E%8B.jpg" alt="单个网络层模型"></p><p>首先我们需要准备一下初始参数。在推理的过程中，这些参数是已经计算好的；在训练神经网络的过程中，这些参数是随机初始化的。</p><p>先设置一下$w$的参数：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/w%E5%8F%82%E6%95%B0.jpg" alt="w参数"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">W = np.array([[<span class="number">1</span>, -<span class="number">3</span>, <span class="number">5</span>],</span><br><span class="line">              [<span class="number">2</span>, <span class="number">4</span>, -<span class="number">6</span>]])</span><br></pre></td></tr></table></figure><p>接着设置$b$的参数：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/b%E5%8F%82%E6%95%B0.jpg" alt="b参数"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b = np.array([-<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>])</span><br></pre></td></tr></table></figure><p>最后设置一下该层的输入：<br>$$<br>\vec{a}^{[0]}=\vec{x}<br>$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a_in = np.array([-<span class="number">2</span>, <span class="number">4</span>])</span><br></pre></td></tr></table></figure><h3 id="全连接层函数"><a href="#全连接层函数" class="headerlink" title="全连接层函数"></a>全连接层函数</h3><p>在设置好参数后，需要使用全连接层，也就是<code>dense</code>函数来搭建神经网络，我们先来看一下前文中是如何搭建的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">layer_1 = Dense(units = <span class="number">3</span>, activation = <span class="string">&quot;sigmoid&quot;</span>)</span><br><span class="line">layer_2 = Dense(units = <span class="number">1</span>, activation = <span class="string">&quot;sigmoid&quot;</span>)</span><br></pre></td></tr></table></figure><p>下面将具体讲一下<code>Dense</code>内部到底做了什么：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">dense</span>(<span class="params">a_in, W, b, g</span>):</span><br><span class="line">    units = W.shape[<span class="number">1</span>]  <span class="comment">#获取i + 1维度的长度，在这里表示列数，获取到的值为3</span></span><br><span class="line">    a_out = np.zeros(units)  <span class="comment">#将a设置为与神经元个数相同维数的零矩阵，获取到的是1×3的零矩阵</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(units):  <span class="comment">#j的取值是0到神经元的数量-1，这里为0, 1, 2</span></span><br><span class="line">        w = W[:, j]  <span class="comment">#二维数组切片，获取第j + 1列的元素</span></span><br><span class="line">        z = np.dot(w, a_in) + b[j]  <span class="comment">#计算第j + 1个神经元的z值，np.dot会直接让两个矩阵点乘求和</span></span><br><span class="line">        a_out[j] = g(z)  <span class="comment">#用相应的激活函数处理z，得到第j + 1个神经元的输出结果</span></span><br><span class="line">    <span class="keyword">return</span> a_out  <span class="comment">#返回计算结果</span></span><br></pre></td></tr></table></figure><h3 id="组合函数"><a href="#组合函数" class="headerlink" title="组合函数"></a>组合函数</h3><p>当搭建好每一层神经网络后，需要将它们用组合函数合并在一起，前文中是这样做的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">model = Sequential([</span><br><span class="line">    Dense(units = <span class="number">25</span>, activation = <span class="string">&quot;sigmoid&quot;</span>),</span><br><span class="line">    Dense(units = <span class="number">15</span>, activation = <span class="string">&quot;sigmoid&quot;</span>),</span><br><span class="line">    Dense(units = <span class="number">1</span>, activation = <span class="string">&quot;sigmoid&quot;</span>)])</span><br></pre></td></tr></table></figure><p>下面将具体讲一下<code>Sequential</code>内部到底做了什么：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sequential</span>(<span class="params">x</span>):</span><br><span class="line">    a1 = dense(x. W1, b1)</span><br><span class="line">    a2 = dense(a1, W2, b2)</span><br><span class="line">    a3 = dense(a2, W3, b3)</span><br><span class="line">    a4 = dense(a3, W4, b4)</span><br><span class="line">    f_x = a4</span><br><span class="line">    <span class="keyword">return</span> f_x</span><br></pre></td></tr></table></figure><p><em>注：根据线性代数的符号约定，大写字母一般指代矩阵，小写字母一般指代向量和标量。</em></p><h2 id="矩阵乘法"><a href="#矩阵乘法" class="headerlink" title="矩阵乘法"></a>矩阵乘法</h2><h3 id="矩阵乘法在神经网络中的应用"><a href="#矩阵乘法在神经网络中的应用" class="headerlink" title="矩阵乘法在神经网络中的应用"></a>矩阵乘法在神经网络中的应用</h3><p>为什么神经网络会如此高效？主要是因为计算机可以快速计算矩阵乘法，矩阵乘法在前向传播中有着广泛的应用。首先回顾一下上面的一段代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">dense</span>(<span class="params">a_in, W, b, g</span>):</span><br><span class="line">    units = W.shape[<span class="number">1</span>]  <span class="comment">#获取i + 1维度的长度，在这里表示列数，获取到的值为3</span></span><br><span class="line">    a_out = np.zeros(units)  <span class="comment">#将a设置为与神经元个数相同维数的零矩阵，获取到的是1×3的零矩阵</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(units):  <span class="comment">#j的取值是0到神经元的数量-1，这里为0, 1, 2</span></span><br><span class="line">        w = W[:, j]  <span class="comment">#二维数组切片，获取第j + 1列的元素</span></span><br><span class="line">        z = np.dot(w, a_in) + b[j]  <span class="comment">#计算第j + 1个神经元的z值，np.dot会直接让两个矩阵点乘求和</span></span><br><span class="line">        a_out[j] = g(z)  <span class="comment">#用相应的激活函数处理z，得到第j + 1个神经元的输出结果</span></span><br><span class="line">    <span class="keyword">return</span> a_out  <span class="comment">#返回计算结果</span></span><br></pre></td></tr></table></figure><p>这段代码具体展示了<code>dense</code>函数主要都做了哪些工作，事实上，这部分代码完全符合矩阵乘法的运算方式，因此可以改写成如下这段代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">dense</span>(<span class="params">A_in, W, B</span>):  <span class="comment">#注意A_in，W，B均为二维矩阵</span></span><br><span class="line">    Z = np.matmul(A_in, W) + B  <span class="comment">#矩阵乘法，可以直接对A_in矩阵和W矩阵进行矩阵乘法操作</span></span><br><span class="line">    A_out = g(Z)</span><br><span class="line">    <span class="keyword">return</span> A_out</span><br></pre></td></tr></table></figure><p>矩阵乘法会用第一个矩阵的每一行分别乘第二个矩阵的每一列，如果一个$a\times b$的矩阵和一个$b\times c$的矩阵进行矩阵乘法运算，将会得到一个$a\times c$的矩阵。不难发现，第一段代码的4~6行正好可以表示为如第二段代码中的第2行的矩阵乘法运算。</p><h3 id="矩阵乘法代码"><a href="#矩阵乘法代码" class="headerlink" title="矩阵乘法代码"></a>矩阵乘法代码</h3><p>我们现在来看一下，如何用代码来实现矩阵乘法，我们要计算的矩阵$Z$如下所示：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95.jpg" alt="矩阵乘法"></p><p>首先创建一个$A$矩阵：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A = np.array([[<span class="number">1</span>, -<span class="number">1</span>, <span class="number">0.1</span>],</span><br><span class="line">             [<span class="number">2</span>, -<span class="number">2</span>, <span class="number">0.2</span>]])</span><br></pre></td></tr></table></figure><p>接下来获取该矩阵的转置$AT$，这里有一个函数可以直接获取：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AT = A.T</span><br></pre></td></tr></table></figure><p>r然后创建$W$矩阵：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">W = np.array([[<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>],</span><br><span class="line">              [<span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">0</span>]])</span><br></pre></td></tr></table></figure><p>最后就是计算矩阵乘法了，可以直接使用相应函数来计算：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Z = np.matmul(AT, W)</span><br><span class="line">Z = AT @ W</span><br></pre></td></tr></table></figure><p>这两种方式都可以计算矩阵乘法，一般来讲，使用第一种的情况会更多一点，这样更加直观，便于理解。</p><p>让我们看一下输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[[ 11.   17.   23.    9. ]</span><br><span class="line"> [-11.  -17.  -23.   -9. ]</span><br><span class="line"> [  1.1   1.7   2.3   0.9]]</span><br></pre></td></tr></table></figure><h3 id="模型优化"><a href="#模型优化" class="headerlink" title="模型优化"></a>模型优化</h3><p>经过上述学习，我们可以对最开始的烘焙咖啡案例进行一些优化，代码如下（参数均为提前设置好的，现阶段不需要考虑参数）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">AT = np.array([[<span class="number">200</span>, <span class="number">17</span>]])</span><br><span class="line">W = np.array([[<span class="number">1</span>, -<span class="number">3</span>, <span class="number">5</span>],</span><br><span class="line">              [<span class="number">2</span>, <span class="number">4</span>, -<span class="number">6</span>]])</span><br><span class="line">b = np.array([[-<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>]])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dense</span>(<span class="params">AT, W, b, g</span>):</span><br><span class="line">    z = np.matmul(AT, W) + b</span><br><span class="line">    a_out = g(z)</span><br><span class="line">    <span class="keyword">return</span> a_out</span><br></pre></td></tr></table></figure><h2 id="TensorFlow实现"><a href="#TensorFlow实现" class="headerlink" title="TensorFlow实现"></a>TensorFlow实现</h2><p>在这一部分，将讲一下如何使用<code>TensorFlow</code>实现神经网络的搭建。</p><p>我们这次使用手写数字识别的例子，下图是手写数字识别的模型：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB%E6%A8%A1%E5%9E%8B.jpg" alt="手写数字识别模型"></p><p>第一步是按照顺序将神经网络的这三个层串联起来：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.layers <span class="keyword">import</span> Dense</span><br><span class="line"></span><br><span class="line">model = Sequential([</span><br><span class="line">    Dense(units = <span class="number">25</span>, activation = <span class="string">&quot;sigmoid&quot;</span>),</span><br><span class="line">    Dense(units = <span class="number">15</span>, activation = <span class="string">&quot;sigmoid&quot;</span>),</span><br><span class="line">    Dense(units = <span class="number">1</span>, activation = <span class="string">&quot;sigmoid&quot;</span>)</span><br><span class="line">    ])</span><br></pre></td></tr></table></figure><p>一共有三层：25个神经元的隐藏层，15个神经元的隐藏层，1个神经元的输出层，都是把<code>sigmoid</code>函数作为激活函数。</p><p>第二步是对模型进行编译：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tensorflow.keras.losses <span class="keyword">import</span> BinaryCrossentropy</span><br><span class="line"></span><br><span class="line">model.<span class="built_in">compile</span>(loss = BinaryCrossentropy())</span><br></pre></td></tr></table></figure><p>编译的时候需要指定使用哪一种损失函数，上述的的代码使用的是二元交叉熵损失函数，在后面会具体讲到它到底是什么。</p><p>第三步是将前两步拟合在一起：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.fit(X, Y, epochs = <span class="number">100</span>)</span><br></pre></td></tr></table></figure><p>这个函数的作用是开始训练你的模型，其中<code>X</code>和<code>Y</code>表示的是训练集及其标签，训练的方式和前文讲的到的梯度下降是一个原理，梯度下降需要指定一个终止条件，这里面的$100$表示梯度下降一共执行$100$代。</p><h2 id="逻辑回归的实现"><a href="#逻辑回归的实现" class="headerlink" title="逻辑回归的实现"></a>逻辑回归的实现</h2><p>在之前学习逻辑回归的时候，讲了如何使用梯度下降来实现逻辑回归，我们现在来实现一下这部分的代码。<br>$$<br>f_{\vec{w},b}(\vec{x})=g(\vec{w}\cdot\vec{x}+b)=\frac{1}{1+e^{-(\vec{w}\cdot\vec{x}+b)}}<br>$$<br>上面是求解$f_{\vec{w},b}$的公式，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">z = np.dot(w, x) + b</span><br><span class="line">f_x = <span class="number">1</span> / (<span class="number">1</span> + np.exp(-z))</span><br></pre></td></tr></table></figure><p>然后要实现其损失函数，也就是上述提到的<strong>交叉熵损失函数</strong>：<br>$$<br>L(f_{\vec{w},b}(\vec{x}^{(i)}),y^{(i)})=-y^{(i)}log(f_{\vec{w},b}(\vec{x}^{(i)}))-(1-y^{(i)})log(1-f_{\vec{w},b}(\vec{x}^{(i)}))<br>$$<br>上述公式对应代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">loss = -y * np.log(f_x) - (<span class="number">1</span> - y) * np.log(<span class="number">1</span> - f_x)</span><br></pre></td></tr></table></figure><p>1最后要更新<code>w</code>和<code>b</code>的值，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">w = w - alpha * dj_dw</span><br><span class="line">b = b - alpha * dj_db</span><br></pre></td></tr></table></figure><h2 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h2><p>这部分是对目前学过的两个损失函数做一个小小的总结。</p><h3 id="交叉熵损失函数"><a href="#交叉熵损失函数" class="headerlink" title="交叉熵损失函数"></a>交叉熵损失函数</h3><p>$$<br>L(f_{\vec{w},b}(\vec{x}^{(i)}),y^{(i)})=-y^{(i)}log(f_{\vec{w},b}(\vec{x}^{(i)}))-(1-y^{(i)})log(1-f_{\vec{w},b}(\vec{x}^{(i)}))<br>$$</p><p>该损失函数非常适合用来处理二分类问题，调用方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tensorflow.keras.losses <span class="keyword">import</span> BinaryCrossentropy</span><br><span class="line">model.<span class="built_in">compile</span>(loss = BinaryCrossentropy())</span><br></pre></td></tr></table></figure><h3 id="均方误差损失函数"><a href="#均方误差损失函数" class="headerlink" title="均方误差损失函数"></a>均方误差损失函数</h3><p>$$<br>J(w,b)=\frac{1}{m}\sum_{i=1}^{m}(\hat{y}^{(i)}-{y}^{(i)})^2<br>$$</p><p>该函数非常时候用来处理回归问题，调用方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tensorflow.keras.losses <span class="keyword">import</span> MeanSquaredError</span><br><span class="line">model.<span class="built_in">compile</span>(loss = MeanSquaredError())</span><br></pre></td></tr></table></figure><h2 id="激活函数"><a href="#激活函数" class="headerlink" title="激活函数"></a>激活函数</h2><h3 id="Sigmoid"><a href="#Sigmoid" class="headerlink" title="Sigmoid"></a>Sigmoid</h3><p><code>Sigmoid</code>函数是是一个<code>S</code>型函数，常常作为二分类的激活函数，其图像如下所示：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Sigmoid%E5%87%BD%E6%95%B0.png" alt="Sigmoid函数"></p><p>该激活函数的解析式：<br>$$<br>g(z)=\frac{1}{1+e^{-z}}\quad 0&lt;g(z)&lt;1<br>$$</p><h3 id="Identity"><a href="#Identity" class="headerlink" title="Identity"></a>Identity</h3><p>该激活函数是一个线性激活函数，也可以说是没有使用激活函数，其图像如下所示：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Identity%E5%87%BD%E6%95%B0.jpg" alt="Identity函数"></p><p>该激活函数的解析式：<br>$$<br>g(z)=z<br>$$</p><h3 id="ReLU"><a href="#ReLU" class="headerlink" title="ReLU"></a>ReLU</h3><p>该函数叫做线性整流函数，在<code>y</code>轴左侧一直为$0$，在<code>y</code>轴右侧是一条$45^\circ$的直线，其图像如下所示：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/ReLU%E5%87%BD%E6%95%B0.jpg" alt="ReLU函数"></p><p>该激活函数的解析式：<br>$$<br>g(z)=max(0,z)<br>$$</p><h3 id="激活函数的选择"><a href="#激活函数的选择" class="headerlink" title="激活函数的选择"></a>激活函数的选择</h3><p>激活函数有很多种，选择哪一种主要看我们需要解决的问题。</p><p>如果我们要解决的是二分类问题，那么很显然，<code>Sigmoid</code>函数非常适合作为输出层的激活函数；如果我们要预测股票的价格，对于股票而言，价格变动有正有负，那么使用线性激活函数作为输出层的激活函数是非常合适的；如果要预测的东西只能取非负值，比如房价，那么输出层的激活函数应该选择<code>ReLU</code>，该函数只有非负值，很适合完成这件事情。</p><p>事实证明<code>ReLU</code>激活函数是迄今为止许多从业者训练神经网络的最常见选择，而<code>Sigmoid</code>函数使用的比较少，主要是因为前者的计算速度会更快一些，因为它只需要计算$0$和$z$中的最大值就可以了，而后者需要先取幂，再计算分数等等，效率相对来说比较低。还有一个原因是<code>ReLU</code>函数只有左半部分很平坦，而<code>Sigmoid</code>函数在左下和右上都非常平坦，这会导致在进行梯度下降的时候，会导致在这些平坦的地方下降的非常慢。虽然梯度下降是在处理<code>W</code>和<code>b</code>，并不会直接处理激活函数，但是激活函数是计算的一部分，这就导致成本函数也有很多地方会受到其影响，也会编程平坦的，这就会导致梯度很小，学习速度很慢。</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Sigmoid%E5%92%8CReLU.jpg" alt="Sigmoid和ReLU"></p><p>如果是二分类问题，那么输出层使用<code>Sigmoid</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">activation = <span class="string">&quot;sigmoid&quot;</span></span><br></pre></td></tr></table></figure><p>如果预测值可以取正值或负值，那么输出层使用<code>liner</code>，也就是线性函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">activation = <span class="string">&quot;liner&quot;</span></span><br></pre></td></tr></table></figure><p>如果预测值只能取非负值，那么输出层使用<code>ReLU</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">activation = <span class="string">&quot;relu&quot;</span></span><br></pre></td></tr></table></figure><p>对于隐藏层而言，建议只使用<code>ReLU</code>作为默认的激活函数。</p><p>如果不使用激活函数，或者全部使用线性激活函数，那整个神经网络其实就相当于一个普通的线性回归或者逻辑回归，因为若干个线性多项式组合过之后依旧是一个线性多项式，因此不能单纯使用线性激活函数，而<code>ReLU</code>激活函数虽然简单，但是已经可以做到单纯的线性回归和逻辑回归做不到的事情了。</p><h2 id="多分类问题"><a href="#多分类问题" class="headerlink" title="多分类问题"></a>多分类问题</h2><h3 id="二分类与多分类问题"><a href="#二分类与多分类问题" class="headerlink" title="二分类与多分类问题"></a>二分类与多分类问题</h3><p>之前解决的分类问题都是二分类问题，对于一个初始输入，其结果只有两种可能值。而现实情况中，往往会存在多种情况，比如在进行手写数字识别的时候，一共有十个数字需要进行识别，在这种情况下，只依靠二分类是远远不够的，我们把这类需要进行更加详细分类的问题称之为多分类问题。</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E4%BA%8C%E5%88%86%E7%B1%BB%E9%97%AE%E9%A2%98.jpg" alt="二分类问题"></p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%A4%9A%E5%88%86%E7%B1%BB%E9%97%AE%E9%A2%98.jpg" alt="多分类问题"></p><h3 id="Softmax"><a href="#Softmax" class="headerlink" title="Softmax"></a>Softmax</h3><p>对于二分类而言，使用<code>Sigmoid</code>函数进行逻辑回归，其两种情况的概率如下所示：<br>$$<br>a_1=g(z)=\frac{1}{1+e^{-z}}=P(y=1|\vec{x})<br>$$</p><p>$$<br>a_2=1-a_1=P(y=0|\vec{x})<br>$$</p><p>对于多分类来说（下面用的是一个四分类的例子），一般会使用<code>Softmax</code>函数来进行预测，首先求出每一个分类相应的$z$值：<br>$$<br>z_1=\vec{w_1}\vec{x}+b_1<br>$$</p><p>$$<br>z_2=\vec{w_2}\vec{x}+b_2<br>$$</p><p>$$<br>z_3=\vec{w_3}\vec{x}+b_3<br>$$</p><p>$$<br>z_4=\vec{w_4}\vec{x}+b_4<br>$$</p><p>每一种分类对应的公式如下所示：<br>$$<br>a_1=\frac{e^{z_1}}{e^{z_1}+e^{z_2}+e^{z_3}+e^{z_4}}=P(y=1|\vec{x})<br>$$</p><p>$$<br>a_2=\frac{e^{z_2}}{e^{z_1}+e^{z_2}+e^{z_3}+e^{z_4}}=P(y=2|\vec{x})<br>$$</p><p>$$<br>a_3=\frac{e^{z_3}}{e^{z_1}+e^{z_2}+e^{z_3}+e^{z_4}}=P(y=3|\vec{x})<br>$$</p><p>$$<br>a_4=\frac{e^{z_4}}{e^{z_1}+e^{z_2}+e^{z_3}+e^{z_4}}=P(y=4|\vec{x})<br>$$</p><p>我们将上述两组式子综合一下，可以求得：<br>$$<br>z_j=\vec{w_j}\cdot\vec{x}+b_j(j=1,\dots,N)<br>$$</p><p>$$<br>a_j=\frac{e^{z_j}}{\sum^N_{k=1}e^{z_k}}=P(y=j|\vec{x})<br>$$</p><p>事实证明，如果对于二分类问题使用了<code>Softmax</code>函数来进行回归，那么其计算结果与<code>Sigmoid</code>函数来进行逻辑回归基本相同。</p><h3 id="损失函数-1"><a href="#损失函数-1" class="headerlink" title="损失函数"></a>损失函数</h3><p>让我们回忆一下对于二分类问题的损失函数是怎么定义的：<br>$$<br>loss=-yloga_1-(1-y)log(1-a_1)<br>$$<br>对于多分类问题，采用相似的策略：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Softmax%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0.jpg" alt="Softmax损失函数"></p><h3 id="手写数字识别-1"><a href="#手写数字识别-1" class="headerlink" title="手写数字识别"></a>手写数字识别</h3><p>在前文中讲到的手写数字识别问题是一个简单的二分类问题，但实际上，数字并不只有简单的<code>0</code>和<code>1</code>，一共包含有十个数字，因此，这其实是一个多分类问题。对于前面讲到的解决方案，我们只需要把最后的输出层换成十个神经元组成的输出层就可以了，输出层的激活函数也应该使用<code>softmax</code>函数，隐藏层使用的激活函数为<code>ReLU</code>函数。</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%8D%81%E6%95%B0%E5%AD%97%E6%89%8B%E5%86%99%E8%AF%86%E5%88%AB%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84.jpg" alt="十数字手写识别神经网络结构"></p><p>下面的公式对应的是输出层每一个神经元的计算公式：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%AF%8F%E4%B8%AA%E7%A5%9E%E7%BB%8F%E5%85%83%E8%AE%A1%E7%AE%97%E5%85%AC%E5%BC%8F.jpg" alt="每个神经元计算公式"></p><h3 id="TensorFlow实现-1"><a href="#TensorFlow实现-1" class="headerlink" title="TensorFlow实现"></a>TensorFlow实现</h3><p>首先需要调用相应的函数和库：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras,layers <span class="keyword">import</span> Dense</span><br></pre></td></tr></table></figure><p>接下来需要搭建神经网络的每一层，并将他们组合在一起，前两层使用<code>Relu</code>作为激活函数，输出层采用<code>Softmax</code>作为激活函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">model = Sequential([</span><br><span class="line">    Dense(units = <span class="number">25</span>, activation = <span class="string">&quot;relu&quot;</span>),</span><br><span class="line">    Dense(units = <span class="number">15</span>, activation = <span class="string">&quot;relu&quot;</span>),</span><br><span class="line">    Dense(units = <span class="number">10</span>, activation = <span class="string">&quot;softmax&quot;</span>)])</span><br></pre></td></tr></table></figure><p>然后需要引用相应的损失函数，并利用该损失函数编译模型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tensorflow.keras.losses <span class="keyword">import</span> SparseCategoricalCrossentropy</span><br><span class="line">model.<span class="built_in">compile</span>(loss = SparseCategoricalCrossentropy())</span><br></pre></td></tr></table></figure><p>编译过后需要开始训练模型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.fit(X, Y, epochs = <span class="number">100</span>)</span><br></pre></td></tr></table></figure><p>实际上，这段代码及时有效也并不推荐使用，在后面会有一个更推荐代码来完成这件事情。</p><h3 id="Softmax函数改进"><a href="#Softmax函数改进" class="headerlink" title="Softmax函数改进"></a>Softmax函数改进</h3><p>事实证明，在程序设计中，很多数据都是有精度上限的，举个简单的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x1 = <span class="number">2.0</span> / <span class="number">10000</span></span><br><span class="line">x2 = <span class="number">1</span> + (<span class="number">1</span> / <span class="number">10000</span>) - (<span class="number">1</span> - <span class="number">1</span> / <span class="number">10000</span>)</span><br></pre></td></tr></table></figure><p>在我们计算的时候，会认为<code>x1</code>和<code>x2</code>的值应该是相等的，其结果应该都是<code>0.0002</code>，但是如果实际输出这两个结果值，会发现并不相同，这是因为，浮点数的精度是有限的，导致没有办法很精确地表示出来最终结果。</p><p>下面来看一下之前学过的逻辑回归函数：<br>$$<br>a=g(z)=\frac{1}{1+e^{-z}}<br>$$</p><p>$$<br>loss=-ylog(a)-(1-y)log(1-a)<br>$$</p><p>在上述公式中，引入了一个中间变量。如果我们正常进行计算的话，是不会产生任何问题的，但是实际上，由于使用了中间变量，会导致误差变大（由于变量的精度是有限的），因此我们可以在这个基础上进行一个简单的优化，即不使用中间变量进行损失值的计算。<br>$$<br>loss=-ylog(\frac{1}{1+e^{-z}})-(1-y)log(1-\frac{1}{1+e^{-z}})<br>$$<br>如果使用<code>sigmoid</code>函数来实现十个手写数字识别的问题话，代码应该如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">model = Sequential([</span><br><span class="line">    Dense(units = <span class="number">25</span>, activation = <span class="string">&quot;relu&quot;</span>),</span><br><span class="line">    Dense(units = <span class="number">15</span>, activation = <span class="string">&quot;relu&quot;</span>),</span><br><span class="line">    Dense(units = <span class="number">10</span>, activation = <span class="string">&quot;sigmoid&quot;</span>)])</span><br><span class="line">model.<span class="built_in">compile</span>(loss = BinaryCrossEntropy())</span><br></pre></td></tr></table></figure><p>回到上面的问题，如果在最后一层使用<code>sigmoid</code>函数的话，在用得到的结果用损失值函数进行编译，会导致精度降低。因此，可以将最后一层的逻辑回归<code>sigmoid</code>激活函数与损失函数组合在一起，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">model = Sequential([</span><br><span class="line">    Dense(units = <span class="number">25</span>, activation = <span class="string">&quot;relu&quot;</span>),</span><br><span class="line">    Dense(units = <span class="number">15</span>, activation = <span class="string">&quot;relu&quot;</span>),</span><br><span class="line">    Dense(units = <span class="number">10</span>, activation = <span class="string">&quot;linear&quot;</span>)])</span><br><span class="line">model.<span class="built_in">compile</span>(loss = BinaryCrossEntropy(from_logits = <span class="literal">True</span>))</span><br></pre></td></tr></table></figure><p>通过改变最后一行代码可以解决上述问题，会让误差变得更小一些。当涉及到<code>softmax</code>函数时，数值的舍入误差会变得更加糟糕。需要注意的是，如果我们使用这种方式，那最后一层的激活函数相当于和损失函数组合在一起了，因此在神经网络的最后一层中，需要使用线性激活函数。</p><p>同理，如果要优化<code>softmax</code>函数的话，需要做类似的事情，让我们先来看一下原版代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">model = Sequential([</span><br><span class="line">    Dense(units = <span class="number">25</span>, activation = <span class="string">&quot;relu&quot;</span>),</span><br><span class="line">    Dense(units = <span class="number">15</span>, activation = <span class="string">&quot;relu&quot;</span>),</span><br><span class="line">    Dense(units = <span class="number">10</span>, activation = <span class="string">&quot;softmax&quot;</span>)])</span><br><span class="line">model.<span class="built_in">compile</span>(loss = SparseCategoricalCrossEntropy())</span><br></pre></td></tr></table></figure><p>优化之后的代码如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">model = Sequential([</span><br><span class="line">    Dense(units = <span class="number">25</span>, activation = <span class="string">&quot;relu&quot;</span>),</span><br><span class="line">    Dense(units = <span class="number">15</span>, activation = <span class="string">&quot;relu&quot;</span>),</span><br><span class="line">    Dense(units = <span class="number">10</span>, activation = <span class="string">&quot;linear&quot;</span>)])</span><br><span class="line">model.<span class="built_in">compile</span>(loss = SparseCategoricalCrossEntropy(from_logits = <span class="literal">True</span>))</span><br></pre></td></tr></table></figure><p>这部分改进只是除了增加了精度以外并没有什么变化，但是如果要实现其底层代码的话，也建议采用此种方法。</p><p>最后，再让我们将优化好的这部分代码搭载进去，看一下整体的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建模型</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.layers <span class="keyword">import</span> Dense</span><br><span class="line">model = Sequential([</span><br><span class="line">    Dense(units = <span class="number">25</span>, activation = <span class="string">&quot;relu&quot;</span>),</span><br><span class="line">    Dense(units = <span class="number">15</span>, activation = <span class="string">&quot;relu&quot;</span>),</span><br><span class="line">    Dense(units = <span class="number">10</span>, activation = <span class="string">&quot;linear&quot;</span>)])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置损失函数</span></span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.losses <span class="keyword">import</span> SparseCategoricalCrossEntropy</span><br><span class="line">model.<span class="built_in">compile</span>(..., loss = SparseCategoricalCrossEntropy(from_logits = <span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始训练</span></span><br><span class="line">model.fit(X, Y, epochs = <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行预测</span></span><br><span class="line">logits = model(X)</span><br><span class="line">f_x = tf.nn.softmax(logits)</span><br></pre></td></tr></table></figure><p>需要注意的是，使用这种方法进行预测，最后产生的结果是线性激活函数处理后的结果，也就是相应神经元的$z_i$的值，因此需要再放到<code>softmax</code>函数中处理一下。对于逻辑回归而言，这个操作也是非常必要的。</p><h3 id="多标签分类问题"><a href="#多标签分类问题" class="headerlink" title="多标签分类问题"></a>多标签分类问题</h3><p>多分类问题指的是对于一个东西，可能有多种分类，要求模型识别出相应的东西属于哪一分类，最典型的例子是手写数字识别。</p><p>多标签分类问题与其十分相似，其目的是对于一个东西而言，要在上面识别出不同标签的东西。例如给定一张图片，要求识别上面的汽车、公交车、行人，这种问题是对于单一输入要查找三个不同的标签。</p><p>对于这种问题，可以训练三个神经网络，第一个检测汽车，第二个检测公交车，第三个检测行人：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%A4%9A%E6%A0%87%E7%AD%BE%E5%88%86%E7%B1%BB%E9%97%AE%E9%A2%98%E7%9A%84%E4%B8%89%E4%B8%AA%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C.jpg" alt="多标签分类问题的三个神经网络"></p><p>上述的这种方法并不是很推荐，还有另一种方法也可以做到这一点，那就是训练一个神经网络同时检测汽车、公共汽车和行人这三者，神经网络结构如下所示：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E4%B8%89%E6%A0%87%E7%AD%BE%E5%88%86%E7%B1%BB%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C.jpg" alt="三标签分类神经网络"></p><p>对于这个问题而言，使用<code>Sigmoid</code>函数作为输出层的激活函数是非常合理的，因为输出的三个结果是相互独立的关系，<code>Softmax</code>函数并不适用这个问题，因为这个函数一般解决的是非独立事件，所有输出的结果的概率应该相加为$1$。</p><h2 id="Adam算法"><a href="#Adam算法" class="headerlink" title="Adam算法"></a>Adam算法</h2><p>之前学习过的梯度下降算法，是线性回归和逻辑回归等许多算法以及神经网络早期实现的基础，但事实证明，现在有一些其他优化算法可以最小化成本函数，甚至比梯度下降更好。</p><p>回想一下梯度下降的表达式：<br>$$<br>w_j=w_j-\alpha\frac{\partial}{\partial{w_j}}J(\vec{w},b)<br>$$<br>在传统梯度下降公式中，收敛速度很大程度上取决于学习率。如果下降的时候，每次都朝着同一个相似的方向收敛一小步，那么我们希望学习率稍微变大一点，使其更快收敛；反之，如果下降的时候，每次变化都是一个震荡的形式，那么我们会希望学习率稍微小一些。</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Adam%E7%AE%97%E6%B3%95.jpg" alt="Adam算法"></p><p>左图是学习率较小的情况，右图是学习率较大的情况。</p><p><code>Adam</code>代表<code>Adaptive Moment Estimation</code>，该算法不会设置一个全局的学习率，而是对模型的每个参数使用不同的学习率，有几个参数就会有几个与之对应的学习率。</p><p><code>Adam</code>算法的实现过程有一些复杂，如果以后学习更加高级的深度学习课程，会学习到相关的细节，现阶段，可以用这种方法来实现该算法，需要在编译的时候添加一个新的参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建模型</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.layers <span class="keyword">import</span> Dense</span><br><span class="line">model = Sequential([</span><br><span class="line">    Dense(units = <span class="number">25</span>, activation = <span class="string">&quot;relu&quot;</span>),</span><br><span class="line">    Dense(units = <span class="number">15</span>, activation = <span class="string">&quot;relu&quot;</span>),</span><br><span class="line">    Dense(units = <span class="number">10</span>, activation = <span class="string">&quot;linear&quot;</span>)])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置损失函数</span></span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.losses <span class="keyword">import</span> SparseCategoricalCrossEntropy</span><br><span class="line">model.<span class="built_in">compile</span>(optimizer = tf.keras.optimizers.Adam(learning_rate = 1e - <span class="number">3</span>), loss = SparseCategoricalCrossEntropy(from_logits = <span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始训练</span></span><br><span class="line">model.fit(X, Y, epochs = <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行预测</span></span><br><span class="line">logits = model(X)</span><br><span class="line">f_x = tf.nn.softmax(logits)</span><br></pre></td></tr></table></figure><h2 id="网络类型"><a href="#网络类型" class="headerlink" title="网络类型"></a>网络类型</h2><h3 id="密集层"><a href="#密集层" class="headerlink" title="密集层"></a>密集层</h3><p>密集层是我们一直使用的隐藏层，他的输入是上一层的每个神经元的输出值：<br>$$<br>\vec{a}_1^{[2]}=g(\vec{w}_1^{[2]}\cdot \vec{a}^{[1]}+b_1^{[2]})<br>$$</p><h3 id="卷积层"><a href="#卷积层" class="headerlink" title="卷积层"></a>卷积层</h3><p>用手写数字识别来举例子，对于输入的图像，每一个神经元都获取一部分像素，也就是每个神经元获取到的数据是不一样的，他们只关注自己所负责的那片区域。</p><p>使用这种方法可以加快计算速度，同时卷积层需要更少的训练数据，也不太容易过拟合。</p><p>如果神经网络中有多个卷积层，我们也可以将其称之为卷积神经网络，卷积神经网络会在深度学习中详细介绍。</p><h1 id="导数"><a href="#导数" class="headerlink" title="导数"></a>导数</h1><p>在这一部分，将介绍一下求导数的相关代码。</p><h2 id="sympy"><a href="#sympy" class="headerlink" title="sympy"></a>sympy</h2><p>求导数的时候，可以使用这个库，里面有丰富的处理导数的方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sympy</span><br></pre></td></tr></table></figure><h2 id="symbols"><a href="#symbols" class="headerlink" title="symbols"></a>symbols</h2><p>该方法的作用是确定要以什么符号作为变量。</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">J, w = sympy.symbols(<span class="string">&#x27;J,w&#x27;</span>)</span><br><span class="line">J = w**<span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(J)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">w**2</span><br></pre></td></tr></table></figure><h2 id="diff"><a href="#diff" class="headerlink" title="diff"></a>diff</h2><p>该方法的作用是对函数进行求导。</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dJ_dw = sympy.diff(J, w)</span><br><span class="line"><span class="built_in">print</span>(dJ_dw)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2*w</span><br></pre></td></tr></table></figure><h2 id="subs"><a href="#subs" class="headerlink" title="subs"></a>subs</h2><p>该方法的作用是将值代入函数并求最终结果。</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(dJ_dw.subs([(w, <span class="number">2</span>)]))</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><h2 id="计算图"><a href="#计算图" class="headerlink" title="计算图"></a>计算图</h2><p>计算图不是物理意义上的图像，而是计算机科学中的图，是一组由边连接或由箭头连接的节点。</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E5%9B%BE.jpg" alt="计算图"></p><p>上述计算图是用来计算在$w=2,b=8,x=-2,y=2$时的成本函数，其成本函数为：<br>$$<br>J(w,b)=\frac{1}{2}(a-y)^2<br>$$<br>上面的这种计算方式是从左到右计算的，被叫做前向传播，但是计算导数的时候是从右向左计算的（链式求导法则），因此其被称为反向传播。</p><h1 id="模型评估"><a href="#模型评估" class="headerlink" title="模型评估"></a>模型评估</h1><h2 id="训练集与测试集"><a href="#训练集与测试集" class="headerlink" title="训练集与测试集"></a>训练集与测试集</h2><p>在我们进行模型训练的时候，例如进行线性回归，我们如果设置足够多的参数，一般来讲会更好的拟合训练集，但这往往也会造成过拟合，例如下面这张图：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E8%BF%87%E6%8B%9F%E5%90%88.jpg" alt="过拟合"></p><p>对于该模型，有着太多的曲线，这虽然可以很好的拟合我们的训练数据，但很显然，如果给一个其他数据的话，它并不一定能产生很好的结果。</p><p>为了降低产生这种情况的可能性，我们一般会将数据集拆分成两份：训练集和测试集。一般来讲训练集的数量会较多一些，测试集会较少。例如，如果我有十个数据，我可以将$70%$的数据用作训练集，$30%$的数据用于测试集。</p><p>当我们具体在训练模型的时候，需要用训练集进行训练，在上图中举的例子中，很明显，对于训练集来说，其成本函数非常非常小，甚至趋近于$0$，但是这并不意味着它在测试集上的表现也是同样的。因此，我们不仅需要算一下训练集的成本函数，还需要去计算一下测试集的成本函数，通过测试集的成本函数来评判一下我们的模型是否具有良好的泛化能力。</p><p>使用这种方法可以去评估模型的好坏，我们可以进一步完善这个想法，用这个技术让算法自动选择出一个好的模型。</p><h2 id="模型选择"><a href="#模型选择" class="headerlink" title="模型选择"></a>模型选择</h2><p>在训练线性回归的模型的时候，我们无法确定该使用几次幂的多项式来作为最终模型，因此我们把这些多项式全都列出来，从这里面选择一个最好的模型。</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E5%A4%9A%E9%A1%B9%E5%BC%8F.jpg" alt="线性回归多项式"></p><h3 id="训练集"><a href="#训练集" class="headerlink" title="训练集"></a>训练集</h3><p>上图中列举了十个可能的多项式，我们可以都对他们进行训练，对每一个训练好的模型都求解一下它的成本函数，看看哪个是最低的，最低的那个往往可以更好地拟合我们的数据集。</p><p>但是这种方法有一个弊端，非常容易造成过拟合，因为我们的模型是基于已知的数据集生成的，这样得到的最优模型往往只是在当前训练集的前提下成本函数是最低的，如果用该模型去泛化别的数据，可能效果不是很好。</p><h3 id="训练集-测试集"><a href="#训练集-测试集" class="headerlink" title="训练集+测试集"></a>训练集+测试集</h3><p>为了解决这个问题，我们可以将数据集划分成训练集和测试集，训练的时候使用训练集的数据进行模型训练，等到挑选哪个模型是最优的时候，可以采用测试集计算成本函数，找成本值最低的模型即可。</p><p>对于上述这种方式，可以大幅度降低过拟合的概率，但是这样出来的结果也是会比较乐观的。因为就算是训练和测试采用的不是同一批数据进行操作，最后挑选出来的模型往往会更偏向于测试集的结果，这会使我们评判模型好坏的时候更加乐观。</p><h3 id="训练集-测试集-交叉验证集"><a href="#训练集-测试集-交叉验证集" class="headerlink" title="训练集+测试集+交叉验证集"></a>训练集+测试集+交叉验证集</h3><p>我们这次使用一个新的方式，将原本的数据集分为训练集，测试集和交叉验证集。例如如果数据集一共有十条数据，那么可以将六条分为训练集，两条分为测试集，两条分为交叉验证集。</p><p>如下分别是训练集、交叉验证集、测试集的成本函数计算公式：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E4%B8%89%E7%A7%8D%E5%AD%90%E9%9B%86%E7%9A%84%E6%88%90%E6%9C%AC%E5%87%BD%E6%95%B0.jpg" alt="三种子集的成本函数"></p><p>我们依旧使用训练集来训练多个模型，之后使用交叉验证集来挑选一个成本函数最低的模型，作为我们的最优模型，如果我们要评判模型的好坏，需要用测试集来计算模型的成本函数，将该结果作为模型泛化能力的评判标准，使用这种方式，可以最大程度上保证评判结果的客观性。</p><p>使用这种方法，其实就是由交叉验证集的结果选出来它认为的最好的模型，测试集在这里只起到一个客观评价这个模型泛化能力的作用。</p><h2 id="偏差与方差"><a href="#偏差与方差" class="headerlink" title="偏差与方差"></a>偏差与方差</h2><p>偏差指的是训练出来的模型与训练集的差距程度，方差指的是训练出来的模型与未出现在训练集中的数据的差距程度。</p><p>对于欠拟合而言，偏差和方差都会很高。</p><p>对于过拟合而言，偏差很低，但是方差很高。</p><p>对于一个拟合的非常好的模型而言，其偏差和方差都会很低。</p><p>在我们选择不同最高次数项的函数时，得到的结果也会不一样，他们的大概关系图如下：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%81%8F%E5%B7%AE%E5%92%8C%E6%96%B9%E5%B7%AE%E5%85%B3%E7%B3%BB%E5%9B%BE.jpg" alt="偏差和方差关系图"></p><p>该图像的横坐标是多项式的最高次数，纵坐标代表与成本函数值。</p><p>可以发现对于训练数据，随着次数的升高，其偏差值会越来越小，但这最终会导致过拟合。对于未知的测试数据，随着次数的升高，呈现先下降再升高的趋势。</p><h2 id="正则化的影响"><a href="#正则化的影响" class="headerlink" title="正则化的影响"></a>正则化的影响</h2><p>正则化在前面的部分学习过，在这就不过多赘述了，这里写一下它的公式：<br>$$<br>J(\vec{w},b)=\frac{1}{2m}\sum^m_{i=1}(f_{\vec{w},b}(\vec{x}^{(i)})-y^{(i)})^2+\frac{\lambda}{2m}\sum^n_{j=1}w^2_j<br>$$<br>如果$\lambda$的的值非常大，那么算法就会让这些<code>w</code>参数非常小，最后会使得他们的值都非常接近于<code>0</code>，会导致最后的模型约等于<code>b</code>的值。</p><p>如果$\lambda$的的值非常小，那么就相当于没有进行正则化操作，最终会导致模型过拟合。</p><p>因此，$\lambda$的选择对于模型而言也会起到很大作用，所以我们可以利用之前的思想，对于$\lambda$也进行交叉验证，计算多个$\lambda$值的不同情况，然后选择一个最好的情况。</p><h2 id="评估基准"><a href="#评估基准" class="headerlink" title="评估基准"></a>评估基准</h2><p>对于我们设计出来的模型，并不是必须百分百识别数据才是好的模型，我们一般需要制定一个评估基准，来判定我们这个模型的效果怎么样，如下有三种常用的方法：</p><ol><li>在使用非结构化数据时，例如音频、图像或文本等，人类水平的表现通常是一个很好的基准，我们可以以人类的识别率作为基准。</li><li>如果有一些竞争算法，可能是其他人已经实现的或者是以前实现的，又或者是竞争对手的算法，都可以以他们为基础来建立基准性能水平。</li><li>还可以那句经验来指定基准性能水平，就是希望达到的错误水平是多少，或者希望算法达到的期望性能水平是多少。</li></ol><p>指定好基准后，我们在训练模型后，一共会有三个数据，一个是基准性能水平，一个是训练误差，一个是交叉验证误差。</p><p>如果训练误差与基准性能水平有着较大的差距，说明有一个高偏差问题；如果训练误差和交叉验证误差之间有很大的差距，说明有一个高方差问题。</p><p>建立评估基准是因为并不是所有的情况都可以以<code>0</code>作为基准的，例如在进行语音识别的时候，可能会出现声音嘈杂的情况，这样会导致完全识别几乎是不可能的，因此我们需要指定一个基准来评判我们这个算法是否达标。</p><h2 id="学习曲线"><a href="#学习曲线" class="headerlink" title="学习曲线"></a>学习曲线</h2><h3 id="拟合-1"><a href="#拟合-1" class="headerlink" title="拟合"></a>拟合</h3><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%8B%9F%E5%90%88%E5%AD%A6%E4%B9%A0%E6%9B%B2%E7%BA%BF.jpg" alt="拟合学习曲线"></p><p>对于恰好能够拟合的模型来说，即使用的函数的最高数正好合适，其学习曲线如上图所示。其中横坐标表示的是训练集的样本数量，纵坐标表示的是误差值。对于训练误差而言，随着数据集样本数的增大，会导致其训练误差越来越大；对于交叉验证误差而言，随着数据集样本数的增大，会导致其验证误差越来越小。这是因为前期样本数量非常少，假设只有一个样本，那么训练集可以很好的拟合数据，但是随着样本的不断增多，会越来越难以拟合数据。交叉验证集在前期的时候很难去根据很少的样本预测数据集，所以最开始的时候交叉验证误差会很大，最后逐步降低。随着样本数的不断增加，最后二者的误差会越来越接近。</p><p>总结一下：<strong>训练集越大，模型越难拟合训练集，但泛化能力会增强。</strong></p><h3 id="欠拟合-1"><a href="#欠拟合-1" class="headerlink" title="欠拟合"></a>欠拟合</h3><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%AC%A0%E6%8B%9F%E5%90%88%E5%AD%A6%E4%B9%A0%E6%9B%B2%E7%BA%BF.jpg" alt="欠拟合学习曲线"></p><p>上图是使用了欠拟合的模型，即使用的函数的最高次数较低。其中红色的线是基准性能水平线，是根据人类水平来定义的。对于训练误差而言，在数据很少的时候还是可以较好拟合的，训练误差会比较低。但是随着训练误差的增多，会急剧变高，会使得学习曲线相对于拟合比较好（即第一种）的曲线来讲看起来比较胖，最后会趋于平缓。这种情况下会导致训练误差和交叉验证误差在最后都远远高于基准线。</p><h3 id="过拟合-1"><a href="#过拟合-1" class="headerlink" title="过拟合"></a>过拟合</h3><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E8%BF%87%E6%8B%9F%E5%90%88%E5%AD%A6%E4%B9%A0%E6%9B%B2%E7%BA%BF.jpg" alt="过拟合学习曲线"></p><p>上图是使用了过拟合的模型，即使用的函数的最高次数较高。对于训练误差而言，其增长会十分缓慢；同理，对于交叉验证误差而言，其下降也会非常缓慢，并且二者的差距会很大。但是如果训练样本足够多的话，训练误差也会平稳增大，但是增加得非常缓慢，交叉验证误差也会缓慢下降，最后会与基准线越来越贴合，但是这需要非常多的数据集。</p><p>总而言之，如果学习算法存在高方差，那么获得更多训练数据确实可能有所帮助。</p><h2 id="优化模型的方法"><a href="#优化模型的方法" class="headerlink" title="优化模型的方法"></a>优化模型的方法</h2><p>优化模型的方法主要包括以下几种，他们都在降低训练误差和交叉验证误差上有很好的效果，破折号后面会写出适合解决哪类问题：</p><ul><li>获取更多训练集——高方差问题</li><li>尝试小的特征集——高方差问题</li><li>加入更多特征——高偏差问题</li><li>增加多项式特征（即进行特征工程）——高偏差问题</li><li>尝试降低$\lambda$的值——高偏差问题</li><li>尝试增大$\lambda$的值——高方差问题</li></ul><p>如果你发现你的算法具有高方差，那么解决这个问题的方法主要是增加训练数据或者简化模型，简化模型可以使用更小的特征集，或者增加正则化参数$\lambda$的值。</p><p>如果你的算法具有高偏差，则意味着即使在训练集上也表现不佳，这种情况可以去赋予你的模型更大的灵活性以适应更复杂或更多功能，主要方法是提供额外的特征或添加一些特征工程产生的特征，或者减少正则化参数$\lambda$的值。减少训练集也可以去解决高偏差问题，会让你的模型更好地适应训练集，但这样往往会恶化你的交叉验证误差和算法的性能，所以不要使用这种方法来解决高偏差问题。</p><h2 id="方差与偏差"><a href="#方差与偏差" class="headerlink" title="方差与偏差"></a>方差与偏差</h2><p>在机器学习中，偏差与方差的平衡是一个很重要的课题，因为如果模型太简单，就会有高偏差，太复杂就会有高方差。但是在神经网络中，如果神经网络足够大，那么几乎能很好地适应你的训练集。</p><p>对于神经网络，可以现在训练集上训练算法，然后询问它在训练集上是否表现良好，如果相对于基准水平算法表现不佳，那么就可能遇到了高偏差问题。减少偏差可以使用更大的神经网络，即使用更多的隐藏层，每个隐藏层上设置更多的神经元，之后再次训练神经网络，询问其在训练集上的比较。重复上述过程，直到它在训练集上表现良好。通过这种方式，可以让模型在训练集中达到期望的水平，即基准性能水平。</p><p>在进行完上述步骤后，可以询问算法在交叉验证集上的表现情况，如果表现得不好，这说明其具有高方差。可以增加训练集来重新训练模型，降低方差。</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%96%B9%E5%B7%AE%E4%B8%8E%E5%81%8F%E5%B7%AE%E6%B5%81%E7%A8%8B%E5%9B%BE.jpg" alt="方差与偏差流程图"></p><p>当时这个方法也存在着一定的局限性，训练更大的神经网络会减少偏差，但同时也会增加计算成本。</p><p>事实证明，正则化比较好的大型神经网络和较小的神经网络在方差上的效果差不多好或者更好。</p><p>在代码实现中，可以在搭建神经网络的时候选择相应的$\lambda$值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">layer = Dense(units = <span class="number">25</span>, activation = <span class="string">&quot;relu&quot;</span>, kernel_regularizer = L2(<span class="number">0.01</span>))</span><br></pre></td></tr></table></figure><p>后面这半句代码就是在设定$\lambda$的值，其中<code>L2</code>指的是<code>L2</code>范数。</p><ul><li><code>L0</code>范数是指向量中非零的元素的个数</li><li><code>L1</code>范数是指向量中各个元素绝对值之和</li><li><code>L2</code>范数是指向量各元素平方和然后求平方根</li></ul><h2 id="机器学习开发流程"><a href="#机器学习开发流程" class="headerlink" title="机器学习开发流程"></a>机器学习开发流程</h2><p>首先需要决定系统的总体架构是什么，这一步需要选择机器学习的模型，并决定要使用什么样的数据，同时还要决定各种超参数。接着，根据这些决定，开始训练模型，训练后的模型往往不会达到期望的结果。在下一步，需要去优化我们的算法，例如去查看算法的偏差和方差，还有各种各样的错误分析，根据分析结果来做出决定去优化你的算法模型。一直执行上述过程，进行多次迭代，直到获得想要的性能。</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B.jpg" alt="机器学习开发流程"></p><h2 id="误差分析"><a href="#误差分析" class="headerlink" title="误差分析"></a>误差分析</h2><p>如果你训练了一个分类模型，一共有五百个数据，分类错了一百个，你可以分析这一百个预测错误的样本。首先将这些样本根据主题进行分类，例如用垃圾邮件分类的例子，可能对与拼写错误的垃圾邮件分类效果不好，或者是使用图片嵌入文字的垃圾邮件分类效果不好，又或者是对药物主题的垃圾邮件分类效果不好，等等。根据这些不同类别的情况，分别统计他们的出现次数，然后看哪种情况比较多，之后可以着重解决出现频率比较高的分类错误的情况。</p><p>值得注意的是，可能一个样本会被分类到很多类别之中，每个类别之间并不是互斥的关系，他们完全可以重叠。如果分类错误的样本非常多，我们根本没有那么多时间和精力挨个去查看，面对这种情况，我们可以随机抽取一百个样本，对其进行分类。使用这种方法可以让我们知道问题出在哪里，对接下来怎么做有着重要的指导意义。</p>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Python </tag>
            
            <tag> 人工智能 </tag>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库基础</title>
      <link href="/archives/eb03cdad.html"/>
      <url>/archives/eb03cdad.html</url>
      
        <content type="html"><![CDATA[<hr><h1 id="SQL语言基础"><a href="#SQL语言基础" class="headerlink" title="SQL语言基础"></a>SQL语言基础</h1><h2 id="SQL的概述"><a href="#SQL的概述" class="headerlink" title="SQL的概述"></a>SQL的概述</h2><p><code>SQL</code>全称：<code>Structured Query Language</code>，是结构化查询语言，用于<strong>访问和处理数据库的标准的计算机语言</strong>。</p><h2 id="SQL的特点"><a href="#SQL的特点" class="headerlink" title="SQL的特点"></a>SQL的特点</h2><ul><li>具有综合统一性，不同数据库的支持的<code>SQL</code>稍有不同。</li><li>非过程化语言（不需要关系内部的操作过程）。</li><li>语言简洁，用户容易接受。</li><li>以一种语法结构提供两种使用方式（和其他语言可以混用）。</li></ul><h2 id="语法特点"><a href="#语法特点" class="headerlink" title="语法特点"></a>语法特点</h2><ul><li><code>SQL</code>对关键字的大小写不敏感。</li><li><code>SQL</code>语句可以以单行或者多行书写，以分号结束。</li></ul><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 单行注释，-- 后面一定要加一个空格</span></span><br><span class="line"># 单行注释，# 后面可加可不加空格</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp;  <span class="comment">-- 这里是注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h1 id="数据库系统简介"><a href="#数据库系统简介" class="headerlink" title="数据库系统简介"></a>数据库系统简介</h1><h2 id="SQL和数据库管理系统的关系"><a href="#SQL和数据库管理系统的关系" class="headerlink" title="SQL和数据库管理系统的关系"></a>SQL和数据库管理系统的关系</h2><ul><li><code>SQL</code>是一种用于操作数据库的语言，<code>SQL</code>适用于所有关系型数据库。</li><li><code>MySQL</code>、<code>Oracle</code>、<code>SQLServer</code>是一个数据库软件，这些数据库软件支持标准<code>SQL</code>，也就是通过<code>SQL</code>可以使用这些软件，不过每一个数据库系统会在标准<code>SQL</code>的基础上扩展自己的<code>SQL</code>语法。</li><li>大部分的<code>NoSQL</code>数据库有自己的操作语言，对<code>SQL</code>支持的并不好。</li></ul><h2 id="关系型数据库管理系统组成"><a href="#关系型数据库管理系统组成" class="headerlink" title="关系型数据库管理系统组成"></a>关系型数据库管理系统组成</h2><p>数据库管理系统（<code>DBMS</code>）主要由数据库和表组成，一个系统可以有很多数据库，每个数据库可以有很多表。</p><h1 id="MySQL简介"><a href="#MySQL简介" class="headerlink" title="MySQL简介"></a>MySQL简介</h1><h2 id="MySQL的特点"><a href="#MySQL的特点" class="headerlink" title="MySQL的特点"></a>MySQL的特点</h2><ol><li>MySQL数据库是使用<code>C/C++</code>语言编写的，以保证源码的可移植性。</li><li>支持多个操作系统。</li><li>支持多线程，可以充分利用CPU资源。</li><li>为多种编程语言提供<code>API</code>，包括<code>C</code>语言，<code>Java</code>，<code>PHP</code>，<code>Python</code>语言等。</li><li><code>MySQL</code>优化了算法，有效提高了查询速度。</li><li><code>MySQL</code>开放了源代码且无版权制约，自主性强，使用成本低。</li><li><code>MySQL</code>历史悠久、社区及用户非常活跃，遇到问题，可以很快获取到帮助。</li></ol><h1 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h1><h2 id="DDL解释"><a href="#DDL解释" class="headerlink" title="DDL解释"></a>DDL解释</h2><p><code>DDL</code>(<code>Data Definition Language</code>)，数据定义语言，该语言部分包括以下内容。</p><ul><li>对数据库的常用操作</li><li>对表结构的常用操作</li><li>修改表结构</li></ul><h2 id="对数据库的操作"><a href="#对数据库的操作" class="headerlink" title="对数据库的操作"></a>对数据库的操作</h2><h3 id="查询所有的数据库"><a href="#查询所有的数据库" class="headerlink" title="查询所有的数据库"></a>查询所有的数据库</h3><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> DATABASES;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E6%9F%A5%E8%AF%A2%E6%89%80%E6%9C%89%E6%95%B0%E6%8D%AE%E5%BA%93.jpg" alt="查询所有数据库"></p><h3 id="查询当前数据库"><a href="#查询当前数据库" class="headerlink" title="查询当前数据库"></a>查询当前数据库</h3><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DATABASE();</span><br></pre></td></tr></table></figure><p>例：使用数据库<code>mydb</code>，查询当前所在数据库。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">SELECT</span> DATABASE();</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E6%9F%A5%E8%AF%A2%E5%BD%93%E5%89%8D%E6%95%B0%E6%8D%AE%E5%BA%93.jpg" alt="查询当前数据库"></p><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE [ IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> ] 数据库名字 [ <span class="keyword">DEFAULT</span> CHARSET 字符集 ] [ <span class="keyword">COLLATE</span> 排序规则 ];</span><br></pre></td></tr></table></figure><p><code>if not exists</code>将会判断是否存在该数据库，如果存在，则会取消创建，这个可加可不加，如果不加的话出现重复创建的情况会报错。</p><p>例：创建数据库<code>mydb</code>，并输出所有数据库。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE mydb;</span><br><span class="line"><span class="keyword">SHOW</span> DATABASES;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93.jpg" alt="创建数据库"></p><p>不使用if not exists创建重复数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE mydb;</span><br><span class="line"><span class="keyword">SHOW</span> DATABASES;</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE mydb</span><br><span class="line">&gt; 1007 - Can&#x27;t create database &#x27;mydb&#x27;; database exists</span><br><span class="line">&gt; 时间: 0.002s</span><br></pre></td></tr></table></figure><p>使用if not exists创建重复数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE</span><br><span class="line">IF</span><br><span class="line"><span class="keyword">NOT</span> <span class="keyword">EXISTS</span> mydb;</span><br><span class="line"><span class="keyword">SHOW</span> DATABASES;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93.jpg" alt="使用if not exists创建重复数据库"></p><h3 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h3><p>选择使用哪一个数据库，从而对其进行操作。</p><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USE 数据库名;</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">USE mydb</span><br><span class="line">&gt; OK</span><br><span class="line">&gt; 时间: 0s</span><br></pre></td></tr></table></figure><h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE [ IF <span class="keyword">EXISTS</span> ] 数据库名;</span><br></pre></td></tr></table></figure><p><code>if exists</code>将会判断是否存在该数据库，如果存在，则会删除，不存在则取消执行。这个可加可不加，如果不加的话出现重复删除的情况会报错。</p><p>例：删除数据库<code>mydb</code>，并输出所有数据库。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE mydb;</span><br><span class="line"><span class="keyword">SHOW</span> DATABASES;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E6%9F%A5%E8%AF%A2%E6%89%80%E6%9C%89%E6%95%B0%E6%8D%AE%E5%BA%93.jpg" alt="删除数据库"></p><p>不使用if exists删除不存在数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE mydb;</span><br><span class="line"><span class="keyword">SHOW</span> DATABASES;</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE mydb;</span><br><span class="line">&gt; 1008 - Can&#x27;t drop database &#x27;mydb&#x27;; database doesn&#x27;t exist</span><br><span class="line">&gt; 时间: 0s</span><br></pre></td></tr></table></figure><p>使用if exists删除不存在数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE</span><br><span class="line">IF</span><br><span class="line"><span class="keyword">EXISTS</span> mydb;</span><br><span class="line"><span class="keyword">SHOW</span> DATABASES;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E6%9F%A5%E8%AF%A2%E6%89%80%E6%9C%89%E6%95%B0%E6%8D%AE%E5%BA%93.jpg" alt="使用if exists删除不存在数据库"></p><h4 id="修改数据库编码"><a href="#修改数据库编码" class="headerlink" title="修改数据库编码"></a>修改数据库编码</h4><p>可以用来修改数据库的编码格式。</p><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> DATABASE 数据库名 <span class="type">CHARACTER</span> </span><br><span class="line"><span class="keyword">SET</span> utf8;</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ALTER DATABASE mydb CHARACTER </span><br><span class="line">SET utf8</span><br><span class="line">&gt; OK</span><br><span class="line">&gt; 时间: 0.003s</span><br></pre></td></tr></table></figure><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>数据类型是指在创建表的时候为表中字段指定数据类型，只有数据符合类型要求才能存储起来，使用数据类型的原则是：<strong>够用就行，尽量使用取值范围小的，而不用大的，这样可以节省更多存储空间。</strong></p><h3 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h3><table><thead><tr><th align="center">类型</th><th align="center">大小</th><th align="center">范围（有符号）</th><th align="center">范围（无符号）</th><th align="center">用途</th></tr></thead><tbody><tr><td align="center">TINYINT</td><td align="center">1byte</td><td align="center">(-128, 127)</td><td align="center">(0, 255)</td><td align="center">小整数值</td></tr><tr><td align="center">SMALLINT</td><td align="center">2bytes</td><td align="center">(-32768, 32767)</td><td align="center">(0, 65535)</td><td align="center">大整数值</td></tr><tr><td align="center">MEDIUMINT</td><td align="center">3bytes</td><td align="center">(-8388608, 8388607)</td><td align="center">(0, 16777215)</td><td align="center">大整数值</td></tr><tr><td align="center">INT或INTEGER</td><td align="center">4bytes</td><td align="center">(-2147483648, 2147483647)</td><td align="center">(0, 4294967295)</td><td align="center">大整数值</td></tr><tr><td align="center">BIGINT</td><td align="center">8bytes</td><td align="center">(-9223372036854775808, 9223372036854775807)</td><td align="center">(0, 18446744073709551615)</td><td align="center">极大整数值</td></tr><tr><td align="center">FLOAT</td><td align="center">4bytes</td><td align="center">(-3.402823466E+38, 3.402823466351E+38)</td><td align="center">(1.175494351E-38, 3.402823466E+38)</td><td align="center">单精度浮点数值</td></tr><tr><td align="center">DOUBLE</td><td align="center">8bytes</td><td align="center">(-1.7976931348623157E+308, 1.7976931348623157E+308)</td><td align="center">(2.2251738585072014E-308, 1.7976931348623157E+308)</td><td align="center">双精度浮点数值</td></tr><tr><td align="center">DECIMAL</td><td align="center"></td><td align="center">依赖于M和D的值</td><td align="center">依赖于M和D的值</td><td align="center">小数值</td></tr></tbody></table><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><table><thead><tr><th align="center">类型</th><th align="center">大小</th><th align="center">用途</th></tr></thead><tbody><tr><td align="center">CHAR</td><td align="center">0-255bytes</td><td align="center">定长字符串</td></tr><tr><td align="center">VARCHAR</td><td align="center">0-65535bytes</td><td align="center">变长字符串</td></tr><tr><td align="center">TINYBLOB</td><td align="center">0-255bytes</td><td align="center">不超过255个字符的二进制字符串</td></tr><tr><td align="center">TINYTEXT</td><td align="center">0-255bytes</td><td align="center">短文本字符串</td></tr><tr><td align="center">BLOB</td><td align="center">0-65535bytes</td><td align="center">二进制形式的长文本数据</td></tr><tr><td align="center">TEXT</td><td align="center">0-65535bytes</td><td align="center">长文本数据</td></tr><tr><td align="center">MEDIUMBLOB</td><td align="center">0-16777215bytes</td><td align="center">二进制形式的中等长度文本数据</td></tr><tr><td align="center">MEDIUMTEXT</td><td align="center">0-16777215bytes</td><td align="center">中等长度文本数据</td></tr><tr><td align="center">LONGBLOB</td><td align="center">0-4294967295bytes</td><td align="center">二进制形式的极大文本数据</td></tr><tr><td align="center">LONGTEXT</td><td align="center">0-4294967295bytes</td><td align="center">极大文本数据</td></tr></tbody></table><h3 id="日期类型"><a href="#日期类型" class="headerlink" title="日期类型"></a>日期类型</h3><table><thead><tr><th align="center">类型</th><th align="center">大小(bytes)</th><th align="center">范围</th><th align="center">格式</th><th align="center">用途</th></tr></thead><tbody><tr><td align="center">DATE</td><td align="center">3</td><td align="center">1000-01-01/9999-12-31</td><td align="center">YYYY-MM-DD</td><td align="center">日期值</td></tr><tr><td align="center">TIME</td><td align="center">3</td><td align="center">‘-838:59:59’/‘838:59:59’</td><td align="center">HH:MM:SS</td><td align="center">时间值或持续时间</td></tr><tr><td align="center">YEAR</td><td align="center">1</td><td align="center">1901/2155</td><td align="center">YYYY</td><td align="center">年份值</td></tr><tr><td align="center">DATETIME</td><td align="center">8</td><td align="center">1000-01-01 00:00:00/9999-12-31 23:59:59</td><td align="center">YYYY-MM-DD HH:MM:SS</td><td align="center">混合日期和时间值</td></tr><tr><td align="center">TIMESTAMP</td><td align="center">4</td><td align="center">1970-01-01 00:00:00/2038</td><td align="center">YYYYMMDD HHMMSS</td><td align="center">混合日期和时间值，时间戳</td></tr></tbody></table><h2 id="对表结构的常用操作"><a href="#对表结构的常用操作" class="headerlink" title="对表结构的常用操作"></a>对表结构的常用操作</h2><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [ IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> ] 表名 (</span><br><span class="line">字段名 <span class="number">1</span> 类型 [(宽度)] [约束条件] [ COMMENT <span class="string">&#x27;字段说明&#x27;</span> ],</span><br><span class="line">字段名 <span class="number">2</span> 类型 [(宽度)] [约束条件] [ COMMENT <span class="string">&#x27;字段说明&#x27;</span> ],</span><br><span class="line">字段名 <span class="number">3</span> 类型 [(宽度)] [约束条件] [ COMMENT <span class="string">&#x27;字段说明&#x27;</span> ] </span><br><span class="line">)[ COMMENT 表注释 ];</span><br></pre></td></tr></table></figure><p>创建表是构建一张空表，指定这个表的名字，这个表有几列，每一列叫什么名字，以及每一列存储的数据类型。</p><p>例：在数据库<code>mydb</code>中创建一个学生信息表<code>student</code>，存储学生的基本信息。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span></span><br><span class="line">IF</span><br><span class="line"><span class="keyword">NOT</span> <span class="keyword">EXISTS</span> student (</span><br><span class="line">name <span class="type">VARCHAR</span> ( <span class="number">20</span> ),</span><br><span class="line">age <span class="type">INT</span> ( <span class="number">20</span> ),</span><br><span class="line">birth <span class="type">date</span>,</span><br><span class="line">id <span class="type">VARCHAR</span> ( <span class="number">20</span> ),</span><br><span class="line">address <span class="type">VARCHAR</span> ( <span class="number">20</span> ),</span><br><span class="line">sex <span class="type">VARCHAR</span> ( <span class="number">20</span> ) </span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E5%88%9B%E5%BB%BA%E8%A1%A8.jpg" alt="创建表"></p><h3 id="查看表"><a href="#查看表" class="headerlink" title="查看表"></a>查看表</h3><p>查看当前数据库的所有表名称。</p><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> TABLES;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E6%9F%A5%E7%9C%8B%E8%A1%A8.jpg" alt="查看表"></p><h3 id="查看创建语句"><a href="#查看创建语句" class="headerlink" title="查看创建语句"></a>查看创建语句</h3><p>查看指定表的创建语句。</p><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名;</span><br></pre></td></tr></table></figure><p>例：查看表<code>student</code>的创建语句。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student;</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `student` (</span><br><span class="line">  `name` varchar(20) DEFAULT NULL,</span><br><span class="line">  `age` int DEFAULT NULL,</span><br><span class="line">  `birth` date DEFAULT NULL,</span><br><span class="line">  `id` varchar(20) DEFAULT NULL,</span><br><span class="line">  `address` varchar(20) DEFAULT NULL,</span><br><span class="line">  `sex` varchar(20) DEFAULT NULL</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3</span><br></pre></td></tr></table></figure><h3 id="查看表结构"><a href="#查看表结构" class="headerlink" title="查看表结构"></a>查看表结构</h3><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DESC</span> 表名;</span><br></pre></td></tr></table></figure><p>例：查看表<code>student</code>的结构。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DESC</span> student;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E6%9F%A5%E7%9C%8B%E8%A1%A8%E7%BB%93%E6%9E%84.jpg" alt="查看表结构"></p><h3 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h3><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> 表名;</span><br></pre></td></tr></table></figure><p>例：删除表<code>student</code>的结构。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> student;</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE student</span><br><span class="line">&gt; OK</span><br><span class="line">&gt; 时间: 0.016s</span><br></pre></td></tr></table></figure><h3 id="修改表结构"><a href="#修改表结构" class="headerlink" title="修改表结构"></a>修改表结构</h3><h4 id="添加列"><a href="#添加列" class="headerlink" title="添加列"></a>添加列</h4><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> 字段名 类型 (长度) [ COMMENT 注释 ] [约束];</span><br></pre></td></tr></table></figure><p>例：为<code>student</code>表添加一个新列<code>class</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student <span class="keyword">ADD</span> class <span class="type">VARCHAR</span> ( <span class="number">20</span> );</span><br><span class="line"><span class="keyword">DESC</span> student;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E6%B7%BB%E5%8A%A0%E5%88%97.jpg" alt="添加列"></p><h4 id="修改数据类型"><a href="#修改数据类型" class="headerlink" title="修改数据类型"></a>修改数据类型</h4><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 MODIFY 字段名 新数据类型 (长度);</span><br></pre></td></tr></table></figure><p>例：将<code>student</code>表中的<code>id</code>的数据类型修改为<code>INT</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student MODIFY id <span class="type">INT</span>;</span><br><span class="line"><span class="keyword">DESC</span> student;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E4%BF%AE%E6%94%B9%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.jpg" alt="修改数据类型"></p><h4 id="修改字段名和字段类型"><a href="#修改字段名和字段类型" class="headerlink" title="修改字段名和字段类型"></a>修改字段名和字段类型</h4><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 CHANGE 旧字段名 新字段名 类型 (长度) [ COMMENT 注释 ] [约束];</span><br></pre></td></tr></table></figure><p>例：将<code>student</code>表中的<code>class</code>修改成<code>score</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student CHANGE class score <span class="keyword">DOUBLE</span>;</span><br><span class="line"><span class="keyword">DESC</span> student;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E4%BF%AE%E6%94%B9%E5%88%97.jpg" alt="修改列"></p><h4 id="删除列"><a href="#删除列" class="headerlink" title="删除列"></a>删除列</h4><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> 列名;</span><br></pre></td></tr></table></figure><p>例：删除<code>student</code>表中的<code>score</code>列。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student <span class="keyword">DROP</span> score;</span><br><span class="line"><span class="keyword">DESC</span> student;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E5%88%A0%E9%99%A4%E5%88%97.jpg" alt="删除列"></p><h4 id="修改表名"><a href="#修改表名" class="headerlink" title="修改表名"></a>修改表名</h4><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RENAME <span class="keyword">TABLE</span> 表名 <span class="keyword">TO</span> 新表名</span><br></pre></td></tr></table></figure><p>例：将<code>student</code>表名改为<code>stu</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line">RENAME <span class="keyword">TABLE</span> student <span class="keyword">TO</span> stu;</span><br><span class="line"><span class="keyword">SHOW</span> TABLES;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E4%BF%AE%E6%94%B9%E8%A1%A8%E5%90%8D.jpg" alt="修改表名"></p><h1 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h1><h2 id="DML解释"><a href="#DML解释" class="headerlink" title="DML解释"></a>DML解释</h2><p><code>DML</code>是指数据操作语言，英文全称是<code>Data Manipulation Language</code>，用来对数据库中表的数据记录进行更新。</p><p>关键字：</p><ul><li>插入<code>INSERT</code></li><li>删除<code>DELETE</code></li><li>更新<code>UPDATE</code></li></ul><h2 id="数据插入"><a href="#数据插入" class="headerlink" title="数据插入"></a>数据插入</h2><p>注意点：</p><ul><li>插入数据时，指定的字段顺序需要与值的顺序是一一对应的。</li><li>字符串和日期型数据应该包含在引号中。</li><li>插入的数据大小，应该在字段的规定范围内。</li></ul><h3 id="给指定字段添加数据"><a href="#给指定字段添加数据" class="headerlink" title="给指定字段添加数据"></a>给指定字段添加数据</h3><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 (字段名 <span class="number">1</span>, 字段名 <span class="number">2</span>,...)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(值 <span class="number">1</span>, 值 <span class="number">2</span>,...);</span><br></pre></td></tr></table></figure><p>例：向表<code>stu</code>中添加一条信息。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> stu ( name, age, birth, id, address, sex )</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">( <span class="string">&#x27;Bigglesworth&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;2002-09-05&#x27;</span>, <span class="string">&#x27;203428040119&#x27;</span>, <span class="string">&#x27;大连&#x27;</span>, <span class="string">&#x27;男&#x27;</span> );</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E6%B7%BB%E5%8A%A0%E6%95%B0%E6%8D%AE.jpg" alt="指定字段添加数据"></p><h3 id="给全部字段添加数据"><a href="#给全部字段添加数据" class="headerlink" title="给全部字段添加数据"></a>给全部字段添加数据</h3><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(值 <span class="number">1</span>, 值 <span class="number">2</span>,...);</span><br></pre></td></tr></table></figure><p>例：向表<code>stu</code>中添加一条信息。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> stu</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">( <span class="string">&#x27;Bigglesworth&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;2002-09-05&#x27;</span>, <span class="string">&#x27;203428040119&#x27;</span>, <span class="string">&#x27;大连&#x27;</span>, <span class="string">&#x27;男&#x27;</span> );</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E6%B7%BB%E5%8A%A0%E6%95%B0%E6%8D%AE.jpg" alt="全部字段添加数据"></p><h3 id="批量添加数据"><a href="#批量添加数据" class="headerlink" title="批量添加数据"></a>批量添加数据</h3><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 (字段名 <span class="number">1</span>, 字段名 <span class="number">2</span>,...)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(值 <span class="number">1</span>, 值 <span class="number">2</span>,...),</span><br><span class="line">(值 <span class="number">1</span>, 值 <span class="number">2</span>,...),</span><br><span class="line">(值 <span class="number">1</span>, 值 <span class="number">2</span>,...);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(值 <span class="number">1</span>, 值 <span class="number">2</span>,...),</span><br><span class="line">(值 <span class="number">1</span>, 值 <span class="number">2</span>,...),</span><br><span class="line">(值 <span class="number">1</span>, 值 <span class="number">2</span>,...);</span><br></pre></td></tr></table></figure><p>例：向<code>stu</code>表添加多条数据。</p><p>例：向表<code>stu</code>中添加一条信息。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> stu</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">( <span class="string">&#x27;Bigglesworth&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;2002-09-05&#x27;</span>, <span class="string">&#x27;203428040119&#x27;</span>, <span class="string">&#x27;大连&#x27;</span>, <span class="string">&#x27;男&#x27;</span> ),</span><br><span class="line">( <span class="string">&#x27;Areskey&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;2004-01-23&#x27;</span>, <span class="string">&#x27;213428010102&#x27;</span>, <span class="string">&#x27;朝阳&#x27;</span>, <span class="string">&#x27;女&#x27;</span> );</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E6%89%B9%E9%87%8F%E6%B7%BB%E5%8A%A0%E6%95%B0%E6%8D%AE.jpg" alt="批量添加数据"></p><h2 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h2><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> 表名 </span><br><span class="line"><span class="keyword">SET</span> 字段名 <span class="operator">=</span> 值 <span class="number">1</span>,字段名 <span class="operator">=</span> 值 <span class="number">2</span>,...[ <span class="keyword">WHERE</span> 条件 ];</span><br></pre></td></tr></table></figure><p>注：修改语句的条件可以有，也可以没有，如果没有条件，则会修改整张表的所有数据。</p><p>例：将<code>stu</code>表中<code>id</code>为<code>203428040119</code>的人的姓名更改为<code>比格沃斯</code>，住址更改为<code>旅顺</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">UPDATE</span> stu </span><br><span class="line"><span class="keyword">SET</span> name <span class="operator">=</span> <span class="string">&#x27;比格沃斯&#x27;</span>,</span><br><span class="line">address <span class="operator">=</span> <span class="string">&#x27;旅顺&#x27;</span> </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">id <span class="operator">=</span> <span class="string">&#x27;203428040119&#x27;</span>;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E6%9B%B4%E6%96%B0%E8%A1%A8.jpg" alt="更新表"></p><p>例：将<code>stu</code>表中所有人的<code>age</code>改为<code>19</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">UPDATE</span> stu </span><br><span class="line"><span class="keyword">SET</span> age <span class="operator">=</span> <span class="number">19</span>;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E6%9B%B4%E6%96%B0%E8%A1%A8%E4%B8%AD%E6%89%80%E6%9C%89%E6%95%B0%E6%8D%AE.jpg" alt="更新表中所有数据"></p><h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">表名 [ <span class="keyword">WHERE</span> 条件 ];</span><br></pre></td></tr></table></figure><p>注：<code>DELETE</code>语句的条件可以有，也可以没有，如果没有条件，则会删除整张表的所有数据。<code>DELETE</code>语句不能删除某一个字段的值（可以使用<code>UPDATE</code>）。</p><p>例：将<code>stu</code>表中<code>id</code>为<code>203428040119</code>的人删除。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">DELETE</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">stu </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">id <span class="operator">=</span> <span class="string">&#x27;203428040119&#x27;</span>;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE.jpg" alt="删除数据"></p><p>例：将<code>stu</code>表中的所有数据删除。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">DELETE</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">stu;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E5%88%A0%E9%99%A4%E6%89%80%E6%9C%89%E6%95%B0%E6%8D%AE.jpg" alt="删除所有数据"></p><h1 id="DQL"><a href="#DQL" class="headerlink" title="DQL"></a>DQL</h1><h2 id="DQL解释"><a href="#DQL解释" class="headerlink" title="DQL解释"></a>DQL解释</h2><p><code>DQL</code>英文全称是<code>Data Query Language</code>（数据查询语言），数据查询语言，用来查询数据库中表的记录。</p><p>关键字：</p><ul><li>查询：<code>SELECT</code></li></ul><h2 id="基本查询"><a href="#基本查询" class="headerlink" title="基本查询"></a>基本查询</h2><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">字段列表 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">表名列表 </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">条件列表 </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">分组字段列表 </span><br><span class="line"><span class="keyword">HAVING</span></span><br><span class="line">分组后条件列表 </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">排序字段列表 </span><br><span class="line">LIMIT 分页参数</span><br></pre></td></tr></table></figure><p>首先需要准备一个表用于接下来的数据查询，这里创建了一个员工表<code>emp</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span></span><br><span class="line">IF</span><br><span class="line"><span class="keyword">NOT</span> <span class="keyword">EXISTS</span> emp (</span><br><span class="line">id <span class="type">INT</span> COMMENT <span class="string">&#x27;编号&#x27;</span>,</span><br><span class="line">workno <span class="type">VARCHAR</span> ( <span class="number">20</span> ) COMMENT <span class="string">&#x27;工号&#x27;</span>,</span><br><span class="line">name <span class="type">VARCHAR</span> ( <span class="number">20</span> ) COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">gender <span class="type">VARCHAR</span> ( <span class="number">1</span> ) COMMENT <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">age <span class="type">INT</span> COMMENT <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">address <span class="type">VARCHAR</span> ( <span class="number">20</span> ) COMMENT <span class="string">&#x27;工作地址&#x27;</span>,</span><br><span class="line">entrydate <span class="type">date</span> COMMENT <span class="string">&#x27;入职时间&#x27;</span> </span><br><span class="line">) COMMENT <span class="string">&#x27;员工表&#x27;</span>;</span><br></pre></td></tr></table></figure><p>向该表中导入数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp ( id, workno, name, gender, age, address, entrydate )</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">( <span class="number">1</span>, <span class="string">&#x27;001&#x27;</span>, <span class="string">&#x27;比格沃斯&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;2000-01-01&#x27;</span> ),</span><br><span class="line">( <span class="number">2</span>, <span class="string">&#x27;002&#x27;</span>, <span class="string">&#x27;阿瑞斯&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;2005-09-01&#x27;</span> ),</span><br><span class="line">( <span class="number">3</span>, <span class="string">&#x27;003&#x27;</span>, <span class="string">&#x27;Bigglesworth&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">38</span>, <span class="string">&#x27;上海&#x27;</span>, <span class="string">&#x27;2005-08-01&#x27;</span> ),</span><br><span class="line">( <span class="number">4</span>, <span class="string">&#x27;004&#x27;</span>, <span class="string">&#x27;Areskey&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;2008-12-01&#x27;</span> ),</span><br><span class="line">( <span class="number">5</span>, <span class="string">&#x27;005&#x27;</span>, <span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">16</span>, <span class="string">&#x27;上海&#x27;</span>, <span class="string">&#x27;2007-07-01&#x27;</span> ),</span><br><span class="line">( <span class="number">6</span>, <span class="string">&#x27;006&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">28</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;2006-01-01&#x27;</span> ),</span><br><span class="line">( <span class="number">7</span>, <span class="string">&#x27;007&#x27;</span>, <span class="string">&#x27;王五&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">40</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;2005-05-01&#x27;</span> ),</span><br><span class="line">( <span class="number">8</span>, <span class="string">&#x27;008&#x27;</span>, <span class="string">&#x27;赵六&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">38</span>, <span class="string">&#x27;天津&#x27;</span>, <span class="string">&#x27;2015-05-01&#x27;</span> ),</span><br><span class="line">( <span class="number">9</span>, <span class="string">&#x27;009&#x27;</span>, <span class="string">&#x27;钱七&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">45</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;2010-04-01&#x27;</span> ),</span><br><span class="line">( <span class="number">10</span>, <span class="string">&#x27;010&#x27;</span>, <span class="string">&#x27;孙八&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">53</span>, <span class="string">&#x27;上海&#x27;</span>, <span class="string">&#x27;2011-01-01&#x27;</span> ),</span><br><span class="line">( <span class="number">11</span>, <span class="string">&#x27;011&#x27;</span>, <span class="string">&#x27;周九&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">55</span>, <span class="string">&#x27;江苏&#x27;</span>, <span class="string">&#x27;2015-05-01&#x27;</span> ),</span><br><span class="line">( <span class="number">12</span>, <span class="string">&#x27;012&#x27;</span>, <span class="string">&#x27;王十&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">32</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;2004-02-01&#x27;</span> ),</span><br><span class="line">( <span class="number">13</span>, <span class="string">&#x27;013&#x27;</span>, <span class="string">&#x27;陈一&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">88</span>, <span class="string">&#x27;江苏&#x27;</span>, <span class="string">&#x27;2020-11-01&#x27;</span> ),</span><br><span class="line">( <span class="number">14</span>, <span class="string">&#x27;014&#x27;</span>, <span class="string">&#x27;楚二&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">65</span>, <span class="string">&#x27;西安&#x27;</span>, <span class="string">&#x27;2019-05-01&#x27;</span> ),</span><br><span class="line">( <span class="number">15</span>, <span class="string">&#x27;015&#x27;</span>, <span class="string">&#x27;何零&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">70</span>, <span class="string">&#x27;西安&#x27;</span>, <span class="string">&#x27;2018-04-01&#x27;</span> ),</span><br><span class="line">( <span class="number">16</span>, <span class="string">&#x27;016&#x27;</span>, <span class="string">&#x27;伍六七&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="keyword">NULL</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;2012-06-01&#x27;</span> );</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%87%86%E5%A4%87.jpg" alt="数据准备"></p><h3 id="查询多个字段"><a href="#查询多个字段" class="headerlink" title="查询多个字段"></a>查询多个字段</h3><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">字段 <span class="number">1</span>,</span><br><span class="line">字段 <span class="number">2</span>,</span><br><span class="line">字段 <span class="number">3.</span>..</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">表名;</span><br></pre></td></tr></table></figure><p>例：查询<code>emp</code>表中的字段<code>name</code>，<code>workno</code>，<code>age</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">name,</span><br><span class="line">workno,</span><br><span class="line">age </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">emp;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E6%9F%A5%E8%AF%A2%E5%A4%9A%E4%B8%AA%E5%AD%97%E6%AE%B5.jpg" alt="查询多个字段"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">表名;</span><br></pre></td></tr></table></figure><p>例：查询<code>emp</code>表中的所有字段。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">emp;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E6%9F%A5%E8%AF%A2%E6%89%80%E6%9C%89%E5%AD%97%E6%AE%B5.jpg" alt="查询所有字段"></p><h3 id="设置别名"><a href="#设置别名" class="headerlink" title="设置别名"></a>设置别名</h3><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">字段 <span class="number">1</span> [ <span class="keyword">AS</span> 别名 <span class="number">1</span> ],</span><br><span class="line">字段 <span class="number">2</span> [ <span class="keyword">AS</span> 别名 <span class="number">2</span> ]...</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">表名;</span><br></pre></td></tr></table></figure><p>注：<code>AS</code>可以省略。</p><p>例：查询<code>emp</code>表中的<code>address</code>并取名为<code>工作地址</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">address <span class="keyword">AS</span> <span class="string">&#x27;工作地址&#x27;</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">emp;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E8%AE%BE%E7%BD%AE%E5%88%AB%E5%90%8D.jpg" alt="设置别名"></p><h3 id="去除重复记录"><a href="#去除重复记录" class="headerlink" title="去除重复记录"></a>去除重复记录</h3><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span></span><br><span class="line">字段列表 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">表名;</span><br></pre></td></tr></table></figure><p>例：查询<code>emp</code>表中的<code>address</code>并取名为<code>工作地址</code>，并去除重复。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span></span><br><span class="line">address <span class="keyword">AS</span> <span class="string">&#x27;工作地址&#x27;</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">emp;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E5%8E%BB%E9%99%A4%E9%87%8D%E5%A4%8D%E8%AE%B0%E5%BD%95.jpg" alt="去除重复记录"></p><h2 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h2><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><table><thead><tr><th align="center">比较运算符</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">&gt;</td><td align="center">大于</td></tr><tr><td align="center">&gt;=</td><td align="center">大于等于</td></tr><tr><td align="center">&lt;</td><td align="center">小于</td></tr><tr><td align="center">&lt;=</td><td align="center">小于等于</td></tr><tr><td align="center">=</td><td align="center">等于</td></tr><tr><td align="center">&lt;&gt;或!=</td><td align="center">不等于</td></tr><tr><td align="center">BETWEEN … AND …</td><td align="center">在某个范围之内（含最小、最大值）</td></tr><tr><td align="center">IN(…)</td><td align="center">在in之后的列表中的值，多选一</td></tr><tr><td align="center">LIKE 占位符</td><td align="center">模糊匹配（_匹配单个字符，%匹配任意字符）</td></tr><tr><td align="center">IS NULL</td><td align="center">是NULL</td></tr></tbody></table><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><table><thead><tr><th align="center">逻辑运算符</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">AND 或 &amp;&amp;</td><td align="center">并且（多个条件同时成立）</td></tr><tr><td align="center">OR 或 ||</td><td align="center">或者（多个条件任意一个成立）</td></tr><tr><td align="center">NOT 或 !</td><td align="center">非，不是</td></tr></tbody></table><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">字段列表 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">表名 </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">条件列表;</span><br></pre></td></tr></table></figure><p>例：查询<code>emp</code>表中所有年龄大于等于<code>20</code>且小于<code>30</code>的员工。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">emp </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">age <span class="operator">&gt;=</span> <span class="number">20</span> <span class="keyword">AND</span> age <span class="operator">&lt;</span> <span class="number">30</span>;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E6%9F%A5%E8%AF%A2%E5%91%98%E5%B7%A5%E5%B9%B4%E9%BE%84.jpg" alt="查询员工年龄"></p><p>例：查询<code>emp</code>表中所有年龄为<code>NULL</code>的员工。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">emp </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">age <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E6%9F%A5%E8%AF%A2%E5%B9%B4%E9%BE%84%E7%A9%BA%E5%80%BC.jpg" alt="查询年龄空值"></p><p>例：查询<code>emp</code>表中年龄等于<code>18</code>或<code>20</code>或<code>40</code>的员工信息。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">emp </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">age <span class="keyword">IN</span> ( <span class="number">18</span>, <span class="number">20</span>, <span class="number">40</span> );</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E6%9F%A5%E8%AF%A2%E5%A4%9A%E4%B8%AA%E5%B9%B4%E9%BE%84.jpg" alt="查询多个年龄"></p><p>例：查询<code>emp</code>表中姓名为两个字的员工信息。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">emp </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">NAME <span class="keyword">LIKE</span> <span class="string">&#x27;__&#x27;</span>;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E6%9F%A5%E8%AF%A2%E4%B8%A4%E4%B8%AA%E5%AD%97%E7%9A%84%E5%91%98%E5%B7%A5.jpg" alt="查询两个字的员工"></p><h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>将一列数据作为一个整体，进行纵向计算。</p><h3 id="常见聚合函数"><a href="#常见聚合函数" class="headerlink" title="常见聚合函数"></a>常见聚合函数</h3><table><thead><tr><th align="center">函数</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">count</td><td align="center">统计数量</td></tr><tr><td align="center">max</td><td align="center">最大值</td></tr><tr><td align="center">min</td><td align="center">最小值</td></tr><tr><td align="center">avg</td><td align="center">平均值</td></tr><tr><td align="center">sum</td><td align="center">求和</td></tr></tbody></table><h3 id="聚合函数的使用"><a href="#聚合函数的使用" class="headerlink" title="聚合函数的使用"></a>聚合函数的使用</h3><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">聚合函数 (字段列表) </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">表名;</span><br></pre></td></tr></table></figure><p>注意点：<code>NULL</code>值不参与所有聚合函数运算。</p><h3 id="count函数"><a href="#count函数" class="headerlink" title="count函数"></a>count函数</h3><p>例：统计该企业员工数量。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="built_in">count</span>(<span class="operator">*</span>) </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">emp;</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">16</span><br></pre></td></tr></table></figure><p>例：统计该企业拥有年龄的员工数量。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="built_in">count</span>( age ) </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">emp;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">15</span><br></pre></td></tr></table></figure><h3 id="avg函数"><a href="#avg函数" class="headerlink" title="avg函数"></a>avg函数</h3><p>例：统计该企业员工的平均年龄。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="built_in">avg</span>(<span class="operator">*</span>) </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">emp;</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">41.6000</span><br></pre></td></tr></table></figure><h3 id="max函数"><a href="#max函数" class="headerlink" title="max函数"></a>max函数</h3><p>例：统计该企业员工的最大年龄。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="built_in">max</span>( age ) </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">emp;</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">88</span><br></pre></td></tr></table></figure><h3 id="min函数"><a href="#min函数" class="headerlink" title="min函数"></a>min函数</h3><p>例：统计该企业员工的最大年龄。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="built_in">min</span>( age ) </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">emp;</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">16</span><br></pre></td></tr></table></figure><h3 id="sum函数"><a href="#sum函数" class="headerlink" title="sum函数"></a>sum函数</h3><p>例：统计该企业<code>西安</code>地区员工的最大年龄之和。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="built_in">sum</span>( age ) </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">emp </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">address <span class="operator">=</span> <span class="string">&#x27;西安&#x27;</span></span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">135</span><br></pre></td></tr></table></figure><h2 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h2><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">字段列表 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">表名 [ <span class="keyword">WHERE</span> 条件 ] </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">分组字段名 [ <span class="keyword">HAVING</span> 分组过滤条件 ];</span><br></pre></td></tr></table></figure><p><code>WHERE</code>与<code>HAVING</code>的区别：</p><ul><li>执行时机不同：<code>WHERE</code>是分组之前进行过滤，不满足<code>WHERE</code>条件，不参与分组；而<code>HAVING</code>是分组之后对结果进行过滤。</li><li>判断条件不同：<code>WHERE</code>不能对聚合函数进行判断，而<code>HAVING</code>可以。</li></ul><p>例：根据性别分组，统计男性员工和女性员工的数量。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">gender,</span><br><span class="line"><span class="built_in">count</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">emp </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">gender;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E6%80%A7%E5%88%AB%E5%88%86%E7%BB%84%E6%9F%A5%E8%AF%A2.jpg" alt="性别分组查询"></p><p>例：查询年龄小于<code>45</code>岁的员工，并根据工作地址分组，获取员工数量大于等于<code>3</code>的工作地址。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">address,</span><br><span class="line"><span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">AS</span> address_count </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">emp </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">age <span class="operator">&lt;</span> <span class="number">45</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> address <span class="keyword">HAVING</span> address_count <span class="operator">&gt;=</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E6%9F%A5%E8%AF%A2%E5%8C%BA%E5%9F%9F%E5%91%98%E5%B7%A5%E6%95%B0%E9%87%8F.jpg" alt="查询区域员工数量"></p><p>注意点：</p><ul><li>执行顺序：<code>WHERE</code> &gt; <code>聚合函数</code> &gt; <code>HAVING</code>。</li><li>分组之后，查询的字段一般为聚合函数的分组字段，查询其他字段。</li></ul><h2 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h2><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">字段列表 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">表名 </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">字段 <span class="number">1</span> 排序方式 <span class="number">1</span>,</span><br><span class="line">字段 <span class="number">2</span> 排序方式 <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>排序方式：</p><ul><li><code>ASC</code>：升序（默认值）</li><li><code>DESC</code>：降序</li></ul><p>注：如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序。</p><p>例：根据年龄对公司的员工进行升序排序，年龄相同，再按照入职时间进行降序排序。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">emp </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">age <span class="keyword">ASC</span>,</span><br><span class="line">entrydate <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E6%8E%92%E5%BA%8F%E6%9F%A5%E8%AF%A2.jpg" alt="排序查询"></p><h2 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h2><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">字段列表 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">表名 </span><br><span class="line">LIMIT 起始索引,查询记录数;</span><br></pre></td></tr></table></figure><p>注意点：</p><ul><li>其实索引从<code>0</code>开始，起始索引 = （查询页码 - 1） * 每页显示记录数。</li><li>分页查询是数据库的方言，不同的数据库有不同的实现，<code>MySQL</code>中是<code>LIMIT</code>。</li><li>如果查询的是第一页数据，起始索引可以省略，直接简写为<code>LIMIT 10</code>。</li></ul><p>例：查询第<code>2</code>页员工数据，每页展示`15条数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">emp </span><br><span class="line">LIMIT <span class="number">10</span>, <span class="number">5</span>;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2.jpg" alt="分页查询"></p><h2 id="DQL执行顺序"><a href="#DQL执行顺序" class="headerlink" title="DQL执行顺序"></a>DQL执行顺序</h2><p>编写顺序：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">字段列表 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">表名列表 </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">条件列表 </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">分组字段列表 </span><br><span class="line"><span class="keyword">HAVING</span></span><br><span class="line">分组后条件列表 </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">排序字段列表 </span><br><span class="line">LIMIT 分页参数</span><br></pre></td></tr></table></figure><p>执行顺序：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span></span><br><span class="line">表名列表 </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">条件列表 </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">分组字段列表 </span><br><span class="line"><span class="keyword">HAVING</span></span><br><span class="line">分组后条件列表 </span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">字段列表 </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">排序字段列表 </span><br><span class="line">LIMIT 分页参数</span><br></pre></td></tr></table></figure><h1 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h1><h2 id="DCL解释"><a href="#DCL解释" class="headerlink" title="DCL解释"></a>DCL解释</h2><p><code>DCL</code>英文全称是<code>Data Control Language</code>（数据控制语言），用来管理数据库用户、控制数据库用户、控制数据库的访问权限。</p><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><h3 id="查询用户"><a href="#查询用户" class="headerlink" title="查询用户"></a>查询用户</h3><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">USE mysql;</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line"><span class="keyword">USER</span>;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E6%9F%A5%E8%AF%A2%E7%94%A8%E6%88%B7.jpg" alt="查询用户"></p><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;用户名&#x27;</span> @<span class="string">&#x27;主机名&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;密码&#x27;</span>;</span><br></pre></td></tr></table></figure><p>例：创建用户<code>Bigglesworth</code>，只能够在当前主机<code>localhost</code>访问，密码为<code>123456</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">USE mysql;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;Bigglesworth&#x27;</span> @<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line"><span class="keyword">USER</span>;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7.jpg" alt="创建用户"></p><p>例：创建用户<code>Areskey</code>，只能够在任意主机访问，密码为<code>123456</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">USE mysql;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;Areskey&#x27;</span> @<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line"><span class="keyword">USER</span>;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E5%88%9B%E5%BB%BA%E4%BB%BB%E6%84%8F%E4%B8%BB%E6%9C%BA%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90%E7%94%A8%E6%88%B7.jpg" alt="创建任意主机访问权限用户"></p><h3 id="修改用户密码"><a href="#修改用户密码" class="headerlink" title="修改用户密码"></a>修改用户密码</h3><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;用户名&#x27;</span> @<span class="string">&#x27;主机名&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;新密码&#x27;</span>;</span><br></pre></td></tr></table></figure><p>例：将用户<code>Bigglesworth</code>的密码修改为<code>1234</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">USE mysql;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;Bigglesworth&#x27;</span> @<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;1234&#x27;</span>;</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER &#x27;Bigglesworth&#x27; @&#x27;localhost&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;1234&#x27;</span><br><span class="line">&gt; OK</span><br><span class="line">&gt; 时间: 0.008s</span><br></pre></td></tr></table></figure><h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="string">&#x27;用户名&#x27;</span> @<span class="string">&#x27;主机名&#x27;</span>;</span><br></pre></td></tr></table></figure><p>例：删除<code>Bigglesworth</code>和<code>Areskey</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">USE mysql;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="string">&#x27;Bigglesworth&#x27;</span> @<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="string">&#x27;Areskey&#x27;</span> @<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line"><span class="keyword">USER</span>;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E6%9F%A5%E8%AF%A2%E7%94%A8%E6%88%B7.jpg" alt="删除用户"></p><h2 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h2><h3 id="查询权限"><a href="#查询权限" class="headerlink" title="查询权限"></a>查询权限</h3><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> <span class="string">&#x27;用户名&#x27;</span> @<span class="string">&#x27;主机名&#x27;</span>;</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> USAGE <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> `Areskey`@`<span class="operator">%</span>`</span><br></pre></td></tr></table></figure><h3 id="授予权限"><a href="#授予权限" class="headerlink" title="授予权限"></a>授予权限</h3><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> 权限列表 <span class="keyword">ON</span> 数据库名.表名 <span class="keyword">TO</span> <span class="string">&#x27;用户名&#x27;</span> @<span class="string">&#x27;主机名&#x27;</span>;</span><br></pre></td></tr></table></figure><p>例：给用户<code>Areskey</code>增加<code>mydb</code>数据库的所有权限。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">USE mysql;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> mydb.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;Areskey&#x27;</span> @<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> <span class="string">&#x27;Areskey&#x27;</span> @<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GRANT USAGE ON *.* TO `Areskey`@`%`</span><br><span class="line">GRANT ALL PRIVILEGES ON `mydb`.* TO `Areskey`@`%`</span><br></pre></td></tr></table></figure><h3 id="撤销权限"><a href="#撤销权限" class="headerlink" title="撤销权限"></a>撤销权限</h3><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">REVOKE</span> 权限列表 <span class="keyword">ON</span> 数据库名.表名 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line"><span class="string">&#x27;用户名&#x27;</span> @<span class="string">&#x27;主机名&#x27;</span>;</span><br></pre></td></tr></table></figure><p>例：撤销用户<code>Areskey</code>对<code>mydb</code>的所有权限。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">USE mysql;</span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> mydb.<span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line"><span class="string">&#x27;Areskey&#x27;</span> @<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> <span class="string">&#x27;Areskey&#x27;</span> @<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRANT USAGE ON *.* TO `Areskey`@`%`</span><br></pre></td></tr></table></figure><p>注注意点：</p><ul><li>多个权限之间，使用逗号分隔。</li><li>授权时，数据库名和表名可以使用<code>*</code>进行通配，代表所有。</li></ul><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>是指一段可以直接被另一段程序调用的程序或代码。</p><h2 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h2><h3 id="常见字符串函数"><a href="#常见字符串函数" class="headerlink" title="常见字符串函数"></a>常见字符串函数</h3><table><thead><tr><th align="center">函数</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">CONCAT(S1,S2,…Sn)</td><td align="center">字符串拼接，将S1,S2,…Sn拼接成一个字符串</td></tr><tr><td align="center">LOWER(str)</td><td align="center">将字符串<code>str</code>全部转为小写</td></tr><tr><td align="center">UPPER(str)</td><td align="center">将字符串<code>str</code>全部转为大写</td></tr><tr><td align="center">LPAD(str,n,pad)</td><td align="center">左填充，用字符串<code>pad</code>对<code>str</code>的左边进行填充，达到<code>n</code>个字符串长度</td></tr><tr><td align="center">RPAD(str,n,pad)</td><td align="center">右填充，用字符串<code>pad</code>对<code>str</code>的右边进行填充，达到<code>n</code>个字符串长度</td></tr><tr><td align="center">TRIM(str)</td><td align="center">去掉字符串头部和尾部的空格</td></tr><tr><td align="center">SUBSTRING(str,start,len)</td><td align="center">返回字符串<code>str</code>从<code>start</code>位置起的<code>len</code>个长度的字符串</td></tr></tbody></table><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 函数(参数);</span><br></pre></td></tr></table></figure><h3 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h3><p>例：对<code>Hello</code>和<code>World!</code>进行字符串拼接。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> concat(<span class="string">&#x27;Hello &#x27;</span>, <span class="string">&#x27;World!&#x27;</span>);</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br></pre></td></tr></table></figure><h3 id="变换大写"><a href="#变换大写" class="headerlink" title="变换大写"></a>变换大写</h3><p>例：将<code>Hello World!</code>转换为全大写。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">upper</span>(<span class="string">&#x27;Hello World!&#x27;</span>);</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HELLO WORLD!</span><br></pre></td></tr></table></figure><h3 id="变换小写"><a href="#变换小写" class="headerlink" title="变换小写"></a>变换小写</h3><p>例：将<code>Hello World!</code>转换为全小写。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">lower</span>(<span class="string">&#x27;Hello World!&#x27;</span>);</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello world!</span><br></pre></td></tr></table></figure><h3 id="左填充"><a href="#左填充" class="headerlink" title="左填充"></a>左填充</h3><p>例：对<code>01</code>进行左填充，用<code>-</code>填充为<code>5</code>个字符。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> lpad( <span class="string">&#x27;01&#x27;</span>, <span class="number">5</span>, <span class="string">&#x27;-&#x27;</span> );</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">---01</span><br></pre></td></tr></table></figure><h3 id="右填充"><a href="#右填充" class="headerlink" title="右填充"></a>右填充</h3><p>例：将<code>Hello World!</code>转换为全大写。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> rpad( <span class="string">&#x27;01&#x27;</span>, <span class="number">5</span>, <span class="string">&#x27;-&#x27;</span> );</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">---01</span><br></pre></td></tr></table></figure><h3 id="去除两端空格"><a href="#去除两端空格" class="headerlink" title="去除两端空格"></a>去除两端空格</h3><p>例：将一个字符串两端的空格去除。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">trim</span>(<span class="string">&#x27;  Hello World!  &#x27;</span>);</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br></pre></td></tr></table></figure><h3 id="截取字符串"><a href="#截取字符串" class="headerlink" title="截取字符串"></a>截取字符串</h3><p>注：从<code>1</code>开始索引。</p><p>例：截取<code>Hello World!</code>的<code>World!</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">substring</span>( <span class="string">&#x27;Hello World!&#x27;</span>, <span class="number">7</span>, <span class="number">6</span> );</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">World!</span><br></pre></td></tr></table></figure><h2 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h2><h3 id="常见字符串函数-1"><a href="#常见字符串函数-1" class="headerlink" title="常见字符串函数"></a>常见字符串函数</h3><table><thead><tr><th align="center">函数</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">CEIL(x)</td><td align="center">向上取整</td></tr><tr><td align="center">FLOOR(x)</td><td align="center">向下取整</td></tr><tr><td align="center">MOD(x,y)</td><td align="center">返回<code>x/y</code>的模</td></tr><tr><td align="center">RAND()</td><td align="center">返回0~1内的随机数</td></tr><tr><td align="center">ROUND()</td><td align="center">求参数<code>x</code>的四舍五入值，保留<code>y</code>位小数</td></tr></tbody></table><h3 id="向上取整"><a href="#向上取整" class="headerlink" title="向上取整"></a>向上取整</h3><p>例：对<code>1.1</code>进行向上取整。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">ceil</span>( <span class="number">1.1</span> );</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><h3 id="向下取整"><a href="#向下取整" class="headerlink" title="向下取整"></a>向下取整</h3><p>例：对<code>1.9</code>进行向下取整。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">floor</span>( <span class="number">1.9</span> );</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><h3 id="取模"><a href="#取模" class="headerlink" title="取模"></a>取模</h3><p>例：求<code>5%3</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">mod</span>( <span class="number">5</span>, <span class="number">3</span> );</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><h3 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h3><p>例：获取一个随机数。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> rand();</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0.49200135422125585</span><br></pre></td></tr></table></figure><h3 id="四舍五入"><a href="#四舍五入" class="headerlink" title="四舍五入"></a>四舍五入</h3><p>例：对一个随机生成的随机数进行四舍五入，保留<code>3</code>位小数。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> round( rand(), <span class="number">3</span> );</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0.893</span><br></pre></td></tr></table></figure><h2 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h2><h3 id="常见字符串函数-2"><a href="#常见字符串函数-2" class="headerlink" title="常见字符串函数"></a>常见字符串函数</h3><table><thead><tr><th align="center">函数</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">CURDATE()</td><td align="center">返回当前日期</td></tr><tr><td align="center">CURTIME()</td><td align="center">返回当前时间</td></tr><tr><td align="center">NOW()</td><td align="center">返回当前日期</td></tr><tr><td align="center">YEAR(date)</td><td align="center">获取指定<code>date</code>的年份</td></tr><tr><td align="center">MONTH(date)</td><td align="center">获取指定<code>date</code>的月份</td></tr><tr><td align="center">DAY(date)</td><td align="center">获取指定<code>date</code>的日期</td></tr><tr><td align="center">DATE_ADD(date, INTERVAL expr type)</td><td align="center">返回一个日期/时间值加上一个时间间隔<code>expr</code>后的时间值</td></tr><tr><td align="center">DATEDIFF(date1, date2)</td><td align="center">返回起始时间<code>date1</code>和结束时间<code>date2</code>之间的天数</td></tr></tbody></table><h3 id="返回当前日期"><a href="#返回当前日期" class="headerlink" title="返回当前日期"></a>返回当前日期</h3><p>例：获取当前日期。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> curdate();</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2022-11-16</span><br></pre></td></tr></table></figure><h3 id="返回当前时间"><a href="#返回当前时间" class="headerlink" title="返回当前时间"></a>返回当前时间</h3><p>例：获取当前时间。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> curtime();</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">20:21:37</span><br></pre></td></tr></table></figure><h3 id="返回当前日期和时间"><a href="#返回当前日期和时间" class="headerlink" title="返回当前日期和时间"></a>返回当前日期和时间</h3><p>例：获取当前日期和时间。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> now();</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2022-11-16 20:23:53</span><br></pre></td></tr></table></figure><h3 id="分别返回当前日期"><a href="#分别返回当前日期" class="headerlink" title="分别返回当前日期"></a>分别返回当前日期</h3><p>例：分别获取当前年份，月份和日期。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">YEAR</span>(now()), <span class="keyword">MONTH</span>(now()), <span class="keyword">DAY</span>(now());</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E5%BD%93%E5%89%8D%E6%97%A5%E6%9C%9F.jpg" alt="当前日期"></p><h3 id="叠加日期"><a href="#叠加日期" class="headerlink" title="叠加日期"></a>叠加日期</h3><p>例：在当前的日期上增加<code>70</code>天。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> date_add( now(), <span class="type">INTERVAL</span> <span class="number">70</span> <span class="keyword">DAY</span> );</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2023-01-26 09:07:30</span><br></pre></td></tr></table></figure><h3 id="两个日期差值"><a href="#两个日期差值" class="headerlink" title="两个日期差值"></a>两个日期差值</h3><p>例：计算当前日期和<code>2002-09-05</code>相差的日期。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> datediff ( now(), <span class="string">&#x27;2002-09-05&#x27;</span> );</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7378</span><br></pre></td></tr></table></figure><h2 id="流程函数"><a href="#流程函数" class="headerlink" title="流程函数"></a>流程函数</h2><h3 id="常见流程函数"><a href="#常见流程函数" class="headerlink" title="常见流程函数"></a>常见流程函数</h3><table><thead><tr><th align="center">函数</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">IF(value, t, f)</td><td align="center">如果<code>value</code>为<code>true</code>，则返回<code>t</code>，否则返回<code>f</code></td></tr><tr><td align="center">IFNULL(value1, value2)</td><td align="center">如果<code>value1</code>不为空，返回<code>value1</code>，否则返回<code>value2</code></td></tr><tr><td align="center">CASE WHEN [ val1 ] THEN [ res1 ] … ELSE [ default ] END</td><td align="center">如果<code>value1</code>为<code>true</code>，返回<code>res1</code>， …否则返回<code>default</code>默认值</td></tr><tr><td align="center">CASE [ expr ] WHEN [ val1 ] THEN [ res1 ] … ELSE [ default ] END</td><td align="center">如果<code>expr</code>的值等于<code>val1</code>， …否则返回<code>default</code>默认值</td></tr></tbody></table><h1 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ol><li>概念：约束是作用于表中字段上的规则，用于限制存储在表中的数据。</li><li>目的：保证数据库中数据的正确、有效性和完整性。</li><li>分类：</li></ol><table><thead><tr><th align="center">约束</th><th align="center">描述</th><th align="center">关键字</th></tr></thead><tbody><tr><td align="center">非空约束</td><td align="center">限制该字段的数据不能为<code>null</code></td><td align="center">NOT NULL</td></tr><tr><td align="center">唯一约束</td><td align="center">保证该字段的所有数据都是唯一、不重复的</td><td align="center">UNIQUE</td></tr><tr><td align="center">主键约束</td><td align="center">主键是一行数据的唯一标识，要求非空且唯一</td><td align="center">PRIMARY KEY</td></tr><tr><td align="center">默认约束</td><td align="center">保存数据时，如果未指定该字段的值，则采用默认值</td><td align="center">DEFAULT</td></tr><tr><td align="center">检查约束</td><td align="center">保证字段值满足某一条件</td><td align="center">CHECK</td></tr><tr><td align="center">外键约束</td><td align="center">用来让两张表的数据之间建立连接，保证数据的一致性和完整性</td><td align="center">FOREIGN KEY</td></tr></tbody></table><p>注：约束是作用于表中字段上的，可以在创建表/修改表的时候添加约束。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>例：创建一个<code>users</code>，其结构如下：</p><table><thead><tr><th align="center">字段名</th><th align="center">字段含义</th><th align="center">字段类型</th><th align="center">约束条件</th></tr></thead><tbody><tr><td align="center">id</td><td align="center"><code>ID</code>唯一标识</td><td align="center">int</td><td align="center">主键，并且自动增长</td></tr><tr><td align="center">name</td><td align="center">姓名</td><td align="center">varchar(10)</td><td align="center">不为空，并且唯一</td></tr><tr><td align="center">age</td><td align="center">年龄</td><td align="center">int</td><td align="center">大于0，并且小于等于120</td></tr><tr><td align="center">status</td><td align="center">状态</td><td align="center">char(1)</td><td align="center">如果没有指定该值，默认为1</td></tr><tr><td align="center">gender</td><td align="center">性别</td><td align="center">char(1)</td><td align="center">不为空</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> users (</span><br><span class="line">id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT COMMENT <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">name <span class="type">VARCHAR</span> ( <span class="number">10</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">UNIQUE</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">age <span class="type">INT</span> <span class="keyword">CHECK</span> ( age <span class="operator">&gt;</span> <span class="number">0</span> <span class="keyword">AND</span> age <span class="operator">&lt;=</span> <span class="number">120</span> ) COMMENT <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">staus <span class="type">CHAR</span> ( <span class="number">1</span> ) <span class="keyword">DEFAULT</span> <span class="string">&#x27;1&#x27;</span> COMMENT <span class="string">&#x27;状态&#x27;</span>,</span><br><span class="line">gender <span class="type">CHAR</span> ( <span class="number">1</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;性别&#x27;</span> </span><br><span class="line">) COMMENT <span class="string">&#x27;用户表&#x27;</span>;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E7%BA%A6%E6%9D%9F%E8%A1%A8%E5%88%9B%E5%BB%BA.jpg" alt="约束表创建"></p><h2 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h2><h3 id="创建外键"><a href="#创建外键" class="headerlink" title="创建外键"></a>创建外键</h3><p>外键用来让两张表之间建立连接，从而保证数据的一致性和完整性。</p><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">字段名 数据类型,</span><br><span class="line">...</span><br><span class="line">[ <span class="keyword">CONSTRAINT</span> ] [ 外键名称 ] <span class="keyword">FOREIGN</span> KEY ( 外键字段名 ) <span class="keyword">REFERENCES</span> 主表( 主表列名 )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> 外键名称 <span class="keyword">FOREIGN</span> KEY(外键字段名) <span class="keyword">REFERENCES</span> 主表(主表列名);</span><br></pre></td></tr></table></figure><p>例：将<code>worker</code>表和<code>depart</code>表进行连接，外键名字为<code>fk_worker_depart_部门编号</code>。</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/worker%E8%A1%A8.jpg" alt="worker表"></p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/depart%E8%A1%A8.jpg" alt="depart表"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> worker <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_worker_depart_部门编号 <span class="keyword">FOREIGN</span> KEY (部门编号) <span class="keyword">REFERENCES</span> depart (部门编号);</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E5%88%9B%E5%BB%BA%E5%A4%96%E9%94%AE.jpg" alt="创建外键"></p><h3 id="删除外键"><a href="#删除外键" class="headerlink" title="删除外键"></a>删除外键</h3><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> KEY 外键名称;</span><br></pre></td></tr></table></figure><p>例：删除外键<code>fk_worker_depart_部门编号</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> worker <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> KEY fk_worker_depart_部门编号;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E5%88%A0%E9%99%A4%E5%A4%96%E9%94%AE.jpg" alt="删除外键"></p><h2 id="删除-更新行为"><a href="#删除-更新行为" class="headerlink" title="删除/更新行为"></a>删除/更新行为</h2><table><thead><tr><th align="center">行为</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">NO ACTION</td><td align="center">当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新。（与<code>RESTRICT</code>一致）。</td></tr><tr><td align="center">RESTRICT</td><td align="center">当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新。（与<code>NO ACTION</code>一致）。</td></tr><tr><td align="center">CASCADE</td><td align="center">当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则也删除/更新外键在子表中的记录。</td></tr><tr><td align="center">SET NULL</td><td align="center">当在父表中删除对应记录时，首先检查该记录是否有对应外键，如果有则设置子表中该外键值为<code>NULL</code>（这就要求该外键允许取<code>NULL</code>）。</td></tr><tr><td align="center">SET DEFAULT</td><td align="center">父表有变更时，子表将外键列设置成一个默认的值（<code>lnnodb</code>不支持）</td></tr></tbody></table><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> 外键名称 <span class="keyword">FOREIGN</span> KEY (外键字段名) <span class="keyword">REFERENCES</span> 主表 (主表列名) <span class="keyword">ON</span> <span class="keyword">UPDATE</span> CASCADE <span class="keyword">ON</span> <span class="keyword">DELETE</span> CASCADE;</span><br></pre></td></tr></table></figure><h1 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h1><h2 id="多表关系"><a href="#多表关系" class="headerlink" title="多表关系"></a>多表关系</h2><p>项目开发中，在进行数据库表结构设计时，会根据业务需求及业务模块之间的关系，分析并设计表结构，由于业务之间相互关联，所以各个表结构之间也存在着各种联系，基本上分为三种。</p><ul><li>一对多（多对一）</li><li>多对多</li><li>一对一</li></ul><h3 id="一对多（多对一）"><a href="#一对多（多对一）" class="headerlink" title="一对多（多对一）"></a>一对多（多对一）</h3><p>案例：部门与员工的关系。</p><p>关系：一个部门对应多个员工，一个员工对应一个部门。</p><p>实现：在多的一方建立外键，指向一的一方的主键。</p><h3 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h3><p>案例：学生与课程的关系。</p><p>关系：一个学生可以选修多门课程，一门课程也可以供多个学生选择。</p><p>实现：建立第三张中间表，中间表至少包含两个外键，分别关联两方主键。</p><h3 id="多对一"><a href="#多对一" class="headerlink" title="多对一"></a>多对一</h3><p>案例：学生与课程的关系。</p><p>关系：一个学生可以选修多门课程，一门课程也可以供多个学生选择。</p><p>实现：建立第三张中间表，中间表至少包含两个外键，分别关联两方主键。</p><h3 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h3><p>案例：用户与用户详情的关系。</p><p>关系：一对一关系，多用于单表拆分，将一张表的基础字段放在一张表中，其他详情字段放在另一张表中，以提高操作效率。</p><p>实现：在任意一方加入外键，关联另外一方的主键，并设置外键为唯一的（<code>UNIQUE</code>）。</p><h2 id="多表查询概述"><a href="#多表查询概述" class="headerlink" title="多表查询概述"></a>多表查询概述</h2><p>指从多张表中查询数据。</p><p>笛卡尔积：笛卡尔乘积是指在数学中，两个集合<code>A</code>集合和<code>B</code>集合的所有组合情况。（在多表查询时，需要消除无效的笛卡尔积）</p><p>现在准备三张表：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/worker%E8%A1%A8.jpg" alt="worker表"></p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/depart%E8%A1%A8.jpg" alt="depart表"></p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/salary%E8%A1%A8.jpg" alt="salary表"></p><p>例：直接查询<code>worker</code>表和<code>depart</code>表的所有数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> worker, depart;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E7%AC%9B%E5%8D%A1%E5%B0%94%E7%A7%AF%E8%A1%A8.jpg" alt="笛卡尔积"></p><p>由上图可知，如果直接查询两个表，则会对其就笛卡尔积，数据量为两个表中的数据量相乘，因此我们需要用<code>WHERE</code>过滤掉不需要的笛卡尔积。</p><h2 id="多表查询分类"><a href="#多表查询分类" class="headerlink" title="多表查询分类"></a>多表查询分类</h2><h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><ul><li><p>内连接：相当于查询<code>A</code>、<code>B</code>交集部分数据。</p></li><li><p>外连接：</p><ul><li><p>左外连接：查询<strong>左表</strong>所有数据，以及两张表交集部分数据。</p></li><li><p>右外连接：查询<strong>右表</strong>所有数据，以及两张表交集部分数据。</p></li></ul></li><li><p>自连接：当前表与自身的链接查询，自连接必须使用表别名。</p></li><li><p>子查询</p></li></ul><h2 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h2><p>内连接查询的是两张表交集的部分。</p><h3 id="隐式内连接"><a href="#隐式内连接" class="headerlink" title="隐式内连接"></a>隐式内连接</h3><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">字段列表 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">表 <span class="number">1</span>,</span><br><span class="line">表 <span class="number">2</span> </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">条件...;</span><br></pre></td></tr></table></figure><p>例：查询每一个员工的姓名及关联的部门名称。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">USE factory;</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">worker.姓名,</span><br><span class="line">depart.部门名称 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">worker,</span><br><span class="line">depart </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">worker.部门编号 <span class="operator">=</span> depart.部门编号;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E9%9A%90%E5%BC%8F%E5%86%85%E8%BF%9E%E6%8E%A5.jpg" alt="隐式内连接"></p><h3 id="显式内连接"><a href="#显式内连接" class="headerlink" title="显式内连接"></a>显式内连接</h3><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">字段列表 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">表 <span class="number">1</span> [ <span class="keyword">INNER</span> ]</span><br><span class="line"><span class="keyword">JOIN</span> 表 <span class="number">2</span> <span class="keyword">ON</span> 连接条件...;</span><br></pre></td></tr></table></figure><p>例：查询每一个员工的姓名及关联的部门名称。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">USE factory;</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">worker.姓名,</span><br><span class="line">depart.部门名称 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">worker</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> depart <span class="keyword">ON</span> worker.部门编号 <span class="operator">=</span> depart.部门编号;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E9%9A%90%E5%BC%8F%E5%86%85%E8%BF%9E%E6%8E%A5.jpg" alt="显式内连接"></p><h2 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h2><p>左外连接和右外连接在数据中有<code>NULL</code>数据时才会有效果，左外连接会完全包含左表的信息，反之，右外连接完全包含右表的信息。</p><h3 id="左外连接"><a href="#左外连接" class="headerlink" title="左外连接"></a>左外连接</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">字段列表 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">表 <span class="number">1</span> <span class="keyword">LEFT</span> [ <span class="keyword">OUTER</span> ]</span><br><span class="line"><span class="keyword">JOIN</span> 表 <span class="number">2</span> <span class="keyword">ON</span> 条件...;</span><br></pre></td></tr></table></figure><p>相当于查询表1（左表）的所有数据，包含表1和表2交集部分的数据。</p><h3 id="右外连接"><a href="#右外连接" class="headerlink" title="右外连接"></a>右外连接</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">字段列表 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">表 <span class="number">1</span> <span class="keyword">RIGHT</span> [ <span class="keyword">OUTER</span> ]</span><br><span class="line"><span class="keyword">JOIN</span> 表 <span class="number">2</span> <span class="keyword">ON</span> 条件...;</span><br></pre></td></tr></table></figure><p>相当于查询表2（右表）的所有数据，包含表1和表2交集部分的数据。</p><h2 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h2><p>把一张表看作两张表，进行连接，表一定要起别名。</p><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">字段列表 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">表 A 别名 A</span><br><span class="line"><span class="keyword">JOIN</span> 表 A 别名 B <span class="keyword">ON</span> 条件...;</span><br></pre></td></tr></table></figure><p>注：自连接查询，可以是内连接查询，也可以是外连接查询。</p><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><p>概念：<code>SQL</code>语句中嵌套<code>SELECT</code>语法，称为嵌套查询，又称子查询。</p><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">表 <span class="number">1</span> </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">列 <span class="number">1</span> <span class="operator">=</span> ( <span class="keyword">SELECT</span> 列 <span class="number">1</span> <span class="keyword">FROM</span> 表 <span class="number">2</span> );</span><br></pre></td></tr></table></figure><p>注：子查询外部的语句可以是<code>INSERT</code>/<code>UPDATE</code>/<code>SELECT</code>的任何一个。</p><p>根据子查询结果不同，分为：</p><ul><li>标量子查询（子查询结果为单个值）</li><li>列子查询（子查询结果为一列）</li><li>行子查询（子查询结果为一行）</li><li>表子查询（子查询结果为多行多列）</li></ul><h2 id="标量子查询"><a href="#标量子查询" class="headerlink" title="标量子查询"></a>标量子查询</h2><p>子查询返回的结果是单个值（数字、字符串、日期等），最简单的形式，这种子查询称为标量子查询。</p><p>常用的操作符：<code>=</code> <code>&lt;&gt;</code> <code>&gt;</code> <code>&gt;=</code> <code>&lt;</code> <code>&lt;=</code></p><p>例：查询财务处的所有员工的信息。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">USE factory;</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">worker </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">部门编号 <span class="operator">=</span> ( <span class="keyword">SELECT</span> 部门编号 <span class="keyword">FROM</span> depart <span class="keyword">WHERE</span> 部门名称 <span class="operator">=</span> <span class="string">&#x27;财务处&#x27;</span> );</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E6%A0%87%E9%87%8F%E5%AD%90%E6%9F%A5%E8%AF%A2.jpg" alt="标量子查询"></p><h2 id="列子查询"><a href="#列子查询" class="headerlink" title="列子查询"></a>列子查询</h2><p>子查询返回的结果是一列（可以是多行），这种子查询称为列子查询。</p><p>常用的操作符：<code>IN</code>、<code>NOT IN</code>、<code>ANY</code>、<code>SOME</code>、<code>ALL</code></p><table><thead><tr><th align="center">操作符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">IN</td><td align="center">在指定的集合范围之内，多选一</td></tr><tr><td align="center">NOT IN</td><td align="center">不在指定的集合范围之内</td></tr><tr><td align="center">ANY</td><td align="center">子查询返回列表，有任意一个满足即可</td></tr><tr><td align="center">SOME</td><td align="center">与<code>ANY</code>等同，使用<code>SOME</code>的地方都可以使用<code>ANY</code></td></tr><tr><td align="center">ALL</td><td align="center">子查询返回列表的所有值都必须满足</td></tr></tbody></table><p>例：查询财务处和人事处的所有员工的信息。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">USE factory;</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">worker </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">部门编号 <span class="keyword">IN</span> ( <span class="keyword">SELECT</span> 部门编号 <span class="keyword">FROM</span> depart <span class="keyword">WHERE</span> 部门名称 <span class="operator">=</span> <span class="string">&#x27;财务处&#x27;</span> <span class="keyword">OR</span> 部门名称 <span class="operator">=</span> <span class="string">&#x27;人事处&#x27;</span> );</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E5%88%97%E5%AD%90%E6%9F%A5%E8%AF%A21.jpg" alt="列子查询"></p><p>例：查询比财务处所有人工资都高的员工信息。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">USE factory;</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">worker </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">职工号 <span class="keyword">IN</span> (</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">职工号 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">salary </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">工资 <span class="operator">&gt;</span> <span class="keyword">ALL</span> (</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">工资 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">salary </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">职工号 <span class="keyword">IN</span> (</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">职工号 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">worker </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">部门编号 <span class="operator">=</span> ( <span class="keyword">SELECT</span> 部门编号 <span class="keyword">FROM</span> depart <span class="keyword">WHERE</span> 部门名称 <span class="operator">=</span> <span class="string">&#x27;财务处&#x27;</span> ))));</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E5%88%97%E5%AD%90%E6%9F%A5%E8%AF%A22.jpg" alt="列子查询"></p><h2 id="行子查询"><a href="#行子查询" class="headerlink" title="行子查询"></a>行子查询</h2><p>子查询返回的结果是一行（可以是多列），这种子查询称为行子查询。</p><p>常用的操作符：<code>=</code> <code>&lt;&gt;</code> <code>IN</code> <code>NOT IN</code></p><p>例：查询工号为<code>2001</code>的员工的部门编号和性别都相同的人的员工信息。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">USE factory;</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">worker </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">(部门编号, 性别 ) <span class="operator">=</span> ( <span class="keyword">SELECT</span> 部门编号, 性别 <span class="keyword">FROM</span> worker <span class="keyword">WHERE</span> 职工号 <span class="operator">=</span> <span class="string">&#x27;2001&#x27;</span> );</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E8%A1%8C%E5%AD%90%E6%9F%A5%E8%AF%A2.jpg" alt="行子查询"></p><h2 id="表子查询"><a href="#表子查询" class="headerlink" title="表子查询"></a>表子查询</h2><p>子查询返回的结果是多行多列，这种子查询称为表子查询。</p><p>常用的操作符：<code>IN</code></p><p>例：查询工号为<code>1001</code>或<code>2001</code>的员工的部门编号和性别都相同的人的员工信息。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">USE factory;</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">worker </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">(部门编号, 性别 ) <span class="keyword">IN</span> ( <span class="keyword">SELECT</span> 部门编号, 性别 <span class="keyword">FROM</span> worker <span class="keyword">WHERE</span> 职工号 <span class="operator">=</span> <span class="string">&#x27;1001&#x27;</span> <span class="keyword">OR</span> 职工号 <span class="operator">=</span> <span class="string">&#x27;2001&#x27;</span> );</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E8%A1%A8%E5%AD%90%E6%9F%A5%E8%AF%A2.jpg" alt="表子查询"></p><h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><h2 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h2><p>视图（<code>View</code>）是一种虚拟存在的表。视图中的数据并不在数据库中实际存在，行和列数据来自定义视图的查询中使用的表，并且是在使用视图时动态生成的。</p><p>通俗的讲，视图只保存了查询的<code>SQL</code>逻辑，不保存查询结果。所以我们在创建视图的时候，主要的工作就落在创建这条<code>SQL</code>查询语句上。</p><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [ <span class="keyword">OR</span> REPLACE ] <span class="keyword">VIEW</span> 视图名称 [(列表名称)] <span class="keyword">AS</span> <span class="keyword">SELECT</span>语句 [ <span class="keyword">WITH</span> [ <span class="keyword">CASCADED</span> <span class="operator">|</span> <span class="keyword">LOCAL</span> ]] <span class="keyword">CHECK</span> OPTION;</span><br></pre></td></tr></table></figure><p>例：创建一个视图<code>emp_v_1</code>，存储<code>emp</code>表中<code>id</code>小于等于<code>10</code>的记录的<code>id</code>和<code>name</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">CREATE</span> </span><br><span class="line"><span class="keyword">OR</span> REPLACE <span class="keyword">VIEW</span> emp_v_1 <span class="keyword">AS</span> <span class="keyword">SELECT</span></span><br><span class="line">id,</span><br><span class="line">name </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">emp </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">id <span class="operator">&lt;=</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E5%88%9B%E5%BB%BA%E8%A7%86%E5%9B%BE.jpg" alt="创建视图"></p><h2 id="查询-1"><a href="#查询-1" class="headerlink" title="查询"></a>查询</h2><h3 id="查看创建视图语句"><a href="#查看创建视图语句" class="headerlink" title="查看创建视图语句"></a>查看创建视图语句</h3><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">VIEW</span> 视图名称;</span><br></pre></td></tr></table></figure><p>例：查询视图<code>emp_v_1</code>的创建语句。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">VIEW</span> emp_v_1;</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `emp_v_1` AS select `emp`.`id` AS `id`,`emp`.`name` AS `name` from `emp` where (`emp`.`id` &lt;= 10)</span><br></pre></td></tr></table></figure><h3 id="查看视图数据"><a href="#查看视图数据" class="headerlink" title="查看视图数据"></a>查看视图数据</h3><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">视图名称...;</span><br></pre></td></tr></table></figure><p>例：查询视图<code>emp_v_1</code>的数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">emp_v_1;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E6%9F%A5%E7%9C%8B%E8%A7%86%E5%9B%BE%E6%95%B0%E6%8D%AE.jpg" alt="查看视图数据"></p><h2 id="修改视图"><a href="#修改视图" class="headerlink" title="修改视图"></a>修改视图</h2><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [ <span class="keyword">OR</span> REPLACE ] <span class="keyword">VIEW</span> 视图名称 [(列表名称)] <span class="keyword">AS</span> <span class="keyword">SELECT</span>语句 [ <span class="keyword">WITH</span> [ <span class="keyword">CASCADED</span> <span class="operator">|</span> <span class="keyword">LOCAL</span> ]] <span class="keyword">CHECK</span> OPTION;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">VIEW</span> 视图名称 [(列名列表)] <span class="keyword">AS</span> <span class="keyword">SELECT</span>语句 [ <span class="keyword">WITH</span> [ <span class="keyword">CASCADED</span> <span class="operator">|</span> <span class="keyword">LOCAL</span> ] <span class="keyword">CHECK</span> OPTION ];</span><br></pre></td></tr></table></figure><p>例：修改视图<code>emp_v_1</code>，将其查询结果增加一条<code>workno</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">VIEW</span> emp_v_1 <span class="keyword">AS</span> <span class="keyword">SELECT</span></span><br><span class="line">id,</span><br><span class="line">NAME,</span><br><span class="line">workno </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">emp </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">id <span class="operator">&lt;=</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E4%BF%AE%E6%94%B9%E8%A7%86%E5%9B%BE.jpg" alt="修改视图"></p><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> [ IF <span class="keyword">EXISTS</span> ] 视图名称 [,视图名称]...;</span><br></pre></td></tr></table></figure><p>例：删除视图<code>emp_v_1</code>的数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> emp_v_1;</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DROP VIEW emp_v_1</span><br><span class="line">&gt; OK</span><br><span class="line">&gt; 时间: 0.011s</span><br></pre></td></tr></table></figure><h1 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h1><h2 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h2><p>存储过程是事先经过编译并存储在数据库中的一段<code>SQL</code>语句的集合，调用存储过程可以简化应用开发人员的很多工作，减少数据在数据库和应用服务器之间的传输，对于提高数据处理的效率是有好处的。</p><p>存储过程思想上很简单，就是数据库<code>SQL</code>语言层面的代码封装与重用。*</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>封装，复用</li><li>可以接收参数，也可以返回数据</li><li>减少网络交互，效率提升</li></ul><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="创建-1"><a href="#创建-1" class="headerlink" title="创建"></a>创建</h3><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> 存储过程名称 ([参数列表]) </span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SQL</span>语句</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p>例：创建一个存储过程<code>p1</code>，用来查询<code>emp</code>表中的记录条数。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> p1 () <span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="built_in">count</span>(<span class="operator">*</span>) </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">emp;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><h3 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h3><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CALL</span> 名称 ([参数]);</span><br></pre></td></tr></table></figure><p>例：调用存储过程<code>p1</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CALL</span> p1;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E8%B0%83%E7%94%A8%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B.jpg" alt="调用存储过程"></p><h3 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h3><p>查询某个存储过程的定义。</p><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> 存储过程名称;</span><br></pre></td></tr></table></figure><p>例：查看存储过程<code>p1</code>的定义。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> p1;</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE DEFINER=`root`@`localhost` PROCEDURE `p1`()</span><br><span class="line">BEGIN</span><br><span class="line">SELECT</span><br><span class="line">count(*) </span><br><span class="line">FROM</span><br><span class="line">emp;</span><br><span class="line">END</span><br></pre></td></tr></table></figure><h3 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h3><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> [ IF <span class="keyword">EXISTS</span> ] 存储过程名称;</span><br></pre></td></tr></table></figure><p>例：查看存储过程<code>p1</code>的定义。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span></span><br><span class="line">IF</span><br><span class="line"><span class="keyword">EXISTS</span> p1;</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; OK</span><br><span class="line">&gt; 时间: 0.019s</span><br></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="系统变量"><a href="#系统变量" class="headerlink" title="系统变量"></a>系统变量</h3><p>系统变量是<code>MYSQL</code>服务器提供，不是用户定义的，属于服务器层面。分为全局变量(<code>GLOBAL</code>)、会话变量(<code>SESSION</code>)。</p><h4 id="设置系统变量"><a href="#设置系统变量" class="headerlink" title="设置系统变量"></a>设置系统变量</h4><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> [ SESSION <span class="operator">|</span> <span class="keyword">GLOBAL</span> ] 系统变量名 <span class="operator">=</span> 值;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> @@[ SESSION <span class="operator">|</span> <span class="keyword">GLOBAL</span> ] 系统变量名 <span class="operator">=</span> 值;</span><br></pre></td></tr></table></figure><h3 id="用户定义变量"><a href="#用户定义变量" class="headerlink" title="用户定义变量"></a>用户定义变量</h3><p>用户定义变量是用户根据需要自己定义的变量，用户变量不用提前声明，在用的时候直接用<code>@变量名</code>使用就可以。其作用域为当前连接。</p><p>用户定义的变量无序对其进行声明或初始化，只不过获取到的值为<code>NULL</code>。</p><h4 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="variable">@var</span>_name <span class="operator">=</span> expr [, <span class="variable">@var</span>_name <span class="operator">=</span> expr ]...;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">字段名 <span class="keyword">INTO</span> <span class="variable">@var</span>_name </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">表名;</span><br></pre></td></tr></table></figure><p>例：定义变量<code>myname</code>和<code>age</code>，其值分别为<code>Bigglesworth</code>和<code>20</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="variable">@myname</span> <span class="operator">=</span> <span class="string">&#x27;Bigglesworth&#x27;</span>,</span><br><span class="line"><span class="variable">@myage</span> <span class="operator">=</span> <span class="number">20</span>;</span><br></pre></td></tr></table></figure><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="variable">@var</span>_name</span><br></pre></td></tr></table></figure><p>例：输出上面定义的两个变量。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="variable">@myname</span>,</span><br><span class="line"><span class="variable">@myage</span>;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E4%BD%BF%E7%94%A8%E5%8F%98%E9%87%8F.jpg" alt="使用变量"></p><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><p>局部变量是根据需要定义的在局部生效的变量，访问之前，需要<code>DECLARE</code>声明。可用作存储过程内的局部变量和输入参数，局部变量的的范围是在其内声明的<code>BEGIN ... END</code>块。</p><h4 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h4><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> 变量名 变量类型 [ DEFAULT...];</span><br></pre></td></tr></table></figure><p>数据类型就是数据库字段类型：<code>INT</code>、<code>BIGINT</code>、<code>CHAR</code>、<code>VARCHAR</code>、<code>DATE</code>、<code>TIME</code>等。</p><h4 id="赋值-1"><a href="#赋值-1" class="headerlink" title="赋值"></a>赋值</h4><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> 变量名 <span class="operator">=</span> 值;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> 变量名 :<span class="operator">=</span> 值;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">字段名 <span class="keyword">INTO</span> 变量名 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">表名...;</span><br></pre></td></tr></table></figure><p>例：定义一个存储过程<code>p</code>，存储<code>emp</code>表格中所有人的年龄之和。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> p () <span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">age_sum <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">age_name <span class="type">VARCHAR</span> ( <span class="number">20</span> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> age_name <span class="operator">=</span> <span class="string">&#x27;年龄总和&#x27;</span>;</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="built_in">sum</span>( age ) <span class="keyword">INTO</span> age_sum </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">emp;</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">age_name,</span><br><span class="line">age_sum;</span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"><span class="keyword">CALL</span> p ();</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E4%BD%BF%E7%94%A8%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F.jpg" alt="使用局部变量"></p><h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">IF 条件 <span class="number">1</span> <span class="keyword">THEN</span></span><br><span class="line">...</span><br><span class="line">ELSEIF 条件 <span class="number">2</span> <span class="keyword">THEN</span> <span class="comment">-- 可选</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">ELSE</span> <span class="comment">-- 可选</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">END</span> IF;</span><br></pre></td></tr></table></figure><p>例：根据定义的分数<code>score</code>变量，判定当前分数对应的分数等级。</p><ol><li><code>score &gt;= 85</code>分，等级为优秀。</li><li><code>score &gt;= 60</code>分 且 <code>score &lt; 85</code>分，等级为及格。</li><li><code>score &lt; 60</code>分，等级为不及格。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> score()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> val <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">58</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> <span class="keyword">result</span> <span class="type">varchar</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">IF val <span class="operator">&gt;=</span> <span class="number">85</span> <span class="keyword">THEN</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">result</span> <span class="operator">=</span> <span class="string">&#x27;优秀&#x27;</span>;</span><br><span class="line">ELSEIF val <span class="operator">&gt;=</span> <span class="number">60</span> <span class="keyword">THEN</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">result</span> <span class="operator">=</span> <span class="string">&#x27;及格&#x27;</span>;</span><br><span class="line"><span class="keyword">ELSE</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">result</span> <span class="operator">=</span> <span class="string">&#x27;不及格&#x27;</span>;</span><br><span class="line"><span class="keyword">END</span> IF;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">result</span>;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> score();</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">不及格</span><br></pre></td></tr></table></figure><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><table><thead><tr><th align="center">类型</th><th align="center">含义</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">IN</td><td align="center">该类参数作为输入，也就是需要调用时传入值</td><td align="center">默认</td></tr><tr><td align="center">OUT</td><td align="center">该类参数作为输出，也就是该参数可以作为返回值</td><td align="center"></td></tr><tr><td align="center">INOUT</td><td align="center">既可以作为输入参数，也可以作为输出参数</td><td align="center"></td></tr></tbody></table><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> 存储过程名称 ([ <span class="keyword">IN</span> <span class="operator">/</span> <span class="keyword">OUT</span> <span class="operator">/</span> <span class="keyword">INOUT</span> 参数名 参数类型 ]) </span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="comment">-- SQL语句</span></span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p>例：根据传入的参数<code>val</code>，判定当前分数对应的分数等级并返回。</p><ol><li><code>score &gt;= 85</code>分，等级为优秀。</li><li><code>score &gt;= 60</code>分 且 <code>score &lt; 85</code>分，等级为及格。</li><li><code>score &lt; 60</code>分，等级为不及格。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> score(<span class="keyword">IN</span> val <span class="type">INT</span>, <span class="keyword">OUT</span> <span class="keyword">result</span> <span class="type">VARCHAR</span>(<span class="number">10</span>))</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"></span><br><span class="line">IF val <span class="operator">&gt;=</span> <span class="number">85</span> <span class="keyword">THEN</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">result</span> <span class="operator">=</span> <span class="string">&#x27;优秀&#x27;</span>;</span><br><span class="line">ELSEIF val <span class="operator">&gt;=</span> <span class="number">60</span> <span class="keyword">THEN</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">result</span> <span class="operator">=</span> <span class="string">&#x27;及格&#x27;</span>;</span><br><span class="line"><span class="keyword">ELSE</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">result</span> <span class="operator">=</span> <span class="string">&#x27;不及格&#x27;</span>;</span><br><span class="line"><span class="keyword">END</span> IF;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> score(<span class="number">68</span>, <span class="variable">@result</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@result</span>;</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">及格</span><br></pre></td></tr></table></figure><h2 id="while"><a href="#while" class="headerlink" title="while"></a>while</h2><p><code>while</code>循环是有条件的循环控制语句。满足条件后，再执行循环体中的<code>SQL</code>语句。</p><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">WHILE 条件 DO</span><br><span class="line"><span class="keyword">SQL</span>逻辑...</span><br><span class="line"><span class="keyword">END</span> WHILE;</span><br></pre></td></tr></table></figure><p>例：计算从<code>1</code>累加到<code>n</code>的值，<code>n</code>为传入的参数值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> s(<span class="keyword">IN</span> n <span class="type">INT</span>, <span class="keyword">OUT</span> ans <span class="type">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>; </span><br><span class="line"><span class="keyword">SET</span> ans <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">WHILE i <span class="operator">&lt;=</span> n DO</span><br><span class="line"><span class="keyword">SET</span> ans <span class="operator">=</span> ans <span class="operator">+</span> i;</span><br><span class="line"><span class="keyword">SET</span> i <span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">END</span> WHILE;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> s(<span class="number">10</span>, <span class="variable">@ans</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@ans</span>;</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">55</span><br></pre></td></tr></table></figure><h1 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h1><h2 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h2><p>触发器是与表有关的数据库对象，指在<code>insert</code>/<code>update</code>/<code>delete</code>之前或之后，触发并执行触发器中定义的<code>SQL</code>语句集合。触发器的这种特性可以协助应用在数据库端确保数据的完整性，日志记录，数据校验等操作。</p><p>使用别名<code>OLD</code>和<code>NEW</code>来引用触发器中发生变化的记录内容，这与其他的数据库是相似的。现在触发器还只支持行级触发，不支持语句级触发。</p><table><thead><tr><th align="center">触发器类型</th><th align="center">NEW和OLD</th></tr></thead><tbody><tr><td align="center">INSERT型触发器</td><td align="center">NEW表示将要或者已经新增的数据</td></tr><tr><td align="center">UPDATE型触发器</td><td align="center">OLD表示修改之前的数据，NEW表示将要或已经修改后的数据</td></tr><tr><td align="center">DELETE型触发器</td><td align="center">OLD表示将要或者已经删除的数据</td></tr></tbody></table><h2 id="触发器基础操作"><a href="#触发器基础操作" class="headerlink" title="触发器基础操作"></a>触发器基础操作</h2><h3 id="创建-2"><a href="#创建-2" class="headerlink" title="创建"></a>创建</h3><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> trigger_name</span><br><span class="line">BEFORE<span class="operator">/</span>AFTER <span class="keyword">INSERT</span><span class="operator">/</span><span class="keyword">UPDATE</span><span class="operator">/</span><span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">ON</span> tbl_name <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span> <span class="comment">-- 行级触发器</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">trigger_stmt;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><h3 id="查看-1"><a href="#查看-1" class="headerlink" title="查看"></a>查看</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> TRIGGERS;</span><br></pre></td></tr></table></figure><h3 id="删除-2"><a href="#删除-2" class="headerlink" title="删除"></a>删除</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TRIGGER</span> [schema_name.]trigger_name;  <span class="comment">-- 如果没有指定schema_name，默认为当前数据库</span></span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 教程 </tag>
            
            <tag> MySQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础语法</title>
      <link href="/archives/d83aff49.html"/>
      <url>/archives/d83aff49.html</url>
      
        <content type="html"><![CDATA[<hr><h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World!"></a>Hello World!</h1><p>例：输出<code>Hello World!</code>。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello World!&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br></pre></td></tr></table></figure><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><p>注释是对代码的解释说明，计算机并不会执行。</p><h2 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h2><p>以<code>#</code>开头，<code>#</code>右边的所有文字当作说明，而不是真正要执行的程序，起辅助说明作用。  </p><p>例：输出<code>Hello World!</code>，后面需要有相应的注释。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello World!&quot;</span>)  <span class="comment">#输出Hello World!</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br></pre></td></tr></table></figure><h2 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h2><p>多行注释需要用三个单引号，即三个<code>&#39;</code>包裹起来。</p><p>例：书写一段多行注释，第一行为<code>比格沃斯</code>，第二行为<code>Bigglesworth</code>。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    比格沃斯</span></span><br><span class="line"><span class="string">    Bigglesworth</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h1><p>在代码中，被写下来的固定值，被称为字面量。  </p><h2 id="常用的值的类型"><a href="#常用的值的类型" class="headerlink" title="常用的值的类型"></a>常用的值的类型</h2><table><thead><tr><th align="center">类型</th><th align="center">描述</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">数字（Number）</td><td align="center"><strong>支持</strong><br>整数（int）<br>浮点数（float）<br>复数（complex）<br>布尔（bool）</td><td align="center">整数（int），如：10、-10<br>浮点数（float），如：13.14、-13.14<br>复数（complex），如：4+3j，以j结尾表示复数<br>布尔（float）表达现实生活中的逻辑，即真和假，<code>True</code>表示真，<code>False</code>表示假。<code>True</code>的本质是一个数字记作1，<code>False</code>记作0</td></tr><tr><td align="center">字符串（String）</td><td align="center">描述文本的一种数据类型</td><td align="center">字符串（String）是由任意数量的字符组成</td></tr><tr><td align="center">列表（List）</td><td align="center">有序的可变序列</td><td align="center">Python中使用最频繁的数据类型，可以有序记录一堆数据</td></tr><tr><td align="center">元组（Tuple）</td><td align="center">有序的不可变序列</td><td align="center">可有序记录一堆不可变的Python数据集合</td></tr><tr><td align="center">集合（Set）</td><td align="center">无序不重复集合</td><td align="center">可无序记录一堆不重复的Python数据集合</td></tr><tr><td align="center">字典（Dictionary）</td><td align="center">无序Key-Value集合</td><td align="center">可无序记录一堆Key-Value型的Python数据集合</td></tr></tbody></table><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>又称为文本，是由任意数量的字符，如中文、英文、各类符号、数字等组成。所以叫做字符的串。  </p><p>如：  </p><ul><li><p>“Bigglesworth”</p></li><li><p>“XXX的编号是：114514”</p></li><li><p>“今天是星期二”</p></li></ul><p>在Python中，字符串需要使用双引号<code>&quot;&quot;</code>包裹起来。  </p><p><strong>被引号包裹起来的均为字符串。</strong></p><h2 id="输出字面量"><a href="#输出字面量" class="headerlink" title="输出字面量"></a>输出字面量</h2><p>使用<code>print()</code>函数将字面量打印在屏幕上。  </p><p>例：分别输出<code>13.14</code>，<code>666</code>,<code>Bigglesworth</code>。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">13.14</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">666</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Bigglesworth&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果展示： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">13.14</span><br><span class="line">666</span><br><span class="line">Bigglesworth</span><br></pre></td></tr></table></figure><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>变量指的是在程序运行时，能储存计算结果或能表示值的抽象概念。  </p><p>简单来说，变量就是在程序运行时，记录数据用的。  </p><h2 id="变量的定义格式"><a href="#变量的定义格式" class="headerlink" title="变量的定义格式"></a>变量的定义格式</h2><p>格式：<code>变量名称 = 变量的值</code>  </p><p>每一个变量都有自己的名称，称之为：<strong>变量名也就是变量本身</strong>。  </p><p>每一个变量都有自己存储的值（内容），称之为：<strong>变量值</strong>。</p><p>赋值，表示将等号右侧的值，赋值给左侧的变量。  </p><p>例：定义一个变量<code>score</code>，其值为<code>13</code>，并将其输出。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">score = <span class="number">13</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;得分为：&quot;</span>, score)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">得分为： 13</span><br></pre></td></tr></table></figure><h2 id="变量运算"><a href="#变量运算" class="headerlink" title="变量运算"></a>变量运算</h2><p>变量可以直接当作其存储的内容进行运算。  </p><p>例：将<code>score</code>的值增加<code>2</code>并输出。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">score = <span class="number">13</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;得分为：&quot;</span>, score)</span><br><span class="line">score = score + <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;变化后的得分为：&quot;</span>, score)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">得分为： 13</span><br><span class="line">变化后的得分为： 15</span><br></pre></td></tr></table></figure><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="直接输出类型信息"><a href="#直接输出类型信息" class="headerlink" title="直接输出类型信息"></a>直接输出类型信息</h2><p>使用<code>type()</code>可以输出一个字面量或者变量的类型信息。  </p><p>例：分别输出<code>Bigglesworth</code>，<code>3.1415926</code>，<code>3+4j</code>的类型信息。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="string">&quot;Bigglesworth&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="number">3.1415926</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="number">3</span>+<span class="number">4j</span>))</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &#x27;str&#x27;&gt;</span><br><span class="line">&lt;class &#x27;float&#x27;&gt;</span><br><span class="line">&lt;class &#x27;complex&#x27;&gt;</span><br></pre></td></tr></table></figure><h2 id="存储类型信息结果"><a href="#存储类型信息结果" class="headerlink" title="存储类型信息结果"></a>存储类型信息结果</h2><p>可以使用一个变量用来存储<code>type()</code>的返回结果，该结果被称作<strong>返回值</strong>。  </p><p>例：利用<code>type()</code>获取<code>114514</code>的数据类型，将其存储在<code>Type</code>变量中并输出。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Type</span> = <span class="built_in">type</span>(<span class="number">114514</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="type">Type</span>)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &#x27;int&#x27;&gt;</span><br></pre></td></tr></table></figure><h2 id="查看变量中存储的数据类型"><a href="#查看变量中存储的数据类型" class="headerlink" title="查看变量中存储的数据类型"></a>查看变量中存储的数据类型</h2><p>例：定义一个变量<code>name</code>，其存储的内容为<code>Bigglesworth</code>，输出其数据类型。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;Bigglesworth&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(name)))</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &#x27;str&#x27;&gt;</span><br></pre></td></tr></table></figure><h1 id="数据类型的转换"><a href="#数据类型的转换" class="headerlink" title="数据类型的转换"></a>数据类型的转换</h1><h2 id="常见的转换语句"><a href="#常见的转换语句" class="headerlink" title="常见的转换语句"></a>常见的转换语句</h2><table><thead><tr><th align="center">语句（函数）</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">int(x)</td><td align="center">将x转换为一个整数</td></tr><tr><td align="center">float(x)</td><td align="center">将x转换为一个浮点数</td></tr><tr><td align="center">str(x)</td><td align="center">将对象x转换为字符串</td></tr></tbody></table><p>注：这三条语句均有返回值。</p><p>例：将字符串类型的<code>3.1415926</code>转换为浮点数类型。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">number = <span class="string">&quot;3.1415926&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(number), number)</span><br><span class="line">number = <span class="built_in">float</span>(number)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(number), number)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &#x27;str&#x27;&gt; 3.1415926</span><br><span class="line">&lt;class &#x27;float&#x27;&gt; 3.1415926</span><br></pre></td></tr></table></figure><p>注：</p><ul><li><p>可以将任何东西转换为字符串，但是字符串转成别的数据类型的时候需要注意是否合法，比如如果要将一个字符串转换为整型，则需要注意字符串内是否全都是数字。  </p></li><li><p>在整型转换为浮点型的时候，会默认加上一个<code>.0</code>，因为浮点类型默认带小数。  </p></li><li><p>在浮点型转换为整型的时候，会将小数点后的数据直接舍去。</p></li></ul><h1 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h1><h2 id="标识符的定义"><a href="#标识符的定义" class="headerlink" title="标识符的定义"></a>标识符的定义</h2><p>在Python程序中，我们可以给很多东西起名字，例如变量、函数、类等等，这些名字被统称为标识符，用来做内容的标识。</p><h2 id="标识符命名规则"><a href="#标识符命名规则" class="headerlink" title="标识符命名规则"></a>标识符命名规则</h2><p>命名规则主要有三点：  </p><ul><li><p>内容限定</p></li><li><p>大小写敏感</p></li><li><p>不可使用关键字</p></li></ul><h3 id="内容限定"><a href="#内容限定" class="headerlink" title="内容限定"></a>内容限定</h3><p>标识符命名中，只允许出现：  </p><ul><li><p>英文</p></li><li><p>中文</p></li><li><p>数字</p></li><li><p>下划线</p></li></ul><p>注意点：  </p><ul><li><p>虽然Python支持中文作为标识符，但是尽量不要去使用。</p></li><li><p>开头不可以是数字</p></li></ul><h3 id="大小写敏感"><a href="#大小写敏感" class="headerlink" title="大小写敏感"></a>大小写敏感</h3><p>两个标识符字母都一样，唯一的区别是字母的大小写不一样，那么也是可以正确区分的。  </p><h3 id="不可使用关键字"><a href="#不可使用关键字" class="headerlink" title="不可使用关键字"></a>不可使用关键字</h3><p>Python中有一系列单词，称之为关键字，关键字在Python中都有特定的用途，我们不可以使用它们作为标识符。  </p><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p>设<code>a=10</code>，<code>b=20</code></p><table><thead><tr><th align="center">运算符</th><th align="center">描述</th><th align="center">实例</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">加</td><td align="center">两个对象相加a + b输出结果30</td></tr><tr><td align="center">-</td><td align="center">减</td><td align="center">两个对象相减a - b输出结果-10</td></tr><tr><td align="center">*</td><td align="center">乘</td><td align="center">两个数相乘或是返回一个被重复若干次的字符串a * b输出结果200</td></tr><tr><td align="center">/</td><td align="center">除</td><td align="center">b / a输出结果2</td></tr><tr><td align="center">//</td><td align="center">取整除</td><td align="center">返回商的整数部分9//2输出结果4,9.0//2.0输出结果4.0</td></tr><tr><td align="center">%</td><td align="center">取余</td><td align="center">返回除法的余数b % a输出结果0</td></tr><tr><td align="center">**</td><td align="center">指数</td><td align="center">a**b为10的20次方</td></tr></tbody></table><p>例：计算上表中的实例。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">10</span></span><br><span class="line">b=<span class="number">20</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a + b =&quot;</span>, a + b)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a - b =&quot;</span>, a - b)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a * b =&quot;</span>, a * b)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;b / a =&quot;</span>, b / a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;9 // 2 =&quot;</span>, <span class="number">9</span> // <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;9.0 // 2.0 =&quot;</span>, <span class="number">9.0</span> // <span class="number">2.0</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;b % a =&quot;</span>, b % a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a ** b =&quot;</span>, a ** b)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a + b = 30</span><br><span class="line">a - b = -10</span><br><span class="line">a * b = 200</span><br><span class="line">b / a = 2.0</span><br><span class="line">9 // 2 = 4</span><br><span class="line">9.0 // 2.0 = 4.0</span><br><span class="line">b % a = 0</span><br><span class="line">a ** b = 100000000000000000000</span><br></pre></td></tr></table></figure><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><h3 id="基础赋值运算符"><a href="#基础赋值运算符" class="headerlink" title="基础赋值运算符"></a>基础赋值运算符</h3><table><thead><tr><th align="center">运算符</th><th align="center">描述</th><th align="center">实例</th></tr></thead><tbody><tr><td align="center">=</td><td align="center">赋值运算符</td><td align="center">把 = 右边的结果 赋值给 左边的变量</td></tr></tbody></table><h3 id="复合赋值运算符"><a href="#复合赋值运算符" class="headerlink" title="复合赋值运算符"></a>复合赋值运算符</h3><table><thead><tr><th align="center">运算符</th><th align="center">描述</th><th align="center">实例</th></tr></thead><tbody><tr><td align="center">+=</td><td align="center">加法赋值运算符</td><td align="center">c += a 等效于 c = c + a</td></tr><tr><td align="center">-=</td><td align="center">减法赋值运算符</td><td align="center">c -= a 等效于 c = c - a</td></tr><tr><td align="center">*=</td><td align="center">乘法赋值运算符</td><td align="center">c *= a 等效于 c = c * a</td></tr><tr><td align="center">/=</td><td align="center">除法赋值运算符</td><td align="center">c /= a 等效于 c = c / a</td></tr><tr><td align="center">%=</td><td align="center">取模赋值运算符</td><td align="center">c %= a 等效于 c = c % a</td></tr><tr><td align="center">**=</td><td align="center">幂赋值运算符</td><td align="center">c **= a 等效于 c = c ** a</td></tr><tr><td align="center">//=</td><td align="center">取整除赋值运算符</td><td align="center">c //= a 等效于 c = c // a</td></tr></tbody></table><h1 id="字符串扩展"><a href="#字符串扩展" class="headerlink" title="字符串扩展"></a>字符串扩展</h1><h2 id="字符串的三种定义方式"><a href="#字符串的三种定义方式" class="headerlink" title="字符串的三种定义方式"></a>字符串的三种定义方式</h2><p>字符串在Python中有多种定义形式：  </p><ol><li><p>单引号定义法：<code>name = &#39;Bigglesworth&#39;</code></p></li><li><p>双引号定义法：<code>name = &quot;Bigglesworth&quot;</code></p></li><li><p>三引号定义法：<code>name = &#39;&#39;&#39;Bigglesworth&#39;&#39;&#39;</code></p></li></ol><p>三引号定义法，和多行注释的写法一样，同样支持换行操作。  </p><p>使用变量接收它，它就是字符串。  </p><p>不使用变量去接收它，就可以作为多行注释使用。  </p><p>Python中基本上不区分单引号和双引号。  </p><h2 id="字符串的引号嵌套"><a href="#字符串的引号嵌套" class="headerlink" title="字符串的引号嵌套"></a>字符串的引号嵌套</h2><p>当字符串中有单引号或者双引号时，可以通过以下几种方法进行嵌套：  </p><ul><li><p>单引号定义法，可以内含双引号</p></li><li><p>双引号定义法，可以内含单引号</p></li><li><p>可以使用转义字符<code>\</code>来将引号解除效用，变成普通字符串</p></li></ul><p>例：将<code>&quot;My name is &#39;Bigglesworth&#39;&quot;</code>存储至变量<code>sentence</code>并输出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sentence = <span class="string">&quot;\&quot;My name is \&#x27;Bigglesworth\&#x27;\&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(sentence)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;My name is &#x27;Bigglesworth&#x27;&quot;</span><br></pre></td></tr></table></figure><h2 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h2><p>如果我们有两个字符串字面量，可以将其拼接成一个字符串，通过<code>+</code>号即可完成。  </p><p>例：将<code>My name is </code>和<code>Bigglesworth</code>拼接在一起。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;My name is &quot;</span> + <span class="string">&quot;Bigglesworth&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">My name is Bigglesworth</span><br></pre></td></tr></table></figure><p>字面量和变量或变量和变量之间会使用拼接。  </p><p>例：将<code>九磅十五便士</code>存入变量<code>money</code>中，利用字符串拼接输出<code>衬衫的价格为九磅十五便士</code>。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">money = <span class="string">&quot;九磅十五便士&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;衬衫的价格是&quot;</span> + money)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">衬衫的价格是九磅十五便士</span><br></pre></td></tr></table></figure><p>注：字符串不能与整数或者浮点数之类的进行拼接。</p><h2 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h2><h3 id="普通格式化"><a href="#普通格式化" class="headerlink" title="普通格式化"></a>普通格式化</h3><p>通过格式符号来进行占位，然后将变量（该变量可以是任意类型的变量）编程字符串放入占位的地方。  </p><p>常用的格式符号：  </p><table><thead><tr><th align="center">格式符号</th><th align="center">转化</th></tr></thead><tbody><tr><td align="center">%s</td><td align="center">将内容转换成字符串，放入占位位置</td></tr><tr><td align="center">%d</td><td align="center">将内容转换成整数，放入占位位置</td></tr><tr><td align="center">%f</td><td align="center">将内容转换成浮点型，放入占位位置</td></tr></tbody></table><p>例：输出<code>我的年龄是19岁，班级号为2001</code>，其中数字使用字符串格式化操作。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">19</span></span><br><span class="line">class_num = <span class="number">2001</span></span><br><span class="line">message = <span class="string">&quot;我的年龄是%d岁，班级号为%d&quot;</span> % (age, class_num)</span><br><span class="line"><span class="built_in">print</span>(message)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我的年龄是19岁，班级号为2001</span><br></pre></td></tr></table></figure><p>注：对于多个变量占位的情况，变量要用括号括起来，并按照占位的顺序填入。  </p><h3 id="快速格式化"><a href="#快速格式化" class="headerlink" title="快速格式化"></a>快速格式化</h3><p>语法：<code>f&quot;内容&#123;变量&#125;&quot;</code>  </p><p>例：将上述例子利用快速格式化进行输出。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">19</span></span><br><span class="line">class_num = <span class="number">2001</span></span><br><span class="line">message = <span class="string">f&quot;我的年龄是<span class="subst">&#123;age&#125;</span>岁，班级号为<span class="subst">&#123;class_num&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">print</span>(message)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我的年龄是<span class="number">19</span>岁，班级号为<span class="number">2001</span></span><br></pre></td></tr></table></figure><h2 id="格式化的精度控制"><a href="#格式化的精度控制" class="headerlink" title="格式化的精度控制"></a>格式化的精度控制</h2><p>我们可以使用辅助符号<code>m.n</code>来控制数据的宽度和精度。  </p><ul><li><p>m用来控制宽度，要求是数字（很少使用），设置的宽度小于数字自身，不生效</p></li><li><p>.n用来控制小数点精度，要求是数字，会进行小数的四舍五入</p></li></ul><p>示例：  </p><ul><li><p>%5d：表示将整数的宽度控制在5位，如数字11，被设置为5d，就会变成：<code>[空格][空格][空格]11</code>，用三个空格补足宽度。</p></li><li><p>%5.2f：表示将宽度控制为5，将小数点精度设置为2；小数点和小数部分也算入宽度计算。如，对11.345设置了%7.2f后，结果是：<code>[空格][空格]11.35</code>。2个空格补足宽度，小数部分限制2位精度后，四舍五入为.35</p></li><li><p>%.2f：表示不限制宽度，只设置小数点精度为2，如11.345设置%2.f后，结果为11.35.</p></li></ul><h2 id="表达式格式化"><a href="#表达式格式化" class="headerlink" title="表达式格式化"></a>表达式格式化</h2><p>表达式：一条具有明确执行结果的代码语句。  </p><p>在无需使用变量进行数据存储的时候，可以直接格式化表达式，简化代码。  </p><p>例：计算<code>2 * 5</code>的值。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;2 * 5的结果是：<span class="subst">&#123;<span class="number">2</span> * <span class="number">5</span>&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span> * <span class="number">5</span>的结果是：<span class="number">10</span></span><br></pre></td></tr></table></figure><h1 id="数据输出"><a href="#数据输出" class="headerlink" title="数据输出"></a>数据输出</h1><h2 id="字面量输出"><a href="#字面量输出" class="headerlink" title="字面量输出"></a>字面量输出</h2><p>直接输出要输出的内容。  </p><p>例：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">3.1415926</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Biggleswotrh&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3.1415926</span><br><span class="line">Biggleswotrh</span><br></pre></td></tr></table></figure><h2 id="变量输出"><a href="#变量输出" class="headerlink" title="变量输出"></a>变量输出</h2><p>可以直接输出一个变量的值。  </p><p>例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10086</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10086</span><br></pre></td></tr></table></figure><h2 id="end输出"><a href="#end输出" class="headerlink" title="end输出"></a>end输出</h2><p>一般情况下，直接利用<code>print</code>函数输出会默认换行，因此可以在<code>print()</code>的括号中的最后加上<code>, end = &#39;&#39;</code>，可以防止其自动换行，当然也可以在<code>end</code>里面加上内容，作为输出的结尾。  </p><p>例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Bigglesworth&quot;</span>, end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">3.14</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">6.28</span>, end = <span class="string">&#x27;a&#x27;</span>)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Bigglesworth3.14</span><br><span class="line">6.28a</span><br></pre></td></tr></table></figure><h2 id="加号拼接"><a href="#加号拼接" class="headerlink" title="加号拼接"></a>加号拼接</h2><p>该方法只针对于字符串，通过加号来对字符串进行拼接。  </p><p>例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">&quot;27.56&quot;</span></span><br><span class="line">float1 = <span class="number">27.56</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;数据为：&quot;</span> + str1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;数据为：&quot;</span> + <span class="built_in">str</span>(float1))</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">数据为：27.56</span><br><span class="line">数据为：27.56</span><br></pre></td></tr></table></figure><h2 id="format格式"><a href="#format格式" class="headerlink" title="format格式"></a>format格式</h2><p>利用<code>format</code>来进行输出，在<code>print</code>中用花括号进行占位，花括号中的值代表后面占位的字面量或者变量的顺序。  </p><p>例：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">27.56</span></span><br><span class="line">b = <span class="number">28.99</span></span><br><span class="line">c = <span class="number">29.66</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;数据为：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(b))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;abc的数据分别为：&#123;0&#125;，&#123;1&#125;，&#123;2&#125;&quot;</span>.<span class="built_in">format</span>(a, b, c))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;abc的数据分别为：&#123;1&#125;，&#123;0&#125;，&#123;2&#125;&quot;</span>.<span class="built_in">format</span>(a, b, c))</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">数据为：28.99</span><br><span class="line">abc的数据分别为：27.56，28.99，29.66</span><br><span class="line">abc的数据分别为：28.99，27.56，29.66</span><br></pre></td></tr></table></figure><h2 id="print-f”-”-用法"><a href="#print-f”-”-用法" class="headerlink" title="print(f”{}”)用法"></a>print(f”{}”)用法</h2><p>该用法在上述中提到过，与其使用方法一致。  </p><p>例：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">27.56</span></span><br><span class="line">b = <span class="number">28.99</span></span><br><span class="line">c = <span class="number">29.66</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;数据为：<span class="subst">&#123;a&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;abc的数据分别为：<span class="subst">&#123;a&#125;</span>，<span class="subst">&#123;b&#125;</span>，<span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">数据为：27.56</span><br><span class="line">abc的数据分别为：27.56，28.99，29.66</span><br></pre></td></tr></table></figure><h2 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h2><table><thead><tr><th align="center">字符</th><th align="center">含有</th></tr></thead><tbody><tr><td align="center">%s</td><td align="center">字符串</td></tr><tr><td align="center">%d</td><td align="center">有符号十进制整数，%06d表示输出的整数显示位数字，不足的地方使用0补全</td></tr><tr><td align="center">%f</td><td align="center">浮点数，%.2f表示小数点后只显示两位</td></tr><tr><td align="center">%%</td><td align="center">输出%</td></tr></tbody></table><p>该用法在上述中提到过，与其使用方法一致。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">19</span></span><br><span class="line">class_num = <span class="number">2001</span></span><br><span class="line">message = <span class="string">&quot;我的年龄是%d岁，班级号为%d&quot;</span> % (age, class_num)</span><br><span class="line"><span class="built_in">print</span>(message)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我的年龄是19岁，班级号为2001</span><br></pre></td></tr></table></figure><h1 id="数据输入"><a href="#数据输入" class="headerlink" title="数据输入"></a>数据输入</h1><h2 id="input-函数"><a href="#input-函数" class="headerlink" title="input()函数"></a>input()函数</h2><p>数据输入需要使用到<code>input()</code>函数，需要用一个变量来接收存储该语句获取的键盘输入数据。</p><p>例：输入名字并将其输出。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;What&#x27;s your name?&quot;</span>)</span><br><span class="line">name = <span class="built_in">input</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Oh, your name is <span class="subst">&#123;name&#125;</span>!&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">What&#x27;s your name?</span><br><span class="line"></span><br><span class="line">Bigglesworth</span><br><span class="line">Oh, your name is Bigglesworth!</span><br></pre></td></tr></table></figure><p>也可以直接把提示信息写在<code>input()</code>函数的括号内。  </p><p>例：将上面的例子中的<code>print</code>函数省略。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="built_in">input</span>(<span class="string">&quot;What&#x27;s your name?&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Oh, your name is <span class="subst">&#123;name&#125;</span>!&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">What&#x27;s your name?Bigglesworth</span><br><span class="line">Oh, your name is Bigglesworth!)</span><br></pre></td></tr></table></figure><p>注：<code>input</code>函数获取的是字符串类型。</p><p>例：从键盘输入两个数字，输出它们相加的结果。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入x&quot;</span>))</span><br><span class="line">y = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入y&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;x + y = <span class="subst">&#123;x + y&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">请输入x10</span><br><span class="line"></span><br><span class="line">请输入y20</span><br><span class="line">x + y = 30</span><br></pre></td></tr></table></figure><h2 id="split-函数"><a href="#split-函数" class="headerlink" title="split()函数"></a>split()函数</h2><p>在Python中，<code>input()</code>函数所接受的数据返回为一个<code>string</code>类型，如果一行中有多个数据的话，则需要使用<code>split()</code>函数进行切割，切割后返回一个列表（列表会在后续具体讲到）。  </p><p>例：在一行输入若干个数字，将其输出。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data = <span class="built_in">input</span>().split()</span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3 1 4 1 5 9 2 6</span><br><span class="line">[&#x27;3&#x27;, &#x27;1&#x27;, &#x27;4&#x27;, &#x27;1&#x27;, &#x27;5&#x27;, &#x27;9&#x27;, &#x27;2&#x27;, &#x27;6&#x27;]</span><br></pre></td></tr></table></figure><h1 id="布尔类型和比较运算符"><a href="#布尔类型和比较运算符" class="headerlink" title="布尔类型和比较运算符"></a>布尔类型和比较运算符</h1><h2 id="布尔类型的定义"><a href="#布尔类型的定义" class="headerlink" title="布尔类型的定义"></a>布尔类型的定义</h2><p>布尔类型的字面量：  </p><ul><li><p>True表示真（是、肯定）</p></li><li><p>False表示假（否，否定）</p></li></ul><p>定义变量存储布尔类型数据：  </p><p><code>变量名称 = 布尔类型字面量</code>  </p><p>布尔类型不仅可以自行定义，同时也可以使用比较运算符进行比较运算得到布尔类型的结果。  </p><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><table><thead><tr><th align="center">运算符</th><th align="center">描述</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center">==</td><td align="center">判断内容是否相等，满足为True，不满足为False</td><td align="center">如a=3,b=3，则(a == b)为True</td></tr><tr><td align="center">!=</td><td align="center">判断内容是否不相等，满足为True，不满足为False</td><td align="center">如a=1，b=3，则(a != b)为True</td></tr><tr><td align="center">&gt;</td><td align="center">判断运算符左侧内容是否大于右侧，满足为True，不满足为False</td><td align="center">如a=7,b=3，则(a &gt; b)为True</td></tr><tr><td align="center">&lt;</td><td align="center">判断运算符左侧内容是否小于右侧，满足为True，不满足为False</td><td align="center">如a=3,b=7，则(a &lt; b)为True</td></tr><tr><td align="center">&gt;=</td><td align="center">判断运算符左侧内容是否大于等于右侧，满足为True，不满足为False</td><td align="center">如a=3,b=3，则(a &gt;= b)为True</td></tr><tr><td align="center">&lt;=</td><td align="center">判断运算符左侧内容是否小于等于右侧，满足为True，不满足为False</td><td align="center">如a=3,b=3，则(a &lt;= b)为True</td></tr></tbody></table><p>注：首字母一定要大写。  </p><h1 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h1><h2 id="if语句的基本格式"><a href="#if语句的基本格式" class="headerlink" title="if语句的基本格式"></a>if语句的基本格式</h2><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 要判断的条件:</span><br><span class="line">    条件成立时，要做的事情</span><br></pre></td></tr></table></figure><p>注：</p><ul><li><p>Python是通过缩进来识别语句的归属的，所以第二行前要有四个空格，以此来说明这句话属于第一行的if语句。  </p></li><li><p>条件后面要有一个英文的冒号。</p></li><li><p>可以有不止一行要做的事情，只需要保证他们都有着相同的缩进即可。</p></li></ul><p>例：输入一个整数，判断它是否是偶数，是的话输出<code>Yes</code>。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span>:  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Yes&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">Yes</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><p>判断语句的结果，必须是布尔类型True或False，True会执行if内的代码语句，False则不会执行。  </p><h2 id="if-else语句"><a href="#if-else语句" class="headerlink" title="if else语句"></a>if else语句</h2><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件:</span><br><span class="line">    满足条件时要做的事</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    不满足条件时要做的事</span><br></pre></td></tr></table></figure><p>例：输入一个整数，判断它是否是偶数，是的话输出<code>Yes</code>，否则输出<code>No</code>。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span>:  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Yes&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;No&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">Yes</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">No</span><br></pre></td></tr></table></figure><h2 id="if-elif-else语句"><a href="#if-elif-else语句" class="headerlink" title="if elif else语句"></a>if elif else语句</h2><p>基本格式：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件<span class="number">1</span>::</span><br><span class="line">    条件<span class="number">1</span>满足时应做的事情</span><br><span class="line"><span class="keyword">elif</span> 条件<span class="number">2</span>:</span><br><span class="line">    条件<span class="number">2</span>满足时应做的事情</span><br><span class="line"><span class="keyword">elif</span> 条件N:</span><br><span class="line">    条件N满足时应做的事情</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    所有条件都不满足时应做的事情</span><br></pre></td></tr></table></figure><p>例：输入一个成绩，根据表格输出对应评价。  </p><table><thead><tr><th align="center">成绩</th><th align="center">评价</th></tr></thead><tbody><tr><td align="center">90~100</td><td align="center">优秀</td></tr><tr><td align="center">80~89</td><td align="center">良好</td></tr><tr><td align="center">70~79</td><td align="center">中等</td></tr><tr><td align="center">60~69</td><td align="center">及格</td></tr><tr><td align="center">0~59</td><td align="center">不及格</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">score = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">if</span> score &gt;= <span class="number">90</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;优秀&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> score &gt;= <span class="number">80</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;良好&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> score &gt;= <span class="number">70</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;中等&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> score &gt;= <span class="number">60</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;及格&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;不及格&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">73</span><br><span class="line">中等</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">43</span><br><span class="line">不及格</span><br></pre></td></tr></table></figure><h2 id="判断语句的嵌套"><a href="#判断语句的嵌套" class="headerlink" title="判断语句的嵌套"></a>判断语句的嵌套</h2><p>基本格式：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件<span class="number">1</span>:</span><br><span class="line">    满足条件<span class="number">1</span> 做的事情<span class="number">1</span></span><br><span class="line">    满足条件<span class="number">1</span> 做的事情<span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> 条件<span class="number">2</span>:</span><br><span class="line">        满足条件<span class="number">2</span> 做的事情<span class="number">1</span></span><br><span class="line">        满足条件<span class="number">2</span> 做的事情<span class="number">2</span></span><br></pre></td></tr></table></figure><p>第二个if，属于第一个if内，只有第一个if满足条件，才会执行第二个if。  </p><p>嵌套的关键点在于<strong>空格缩进</strong>，通过空格缩进，来决定语句之间的<strong>层次关系</strong>。  </p><p>例：输入三个数字，将它们按照从小到大的顺序输出。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入a&quot;</span>))</span><br><span class="line">b = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入b&quot;</span>))</span><br><span class="line">c = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入c&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> a &lt; b:</span><br><span class="line">    <span class="keyword">if</span> b &lt; c:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;a&#125;</span>&lt;<span class="subst">&#123;b&#125;</span>&lt;<span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> a &lt; c:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;a&#125;</span>&lt;<span class="subst">&#123;c&#125;</span>&lt;<span class="subst">&#123;b&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;c&#125;</span>&lt;<span class="subst">&#123;a&#125;</span>&lt;<span class="subst">&#123;b&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">if</span> a &lt; c:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;b&#125;</span>&lt;<span class="subst">&#123;a&#125;</span>&lt;<span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> b &lt; c:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;b&#125;</span>&lt;<span class="subst">&#123;c&#125;</span>&lt;<span class="subst">&#123;a&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;c&#125;</span>&lt;<span class="subst">&#123;b&#125;</span>&lt;<span class="subst">&#123;a&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">请输入a10</span><br><span class="line"></span><br><span class="line">请输入b5</span><br><span class="line"></span><br><span class="line">请输入c8</span><br><span class="line">5&lt;8&lt;10</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">请输入a9</span><br><span class="line"></span><br><span class="line">请输入b8</span><br><span class="line"></span><br><span class="line">请输入c7</span><br><span class="line">7&lt;8&lt;9</span><br></pre></td></tr></table></figure><h1 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h1><p>逻辑运算符一般在遇到复合问题时使用，例如：如果明天不下雨并且休息，我就出去玩。对于这个命题，就用到了且这个逻辑运算符。常见的逻辑运算符一共有如下三种，他们常用于判断和循环的条件内。  </p><table><thead><tr><th align="center">名称</th><th align="center">例子</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">逻辑与</td><td align="center">a and b</td><td align="center">当a和b都为True时，为True</td></tr><tr><td align="center">逻辑或</td><td align="center">a or b</td><td align="center">当a或b有一个为True时，为True</td></tr><tr><td align="center">逻辑非</td><td align="center">not a</td><td align="center">当a为False时，为True</td></tr></tbody></table><p>例：输入一个年份<code>year</code>，判断其是否为闰年，是闰年输出<code>Yes</code>，否则输出<code>No</code>。  </p><p><em>能够整除4且不能整除100的年份为闰年，或者能整除400的为闰年</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">year = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">if</span> year % <span class="number">4</span> == <span class="number">0</span> <span class="keyword">and</span> <span class="keyword">not</span> year % <span class="number">100</span> == <span class="number">0</span> <span class="keyword">or</span> year % <span class="number">400</span> == <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Yes&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;No&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2008</span><br><span class="line">Yes</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2100</span><br><span class="line">No</span><br></pre></td></tr></table></figure><h1 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h1><h2 id="while循环的基本格式"><a href="#while循环的基本格式" class="headerlink" title="while循环的基本格式"></a>while循环的基本格式</h2><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 条件:</span><br><span class="line">    条件满足时，做的事情<span class="number">1</span></span><br><span class="line">    条件满足时，做的事情<span class="number">2</span></span><br><span class="line">    条件满足时，做的事情<span class="number">3</span></span><br></pre></td></tr></table></figure><p>注：只要条件满足，就会无限循环执行。  </p><p>例：输出<code>0~9</code>的所有数字。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">10</span>:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td></tr></table></figure><p>注意点：  </p><ul><li><p>while的条件的结果需要是布尔类型，True表示继续循环，False表示结束循环</p></li><li><p>需要设置循环终止的条件，如i += 1配合i &lt; 10，就能确保10次后停下，否则将无限循环</p></li><li><p>空格缩进和if判断一样，都需要设置</p></li></ul><h2 id="while循环的嵌套应用"><a href="#while循环的嵌套应用" class="headerlink" title="while循环的嵌套应用"></a>while循环的嵌套应用</h2><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 条件<span class="number">1</span>:</span><br><span class="line">    条件<span class="number">1</span>满足时，做的事情<span class="number">1</span></span><br><span class="line">    条件<span class="number">1</span>满足时，做的事情<span class="number">2</span></span><br><span class="line">    条件<span class="number">1</span>满足时，做的事情<span class="number">3</span></span><br><span class="line">    <span class="keyword">while</span> 条件<span class="number">2</span>:</span><br><span class="line">        条件<span class="number">2</span>满足时，做的事情<span class="number">1</span></span><br><span class="line">        条件<span class="number">2</span>满足时，做的事情<span class="number">2</span></span><br><span class="line">        条件<span class="number">2</span>满足时，做的事情<span class="number">3</span></span><br></pre></td></tr></table></figure><p>例：输入一个正整数<code>n</code>，打印仅由<code>*</code>构成的<code>n</code>行直角三角形。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; n:</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> j &lt;= i:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;*&#x27;</span>, end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">*</span><br><span class="line">**</span><br><span class="line">***</span><br><span class="line">****</span><br><span class="line">*****</span><br></pre></td></tr></table></figure><h2 id="for循环的基础语法"><a href="#for循环的基础语法" class="headerlink" title="for循环的基础语法"></a>for循环的基础语法</h2><p>除了while循环语句外，Python同样提供了for循环语句。  </p><p>两者能完成的功能基本差不多，但仍有一些区别：  </p><ul><li><p>while循环的循环条件是自定义的，<strong>自行控制循环条件</strong></p></li><li><p>fore循环是一种“轮询”机制，是对一批内容进行<strong>逐个处理</strong></p></li></ul><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 临时变量 <span class="keyword">in</span> 待处理数据集:</span><br><span class="line">    循环满足条件时执行的代码</span><br></pre></td></tr></table></figure><h2 id="遍历字符串"><a href="#遍历字符串" class="headerlink" title="遍历字符串"></a>遍历字符串</h2><p>例：遍历<code>Bigglesworth</code>，并将变量的结果打印出来。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;Bigglesworth&quot;</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> name:  </span><br><span class="line">    <span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">B</span><br><span class="line">i</span><br><span class="line">g</span><br><span class="line">g</span><br><span class="line">l</span><br><span class="line">e</span><br><span class="line">s</span><br><span class="line">w</span><br><span class="line">o</span><br><span class="line">r</span><br><span class="line">t</span><br><span class="line">h</span><br></pre></td></tr></table></figure><p>for循环就是将被处理的数据内容挨个取出，赋值给变量。  </p><p>可以看出，for循环是将字符串的内容<strong>依次取出</strong>，所以，for循环也被称之为<strong>遍历循环</strong>。  </p><p>同while循环不同，for循环是无法定义循环条件的，只能从被处理的数据集中，依次取出内容进行处理。  </p><p>所以，理论上讲，Python的for循环无法构建无限循环（被处理的数据集不可能无限大）。  </p><h2 id="range语句"><a href="#range语句" class="headerlink" title="range语句"></a>range语句</h2><p>for循环语句，本质上是遍历：序列类型。  </p><p>我们可以通过<code>range</code>语句，获得一个简单的数字序列。  </p><h3 id="语法1"><a href="#语法1" class="headerlink" title="语法1"></a>语法1</h3><p><code>range(num)</code>  </p><p>获取一个从<code>0</code>开始，到<code>num</code>结束的数字序列（不包含<code>num</code>本身）  </p><p>如<code>range(5)</code>取得的数据是：<code>[0, 1, 2, 3, 4]</code>。  </p><h3 id="语法2"><a href="#语法2" class="headerlink" title="语法2"></a>语法2</h3><p><code>range(num1, num2)</code>  </p><p>获得一个从<code>num1</code>开始，到<code>num2</code>结束的数字序列（不含<code>num2</code>本身）  </p><p>如<code>range(5, 10)</code>取得的数据是：<code>[5, 6, 7, 8, 9]</code>。  </p><h3 id="语法3"><a href="#语法3" class="headerlink" title="语法3"></a>语法3</h3><p><code>range(num1, num2, step)</code>  </p><p>获得一个从<code>num1</code>开始，到<code>num2</code>结束的数字序列（不包含<code>num2</code>本身）  </p><p>数字之间的步长，以<code>step</code>为准（<code>step</code>默认是1）  </p><p>如<code>range(5, 10, 2)</code>取得的数据是：<code>[5, 7, 9]</code>。  </p><h2 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h2><p>for循环赋值的是临时变量，在编程规范上，作用范围（作用域），只限定在for循环内部。  </p><p>如果在for循环外部访问临时变量：  </p><ul><li><p>实际上是可以访问到的</p></li><li><p>在编程规范上，是不允许、不建议这么做的</p></li></ul><p>解决临时变量的方法是在全局变量的位置对其定义。  </p><h2 id="for循环的嵌套"><a href="#for循环的嵌套" class="headerlink" title="for循环的嵌套"></a>for循环的嵌套</h2><p>基本格式：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 临时变量 <span class="keyword">in</span> 待处理数据集（序列）:</span><br><span class="line">    循环满足条件应做的事情<span class="number">1</span></span><br><span class="line">    循环满足条件应做的事情<span class="number">2</span></span><br><span class="line">    循环满足条件应做的事情N</span><br><span class="line">        <span class="keyword">for</span> 临时变量 <span class="keyword">in</span> 待处理数据集（序列）:</span><br><span class="line">            循环满足条件应做的事情<span class="number">1</span></span><br><span class="line">            循环满足条件应做的事情<span class="number">2</span></span><br><span class="line">            循环满足条件应做的事情N</span><br></pre></td></tr></table></figure><p>例：输入一个数字<code>n</code>，求<code>1~n</code>中所有完数。  </p><p><em>完数：一个数字的所有真因子相加等于其本身，则该数字被称为完数。</em>  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>):</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, i):</span><br><span class="line">        <span class="keyword">if</span> i % j == <span class="number">0</span>:</span><br><span class="line">            count += j</span><br><span class="line">    <span class="keyword">if</span> count == i:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">100</span><br><span class="line">0</span><br><span class="line">6</span><br><span class="line">28</span><br></pre></td></tr></table></figure><h2 id="循环中断"><a href="#循环中断" class="headerlink" title="循环中断"></a>循环中断</h2><p>无论是while循环或者是for循环，都是重复性的执行特定操作。在这个重复过程中，会出现一切其它情况让我们不得不：  </p><ul><li><p>暂时跳过某次循环，直接进行下一次</p></li><li><p>提前退出循环，不再继续</p></li></ul><p>对于这种场景，Python提供了<code>continue</code>和<code>break</code>关键字用来对循环进行<strong>临时跳过</strong>和<strong>直接结束</strong>。</p><h3 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h3><p><code>continue</code>关键字用于<strong>中断本次</strong>循环，<strong>直接进入下一次</strong>循环。  </p><p><code>continue</code>可以用于<strong>for循环和while循环，效果一致</strong>。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">100</span>):</span><br><span class="line">    语句<span class="number">1</span></span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line">    语句<span class="number">2</span></span><br></pre></td></tr></table></figure><p>对于上面的这个例子中，在循环内，遇到<code>continue</code>就结束当次循环，进行下一次，所以语句2是不会执行的。  </p><p>应用场景：在循环中，因为某些原因，临时结束本次循环。  </p><p>例：输出<code>0~30</code>内的所有数字，跳过所有<code>5</code>的倍数。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">31</span>):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">5</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td></tr></table></figure><h3 id="break"><a href="#break" class="headerlink" title="break"></a>break</h3><p><code>break</code>关键字用于<strong>直接结束循环</strong>。  </p><p><code>break</code>可以用于<strong>for循环和while循环，效果一致</strong>。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">100</span>):</span><br><span class="line">    语句<span class="number">1</span></span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>对于上面这个例子。在循环内，遇到<code>break</code>就结束循环了，所以，执行了语句1后，直接执行语句3了。  </p><p>例：输出<code>0~30</code>内的所有数字，当遇到<code>10</code>的倍数时跳出循环，并输出<code>程序已结束</code>。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">31</span>):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">10</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;程序已结束&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">程序已结束</span><br></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h2><p>函数：是<strong>组织好的</strong>，<strong>可重复使用的</strong>，用来实现特定功能的<strong>代码段</strong>。  </p><p>例：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;Bigglesworth&quot;</span></span><br><span class="line">length = <span class="built_in">len</span>(name)</span><br><span class="line"><span class="built_in">print</span>(length)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">12</span><br></pre></td></tr></table></figure><p>在上述例子中，<code>len()</code>实现了对字符串的长度进行统计，可以随时进行调用，这是因为<code>len()</code>是Python中的内置函数，因此函数应该满如下几点：  </p><ul><li><p>是提前写好的</p></li><li><p>可以重复使用</p></li><li><p>实现某一种特定功能的代码段</p></li></ul><h2 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h2><p>基本格式：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">函数名</span>(<span class="params">传入参数</span>):</span><br><span class="line">    函数体</span><br><span class="line">    <span class="keyword">return</span> 返回值</span><br></pre></td></tr></table></figure><p>例：定义一个函数<code>Hello</code>，功能是输出<code>Hello World!</code>。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Hello</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello World!&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="函数的调用"><a href="#函数的调用" class="headerlink" title="函数的调用"></a>函数的调用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数名(参数)</span><br></pre></td></tr></table></figure><p>例：调用上一个例子中的函数。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Hello</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello World!&quot;</span>)</span><br><span class="line"></span><br><span class="line">Hello()</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br></pre></td></tr></table></figure><h2 id="函数注意事项"><a href="#函数注意事项" class="headerlink" title="函数注意事项"></a>函数注意事项</h2><ol><li><p>参数如不需要，可以省略</p></li><li><p>返回值如不需要，可以省略</p></li><li><p>函数必须先定义后使用</p></li></ol><h2 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h2><p>传入参数的功能是：在函数进行计算的时候，接受外部（调用时）提供的数据。  </p><p>例：定义一个加法函数，从键盘输入两个数字，将其传入加法函数，并输出结果。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;x + y&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">x = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">y = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">add(x, y)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line"></span><br><span class="line">6</span><br><span class="line">11</span><br></pre></td></tr></table></figure><ul><li><p>函数定义中，提供的<code>x</code>和<code>y</code>称之为：形式参数（形参），表示函数声明将要使用2个参数，参数之间使用逗号进行分隔</p></li><li><p>函数调用中，提供的<code>x</code>和<code>y</code>称之为：实际参数（实参），表示函数执行是时正使用的参数值，传入的时候，按照顺序传入数据，使用逗号分隔</p></li></ul><p><strong>传入参数的数量是不受限制的。</strong></p><h2 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h2><p>返回值指的就是在程序中函数完成事情后，最后给调用者的结果。  </p><p>基本格式：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">函数</span>(<span class="params">参数</span>):</span><br><span class="line">    函数体</span><br><span class="line">    <span class="keyword">return</span> 返回值</span><br><span class="line"></span><br><span class="line">变量 = 函数(参数)</span><br></pre></td></tr></table></figure><p>例：定义一个加法函数，传入两个参数，并将他们相加的结果作为返回值返回。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y</span>):</span><br><span class="line">    answer = x + y</span><br><span class="line">    <span class="keyword">return</span> answer</span><br><span class="line"></span><br><span class="line">a = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">b = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">result = add(a, b)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line"></span><br><span class="line">20</span><br><span class="line">30</span><br></pre></td></tr></table></figure><h2 id="None类型"><a href="#None类型" class="headerlink" title="None类型"></a>None类型</h2><p>如果函数中没有使用<code>return</code>语句返回数据，函数依然有返回值。  </p><p>Python中有一个特殊的字面量：<code>None</code>，其类型是：<code>&lt;class &#39;NoneType&#39;&gt;</code>。  </p><p>无返回值的函数，实际上就是返回了<code>None</code>这个字面量。</p><p>在判断中，<code>None</code>意味着假值。  </p><h2 id="函数的嵌套调用"><a href="#函数的嵌套调用" class="headerlink" title="函数的嵌套调用"></a>函数的嵌套调用</h2><p>所谓函数嵌套调用指的是一个函数里面又调用了另外一个函数。  </p><p>例：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun_b</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun_a</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    fun_b()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">fun_a()</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p>如果函数A中，调用了另外一个函数B，那么先把函数B中的任务都执行完毕之后才会回到上次函数A执行的位置。  </p><h2 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h2><p>变量<strong>作用域</strong>指的是变量的作用范围（变量在哪里可用，在哪里不可用）  </p><p>主要分为两类：局部变量和全局变量</p><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><p>所谓局部变量是定义在函数体内部的变量，即只在函数体内部生效。  </p><p>局部变量的作用：在函数体内部，临时保存数据，即当函数嗲用完成后，则销毁局部变量。  </p><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><p>所谓全局变量，指的是在函数体内、外都能生效的变量。  </p><h2 id="global关键字"><a href="#global关键字" class="headerlink" title="global关键字"></a>global关键字</h2><p>使用<code>global</code>关键字可以在函数内部声明变量为全局变量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">A</span>():</span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">B</span>():</span><br><span class="line">    num = <span class="number">500</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">C</span>():</span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line">    num = <span class="number">500</span></span><br><span class="line"></span><br><span class="line">A()</span><br><span class="line">B()</span><br><span class="line">A()</span><br><span class="line">C()</span><br><span class="line">A()</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">100</span><br><span class="line">100</span><br><span class="line">500</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">100</span><br><span class="line">100</span><br><span class="line">500</span><br></pre></td></tr></table></figure><h1 id="数据容器"><a href="#数据容器" class="headerlink" title="数据容器"></a>数据容器</h1><h2 id="list列表"><a href="#list列表" class="headerlink" title="list列表"></a>list列表</h2><h3 id="列表的定义"><a href="#列表的定义" class="headerlink" title="列表的定义"></a>列表的定义</h3><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义字面量</span></span><br><span class="line">[元素<span class="number">1</span>, 元素<span class="number">2</span>, 元素<span class="number">3</span>, 元素<span class="number">4</span>, ...]</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义变量</span></span><br><span class="line">变量名称 = [元素<span class="number">1</span>, 元素<span class="number">2</span>, 元素<span class="number">3</span>, 元素<span class="number">4</span>, ...]</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义空列表</span></span><br><span class="line">变量名称 = []</span><br><span class="line">变量名称 = <span class="built_in">list</span>()</span><br></pre></td></tr></table></figure><p>列表中的每一个数据，称之为元素。  </p><ul><li><p>以<code>[]</code>作为标识</p></li><li><p>列表内每一个元素之间用<code>,</code>逗号隔开</p></li></ul><p>注：<strong>列表可以一次存储多个数据，且可以为不同的数据类型，支持嵌套。</strong>  </p><p>例：定义一个列表<code>l</code>，存储的数据为<code>Bigglesworth</code>，<code>3.1415926</code>，<code>[1, 2, 3]</code>，输出该列表和它的类型。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="string">&#x27;Bigglesworth&#x27;</span>, <span class="number">3.1415926</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(l))</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;Bigglesworth&#x27;, 3.1415926, [1, 2, 3]]</span><br><span class="line">&lt;class &#x27;list&#x27;&gt;</span><br></pre></td></tr></table></figure><h3 id="list列表的下标索引"><a href="#list列表的下标索引" class="headerlink" title="list列表的下标索引"></a>list列表的下标索引</h3><p>基本格式：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">列表[下标索引]</span><br></pre></td></tr></table></figure><p>正向下标索引从<code>0</code>开始，反向下标索引从<code>-1</code>开始进行索引。  </p><p>例：定义一个列表<code>l</code>，其内容是圆周率小数点后<code>5</code>位，输出第一个元素和最后一个元素。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>]</span><br><span class="line"><span class="built_in">print</span>(l[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(l[-<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">9</span><br></pre></td></tr></table></figure><p>对于嵌套列表，同样地，下标索引也可以进行嵌套。  </p><p>例：定义一个列表<code>l</code>，存储<code>1~9</code>的数字，每三个分为一组，输出<code>5</code>。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">l = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line"><span class="built_in">print</span>(l[<span class="number">1</span>][<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><p>注意事项：要注意下标索引的取值范围，超出范围无法取出元素，并且会报错。  </p><h3 id="列表的常用操作"><a href="#列表的常用操作" class="headerlink" title="列表的常用操作"></a>列表的常用操作</h3><h4 id="列表的查询功能"><a href="#列表的查询功能" class="headerlink" title="列表的查询功能"></a>列表的查询功能</h4><p>查找指定元素在列表的下标，如果找不到，报错<code>ValueError</code>。  </p><p>基本格式：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">列表.index(元素)</span><br></pre></td></tr></table></figure><p>例：定义一个列表<code>l</code>，其内容是圆周率小数点后<code>5</code>位，分别查询是否存在元素<code>1</code>和<code>0</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>]</span><br><span class="line"><span class="built_in">print</span>(l.index(<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(l.index(<span class="number">0</span>))</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">ValueError: 0 is not in list</span><br></pre></td></tr></table></figure><h4 id="列表的修改功能"><a href="#列表的修改功能" class="headerlink" title="列表的修改功能"></a>列表的修改功能</h4><p>修改特定位置（索引）的元素值，直接对指定下标（正向、反向下标均可）的值进行重新赋值（修改）。    </p><p>基本格式：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">列表[下标] = 值</span><br></pre></td></tr></table></figure><p>例：定义一个列表<code>l</code>，其内容是<code>Bigglesworth</code>，将其改为<code>Areskey</code>。  </p><h4 id="插入元素"><a href="#插入元素" class="headerlink" title="插入元素"></a>插入元素</h4><p>在指定的下标位置，插入指定的元素。  </p><p>基本格式：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">列表.insert(下标, 元素)</span><br></pre></td></tr></table></figure><p>例：定义一个列表<code>l</code>，其内容是圆周率小数点后<code>5</code>位，在第<code>3</code>（即下标为<code>2</code>）位插入<code>999</code>。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>]</span><br><span class="line">l.insert(<span class="number">2</span>, <span class="number">999</span>)</span><br><span class="line"><span class="built_in">print</span>(l)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1, 4, 999, 1, 5, 9]</span><br></pre></td></tr></table></figure><h4 id="追加元素"><a href="#追加元素" class="headerlink" title="追加元素"></a>追加元素</h4><p>将指定元素，追加到列表的尾部。  </p><p>基本格式：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">列表.append(元素)</span><br></pre></td></tr></table></figure><p>例：定义一个列表<code>l</code>，其内容是圆周率小数点后<code>5</code>位，在最后追加一个新的元素<code>999</code>。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>]</span><br><span class="line">l.append(<span class="number">999</span>)</span><br><span class="line"><span class="built_in">print</span>(l)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1, 4, 1, 5, 9, 999]</span><br></pre></td></tr></table></figure><h4 id="追加多个元素"><a href="#追加多个元素" class="headerlink" title="追加多个元素"></a>追加多个元素</h4><p>将其他数据容器的内容取出，一次追加到列表尾部。  </p><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">列表.extend(其它数据容器)</span><br></pre></td></tr></table></figure><p>例：定义两个列表分别为<code>a</code>和<code>b</code>，<code>a</code>中的元素是<code>1</code>，<code>2</code>，<code>3</code>，<code>b</code>中的元素是<code>4</code>，<code>5</code>，<code>6</code>，将<code>b</code>列表合并到<code>a</code>列表中。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">a.extend(b)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1, 2, 3, 4, 5, 6]</span><br></pre></td></tr></table></figure><h4 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h4><p>基本格式：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#语法1：</span></span><br><span class="line"><span class="keyword">del</span> 列表[下标]</span><br><span class="line"><span class="comment">#语法2：</span></span><br><span class="line">列表.pop(下标)</span><br></pre></td></tr></table></figure><p>例：定义一个列表<code>l</code>，其内容是圆周率小数点后<code>5</code>位，用两种方式分别删除第一个元素和最后一个元素。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>]</span><br><span class="line"><span class="keyword">del</span> l[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line">l.pop(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(l)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[4, 1, 5, 9]</span><br><span class="line">[4, 1, 5]</span><br></pre></td></tr></table></figure><p>注意点：使用<code>pop</code>可以返回删除的元素。  </p><h4 id="删除第一个匹配项"><a href="#删除第一个匹配项" class="headerlink" title="删除第一个匹配项"></a>删除第一个匹配项</h4><p>删除某元素在列表中的第一个匹配项。</p><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">列表.remove(元素)</span><br></pre></td></tr></table></figure><p>例：定义一个列表<code>l</code>，其内容是圆周率小数点后<code>5</code>位，删除第一个出现的<code>1</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>]</span><br><span class="line">l.remove(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(l)</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[4, 1, 5, 9]</span><br></pre></td></tr></table></figure><h4 id="清空列表"><a href="#清空列表" class="headerlink" title="清空列表"></a>清空列表</h4><p>清空列表内容。</p><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">列表.clear()</span><br></pre></td></tr></table></figure><p>例：定义一个列表<code>l</code>，其内容是圆周率小数点后<code>5</code>位，将其清空。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>]</span><br><span class="line">l.clear()</span><br><span class="line"><span class="built_in">print</span>(l)</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[]</span><br></pre></td></tr></table></figure><h4 id="统计某个元素的数量"><a href="#统计某个元素的数量" class="headerlink" title="统计某个元素的数量"></a>统计某个元素的数量</h4><p>统计某元素在列表内的数量。</p><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">列表.count(元素)</span><br></pre></td></tr></table></figure><p>例：定义一个列表<code>l</code>，其内容是圆周率小数点后<code>5</code>位，统计其中元素<code>1</code>的数量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>]</span><br><span class="line"><span class="built_in">print</span>(l.count(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><h4 id="查找元素位置"><a href="#查找元素位置" class="headerlink" title="查找元素位置"></a>查找元素位置</h4><p>查找列表中某个元素第一次出现的下标，如果没有查到则报错<code>ValueError</code>。</p><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">列表.index(元素)</span><br></pre></td></tr></table></figure><p>例：定义一个列表<code>l</code>，其内容是圆周率小数点后<code>5</code>位，查找元素<code>1</code>的下标。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>]</span><br><span class="line"><span class="built_in">print</span>(l.index(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0</span><br></pre></td></tr></table></figure><h4 id="统计所有元素的数量"><a href="#统计所有元素的数量" class="headerlink" title="统计所有元素的数量"></a>统计所有元素的数量</h4><p>统计列表内有多少元素。</p><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">len</span>(列表)</span><br></pre></td></tr></table></figure><p>例：定义一个列表<code>l</code>，其内容是圆周率小数点后<code>5</code>位，统计其中一共有多少个元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(l))</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><table><thead><tr><th align="center">编号</th><th align="center">使用方式</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">列表.append(元素)</td><td align="center">向列表中追加一个元素</td></tr><tr><td align="center">2</td><td align="center">列表.extend(容器)</td><td align="center">将数据容器的内容依次取出，追加到列表尾部</td></tr><tr><td align="center">3</td><td align="center">列表.insert(下标, 元素)</td><td align="center">在指定下标处，插入指定的元素</td></tr><tr><td align="center">4</td><td align="center">del 列表(下标)</td><td align="center">删除列表指定下标元素</td></tr><tr><td align="center">5</td><td align="center">列表.pop(下标)</td><td align="center">删除列表指定下标元素</td></tr><tr><td align="center">6</td><td align="center">列表.remove(元素)</td><td align="center">从前向后，删除此元素第一个匹配项</td></tr><tr><td align="center">7</td><td align="center">列表.clear(元素)</td><td align="center">清空列表</td></tr><tr><td align="center">8</td><td align="center">列表.count(元素)</td><td align="center">统计此元素在列表中出现的次数</td></tr><tr><td align="center">9</td><td align="center">列表.index(元素)</td><td align="center">查找指定元素在列表中的下标<br>找不到报错<code>ValueError</code></td></tr><tr><td align="center">10</td><td align="center">len(列表)</td><td align="center">统计容器中有多少个元素</td></tr></tbody></table><h3 id="列表的特点"><a href="#列表的特点" class="headerlink" title="列表的特点"></a>列表的特点</h3><ul><li>可以容纳的元素数量上限为（2<sup>63</sup>-1，即9223372036854775807个）</li><li>可以容纳不同类型的元素（混装）</li><li>数据是有序存储的（有下标序号）</li><li>允许重复数据存在</li><li>可以修改（增加或删除元素等）</li></ul><h3 id="list列表的遍历"><a href="#list列表的遍历" class="headerlink" title="list列表的遍历"></a>list列表的遍历</h3><h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><p>基本格式：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">index = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> index &lt; <span class="built_in">len</span>(列表):</span><br><span class="line">    元素 = 列表[index]</span><br><span class="line">    对元素进行处理</span><br><span class="line">    index += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>例：定义一个列表<code>l</code>，其内容是圆周率小数点后<code>5</code>位，将这些元素依次输出，每两个元素之间用一个空格隔开。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>]</span><br><span class="line">index = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> index &lt; <span class="built_in">len</span>(l):</span><br><span class="line">    <span class="built_in">print</span>(l[index], end = <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    index += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 4 1 5 9 </span><br></pre></td></tr></table></figure><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 临时变量 <span class="keyword">in</span> 数据容器:</span><br><span class="line">    对临时变量进行处理</span><br></pre></td></tr></table></figure><p>例：定义一个列表<code>l</code>，其内容是圆周率小数点后<code>5</code>位，将这些元素依次输出，每两个元素之间用一个空格隔开。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>]</span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> l:</span><br><span class="line">    <span class="built_in">print</span>(element, end = <span class="string">&#x27; &#x27;</span>)</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 4 1 5 9 </span><br></pre></td></tr></table></figure><h2 id="tuple元组"><a href="#tuple元组" class="headerlink" title="tuple元组"></a>tuple元组</h2><h3 id="元组的定义"><a href="#元组的定义" class="headerlink" title="元组的定义"></a>元组的定义</h3><p>元组定义：定义元组使用<strong>小括号</strong>，且使用<strong>逗号</strong>隔开各个数据，数据可以是不同的数据类型。</p><p>基本格式：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义元组字面量</span></span><br><span class="line">(元素, 元素, ......, 元素)</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义元组变量</span></span><br><span class="line">变量名称 = (元素, 元素, ......, 元素)</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义空元组</span></span><br><span class="line">变量名称 = ()    <span class="comment">#方式1</span></span><br><span class="line">变量名称 = <span class="built_in">tuple</span>()    <span class="comment">#方式2</span></span><br></pre></td></tr></table></figure><p>例：定义一个元组<code>t</code>，存储的数据为<code>Bigglesworth</code>，<code>3.1415926</code>，<code>[1, 2, 3]</code>，输出该元组和它的类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="string">&#x27;Bigglesworth&#x27;</span>, <span class="number">3.14</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(t)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(t))</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(&#x27;Bigglesworth&#x27;, 3.14, [1, 2, 3])</span><br><span class="line">&lt;class &#x27;tuple&#x27;&gt;</span><br></pre></td></tr></table></figure><p><strong>注意点：如果元组内只有一个数据，这个数据后面要添加逗号。</strong></p><h3 id="tuple元组的下标索引"><a href="#tuple元组的下标索引" class="headerlink" title="tuple元组的下标索引"></a>tuple元组的下标索引</h3><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">元组[下标索引]</span><br></pre></td></tr></table></figure><p>正向下标索引从<code>0</code>开始，反向下标索引从<code>-1</code>开始进行索引。</p><p>例：定义一个元组<code>t</code>，其内容是圆周率小数点后<code>5</code>位，输出第一个元素和最后一个元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>)</span><br><span class="line"><span class="built_in">print</span>(t[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(t[-<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">9</span><br></pre></td></tr></table></figure><p>对于嵌套列表，同样地，下标索引也可以进行嵌套。</p><p>例：定义一个元组<code>t</code>，存储<code>1~9</code>的数字，每三个分为一组，输出<code>5</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t = ((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>), (<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>))</span><br><span class="line"><span class="built_in">print</span>(t[<span class="number">1</span>][<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><p>注意事项：要注意下标索引的取值范围，超出范围无法取出元素，并且会报错。</p><h3 id="元组的常用操作"><a href="#元组的常用操作" class="headerlink" title="元组的常用操作"></a>元组的常用操作</h3><h4 id="查找元素位置-1"><a href="#查找元素位置-1" class="headerlink" title="查找元素位置"></a>查找元素位置</h4><p>查找元组中某个元素第一次出现的下标，如果没有查到则报错<code>ValueError</code>。</p><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">元组.index(元素)</span><br></pre></td></tr></table></figure><p>例：定义一个元组<code>t</code>，其内容是圆周率小数点后<code>5</code>位，查找元素<code>1</code>的下标。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>)</span><br><span class="line"><span class="built_in">print</span>(t.index(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0</span><br></pre></td></tr></table></figure><h4 id="统计某个元素的数量-1"><a href="#统计某个元素的数量-1" class="headerlink" title="统计某个元素的数量"></a>统计某个元素的数量</h4><p>统计某元素在元组内的数量。</p><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">元组.count(元素)</span><br></pre></td></tr></table></figure><p>例：定义一个元组<code>t</code>，其内容是圆周率小数点后<code>5</code>位，统计其中元素<code>1</code>的数量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>)</span><br><span class="line"><span class="built_in">print</span>(t.count(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><h4 id="统计所有元素的数量-1"><a href="#统计所有元素的数量-1" class="headerlink" title="统计所有元素的数量"></a>统计所有元素的数量</h4><p>统计元组内有多少元素。</p><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">len</span>(元组)</span><br></pre></td></tr></table></figure><p>例：定义一个元组<code>t</code>，其内容是圆周率小数点后<code>5</code>位，统计其中一共有多少个元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(t))</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><table><thead><tr><th align="center">编号</th><th align="center">方法</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">index()</td><td align="center">查找某个数据，如果数据存在返回对应的下标，否则报错</td></tr><tr><td align="center">2</td><td align="center">count()</td><td align="center">统计某个数据在当前元组出现的次数</td></tr><tr><td align="center">3</td><td align="center">len(元组)</td><td align="center">统计元组内的元素个数</td></tr></tbody></table><h3 id="元组的特点"><a href="#元组的特点" class="headerlink" title="元组的特点"></a>元组的特点</h3><ul><li><p>可以容纳多个数据</p></li><li><p>可以容纳不同类型的数据（混装）</p></li><li><p>数据是有序存储的（下标索引）</p></li><li><p>允许重复数据存在</p></li><li><p>不可以修改（增加或删除元素等，但是可以修改内部<code>list</code>的内部元素）</p></li><li><p>支持<code>for</code>循环</p></li></ul><h2 id="srt字符串"><a href="#srt字符串" class="headerlink" title="srt字符串"></a>srt字符串</h2><h3 id="字符串的下标索引"><a href="#字符串的下标索引" class="headerlink" title="字符串的下标索引"></a>字符串的下标索引</h3><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串[下标索引]</span><br></pre></td></tr></table></figure><p>正向下标索引从<code>0</code>开始，反向下标索引从<code>-1</code>开始进行索引。</p><p>例：定义一个字符串<code>s</code>，其内容是圆周率小数点后<code>5</code>位，输出第一个元素和最后一个元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;14159&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(s[-<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">9</span><br></pre></td></tr></table></figure><h3 id="字符串的常用操作"><a href="#字符串的常用操作" class="headerlink" title="字符串的常用操作"></a>字符串的常用操作</h3><h4 id="查找元素位置-2"><a href="#查找元素位置-2" class="headerlink" title="查找元素位置"></a>查找元素位置</h4><p>查找字符串中某个字符串第一次出现的下标，如果没有查到则报错<code>ValueError</code>。</p><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">元组.index(元素)</span><br></pre></td></tr></table></figure><p>例：定义一个字符串<code>s</code>，存储的内容为<code>Hello World!</code>，输出<code>World</code>第一次出现的下标。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;Hello World!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s.index(<span class="string">&quot;World&quot;</span>))</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure><h4 id="字符串的替换"><a href="#字符串的替换" class="headerlink" title="字符串的替换"></a>字符串的替换</h4><p>将字符串内的全部：<code>字符串1</code>，替换为<code>字符串2</code>。</p><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串.replace(字符串<span class="number">1</span>, 字符串<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p><strong>注意点：不是修改字符串本身，而是得到了一个新的字符串。</strong></p><p>例：定义一个字符串<code>s1</code>，存储的内容为<code>Hello World!</code>，将<code>World</code>替换为<code>Bigglesworth</code>并赋值给<code>s2</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">&quot;Hello World!&quot;</span></span><br><span class="line">s2 = s1.replace(<span class="string">&quot;World&quot;</span>, <span class="string">&quot;Bigglesworth&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"><span class="built_in">print</span>(s2)</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br><span class="line">Hello Bigglesworth!</span><br></pre></td></tr></table></figure><h4 id="字符串的分割"><a href="#字符串的分割" class="headerlink" title="字符串的分割"></a>字符串的分割</h4><p>按照指定的分隔符字符串，将字符串划分为多个字符串，并存入列表对象中。</p><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串.split(分隔符字符串)</span><br></pre></td></tr></table></figure><p><strong>注意点：字符串本身不变，而是得到了一个列表对象。</strong></p><p>例：定义一个字符串<code>s</code>，存储的内容为<code>I have a dream!</code>，以空格为分隔符分割字符串，将得到的列表赋值给<code>l</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;I have a dream!&quot;</span></span><br><span class="line">l = s.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(l)</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;I&#x27;, &#x27;have&#x27;, &#x27;a&#x27;, &#x27;dream!&#x27;]</span><br></pre></td></tr></table></figure><h4 id="字符串的规整操作"><a href="#字符串的规整操作" class="headerlink" title="字符串的规整操作"></a>字符串的规整操作</h4><p>去掉字符串前面和后面的特定字符，如果没有指定，则去除空格。</p><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串.strip(<span class="string">&quot;字符串&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>注意点：不是修改字符串本身，而是得到了一个新的字符串，传入的字符是按照单个字符来计算的，而不是直接看字符串。</strong></p><p>例：定义一个字符串<code>s1</code>，存储的内容为<code> I have a dream! </code>，去除前后空格，将结果存储至<code>s2</code>并输出。定义一个字符串<code>str1</code>，存储的内容为<code>123456789132</code>，去除<code>123</code>，将结果存储至<code>str2</code>并输出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">&quot; I have a dream! &quot;</span></span><br><span class="line">s2 = s1.strip()</span><br><span class="line"><span class="built_in">print</span>(s2)</span><br><span class="line">str1 = <span class="string">&quot;123456789132&quot;</span></span><br><span class="line">str2 = str1.strip(<span class="string">&quot;123&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(str2)</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">I have a dream!</span><br><span class="line">456789</span><br></pre></td></tr></table></figure><h4 id="统计某个字符串出现的次数"><a href="#统计某个字符串出现的次数" class="headerlink" title="统计某个字符串出现的次数"></a>统计某个字符串出现的次数</h4><p>统计某个字符串在整个字符串中出现的次数。</p><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串.count(字符串)</span><br></pre></td></tr></table></figure><p>例：定义一个字符串<code>s</code>，其内容是<code>1231231234567</code>，统计字符串<code>123</code>的数量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&#x27;1231231234567&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s.count(<span class="string">&quot;123&quot;</span>))</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h4 id="计算字符串长度"><a href="#计算字符串长度" class="headerlink" title="计算字符串长度"></a>计算字符串长度</h4><p>计算字符串中一共有多少个字符。</p><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">len</span>(字符串)</span><br></pre></td></tr></table></figure><p>例：定义一个字符串<code>s</code>，其内容是<code>1231231234567</code>，计算字符串长度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&#x27;1231231234567&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(s))</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">13</span><br></pre></td></tr></table></figure><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><table><thead><tr><th align="center">编号</th><th align="center">操作</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">字符串[下标]</td><td align="center">根据下标索引取出特定位置字符</td></tr><tr><td align="center">2</td><td align="center">字符串.index(字符串)</td><td align="center">查找给定字符的第一个匹配项的下标</td></tr><tr><td align="center">3</td><td align="center">字符串.replace(字符串1, 字符串2)</td><td align="center">将字符串内的全部字符串1，替换为字符串2<br>不会修改原字符串，而是得到一个新的</td></tr><tr><td align="center">4</td><td align="center">字符串.split(字符串)</td><td align="center">按照给定字符串，对字符串进行分割<br>不会修改原字符串，而是得到一个新的列表</td></tr><tr><td align="center">5</td><td align="center">字符串.strip()<br>字符串.strip(字符串)</td><td align="center">移除首尾空格和换行符或指定字符串</td></tr><tr><td align="center">6</td><td align="center">字符串.count(字符串)</td><td align="center">统计字符串内某字符串的出现次数</td></tr><tr><td align="center">7</td><td align="center">len(字符串)</td><td align="center">统计字符串的字符个数</td></tr></tbody></table><h3 id="字符串的遍历"><a href="#字符串的遍历" class="headerlink" title="字符串的遍历"></a>字符串的遍历</h3><p>同列表、元组一样，字符串也支持<code>while</code>循环和<code>for</code>循环进行遍历。</p><h4 id="while循环-1"><a href="#while循环-1" class="headerlink" title="while循环"></a>while循环</h4><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">index = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> index &lt; <span class="built_in">len</span>(字符串):</span><br><span class="line">    字符 = 字符串[index]</span><br><span class="line">    对字符进行处理</span><br><span class="line">    index += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>例：定义一个字符串<code>s</code>，内容存储为<code>I have a dream.</code>，将它们依次输出中间用一个空格隔开。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;I have a dream.&quot;</span></span><br><span class="line">index = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> index &lt; <span class="built_in">len</span>(s):</span><br><span class="line">    <span class="built_in">print</span>(s[index], end = <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    index += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I   h a v e   a   d r e a m . </span><br></pre></td></tr></table></figure><h3 id="for循环-1"><a href="#for循环-1" class="headerlink" title="for循环"></a>for循环</h3><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 临时变量 <span class="keyword">in</span> 数据容器:</span><br><span class="line">    对临时变量进行处理</span><br></pre></td></tr></table></figure><p>例：定义一个字符串<code>s</code>，内容存储为<code>I have a dream.</code>，将它们依次输出中间用一个空格隔开。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;I have a dream.&quot;</span></span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> s:</span><br><span class="line">    <span class="built_in">print</span>(element, end = <span class="string">&#x27; &#x27;</span>)</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I   h a v e   a   d r e a m . </span><br></pre></td></tr></table></figure><h3 id="字符串的特点"><a href="#字符串的特点" class="headerlink" title="字符串的特点"></a>字符串的特点</h3><ul><li>只可以存储字符串</li><li>长度任意（取决于内存大小）</li><li>支持下标索引</li><li>允许重复字符串存在</li><li>不可以修改（增加或删除元素等）</li><li>支持for循环</li></ul><h2 id="序列的切片"><a href="#序列的切片" class="headerlink" title="序列的切片"></a>序列的切片</h2><h3 id="序列的定义"><a href="#序列的定义" class="headerlink" title="序列的定义"></a>序列的定义</h3><p>序列是指：内容连续、有序，可使用下标索引的一类数据容器。<strong>列表、元组、字符串，均可以视为序列。</strong></p><h3 id="序列的切片-1"><a href="#序列的切片-1" class="headerlink" title="序列的切片"></a>序列的切片</h3><p>序列支持切片，即从一个序列中，取出一个子序列。</p><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">序列[起始下标:结束下标:步长]</span><br></pre></td></tr></table></figure><p>表示从序列中，从指定位置开始，依次取出元素，到指定位置结束，得到一个新序列：</p><ul><li>起始下标表示从何处开始，可以留空，留空视作从头开始</li><li>结束下表（不含）表示何处结束，可以留空，留空视作截取到结尾</li><li>步长表示，依次取元素的间隔<ul><li>步长1表示，一个个取元素</li><li>步长2表示，每次跳过1个元素取</li><li>步长N表示，每次跳过N-1个元素取</li><li>步长为负数表示，反向取（注意，起始下标和结束下标也要反向标记）</li></ul></li></ul><p><strong>注意点：此操作不会影响序列本身，而是会得到一个新的序列。</strong></p><p>例：定义一个字符串<code>s</code>，其内容是<code>Hello World!</code>，分别输出前一半元素（向下取整），隔一个取一个，倒置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;Hello World!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s[:<span class="built_in">len</span>(s) // <span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(s[::<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(s[::-<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Hello </span><br><span class="line">HloWrd</span><br><span class="line">!dlroW olleH</span><br></pre></td></tr></table></figure><h2 id="set集合"><a href="#set集合" class="headerlink" title="set集合"></a>set集合</h2><h3 id="集合的定义"><a href="#集合的定义" class="headerlink" title="集合的定义"></a>集合的定义</h3><p>集合定义：定义集合使用<strong>花括号</strong>，且使用<strong>逗号</strong>隔开各个数据，数据可以是不同的数据类型。</p><p>基本格式：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义集合字面量</span></span><br><span class="line">&#123;元素, 元素, ......, 元素&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义集合变量</span></span><br><span class="line">变量名称 = &#123;元素, 元素, ......, 元素&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义空集合</span></span><br><span class="line">变量名称 = <span class="built_in">set</span>()</span><br></pre></td></tr></table></figure><p>例：定义一个集合<code>s</code>，存储的数据为<code>Bigglesworth</code>，<code>3.1415926</code>，<code>3.1415926</code>，输出该集合和它的类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = &#123;<span class="string">&quot;Bigglesworth&quot;</span>, <span class="number">3.1415926</span>, <span class="number">3.1415926</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(s))</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;3.1415926, &#x27;Bigglesworth&#x27;&#125;</span><br><span class="line">&lt;class &#x27;set&#x27;&gt;</span><br></pre></td></tr></table></figure><p><strong>注意点：数据类型是无序存储的，且不允许重复元素的存在。</strong></p><h3 id="集合的常用操作"><a href="#集合的常用操作" class="headerlink" title="集合的常用操作"></a>集合的常用操作</h3><p>首先，因为集合是无序的，所以集合<strong>不支持下标索引访问。</strong></p><h4 id="添加新元素"><a href="#添加新元素" class="headerlink" title="添加新元素"></a>添加新元素</h4><p>将指定元素添加到集合内，且集合本身被修改。</p><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">集合.add(<span class="string">&quot;元素&quot;</span>)</span><br></pre></td></tr></table></figure><p>例：定义一个集合<code>s</code>，存储的数据为<code>Bigglesworth</code>，<code>3.1415926</code>，<code>3.1415926</code>，将<code>Hello World!</code>添加至该集合。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">元组.index(元素)</span><br></pre></td></tr></table></figure><p>例：定义一个元组<code>t</code>，其内容是圆周率小数点后<code>5</code>位，查找元素<code>1</code>的下标。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = &#123;<span class="string">&quot;Bigglesworth&quot;</span>, <span class="number">3.1415926</span>, <span class="number">3.1415926</span>&#125;</span><br><span class="line">s.add(<span class="string">&quot;Hello World!&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;Hello World!&#x27;, 3.1415926, &#x27;Bigglesworth&#x27;&#125;</span><br></pre></td></tr></table></figure><h4 id="移除元素"><a href="#移除元素" class="headerlink" title="移除元素"></a>移除元素</h4><p>将指定元素从集合中移除。</p><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">集合.remove(<span class="string">&quot;元素&quot;</span>)</span><br></pre></td></tr></table></figure><p>例：定义一个集合<code>s</code>，存储的数据为<code>Bigglesworth</code>，<code>3.1415926</code>，<code>3.1415926</code>，将<code>3.1415926</code>移除。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = &#123;<span class="string">&quot;Bigglesworth&quot;</span>, <span class="number">3.1415926</span>, <span class="number">3.1415926</span>&#125;</span><br><span class="line">s.add(<span class="number">3.1415926</span>)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;3.1415926, &#x27;Bigglesworth&#x27;&#125;</span><br></pre></td></tr></table></figure><h4 id="从集合中随机取出元素"><a href="#从集合中随机取出元素" class="headerlink" title="从集合中随机取出元素"></a>从集合中随机取出元素</h4><p>从集合中随机取出一个元素。</p><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变量 = 集合.pop()</span><br></pre></td></tr></table></figure><p>例：定义一个集合<code>s</code>，存储的数据为<code>Bigglesworth</code>，<code>3.1415926</code>，<code>3.1415926</code>，利用<code>pop</code>随机取出一个元素，并将取出的元素赋值给<code>element</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s = &#123;<span class="string">&quot;Bigglesworth&quot;</span>, <span class="number">3.1415926</span>, <span class="number">3.1415926</span>&#125;</span><br><span class="line">element = s.pop()</span><br><span class="line"><span class="built_in">print</span>(element)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3.1415926</span><br><span class="line">&#123;&#x27;Bigglesworth&#x27;&#125;</span><br></pre></td></tr></table></figure><h4 id="清空集合"><a href="#清空集合" class="headerlink" title="清空集合"></a>清空集合</h4><p>清空集合内容。</p><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">集合.clear()</span><br></pre></td></tr></table></figure><p>例：定义一个集合<code>s</code>，存储的数据为<code>Bigglesworth</code>，<code>3.1415926</code>，<code>3.1415926</code>，将其清空。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = &#123;<span class="string">&quot;Bigglesworth&quot;</span>, <span class="number">3.1415926</span>, <span class="number">3.1415926</span>&#125;</span><br><span class="line">s.clear()</span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set()</span><br></pre></td></tr></table></figure><h4 id="求差集"><a href="#求差集" class="headerlink" title="求差集"></a>求差集</h4><p>取出两个集合的差集（前者有而后者没有的）。</p><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">集合 = 集合<span class="number">1.</span>difference(集合<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>例：定义两个集合<code>s1</code>和<code>s2</code>，<code>s1</code>中存储内容为十以内的奇数,<code>s2</code>中存储内容为十以内的质数，求二者差集，并赋值给<code>s3</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>&#125;</span><br><span class="line">s3 = s1.difference(s2)</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"><span class="built_in">print</span>(s2)</span><br><span class="line"><span class="built_in">print</span>(s3)</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;1, 3, 5, 7, 9&#125;</span><br><span class="line">&#123;2, 3, 5, 7&#125;</span><br><span class="line">&#123;1, 9&#125;</span><br></pre></td></tr></table></figure><h4 id="消除差集"><a href="#消除差集" class="headerlink" title="消除差集"></a>消除差集</h4><p>消除两个集合的差集，在第一个集合中删除与第二个集合相同的元素。</p><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">集合 = 集合<span class="number">1.</span>difference(集合<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>例：定义两个集合<code>s1</code>和<code>s2</code>，<code>s1</code>中存储内容为十以内的奇数,<code>s2</code>中存储内容为十以内的质数，消除差集。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>&#125;</span><br><span class="line">s1.difference_update(s2)</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"><span class="built_in">print</span>(s2)</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;1, 9&#125;</span><br><span class="line">&#123;2, 3, 5, 7&#125;</span><br></pre></td></tr></table></figure><h4 id="求并集"><a href="#求并集" class="headerlink" title="求并集"></a>求并集</h4><p>将两个集合组成一个新的集合。</p><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">集合 = 集合<span class="number">1.</span>union(集合<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>例：定义两个集合<code>s1</code>和<code>s2</code>，<code>s1</code>中存储内容为十以内的奇数,<code>s2</code>中存储内容为十以内的质数，求二者并集，并赋值给<code>s3</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>&#125;</span><br><span class="line">s3 = s1.difference(s2)</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"><span class="built_in">print</span>(s2)</span><br><span class="line"><span class="built_in">print</span>(s3)</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;1, 3, 5, 7, 9&#125;</span><br><span class="line">&#123;2, 3, 5, 7&#125;</span><br><span class="line">&#123;1, 2, 3, 5, 7, 9&#125; </span><br></pre></td></tr></table></figure><h4 id="统计所有元素的数量-2"><a href="#统计所有元素的数量-2" class="headerlink" title="统计所有元素的数量"></a>统计所有元素的数量</h4><p>统计集合元素数量。</p><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">len</span>(集合)</span><br></pre></td></tr></table></figure><p>例：定义一个集合<code>s</code>，存储的数据为<code>Bigglesworth</code>，<code>3.1415926</code>，<code>3.1415926</code>，统计其中的元素数量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = &#123;<span class="string">&quot;Bigglesworth&quot;</span>, <span class="number">3.1415926</span>, <span class="number">3.1415926</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(s))</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><h3 id="集合的遍历"><a href="#集合的遍历" class="headerlink" title="集合的遍历"></a>集合的遍历</h3><p>由于集合不支持下标索引，因此不能使用<code>while</code>循环进行遍历，只能使用<code>for</code>循环进行遍历。</p><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 临时变量 <span class="keyword">in</span> 数据容器:</span><br><span class="line">    对临时变量进行处理</span><br></pre></td></tr></table></figure><p>例：定义一个集合<code>s</code>，存储的内容为二十以内的质数，利用<code>for</code>循环进行遍历。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>&#125;</span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> s:</span><br><span class="line">    <span class="built_in">print</span>(element)</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">3</span><br><span class="line">5</span><br><span class="line">7</span><br><span class="line">11</span><br><span class="line">13</span><br><span class="line">17</span><br><span class="line">19</span><br></pre></td></tr></table></figure><h3 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h3><table><thead><tr><th align="center">编号</th><th align="center">使用方式</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">集合.add(元素)</td><td align="center">集合内添加一个元素</td></tr><tr><td align="center">2</td><td align="center">集合.remove(元素)</td><td align="center">移除集合内指定的元素</td></tr><tr><td align="center">3</td><td align="center">集合.pop()</td><td align="center">从集合中随机取出一个元素</td></tr><tr><td align="center">4</td><td align="center">集合.clear()</td><td align="center">将集合清空</td></tr><tr><td align="center">5</td><td align="center">集合1.difference(集合2)</td><td align="center">得到一个新集合，内含2个集合的差集<br>原有的两个集合内容不变</td></tr><tr><td align="center">6</td><td align="center">集合1.difference_update(集合2)</td><td align="center">在集合1中，删除集合2中存在的元素<br/>集合1被修改，集合2内容不变</td></tr><tr><td align="center">7</td><td align="center">集合1.union(集合2)</td><td align="center">得到一个新集合，内含2个集合的全部元素<br/>原有的两个集合内容不变</td></tr><tr><td align="center">8</td><td align="center">len(集合)</td><td align="center">得到一个整数，记录了集合的元素数量</td></tr></tbody></table><h3 id="集合的特点"><a href="#集合的特点" class="headerlink" title="集合的特点"></a>集合的特点</h3><ul><li>可以容纳多个数据</li><li>可以容纳不同类型的数据（混装）</li><li>数据是无序存储的（不支持下标索引）</li><li>不允许重复数据存在</li><li>可以修改（增加或删除元素等）</li><li>支持for循环</li></ul><h2 id="dic字典、映射"><a href="#dic字典、映射" class="headerlink" title="dic字典、映射"></a>dic字典、映射</h2><h3 id="字典的定义"><a href="#字典的定义" class="headerlink" title="字典的定义"></a>字典的定义</h3><p>字典定义：定义字典使用<strong>花括号</strong>，不过存储的元素是一个个的<strong>键值对</strong>。</p><p>基本格式：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义字典字面量</span></span><br><span class="line">&#123;key: value, key: value, ......, key: value&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义字典变量</span></span><br><span class="line">&#123;key: value, key: value, ......, key: value&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义空字典</span></span><br><span class="line">变量名称 = &#123;&#125;<span class="comment">#方式1</span></span><br><span class="line">变量名称 = <span class="built_in">dict</span>()<span class="comment">#方式2</span></span><br></pre></td></tr></table></figure><p>例：定义一个集合<code>d</code>，存储的数据为五以内的所有数字，其中如果是质数则标记为<code>1</code>，否则标记为<code>0</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="number">1</span>: <span class="number">0</span>, <span class="number">2</span>: <span class="number">1</span>, <span class="number">3</span>: <span class="number">1</span>, <span class="number">4</span>: <span class="number">0</span>, <span class="number">5</span>: <span class="number">1</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(d))</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;1: 0, 2: 1, 3: 1, 4: 0, 5: 1&#125;</span><br><span class="line">&lt;class &#x27;dict&#x27;&gt;</span><br></pre></td></tr></table></figure><p><strong>注意点：如果键相同，则只会保留一个。</strong></p><h3 id="字典数据的获取"><a href="#字典数据的获取" class="headerlink" title="字典数据的获取"></a>字典数据的获取</h3><p>字典统计和一样，不可以使用下标进行索引，但是字典可以通过<code>Key</code>值来取得对应的<code>Value</code>。</p><p>同时，字典的<code>key</code>和<code>Value</code>可以是任意数据类型（<code>Key</code>不可以为字典），那么就表明，字典是可以进行嵌套的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字典[Key]</span><br></pre></td></tr></table></figure><p>例：定义一个字典`dict，存储学生信息，并输出某条具体信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dic = &#123;<span class="string">&quot;Bigglesworth&quot;</span>: &#123;<span class="string">&quot;Math&quot;</span>: <span class="number">100</span>, <span class="string">&quot;Chinese&quot;</span>: <span class="number">90</span>&#125;, </span><br><span class="line">       <span class="string">&quot;Areskey&quot;</span>: &#123;<span class="string">&quot;English&quot;</span>: <span class="number">95</span>, <span class="string">&quot;History&quot;</span>: <span class="number">99</span>&#125;&#125;</span><br><span class="line"><span class="built_in">print</span>(dic[<span class="string">&quot;Bigglesworth&quot;</span>][<span class="string">&quot;Chinese&quot;</span>])</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">90</span><br></pre></td></tr></table></figure><h3 id="字典的常用操作"><a href="#字典的常用操作" class="headerlink" title="字典的常用操作"></a>字典的常用操作</h3><h4 id="添加新元素-1"><a href="#添加新元素-1" class="headerlink" title="添加新元素"></a>添加新元素</h4><p>字典被修改，增加了元素。</p><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字典[Key] = Value</span><br></pre></td></tr></table></figure><p>例：定义一个集合<code>d</code>，存储的数据为五以内的所有数字，其中如果是质数则标记为<code>1</code>，否则标记为<code>0</code>，添加新的键值对为<code>17</code>的对应关系。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="number">1</span>: <span class="number">0</span>, <span class="number">2</span>: <span class="number">1</span>, <span class="number">3</span>: <span class="number">1</span>, <span class="number">4</span>: <span class="number">0</span>, <span class="number">5</span>: <span class="number">1</span>&#125;</span><br><span class="line">d[<span class="number">17</span>] = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(d)</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;1: 0, 2: 1, 3: 1, 4: 0, 5: 1, 17: 1&#125;</span><br></pre></td></tr></table></figure><h4 id="更新元素"><a href="#更新元素" class="headerlink" title="更新元素"></a>更新元素</h4><p>字典被修改，元素被更新。</p><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字典[Key] = Value</span><br></pre></td></tr></table></figure><p><strong>注意点：字典<code>Key</code>不可以重复，所以对已经存在的<code>Key</code>执行上述操作，就是更新<code>Value</code>的值。</strong></p><p>例：定义一个集合<code>d</code>，存储的数据为五以内的所有数字，其中如果是质数则标记为<code>1</code>，否则标记为<code>0</code>，将<code>1</code>的值改为<code>3</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="number">1</span>: <span class="number">0</span>, <span class="number">2</span>: <span class="number">1</span>, <span class="number">3</span>: <span class="number">1</span>, <span class="number">4</span>: <span class="number">0</span>, <span class="number">5</span>: <span class="number">1</span>&#125;</span><br><span class="line">d[<span class="number">1</span>] = <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(d)</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;1: 3, 2: 1, 3: 1, 4: 0, 5: 1&#125;</span><br></pre></td></tr></table></figure><h4 id="删除元素-1"><a href="#删除元素-1" class="headerlink" title="删除元素"></a>删除元素</h4><p>获得指定<code>Key</code>的<code>Value</code>，同时字典被修改，指定<code>Key</code>的数据被删除。</p><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变量 = 字典.pop(Key)</span><br></pre></td></tr></table></figure><p>例：定义一个集合<code>d</code>，存储的数据为五以内的所有数字，其中如果是质数则标记为<code>1</code>，否则标记为<code>0</code>，将<code>3</code>的键值对删除并输出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="number">1</span>: <span class="number">0</span>, <span class="number">2</span>: <span class="number">1</span>, <span class="number">3</span>: <span class="number">1</span>, <span class="number">4</span>: <span class="number">0</span>, <span class="number">5</span>: <span class="number">1</span>&#125;</span><br><span class="line">value = d.pop(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(value)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">&#123;1: 0, 2: 1, 4: 0, 5: 1&#125;</span><br></pre></td></tr></table></figure><h4 id="清空字典"><a href="#清空字典" class="headerlink" title="清空字典"></a>清空字典</h4><p>清空字典中的所有元素。</p><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字典.clear()</span><br></pre></td></tr></table></figure><p>例：定义一个集合<code>d</code>，存储的数据为五以内的所有数字，其中如果是质数则标记为<code>1</code>，否则标记为<code>0</code>，将该字典清空。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="number">1</span>: <span class="number">0</span>, <span class="number">2</span>: <span class="number">1</span>, <span class="number">3</span>: <span class="number">1</span>, <span class="number">4</span>: <span class="number">0</span>, <span class="number">5</span>: <span class="number">1</span>&#125;</span><br><span class="line">d.clear()</span><br><span class="line"><span class="built_in">print</span>(d)</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="获取全部Key"><a href="#获取全部Key" class="headerlink" title="获取全部Key"></a>获取全部Key</h4><p>到字典中的全部<code>Key</code>。</p><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字典.keys()</span><br></pre></td></tr></table></figure><p>例：定义一个集合<code>d</code>，存储的数据为五以内的所有数字，其中如果是质数则标记为<code>1</code>，否则标记为<code>0</code>，获取该字典的全部<code>Key</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="number">1</span>: <span class="number">0</span>, <span class="number">2</span>: <span class="number">1</span>, <span class="number">3</span>: <span class="number">1</span>, <span class="number">4</span>: <span class="number">0</span>, <span class="number">5</span>: <span class="number">1</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(d.keys())</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict_keys([1, 2, 3, 4, 5])</span><br></pre></td></tr></table></figure><h4 id="统计字典的元素数量"><a href="#统计字典的元素数量" class="headerlink" title="统计字典的元素数量"></a>统计字典的元素数量</h4><p>共计字典中一共有多少个元素。</p><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">len</span>(字典)</span><br></pre></td></tr></table></figure><p>例：定义一个集合<code>d</code>，存储的数据为五以内的所有数字，其中如果是质数则标记为<code>1</code>，否则标记为<code>0</code>，统计一共有多少个元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="number">1</span>: <span class="number">0</span>, <span class="number">2</span>: <span class="number">1</span>, <span class="number">3</span>: <span class="number">1</span>, <span class="number">4</span>: <span class="number">0</span>, <span class="number">5</span>: <span class="number">1</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(d))</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><h3 id="字典的遍历"><a href="#字典的遍历" class="headerlink" title="字典的遍历"></a>字典的遍历</h3><p>可以利用<code>keys</code>函数来遍历整个字典。</p><p>例：定义一个集合<code>d</code>，存储的数据为五以内的所有数字，其中如果是质数则标记为<code>1</code>，否则标记为<code>0</code>，遍历整个字典。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="number">1</span>: <span class="number">0</span>, <span class="number">2</span>: <span class="number">1</span>, <span class="number">3</span>: <span class="number">1</span>, <span class="number">4</span>: <span class="number">0</span>, <span class="number">5</span>: <span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> d.keys():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;key&#125;</span>: <span class="subst">&#123;d[key]&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1: 0</span><br><span class="line">2: 1</span><br><span class="line">3: 1</span><br><span class="line">4: 0</span><br><span class="line">5: 1</span><br></pre></td></tr></table></figure><p><strong>注意点：其实不用这个函数直接写字典名也可以直接获取到字典的<code>Key</code>的。</strong></p><h3 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h3><table><thead><tr><th align="center">编号</th><th align="center">使用方式</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">字典[Key]</td><td align="center">获取指定Key对应的Value值</td></tr><tr><td align="center">2</td><td align="center">字典[Key] = Value</td><td align="center">添加或更新键值对</td></tr><tr><td align="center">3</td><td align="center">字典.pop(Key)</td><td align="center">取出Key对应的Value并在字典内删除此Key的键值对</td></tr><tr><td align="center">4</td><td align="center">字典.clear()</td><td align="center">清空字典</td></tr><tr><td align="center">5</td><td align="center">字典.keys()</td><td align="center">获取字典的全部Key，可用于for循环遍历字典</td></tr><tr><td align="center">6</td><td align="center">len(字典)</td><td align="center">计算字典内的元素数量</td></tr></tbody></table><h3 id="字典的特点"><a href="#字典的特点" class="headerlink" title="字典的特点"></a>字典的特点</h3><ul><li>可以容纳多个数据</li><li>可以容纳不同类型的数据（混装）</li><li>每一份数据都是键值对</li><li>可以通过Key获取到Value，Key不可以重复（重复会直接覆盖）</li><li>不支持下标索引</li><li>可以修改（增加或删除更新元素等）</li><li>支持for循环，不支持while循环</li></ul><h2 id="数据容器总结"><a href="#数据容器总结" class="headerlink" title="数据容器总结"></a>数据容器总结</h2><h3 id="数据容器分类"><a href="#数据容器分类" class="headerlink" title="数据容器分类"></a>数据容器分类</h3><ul><li><p>是否支持下标索引</p><ul><li>支持：列表、元组、字符串 - 序列类型</li><li>不支持：集合、字典 - 非序列类型</li></ul></li><li><p>是否支持重复元素</p><ul><li>支持：列表、元组、字符串 - 序列类型</li><li>不支持：集合、字典 - 非序列类型</li></ul></li><li><p>是否可以修改</p><ul><li>支持：列表、集合、字典</li><li>不支持：元组、字符串</li></ul></li></ul><h3 id="容器通用排序功能"><a href="#容器通用排序功能" class="headerlink" title="容器通用排序功能"></a>容器通用排序功能</h3><p>对容器进行指定方式的排序，一共两个参数，分别为要排序的容器和排序方式，默认<code>reverse</code>的值为<code>False</code>，表示从小到大排序，如果其值为<code>True</code>，则会变为从大到小排序。</p><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sorted</span>(容器, reverse = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>例：定义一个列表<code>l</code>，存储的数据为圆周率小数点后前十位，并将他们降序排序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line">l = <span class="built_in">sorted</span>(l, reverse = <span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(l)</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[1, 4, 1, 5, 9, 2, 6, 5, 3, 5]</span><br><span class="line">[9, 6, 5, 5, 5, 4, 3, 2, 1, 1]</span><br></pre></td></tr></table></figure><h1 id="函数进阶"><a href="#函数进阶" class="headerlink" title="函数进阶"></a>函数进阶</h1><h2 id="函数多返回值"><a href="#函数多返回值" class="headerlink" title="函数多返回值"></a>函数多返回值</h2><p>可以返回多个值。按照返回值的顺序，写对应顺序的多个变量接收即可，变量之间用逗号隔开，支持不同类型的数据<code>return</code>。</p><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>():</span><br><span class="line">    <span class="keyword">return</span> result1, result2</span><br><span class="line"></span><br><span class="line">x, y = fun()</span><br></pre></td></tr></table></figure><p>例：定义一个函数，从键盘中输入两个数字，返回他们相加和相减的结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> x + y, x - y</span><br><span class="line"></span><br><span class="line">a, b = <span class="built_in">input</span>().split()</span><br><span class="line">a = <span class="built_in">int</span>(a)</span><br><span class="line">b = <span class="built_in">int</span>(b)</span><br><span class="line">answer1, answer2 = fun(a, b)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;answer1&#125;</span> <span class="subst">&#123;answer2&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5 8</span><br><span class="line">13 -3</span><br></pre></td></tr></table></figure><h2 id="函数多种传参方式"><a href="#函数多种传参方式" class="headerlink" title="函数多种传参方式"></a>函数多种传参方式</h2><h3 id="位置参数"><a href="#位置参数" class="headerlink" title="位置参数"></a>位置参数</h3><p>调用函数时根据函数定义的<strong>参数位置</strong>来传递参数。</p><p>注意点：传递的参数和定义的参数的顺序及个数必须一致。</p><p>例：定义一个函数，其功能是传递基本信息然后输出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">information</span>(<span class="params">name, age, gender</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;姓名：<span class="subst">&#123;name&#125;</span> 年龄：<span class="subst">&#123;age&#125;</span> 性别：<span class="subst">&#123;gender&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">information(<span class="string">&quot;Bigglesworth&quot;</span>, <span class="number">20</span>, <span class="string">&quot;男&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">姓名：Bigglesworth 年龄：20 性别：男</span><br></pre></td></tr></table></figure><h3 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h3><p>函数调用时通过“键 = 值”形式传递参数。可以让函数更加清晰、容易使用，同时也清除了参数的顺序需求。</p><p>注意点：函数调用时，如果有位置参数时，位置参数必须在关键字参数的前面，但关键字参数之间不存在先后顺序。</p><p>例：定义一个函数，其功能是传递基本信息然后输出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">information</span>(<span class="params">name, age, gender</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;姓名：<span class="subst">&#123;name&#125;</span> 年龄：<span class="subst">&#123;age&#125;</span> 性别：<span class="subst">&#123;gender&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">information(<span class="string">&quot;Bigglesworth&quot;</span>, gender = <span class="string">&quot;男&quot;</span>, age = <span class="number">20</span>)</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">姓名：Bigglesworth 年龄：20 性别：男</span><br></pre></td></tr></table></figure><h3 id="缺省参数"><a href="#缺省参数" class="headerlink" title="缺省参数"></a>缺省参数</h3><p>缺省参数也叫默认参数，用于定义函数，为参数提供默认值，调用函数时可不穿该默认参数的值。</p><p>注意点：所有位置参数必须出现在默认参数前，包括函数定义和调用。函数调用时，如果为缺省参数传值则修改默认参数值，否则使用这个默认值。</p><p>例：定义一个函数，其功能是传递基本信息然后输出，其中，性别默认为男。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">information</span>(<span class="params">name, age, gender = <span class="string">&quot;男&quot;</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;姓名：<span class="subst">&#123;name&#125;</span> 年龄：<span class="subst">&#123;age&#125;</span> 性别：<span class="subst">&#123;gender&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">information(<span class="string">&quot;Bigglesworth&quot;</span>, <span class="number">20</span>)</span><br><span class="line">information(<span class="string">&quot;Areskey&quot;</span>, <span class="number">18</span>, <span class="string">&quot;女&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">姓名：Bigglesworth 年龄：20 性别：男</span><br><span class="line">姓名：Areskey 年龄：18 性别：女</span><br></pre></td></tr></table></figure><h3 id="不定长参数"><a href="#不定长参数" class="headerlink" title="不定长参数"></a>不定长参数</h3><p>不定长参数也可叫可变参数，用于不确定调用的时候会传递多少个参数（不传参也可以）的场景。不定长参数业可分为两种，分别是位置传递和关键字传递。</p><h4 id="位置传递"><a href="#位置传递" class="headerlink" title="位置传递"></a>位置传递</h4><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">*args</span>):</span><br><span class="line">    <span class="built_in">print</span>(args)</span><br></pre></td></tr></table></figure><p>注意点：传进的所有参数都会被<code>args</code>变量收集，它会根据传进参数的位置合并为一个元组<code>tuple</code>，<code>args</code>是元组类型，这就是<strong>位置传递</strong>。</p><p>例：定义一个函数，传递多个参数，并将其输出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">*args</span>):</span><br><span class="line">    <span class="built_in">print</span>(args)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(args))</span><br><span class="line">    </span><br><span class="line">fun(<span class="string">&quot;Bigglesworth&quot;</span>, <span class="number">20</span>, <span class="string">&quot;男&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(&#x27;Bigglesworth&#x27;, 20, &#x27;男&#x27;)</span><br><span class="line">&lt;class &#x27;tuple&#x27;&gt;</span><br></pre></td></tr></table></figure><h4 id="关键字传递"><a href="#关键字传递" class="headerlink" title="关键字传递"></a>关键字传递</h4><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">**kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(args)</span><br></pre></td></tr></table></figure><p>注意点：参数是“键 = 值”形式的情况下，所有的“键 = 值”都会被<code>kwargs</code>接受，同时会根据“键 = 值”组成字典。</p><p>例：定义一个函数，传递多个参数，并将其输出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">**kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(kwargs)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(kwargs))</span><br><span class="line">    </span><br><span class="line">fun(name = <span class="string">&quot;Bigglesworth&quot;</span>, age = <span class="number">20</span>, gender = <span class="string">&quot;男&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;name&#x27;: &#x27;Bigglesworth&#x27;, &#x27;age&#x27;: 20, &#x27;gender&#x27;: &#x27;男&#x27;&#125;</span><br><span class="line">&lt;class &#x27;dict&#x27;&gt;</span><br></pre></td></tr></table></figure><h2 id="lambda匿名函数"><a href="#lambda匿名函数" class="headerlink" title="lambda匿名函数"></a>lambda匿名函数</h2><ul><li><code>def</code>关键字，可以定义带有名称的函数</li><li><code>lambda</code>关键字，可以定义匿名函数（无名称）</li></ul><p>有名称的函数，可以基于名称重复使用。</p><p>无名称的匿名函数，只可临时使用一次。</p><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> 传入参数: 函数体（一行代码）</span><br></pre></td></tr></table></figure><p>注意点：<code>lambda</code>是关键字，表示定义匿名函数。传入参数表示匿名函数的形式参数，如：<code>x</code>，<code>y</code>表示接收2个形式参数。函数体，就是函数的执行逻辑，要注意的是只能写一行代码，无法写多行代码。</p><p>例：定义一个函数，接受其它函数输入。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">func</span>):</span><br><span class="line">    ans = func(<span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">    <span class="built_in">print</span>(ans)</span><br><span class="line">    </span><br><span class="line">fun(<span class="keyword">lambda</span> x, y: x * y)</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">30</span><br></pre></td></tr></table></figure><h1 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h1><h2 id="文件的读取"><a href="#文件的读取" class="headerlink" title="文件的读取"></a>文件的读取</h2><p>在<code>Python</code>中，使用<code>open</code>函数，可以打开一个已经存在的文件，或者创建一个新文件。</p><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">open</span>(name, mode, encoding)</span><br></pre></td></tr></table></figure><ul><li><code>name</code>：是要打开的目标文件名的字符串（可以包含文件所在的具体路径）</li><li><code>mode</code>：设置打开文件的模式（访问模式）：只读、写入、追加等。</li><li><code>encoding</code>：编码格式（推荐使用UTF-8）</li></ul><p>例：使用<code>UTF-8</code>的编码格式，只读文件<code>Test.txt</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;Test.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding = <span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(f)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(f))</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;_io.TextIOWrapper name=&#x27;Test.txt&#x27; mode=&#x27;r&#x27; encoding=&#x27;UTF-8&#x27;&gt;</span><br><span class="line">&lt;class &#x27;_io.TextIOWrapper&#x27;&gt;</span><br></pre></td></tr></table></figure><h2 id="mode常用的三种基础访问模式"><a href="#mode常用的三种基础访问模式" class="headerlink" title="mode常用的三种基础访问模式"></a>mode常用的三种基础访问模式</h2><table><thead><tr><th align="center">模式</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">r</td><td align="center">以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td></tr><tr><td align="center">w</td><td align="center">打开一个文件只用于写入。如果该文件已存在则打开文件，并从头开始编辑，<strong>原有内容会被删除</strong>。<br>如果该文件不存在，创建新文件。</td></tr><tr><td align="center">a</td><td align="center">打开一个文件用于追加。如果该文件已存在，<strong>新的内容将会被写入到已有内容之后。</strong><br>如果该文件不存在，创建新文件。</td></tr></tbody></table><h2 id="读操作相关方法"><a href="#读操作相关方法" class="headerlink" title="读操作相关方法"></a>读操作相关方法</h2><h3 id="读取固定长度"><a href="#读取固定长度" class="headerlink" title="读取固定长度"></a>读取固定长度</h3><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文件对象.read(num)</span><br></pre></td></tr></table></figure><p>其中，<code>num</code>表示要从文件中读取的数据的长度（单位是字节，这里认为<strong>一个汉字也是一个字节</strong>），如果没有传入<code>num</code>，那么就表示读取文件中所有的数据。</p><p>例：读取文件<code>Test.txt</code>，并输出其内容。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;Test.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding = <span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line">value = f.read(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(value)</span><br><span class="line">value = f.read()</span><br><span class="line"><span class="built_in">print</span>(value)</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hello</span><br><span class="line"> World!</span><br></pre></td></tr></table></figure><h3 id="读取整个文件"><a href="#读取整个文件" class="headerlink" title="读取整个文件"></a>读取整个文件</h3><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文件对象.readlines()</span><br></pre></td></tr></table></figure><p>可以按照行的方式把整个文件中的内容进行一次性读取，并且返回的是一个列表，其中每一行的数据为一个元素。</p><p>例：读取文件<code>Test.txt</code>，并输出其内容。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;Test.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding = <span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line">value = f.readlines()</span><br><span class="line"><span class="built_in">print</span>(value)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;Hello World!\n&#x27;, &#x27;My name is Bigglesworth!&#x27;]</span><br></pre></td></tr></table></figure><h3 id="读取一行内容"><a href="#读取一行内容" class="headerlink" title="读取一行内容"></a>读取一行内容</h3><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文件对象.readline()</span><br></pre></td></tr></table></figure><p>一次性读取一行内容。</p><p>例：利用<code>for</code>循环读取文件<code>Test.txt</code>，并输出其内容。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;Test.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding = <span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">    <span class="built_in">print</span>(line)</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br><span class="line"></span><br><span class="line">My name is Bigglesworth!</span><br></pre></td></tr></table></figure><h3 id="关闭文件"><a href="#关闭文件" class="headerlink" title="关闭文件"></a>关闭文件</h3><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文件对象.close()</span><br></pre></td></tr></table></figure><p>关闭文件对象，如果不关闭且程序没有停止运行，将会持续占用该文件。</p><p>例：读取文件<code>Test.txt</code>,读取之后关闭该文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;Test.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding = <span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">    <span class="built_in">print</span>(line)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br><span class="line"></span><br><span class="line">My name is Bigglesworth!</span><br></pre></td></tr></table></figure><h3 id="自动关闭文件"><a href="#自动关闭文件" class="headerlink" title="自动关闭文件"></a>自动关闭文件</h3><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(name, mode, encoding)<span class="keyword">as</span> f:</span><br><span class="line">    执行的操作</span><br></pre></td></tr></table></figure><p>可以在操作完成后自动关闭文件，避免遗忘掉手动关闭。</p><p>例：读取文件<code>Test.txt</code>,读取之后关闭该文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;Test.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding = <span class="string">&quot;UTF-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">        <span class="built_in">print</span>(line)</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br><span class="line"></span><br><span class="line">My name is Bigglesworth!</span><br></pre></td></tr></table></figure><h2 id="写操作相关方法"><a href="#写操作相关方法" class="headerlink" title="写操作相关方法"></a>写操作相关方法</h2><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#打开文件</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;Test.txt&quot;</span>, <span class="string">&quot;w&quot;</span>,  encoding = <span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#文件写入</span></span><br><span class="line">f.write(<span class="string">&quot;Hello World!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#内容刷新</span></span><br><span class="line">f.flush()</span><br></pre></td></tr></table></figure><p>注意点：</p><ul><li>直接调用<code>write</code>，内容并未真正写入文件，而是会积攒在程序的内存中，称之为缓冲区。</li><li>当调用<code>flush</code>的时候，内容会真正写入文件。</li><li>这样做是避免频繁的操作硬盘，导致效率下降（攒一堆，一次性写入磁盘）</li></ul><p>结果展示（文件中的结果）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br></pre></td></tr></table></figure><p>注意点：<code>close</code>功能内置了<code>flush</code>功能。文件存在的话，会将其中的东西全部清空后写入；文件不存在的话，会创建相应文件后写入。</p><h2 id="追加写入操作相关方法"><a href="#追加写入操作相关方法" class="headerlink" title="追加写入操作相关方法"></a>追加写入操作相关方法</h2><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#打开文件</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;Test.txt&quot;</span>, <span class="string">&quot;a&quot;</span>,  encoding = <span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#文件写入</span></span><br><span class="line">f.write(<span class="string">&quot;\nMy name is Bigglesworth!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#内容刷新</span></span><br><span class="line">f.flush()</span><br></pre></td></tr></table></figure><p>注意点：</p><ul><li><code>a</code>模式下，文件不存在会创建文件。</li><li><code>a</code>模式下，文件存在会在最后追加写入文件。</li></ul><p>结果展示（文件中原本有一句<code>Hello World!</code>）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hello World!My name is Bigglesworth!</span><br><span class="line">My name is Bigglesworth!</span><br></pre></td></tr></table></figure><p>注意点：<code>close</code>功能内置了<code>flush</code>功能。文件存在的话，会将其中的东西全部清空后写入；文件不存在的话，会创建相应文件后写入。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 教程 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL总结</title>
      <link href="/archives/86037912.html"/>
      <url>/archives/86037912.html</url>
      
        <content type="html"><![CDATA[<hr><h1 id="栈（stack）"><a href="#栈（stack）" class="headerlink" title="栈（stack）"></a>栈（stack）</h1><h2 id="基本定义"><a href="#基本定义" class="headerlink" title="基本定义"></a>基本定义</h2><p>栈（<code>stack</code>）又名堆栈，是一种只允许在同一端进行数据插入和删除操作的特殊线性表。  </p><h2 id="栈的相关概念"><a href="#栈的相关概念" class="headerlink" title="栈的相关概念"></a>栈的相关概念</h2><ul><li><p>栈顶（<code>top</code>）：表尾，栈中允许进行数据插入和删除的一端。</p></li><li><p>栈底（<code>bottom</code>）：表头，栈中不允许进行数据操作的一端。</p></li><li><p>入栈或进栈（<code>push</code>）：将数据插入栈顶。</p></li><li><p>出栈或退栈（<code>pop</code>）：将数据取出栈顶并删除。</p></li><li><p>栈上溢（<code>full</code>）：栈内空间已满时，仍进行入栈操作，是一种空间不足的出错状态。</p></li><li><p>栈下溢（<code>empty</code>）：栈内无数据时，仍进行出栈操作，是一种数据不足的出错状态。</p></li><li><p>空栈：元素个数为零的栈。</p></li></ul><h2 id="栈的常用操作"><a href="#栈的常用操作" class="headerlink" title="栈的常用操作"></a>栈的常用操作</h2><h3 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="构造stack容器"><a href="#构造stack容器" class="headerlink" title="构造stack容器"></a>构造stack容器</h3><p>基本语法：<code>stack &lt;Type&gt; s</code>  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stack &lt;<span class="type">int</span>&gt; s;  <span class="comment">//声明存储int类型数据的栈</span></span><br></pre></td></tr></table></figure><h3 id="返回栈顶元素"><a href="#返回栈顶元素" class="headerlink" title="返回栈顶元素"></a>返回栈顶元素</h3><p>基本语法：<code>s.top()</code>  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.<span class="built_in">top</span>();  <span class="comment">//返回栈顶元素</span></span><br></pre></td></tr></table></figure><h3 id="返回栈的大小"><a href="#返回栈的大小" class="headerlink" title="返回栈的大小"></a>返回栈的大小</h3><p>基本语法：<code>s.size()</code>  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.<span class="built_in">size</span>();  <span class="comment">//返回栈的大小</span></span><br></pre></td></tr></table></figure><h3 id="判断栈是否为空"><a href="#判断栈是否为空" class="headerlink" title="判断栈是否为空"></a>判断栈是否为空</h3><p>基本语法：<code>s.empty()</code>  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.<span class="built_in">empty</span>();  <span class="comment">//如果栈为空返回true，否则返回false</span></span><br></pre></td></tr></table></figure><h3 id="入栈操作"><a href="#入栈操作" class="headerlink" title="入栈操作"></a>入栈操作</h3><p>基本语法：<code>s.push(elem)</code>  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.<span class="built_in">push</span>(<span class="number">1</span>);  <span class="comment">//向栈顶插入元素1</span></span><br></pre></td></tr></table></figure><h3 id="出栈操作"><a href="#出栈操作" class="headerlink" title="出栈操作"></a>出栈操作</h3><p>基本语法：<code>s.pop()</code>  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s,<span class="built_in">pop</span>();  <span class="comment">//取出栈顶元素并将其删除</span></span><br></pre></td></tr></table></figure><h1 id="队列（queue）"><a href="#队列（queue）" class="headerlink" title="队列（queue）"></a>队列（queue）</h1><h2 id="基本定义-1"><a href="#基本定义-1" class="headerlink" title="基本定义"></a>基本定义</h2><p>队列是一种特殊的线性表，是一种<strong>先进先出</strong>的数据结构。它只允许在表的前端（<code>front</code>）进行删除操作，而在表的后端（<code>rear</code>）进行插入操作。进行插入操作的端称为队尾，进行删除操作的端称为队头。队列中没有元素时，称为空队列。</p><h2 id="栈的常用操作-1"><a href="#栈的常用操作-1" class="headerlink" title="栈的常用操作"></a>栈的常用操作</h2><h3 id="头文件-1"><a href="#头文件-1" class="headerlink" title="头文件"></a>头文件</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="构造queue容器"><a href="#构造queue容器" class="headerlink" title="构造queue容器"></a>构造queue容器</h3><p>基本语法：<code>queue &lt;Type&gt; q</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">queue &lt;<span class="type">int</span>&gt; q;  <span class="comment">//声明存储int类型数据的队列</span></span><br></pre></td></tr></table></figure><h3 id="返回队首元素"><a href="#返回队首元素" class="headerlink" title="返回队首元素"></a>返回队首元素</h3><p>基本语法：<code>q.front()</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">q.<span class="built_in">front</span>();  <span class="comment">//返回队首元素</span></span><br></pre></td></tr></table></figure><h3 id="返回队尾元素"><a href="#返回队尾元素" class="headerlink" title="返回队尾元素"></a>返回队尾元素</h3><p>基本语法：<code>q.back()</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">q.<span class="built_in">back</span>();  <span class="comment">//返回队尾元素</span></span><br></pre></td></tr></table></figure><h3 id="返回队列的大小"><a href="#返回队列的大小" class="headerlink" title="返回队列的大小"></a>返回队列的大小</h3><p>基本语法：<code>q.size()</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">q.<span class="built_in">size</span>();  <span class="comment">//返回队列的大小</span></span><br></pre></td></tr></table></figure><h3 id="判断队列是否为空"><a href="#判断队列是否为空" class="headerlink" title="判断队列是否为空"></a>判断队列是否为空</h3><p>基本语法：<code>q.empty()</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">q.<span class="built_in">empty</span>();  <span class="comment">//如果队列为空返回true，否则返回false</span></span><br></pre></td></tr></table></figure><h3 id="入队操作"><a href="#入队操作" class="headerlink" title="入队操作"></a>入队操作</h3><p>基本语法：<code>s.push(elem)</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.<span class="built_in">push</span>(<span class="number">1</span>);  <span class="comment">//向队尾添加元素1</span></span><br></pre></td></tr></table></figure><h3 id="出队操作"><a href="#出队操作" class="headerlink" title="出队操作"></a>出队操作</h3><p>基本语法：<code>s.pop()</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s,<span class="built_in">pop</span>();  <span class="comment">//从队尾移除第一个元素</span></span><br></pre></td></tr></table></figure><h1 id="pair"><a href="#pair" class="headerlink" title="pair"></a>pair</h1><h2 id="基本定义-2"><a href="#基本定义-2" class="headerlink" title="基本定义"></a>基本定义</h2><p><code>pair</code>可以将两个元素绑定在一起作为一个合成元素，可以节省编码时间。  </p><h2 id="栈的常用操作-2"><a href="#栈的常用操作-2" class="headerlink" title="栈的常用操作"></a>栈的常用操作</h2><h3 id="头文件-2"><a href="#头文件-2" class="headerlink" title="头文件"></a>头文件</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br></pre></td></tr></table></figure><p>由于<code>map</code>的内部实现中设计<code>pair</code>，就不需要额外再去添加<code>utility</code>头文件了。  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="构造pair容器"><a href="#构造pair容器" class="headerlink" title="构造pair容器"></a>构造pair容器</h3><p>基本语法：<code>pair &lt;Typename1,Typename2&gt; p</code>  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pair &lt;<span class="type">int</span>,<span class="type">float</span>&gt; p;</span><br><span class="line"><span class="comment">//pair有两个参数，分别对应first和second的数据类型，它们可以是任意基本数据类型或应用</span></span><br><span class="line"><span class="comment">//该代码定义了一个新的变量p，其两个参数分别为int和float类型</span></span><br></pre></td></tr></table></figure><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>基本语法：<code>pair &lt;Typename1,Typename2&gt; p(Value1,Value2)</code>  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pair &lt;<span class="type">int</span>,<span class="type">float</span>&gt; <span class="built_in">p</span>(<span class="number">100</span>,<span class="number">3.14</span>);</span><br><span class="line"><span class="comment">//用pair定义一个变量p，其两个参数分别是int和float类型，初始值为100和3.14</span></span><br></pre></td></tr></table></figure><h3 id="元素访问"><a href="#元素访问" class="headerlink" title="元素访问"></a>元素访问</h3><p>可以把<code>pair</code>定义过的东西看作一个二元结构体，该结构体中的两个元素分别是<code>first</code>和<code>second</code>，基本语法：<code>p.first</code> <code>p.first</code>  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pair &lt;<span class="type">int</span>, <span class="type">float</span>&gt; <span class="built_in">p</span>(<span class="number">100</span>, <span class="number">3.14</span>);</span><br><span class="line">cout &lt;&lt; p.first &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; p.second &lt;&lt; endl;  <span class="comment">//输出结果为100 3.14</span></span><br></pre></td></tr></table></figure><h3 id="对变量进行赋值"><a href="#对变量进行赋值" class="headerlink" title="对变量进行赋值"></a>对变量进行赋值</h3><p>如果使用<code>pair</code>定义了一个变量，对其赋值需要使用<code>make_pair</code>函数（利用结构体的写法分别对其first和second赋值也是可以的），基本语法：<code>make_pair(Value1,Value2)</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pair &lt;<span class="type">int</span>, <span class="type">float</span>&gt; p;  <span class="comment">//定义p</span></span><br><span class="line">p = <span class="built_in">make_pair</span>(<span class="number">100</span>, <span class="number">3.14</span>);  <span class="comment">//使用make_pair函数进行赋值</span></span><br><span class="line">cout &lt;&lt; p.first &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; p.second &lt;&lt; endl;  <span class="comment">//输出结果为100 3.14</span></span><br></pre></td></tr></table></figure><h3 id="比较大小"><a href="#比较大小" class="headerlink" title="比较大小"></a>比较大小</h3><p>两个<code>pair</code>类型之间可以进行大小比较，比较规则是先以<code>first</code>的大小作为标准，只有当<code>first</code>相等时才会判别<code>second</code>大小。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 笔记 </tag>
            
            <tag> 教程 </tag>
            
            <tag> STL </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>穷竭搜索</title>
      <link href="/archives/1857aa15.html"/>
      <url>/archives/1857aa15.html</url>
      
        <content type="html"><![CDATA[<hr><h1 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h1><p>在一个函数中再次调用该函数自身的行为叫做递归，这样的函数被称作递归函数。  </p><p>例如，想要编写一个阶乘的函数<code>int fact(int n)</code>，使用循环来实现是完全可以的。但是根据阶乘的递推式<code>n!=n×(n-1)!</code>，我们可以写成如下形式：  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fact</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!n)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> n * <span class="built_in">fact</span>(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">fact</span>(n));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在编写一个递归函数时，函数的停止条件是必须存在的。在刚刚的例子中，当<code>n=0</code>时<code>fact</code>并不是继续调用自身，而是直接返回<code>1</code>。  </p><p>如果没有这一条件存在，函数就会无限地递归下去，程序就会失控崩溃了。  </p><h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><p>栈（<code>Stack</code>）是支持<code>push</code>和<code>pop</code>两种操作的数据结构。<code>push</code>是在栈的顶端放入一组数据的操作。反之，<code>pop</code>是从其顶端取出一组数据的操作。因此，最后进入栈的一组数据可以最先被取出（这种行为被叫做<code>LIFO:Last In First Out</code>，即后进先出）。  </p><p>通过使用数组或者链表等结构可以很容易实现栈，同时，在<code>C++</code>标准库中，有相应的<code>STL</code>容器去完成该操作。  </p><p>函数调用的过程是通过使用栈实现的。因此，递归函数的递归过程也可以改用栈上的操作来实现。  </p><p>以下是使用<code>stack</code>的例子：  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; s;  <span class="comment">//声明存储int类型数据的栈</span></span><br><span class="line">    s.<span class="built_in">push</span>(<span class="number">1</span>);  <span class="comment">//将元素1压入栈  &#123;1&#125;</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, s.<span class="built_in">size</span>());  <span class="comment">//输出栈中元素的个数 1</span></span><br><span class="line">    <span class="keyword">if</span> (s.<span class="built_in">empty</span>())  <span class="comment">//判断栈是否为空  栈不为空</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;栈为空\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;栈不为空\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, s.<span class="built_in">top</span>());  <span class="comment">//返回栈顶元素</span></span><br><span class="line">    s.<span class="built_in">push</span>(<span class="number">2</span>);  <span class="comment">//将元素2压入栈  &#123;1,2&#125;</span></span><br><span class="line">    s.<span class="built_in">push</span>(<span class="number">3</span>);  <span class="comment">//将元素3压入栈  &#123;1,2,3&#125;</span></span><br><span class="line">    s.<span class="built_in">pop</span>();  <span class="comment">//从栈顶移除元素  &#123;1,2&#125;</span></span><br><span class="line">    s.<span class="built_in">pop</span>();  <span class="comment">//从栈顶移除元素  &#123;1&#125;</span></span><br><span class="line">    s.<span class="built_in">pop</span>();  <span class="comment">//从栈顶移除元素  &#123;&#125;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><p>队列（<code>Queue</code>）与栈一样支持<code>push</code>和<code>pop</code>两个操作。但与栈不同的是，<code>pop</code>完成的不是去除最顶端的元素，而是取出最底端的元素。也就是说最初放入的元素能够最先被取出（这种行为被叫做<code>FIFO:First In First Out</code>，即先进先出）。  </p><p>如同栈一样，队列也预先设置了相应的<code>STL</code>容器去实现这些操作。  </p><p>以下是使用<code>queue</code>的例子：  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; s;  <span class="comment">//声明存储int类型数据的队列</span></span><br><span class="line">    s.<span class="built_in">push</span>(<span class="number">1</span>);  <span class="comment">//将元素1放入队尾  &#123;1&#125;</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, s.<span class="built_in">size</span>());  <span class="comment">//输出队列中元素的个数 1</span></span><br><span class="line">    <span class="keyword">if</span> (s.<span class="built_in">empty</span>())  <span class="comment">//判断栈是否为空  队列不为空</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;队列为空\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;队列不为空\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, s.<span class="built_in">front</span>());  <span class="comment">//返回队首元素</span></span><br><span class="line">    s.<span class="built_in">push</span>(<span class="number">2</span>);  <span class="comment">//将元素2放入队尾  &#123;1,2&#125;</span></span><br><span class="line">    s.<span class="built_in">push</span>(<span class="number">3</span>);  <span class="comment">//将元素3放入队尾  &#123;1,2,3&#125;</span></span><br><span class="line">    s.<span class="built_in">pop</span>();  <span class="comment">//从队首移除元素  &#123;2,3&#125;</span></span><br><span class="line">    s.<span class="built_in">pop</span>();  <span class="comment">//从队首移除元素  &#123;3&#125;</span></span><br><span class="line">    s.<span class="built_in">pop</span>();  <span class="comment">//从队首移除元素  &#123;&#125;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="深度优先搜索"><a href="#深度优先搜索" class="headerlink" title="深度优先搜索"></a>深度优先搜索</h1><p>深度优先搜索（<code>DFS</code>，<code>Depth-First Search</code>）是搜索的手段之一。它从某个状态开始，不断地转移状态直到无法转移，然后回退到前一步的状态，继续转移到其他状态，如此不断重复，直至找到最终的解。例如求解数独，首先在某个格子内填入适当的数字，然后再继续在下一个格子内填入数字，如此继续下去。如果发现某个格子无解了，就放弃前一个格子上选择的数字，改用其他可行的数字。根据深度优先搜索的特点，采用递归函数实现比较简单。  </p><p>深度优先搜索从最开始的状态出发，遍历所有可以到达的状态。由此可以对所有的状态进行操作，或者列举出所有的状态。  </p><p><img src="/img/posts/%E7%A9%B7%E7%AB%AD%E6%90%9C%E7%B4%A2/DFS%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BB%E7%9A%84%E9%A1%BA%E5%BA%8F.png" alt="DFS状态转移的顺序"></p><h2 id="部分和问题"><a href="#部分和问题" class="headerlink" title="部分和问题"></a>部分和问题</h2><h3 id="测评链接"><a href="#测评链接" class="headerlink" title="测评链接"></a>测评链接</h3><p><a href="https://www.luogu.com.cn/problem/U221431">部分和问题</a></p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定整数a<sub>1</sub>、a<sub>2</sub>、…、a<sub>n</sub>，判断是否可以从中选出若干数，使它们的和恰好为<code>k</code>。  </p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>第一行有两个整数<code>n</code>和<code>k</code>，分别表示数字的个数。  </p><p>第二行有<code>n</code>个整数，表示给出的<code>n</code>个整数a<sub>i</sub>。  </p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p><code>Yes</code>或<code>No</code></p><h3 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h3><p><strong>输入 #1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4 13 </span><br><span class="line">1 2 4 7 </span><br></pre></td></tr></table></figure><p><strong>输出 #1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yes</span><br></pre></td></tr></table></figure><p><strong>输入 #2</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4 15 </span><br><span class="line">1 2 4 7 </span><br></pre></td></tr></table></figure><p><strong>输出 #2</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">No</span><br></pre></td></tr></table></figure><h3 id="限制条件"><a href="#限制条件" class="headerlink" title="限制条件"></a>限制条件</h3><ul><li><p>1 ≤ <code>n</code> ≤ 20</p></li><li><p>-10<sup>8</sup> ≤ a<sub>i</sub> ≤ 10<sup>8</sup></p></li><li><p>-10<sup>8</sup> ≤ <code>k</code> ≤ 10<sup>8</sup></p></li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>从a<sub>1</sub>开始按顺序决定每个数加或不加，在全部<code>n</code>个数都决定后再判断它们的和是不是<code>k</code>即可。因为状态数是2<sup>n+1</sup>，所以复杂度是O(2<sup>n</sup>)。  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, k;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> sum)</span>  <span class="comment">//已经从前i项得到了和sum，然后对于i项之后的数据进行处理</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//如果n项都计算过了，则返回结果</span></span><br><span class="line">    <span class="keyword">if</span> (i == n)</span><br><span class="line">        <span class="keyword">return</span> sum == k;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加上a[i]的情况</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">dfs</span>(i + <span class="number">1</span>, sum + a[i]))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不加a[i]的情况</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">dfs</span>(i + <span class="number">1</span>, sum))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果上述这三种情况都不行，则返回false</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//数据输入部分</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;k);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//主体部分</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Yes\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;No\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="广度优先搜索"><a href="#广度优先搜索" class="headerlink" title="广度优先搜索"></a>广度优先搜索</h1><p>广度优先搜索（<code>BFS</code>，<code>Breadth-First Search</code>）也是搜索的手段之一。它与深度优先搜索类似，从某个状态出发探索所有可以到达的状态。  </p><p>与深度优先搜索的不同之处在于搜索的顺序，广度优先搜索总是先搜索距离初始状态近的状态。也就是说，它是按照开始状态<code>-&gt;</code>只需<code>1</code>次转移就可以到达的所有状态<code>-&gt;</code>只需<code>2</code>次转移就可以到达的所有状态<code>-&gt;</code>……这样的顺序进行搜索。  </p><p>对于同一个状态，广度优先搜索只经过一次，因此复杂度O(状态数×转移的方式)。  </p><p><img src="/img/posts/%E7%A9%B7%E7%AB%AD%E6%90%9C%E7%B4%A2/BFS%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BB%E7%9A%84%E9%A1%BA%E5%BA%8F.png" alt="BFS状态转移的顺序"></p><p>深度优先搜索（隐式地）利用了栈进行计算，而广度优先搜索则利用了队列。搜索时首先将初始状态添加到队列里，此后从队列的最前端不断取出状态，把从该状态可以转移到的状态中尚未访问过的部分加入队列，如此往复，直至队列被取空或找到了问题的解。通过观察这个队列，我们就可以知道所有的状态都是按照距初始状态由近及远的顺序遍历的。  </p><h2 id="迷宫最短路径"><a href="#迷宫最短路径" class="headerlink" title="迷宫最短路径"></a>迷宫最短路径</h2><h3 id="测评链接-1"><a href="#测评链接-1" class="headerlink" title="测评链接"></a>测评链接</h3><p><a href="https://www.luogu.com.cn/problem/U221540">迷宫的最短路径</a></p><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个大小为<code>N×M</code>的迷宫。迷宫由通道和墙壁组成，每一步可以向邻接的上下左右四格的通道移动。  </p><p>请求出从起点到终点所需的最小步数。  </p><p><strong>本题假定从起点一定可以移动到终点。</strong></p><h3 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h3><p>第一行有两个整数<code>N</code>和<code>M</code>，分别表示迷宫的行数和列数。</p><p>接下来<code>N</code>行，每行<code>M</code>个字符，<code>#</code>表示墙壁，<code>.</code>表示通道，<code>S</code>表示起点，<code>G</code>表示终点。  </p><h3 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h3><p>一个整数表示从起点到终点所需的最小步数。  </p><h3 id="输入输出样例-1"><a href="#输入输出样例-1" class="headerlink" title="输入输出样例"></a>输入输出样例</h3><p><strong>输入 #1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">10 10</span><br><span class="line">#S######.#</span><br><span class="line">......#..#</span><br><span class="line">.#.##.##.#</span><br><span class="line">.#........</span><br><span class="line">##.##.####</span><br><span class="line">....#....#</span><br><span class="line">.#######.#</span><br><span class="line">....#.....</span><br><span class="line">.####.###.</span><br><span class="line">....#...G#</span><br></pre></td></tr></table></figure><p><strong>输出 #1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">22</span><br></pre></td></tr></table></figure><h3 id="限制条件-1"><a href="#限制条件-1" class="headerlink" title="限制条件"></a>限制条件</h3><ul><li>2 ≤ <code>N</code>,<code>M</code> ≤ 100</li></ul><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><p>广度优先搜索按照距开始状态由近及远的顺序进行搜索，因此可以很容易地用来求最短路径、最少操作之类问题的答案。这个问题中，状态仅仅是目前所在位置的坐标，因此可以构造成<code>pair</code>或者编码成<code>int</code>来表达状态。转移的方式为四方向移动，状态数与迷宫大小是相等的，所以时间复杂度是O(4×N×M)=O(N×M)。  </p><p>在广度优先搜索中，只要将已经访问过的状态用标记管理起来，就可以很好地做到由近及远的搜索。这个问题中由于要求最短距离，因此使用<code>d[N][M]</code>数组把最短距离保存起来。初始距离全部都是0，这样只需特别判定起点，即可分辨出到达的位置和未到达的位置，气到了标记作用。  </p><p>因为要向4个不同方向移动，用二维数组<code>dir[4][2]</code>表示四个方向向量，通过循环就可以实现四个方向移动的遍历。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//由于位置是一个二元坐标，因此使用pair来定义可以节省编码时间</span></span><br><span class="line"><span class="keyword">typedef</span> pair &lt;<span class="type">int</span>, <span class="type">int</span>&gt; P;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">105</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> N, M;  <span class="comment">//用来存储地图的大小</span></span><br><span class="line"><span class="type">int</span> sx, sy;  <span class="comment">//用来存储起点坐标</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> d[MAXN][MAXN];  <span class="comment">//用来存储每个位置到起点的最近距离</span></span><br><span class="line"><span class="type">char</span> maze[MAXN][MAXN];  <span class="comment">//用来存储整个地图</span></span><br><span class="line"><span class="type">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123; &#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125; &#125;;  <span class="comment">//用来存储各个方向，分别为左上右下</span></span><br><span class="line"></span><br><span class="line">queue &lt;P&gt; q;  <span class="comment">//BFS需要使用队列，因此定义一个队列</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//数据输入部分</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;N, &amp;M);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= M; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; maze[i][j];</span><br><span class="line">            <span class="keyword">if</span> (maze[i][j] == <span class="string">&#x27;S&#x27;</span>)  <span class="comment">//记录起点坐标</span></span><br><span class="line">            &#123;</span><br><span class="line">                sx = i;</span><br><span class="line">                sy = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//主体部分</span></span><br><span class="line">    q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(sx, sy));  <span class="comment">//将起点放入队列</span></span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>())  <span class="comment">//只要队列不为空就持续循环</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//将左上右下四个位置放入队列</span></span><br><span class="line">        <span class="type">int</span> x = q.<span class="built_in">front</span>().first, y = q.<span class="built_in">front</span>().second;</span><br><span class="line">        <span class="keyword">if</span> (maze[x + dir[<span class="number">0</span>][<span class="number">0</span>]][y + dir[<span class="number">0</span>][<span class="number">1</span>]] == <span class="string">&#x27;G&#x27;</span>)  <span class="comment">//如果到达终点</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, d[x][y] + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (maze[x + dir[<span class="number">0</span>][<span class="number">0</span>]][y + dir[<span class="number">0</span>][<span class="number">1</span>]] == <span class="string">&#x27;.&#x27;</span> &amp;&amp; d[x + dir[<span class="number">0</span>][<span class="number">0</span>]][y + dir[<span class="number">0</span>][<span class="number">1</span>]] == <span class="number">0</span>)  <span class="comment">//左</span></span><br><span class="line">        &#123;</span><br><span class="line">            q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(x + dir[<span class="number">0</span>][<span class="number">0</span>], y + dir[<span class="number">0</span>][<span class="number">1</span>]));  <span class="comment">//将新位置加入队列</span></span><br><span class="line">            d[x + dir[<span class="number">0</span>][<span class="number">0</span>]][y + dir[<span class="number">0</span>][<span class="number">1</span>]] = d[x][y] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (maze[x + dir[<span class="number">1</span>][<span class="number">0</span>]][y + dir[<span class="number">1</span>][<span class="number">1</span>]] == <span class="string">&#x27;G&#x27;</span>)  <span class="comment">//如果到达终点</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, d[x][y] + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (maze[x + dir[<span class="number">1</span>][<span class="number">0</span>]][y + dir[<span class="number">1</span>][<span class="number">1</span>]] == <span class="string">&#x27;.&#x27;</span> &amp;&amp; d[x + dir[<span class="number">1</span>][<span class="number">0</span>]][y + dir[<span class="number">1</span>][<span class="number">1</span>]] == <span class="number">0</span>)  <span class="comment">//上</span></span><br><span class="line">        &#123;</span><br><span class="line">            q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(x + dir[<span class="number">1</span>][<span class="number">0</span>], y + dir[<span class="number">1</span>][<span class="number">1</span>]));  <span class="comment">//将新位置加入队列</span></span><br><span class="line">            d[x + dir[<span class="number">1</span>][<span class="number">0</span>]][y + dir[<span class="number">1</span>][<span class="number">1</span>]] = d[x][y] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (maze[x + dir[<span class="number">2</span>][<span class="number">0</span>]][y + dir[<span class="number">2</span>][<span class="number">1</span>]] == <span class="string">&#x27;G&#x27;</span>)  <span class="comment">//如果到达终点</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, d[x][y] + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (maze[x + dir[<span class="number">2</span>][<span class="number">0</span>]][y + dir[<span class="number">2</span>][<span class="number">1</span>]] == <span class="string">&#x27;.&#x27;</span> &amp;&amp; d[x + dir[<span class="number">2</span>][<span class="number">0</span>]][y + dir[<span class="number">2</span>][<span class="number">1</span>]] == <span class="number">0</span>)  <span class="comment">//右</span></span><br><span class="line">        &#123;</span><br><span class="line">            q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(x + dir[<span class="number">2</span>][<span class="number">0</span>], y + dir[<span class="number">2</span>][<span class="number">1</span>]));  <span class="comment">//将新位置加入队列</span></span><br><span class="line">            d[x + dir[<span class="number">2</span>][<span class="number">0</span>]][y + dir[<span class="number">2</span>][<span class="number">1</span>]] = d[x][y] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (maze[x + dir[<span class="number">3</span>][<span class="number">0</span>]][y + dir[<span class="number">3</span>][<span class="number">1</span>]] == <span class="string">&#x27;G&#x27;</span>)  <span class="comment">//如果到达终点</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, d[x][y] + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (maze[x + dir[<span class="number">3</span>][<span class="number">0</span>]][y + dir[<span class="number">3</span>][<span class="number">1</span>]] == <span class="string">&#x27;.&#x27;</span> &amp;&amp; d[x + dir[<span class="number">3</span>][<span class="number">0</span>]][y + dir[<span class="number">3</span>][<span class="number">1</span>]] == <span class="number">0</span>)  <span class="comment">//下</span></span><br><span class="line">        &#123;</span><br><span class="line">            q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(x + dir[<span class="number">3</span>][<span class="number">0</span>], y + dir[<span class="number">3</span>][<span class="number">1</span>]));  <span class="comment">//将新位置加入队列</span></span><br><span class="line">            d[x + dir[<span class="number">3</span>][<span class="number">0</span>]][y + dir[<span class="number">3</span>][<span class="number">1</span>]] = d[x][y] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//弹出</span></span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="深度优先搜索与广度优先搜索比较"><a href="#深度优先搜索与广度优先搜索比较" class="headerlink" title="深度优先搜索与广度优先搜索比较"></a>深度优先搜索与广度优先搜索比较</h1><p>二者都会生成所有能够遍历到的状态，因此需要对所有的状态进行处理时二者都是可行的。但是递归函数可以很简短地编写，而且状态的管理也更简单，所以大多数情况下还是用深度优先搜索实现。反之，在求取最短路径时深度优先搜索需要反复经过同样的状态，所以此时还是使用广度优先搜索为好。  </p><p>广度优先搜索会把状态逐个假如队列，因此通常需要与状态数成正比的内存空间。反之，深度优先搜索是与最大的递归深度成正比的。一般与状态数相比，递归的深度并不会太大，所以可以认为深度优先搜索更加节省内存。  </p><h1 id="剪枝"><a href="#剪枝" class="headerlink" title="剪枝"></a>剪枝</h1><p>顾名思义，穷竭搜索会把所有可能的解全都检查一遍，当解空间非常大时，复杂度也会相应变大。比如<code>n</code>个元素进行排列时状态数共有<code>n!</code>个，时间复杂度也就成了O(n!)。这样的话，即使<code>n=15</code>计算也很难较早终止。这里简单介绍一下此类情形要如何进行优化。  </p><p>深度优先搜索时，有时早已明确地知道从当前状态无论如何转移都不会存在解。这种情况下，不再继续搜索而是直接跳过，这一方法被称作剪枝。  </p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 递归函数 </tag>
            
            <tag> 队列 </tag>
            
            <tag> 广度优先搜索 </tag>
            
            <tag> 剪枝 </tag>
            
            <tag> 深度优先搜索 </tag>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML语法</title>
      <link href="/archives/25e991bb.html"/>
      <url>/archives/25e991bb.html</url>
      
        <content type="html"><![CDATA[<hr><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="由来"><a href="#由来" class="headerlink" title="由来"></a>由来</h2><p>        HTML的英文全称是 Hyper Text Markup Language，即超文本标记语言。HTML是由Web的发明者 Tim Berners-Lee和同事 Daniel W. Connolly于1990年创立的一种标记语言，它是标准通用化标记语言SGML的应用。用HTML编写的超文本文档称为HTML文档，它能独立于各种操作系统平台(如UNIX， Windows等)。使用HTML，将所需要表达的信息按某种规则写成HTML文件，通过专用的浏览器来识别，并将这些HTML文件“翻译”成可以识别的信息，即现在所见到的网页。<br>        自1990年以来，HTML就一直被用作万维网的信息表示语言，使用HTML描述的文件需要通过web浏览器显示出效果。HTML是一种建立网页文件的语言，通过标记式的指令(Tag)，将影像、声音、图片、文字动画、影视等内容显示出来。事实上，每一个HTML文档都是一种静态的网页文件，这个文件里面包含了HTML指令代码，这些指令代码并不是一种程序语言，只是一种排版网页中资料显示位置的标记结构语言，易学易懂，非常简单。HTML的普遍应用就是带来了超文本的技术―通过单击鼠标从一个主题跳转到另一个主题，从一个页面跳转到另一个页面，与世界各地主机的文件链接超文本传输协议规定了浏览器在运行HTML文档时所遵循的规则和进行的操作。HTTP的制定使浏览器在运行超文本时有了统一的规则和标准。<br>        万维网（world wide web，简称www）上的一个超媒体文档称之为一个页面（外语：page）。作为一个组织或者个人在万维网上放置开始点的页面称为主页（外语：Homepage）或首页，主页中通常包括有指向其他相关页面或其他节点的指针（超级链接），所谓超级链接，就是一种统一资源定位器（Uniform Resource Locator，外语缩写：URL）指针，通过激活（点击）它，可使浏览器方便地获取新的网页。这也是HTML获得广泛应用的最重要的原因之一。在逻辑上将视为一个整体的一系列页面的有机集合称为网站（Website或Site）。超文本标记语言（英文缩写：HTML）是为“网页创建和其它可在网页浏览器中看到的信息”设计的一种标记语言。<br>        网页的本质就是超文本标记语言，通过结合使用其他的Web技术（如：脚本语言、公共网关接口、组件等），可以创造出功能强大的网页。因而，超文本标记语言是万维网（Web）编程的基础，也就是说万维网是建立在超文本基础之上的。超文本标记语言之所以称为超文本标记语言，是因为文本中包含了所谓“超级链接”点。  </p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>        超文本标记语言是标准通用标记语言下的一个应用，也是一种规范，一种标准，它通过标记符号来标记要显示的网页中的各个部分。网页文件本身是一种文本文件，通过在文本文件中添加标记符，可以告诉浏览器如何显示其中的内容（如：文字如何处理，画面如何安排，图片如何显示等）。浏览器按顺序阅读网页文件，然后根据标记符解释和显示其标记的内容，对书写出错的标记将不指出其错误，且不停止其解释执行过程，编制者只能通过显示效果来分析出错原因和出错部位。但需要注意的是，对于不同的浏览器，对同一标记符可能会有不完全相同的解释，因而可能会有不同的显示效果。  </p><h1 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h1><p>我使用的开发工具是<code>Visual Studio Code</code>  </p><p>下载链接：<a href="https://code.visualstudio.com/">Visual Studio Code官网</a></p><h1 id="常用浏览器及其内核"><a href="#常用浏览器及其内核" class="headerlink" title="常用浏览器及其内核"></a>常用浏览器及其内核</h1><table><thead><tr><th align="center">浏览器</th><th align="center">内核</th></tr></thead><tbody><tr><td align="center">谷歌(Chrome)</td><td align="center">Blink</td></tr><tr><td align="center">火狐（Firefox）</td><td align="center">Gecko</td></tr><tr><td align="center">Safair</td><td align="center">Wenkit</td></tr><tr><td align="center">Opera</td><td align="center">Blink</td></tr><tr><td align="center">IE</td><td align="center">Trident</td></tr></tbody></table><p>这里推荐使用<strong>谷歌浏览器(Chrome)（Blink）</strong></p><h1 id="Visual-Studio-Code-简介"><a href="#Visual-Studio-Code-简介" class="headerlink" title="Visual Studio Code 简介"></a>Visual Studio Code 简介</h1><p>        Visual Studio Code（简称“VS Code”  ）是Microsoft在2015年4月30日Build开发者大会上正式宣布一个运行于 Mac OS X、Windows和 Linux 之上的，针对于编写现代Web和云应用的跨平台源代码编辑器，  可在桌面上运行，并且可用于Windows，macOS和Linux。它具有对JavaScript，TypeScript和Node.js的内置支持，并具有丰富的其他语言（例如C++，C＃，Java，Python，PHP，Go）和运行时（例如.NET和Unity）扩展的生态系统。  </p><h1 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h1><p>VS Code可以安装许多插件，为了更方便地书写和调试代码，这里推荐几个插件。  </p><h2 id="简体中文插件"><a href="#简体中文插件" class="headerlink" title="简体中文插件"></a>简体中文插件</h2><p>VS Code默认是英文界面，使用该插件可以将软件内的所有语言改成中文。  </p><p>插件名：<code>Chinese (Simplified) (简体中文) Language Pack for Visual Studio Code</code></p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%E6%8F%92%E4%BB%B6.png" alt="简体中文插件"></p><h2 id="默认浏览器打开插件"><a href="#默认浏览器打开插件" class="headerlink" title="默认浏览器打开插件"></a>默认浏览器打开插件</h2><p>由于我们调试的时候需要使用浏览器进行运行，但是每次打开浏览器又会非常麻烦，因此安装该插件可以直接使用快捷键进行打开，节省了大量的时间。  </p><p>快捷键：<code>Alt + B</code>  </p><p>插件名：<code>Open In Default Browser</code></p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E9%BB%98%E8%AE%A4%E6%B5%8F%E8%A7%88%E5%99%A8%E6%89%93%E5%BC%80%E6%8F%92%E4%BB%B6.png" alt="默认浏览器打开插件"></p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>首先将谷歌浏览器设置为默认浏览器，然后创建一个后缀名为<code>html</code>的文件，使用VS Code打开文件所在的文件夹。  </p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E5%88%9D%E5%A7%8B%E7%95%8C%E9%9D%A2.png" alt="初始界面"></p><h1 id="HTML基本骨架"><a href="#HTML基本骨架" class="headerlink" title="HTML基本骨架"></a>HTML基本骨架</h1><p>输入一个叹号（<code>!</code>）然后摁回车键可以得到一段初始化好的代码 ，这段代码被称为HTML基本骨架</p><p>注意一定要是英文的叹号。  </p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E5%88%9D%E5%A7%8B%E4%BB%A3%E7%A0%81.png" alt="初始代码"> </p><h1 id="基本骨架含义"><a href="#基本骨架含义" class="headerlink" title="基本骨架含义"></a>基本骨架含义</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span>  <span class="comment">&lt;!-- 一种通用标记语言的文档类型声明，告诉标准通用标记语言解析器，应当使用什么文档类型来进行解析 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span>  <span class="comment">&lt;!-- 定义语言的种类，其中en表示English，表示英文网页 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>  <span class="comment">&lt;!-- 表示网页头部的部分 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span>  <span class="comment">&lt;!-- 通过charset属性来规定HTML文档应该使用哪种字符编码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span>  <span class="comment">&lt;!-- 代表标签网页的标题，即标签页的名字 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>  <span class="comment">&lt;!-- 代表网页的主体 --&gt;</span></span><br><span class="line">    Hello world!  <span class="comment">&lt;!-- 网页的内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以使用快捷键<code>Alt + B</code>在浏览器中打开，切记在运行之前需要使用快捷键<code>Ctrl + S</code>进行保存。</p><p>结果展示：  </p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/Hello.png" alt="Hello world!"></p><h1 id="双标签与单标签"><a href="#双标签与单标签" class="headerlink" title="双标签与单标签"></a>双标签与单标签</h1><p>标签一共分为两种，一种叫做双标签，另一种叫单标签。  </p><p>双标签：前部分叫开始标签，后部分叫结束标签，两部分之间包裹内容。  </p><p>例：  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>双标签演示<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br></pre></td></tr></table></figure><p>单标签：自成一体，无法包裹内容  </p><p>例：  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h1><h2 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h2><p>指目录下的绝对位置，可直接到达目标位置，通常从盘符开始的路径。</p><p>例：<code>E:/Workspaces/hexo/themes/butterfly/source/img/posts/HTML语法/HTML语法/img/壁纸.jpg</code></p><h2 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h2><p>同级目录：<code>./</code>   </p><p>下级目录：<code>文件夹名/</code>   </p><p>上级目录：<code>../</code>  </p><p>例：<code>img/壁纸.jpg</code></p><h1 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h1><p>属性指的是标签的属性，需要借助标签进行设置。  </p><p>属性的注意点：  </p><ul><li><p>标签的属性写在开始标签内部</p></li><li><p>标签上可以同时存在多个属性</p></li><li><p>属性之间以空格隔开</p></li><li><p>标签名与属性之间必须以空格隔开</p></li><li><p>属性之间没有顺序之分</p></li></ul><p>例：  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/壁纸.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;图片加载失败&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中<code>img</code>是标签，<code>src</code>和<code>alt</code>均为属性，而引号里面的东西为属性的值，即属性值。  </p><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><p>注释内容一般是给开发者看的，并不会显示在实际的网页中，基本写法是用<code>&lt;!-- --&gt;</code>将注释内容包裹起来。  </p><p>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注释内容 --&gt;</span></span><br></pre></td></tr></table></figure><h1 id="标题标签"><a href="#标题标签" class="headerlink" title="标题标签"></a>标题标签</h1><p>标题分为1~6级别标题，重要程度依次递减，基本写法是用<code>&lt;h1&gt; &lt;/h1&gt;</code>将标题内容包裹起来，其中h后面的数字表示标题的级别，最多可以写到6。  </p><p>特点：</p><ul><li><p>文字默认加粗</p></li><li><p>依次减小</p></li><li><p>独占一行</p></li></ul><p>例：书写1~6级标题  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>二级标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>三级标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>四级标题<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h5</span>&gt;</span>五级标题<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h6</span>&gt;</span>六级标题<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E6%A0%87%E9%A2%98%E6%A0%87%E7%AD%BE.png" alt="标题标签"></p><h1 id="段落标签"><a href="#段落标签" class="headerlink" title="段落标签"></a>段落标签</h1><p>一个段落，分段显示，基本写法是用<code>&lt;p&gt; &lt;/p&gt;</code>将段落内容包裹起来。  </p><p>特点：</p><ul><li><p>段落之间存在间隙</p></li><li><p>独占一行</p></li></ul><p>例：使用段落标签书写I have a dream前三段  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>I am happy to join with you today in what will go down in history as the greatest demonstration for freedom in the history of our nation.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Five score years ago, a great American, in whose symbolic shadow we stand today, signed the Emancipation Proclamation. This momentous decree came as a great beacon light of hope to millions of Negro slaves who had been seared in the flames of withering injustice. It came as a joyous daybreak to end the long night of bad captivity.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>But one hundred years later, the Negro still is not free. One hundred years later, the life of the Negro is still sadly crippled by the manacles of segregation and the chains of discrimination. One hundred years later, the Negro lives on a lonely island of poverty in the midst of a vast ocean of material prosperity. One hundred years later, the Negro is still languished in the corners of American society and finds himself an exile in his own land. And so we&#x27;ve come here today to dramatize a shameful condition.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E6%AE%B5%E8%90%BD%E6%A0%87%E7%AD%BE.png" alt="段落标签"></p><h1 id="换行标签"><a href="#换行标签" class="headerlink" title="换行标签"></a>换行标签</h1><p>强制换行，基本写法是直接写一个<code>&lt;br&gt;</code>  。</p><p>特点：  </p><ul><li><p>单标签</p></li><li><p>让文字强制换行</p></li></ul><p>例：书写I have a dream前三段，并且每段间隔三行  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>I am happy to join with you today in what will go down in history as the greatest demonstration for freedom in the history of our nation.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Five score years ago, a great American, in whose symbolic shadow we stand today, signed the Emancipation Proclamation. This momentous decree came as a great beacon light of hope to millions of Negro slaves who had been seared in the flames of withering injustice. It came as a joyous daybreak to end the long night of bad captivity.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>But one hundred years later, the Negro still is not free. One hundred years later, the life of the Negro is still sadly crippled by the manacles of segregation and the chains of discrimination. One hundred years later, the Negro lives on a lonely island of poverty in the midst of a vast ocean of material prosperity. One hundred years later, the Negro is still languished in the corners of American society and finds himself an exile in his own land. And so we&#x27;ve come here today to dramatize a shameful condition.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E6%8D%A2%E8%A1%8C%E6%A0%87%E7%AD%BE.png" alt="换行标签"></p><h1 id="水平线标签"><a href="#水平线标签" class="headerlink" title="水平线标签"></a>水平线标签</h1><p>主题的分割转换，基本写法是直接写一个<code>&lt;hr&gt;</code>。</p><p>特点：  </p><ul><li><p>单标签</p></li><li><p>在页面中显示一条水平线</p></li></ul><p>例：书写I have a dream前三段，并且每段使用一个水平线隔开  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>I am happy to join with you today in what will go down in history as the greatest demonstration for freedom in the history of our nation.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Five score years ago, a great American, in whose symbolic shadow we stand today, signed the Emancipation Proclamation. This momentous decree came as a great beacon light of hope to millions of Negro slaves who had been seared in the flames of withering injustice. It came as a joyous daybreak to end the long night of bad captivity.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>But one hundred years later, the Negro still is not free. One hundred years later, the life of the Negro is still sadly crippled by the manacles of segregation and the chains of discrimination. One hundred years later, the Negro lives on a lonely island of poverty in the midst of a vast ocean of material prosperity. One hundred years later, the Negro is still languished in the corners of American society and finds himself an exile in his own land. And so we&#x27;ve come here today to dramatize a shameful condition.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E6%B0%B4%E5%B9%B3%E7%BA%BF%E6%A0%87%E7%AD%BE.png" alt="水平线标签"></p><h1 id="文本格式化标签"><a href="#文本格式化标签" class="headerlink" title="文本格式化标签"></a>文本格式化标签</h1><p>主要功能：  </p><ol><li><p>文字加粗  <code>&lt;b&gt; &lt;/b&gt;</code>    <code>&lt;strong&gt; &lt;/strong&gt;</code></p></li><li><p>下划线  <code>&lt;u&gt; &lt;/u&gt;</code>    <code>&lt;ins&gt; &lt;/ins&gt;</code></p></li><li><p>倾斜  <code>&lt;i&gt; &lt;/i&gt;</code>    <code>&lt;em&gt; &lt;/em&gt;</code></p></li><li><p>删除线  <code>&lt;s&gt; &lt;/s&gt;</code>    <code>&lt;del&gt; &lt;/del&gt;</code></p></li></ol><p>长的标签是为了突出重要性，用来强调语境，视觉效果上是完全相同的。  </p><p>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">b</span>&gt;</span>加粗<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">strong</span>&gt;</span>加粗<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">u</span>&gt;</span>下划线<span class="tag">&lt;/<span class="name">u</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ins</span>&gt;</span>下划线<span class="tag">&lt;/<span class="name">ins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span>&gt;</span>倾斜<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">em</span>&gt;</span>倾斜<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">s</span>&gt;</span>删除线<span class="tag">&lt;/<span class="name">s</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">del</span>&gt;</span>删除线<span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E6%96%87%E6%9C%AC%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%A0%87%E7%AD%BE.png" alt="文本格式化标签"></p><h1 id="图片标签"><a href="#图片标签" class="headerlink" title="图片标签"></a>图片标签</h1><p>在网页中显示图片，基本写法是<code>&lt;img src=&quot;&quot; alt=&quot;&quot;&gt;</code>。  </p><p>特点：  </p><ul><li><p>单标签</p></li><li><p><code>img</code>标签如果要展示对应的效果，需要借助标签的属性进行设置。</p></li></ul><p>属性：  </p><ul><li><p><code>src</code>：添加图片的路径，从而显示图片</p></li><li><p><code>alt</code>：图片加载失败时进行文本替换</p></li><li><p><code>title</code>：鼠标悬停时显示文字</p></li><li><p><code>width</code>和<code>height</code>：表示图片的宽度和高度，如果只设置一个，将会自动比例缩放（图片不会变形），默认单位为像素（px）</p></li></ul><p>例：添加一张相对路径为<code>img/壁纸.jpg</code>的图片，加载失败显示文字为“图片加载失败”，鼠标悬停文字为“壁纸”，宽度和高度分别是800和500  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/壁纸.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;图片加载失败&quot;</span> <span class="attr">title</span>=<span class="string">&quot;壁纸&quot;</span> <span class="attr">width</span>=<span class="string">&quot;800&quot;</span> <span class="attr">height</span>=<span class="string">&quot;500&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E5%9B%BE%E7%89%87%E6%A0%87%E7%AD%BE.png" alt="图片标签"></p><h1 id="音频标签"><a href="#音频标签" class="headerlink" title="音频标签"></a>音频标签</h1><p>在页面中插入音频，基本写法是<code>&lt;audio src=&quot;&quot;&gt;&lt;/audio&gt;</code>。  </p><p>属性：  </p><ul><li><p><code>src</code>：添加音频的路径</p></li><li><p><code>controls</code>：显示播放的控件</p></li><li><p><code>autoplay</code>：自动播放（部分浏览器不支持）</p></li><li><p><code>loop</code>：循环播放</p></li></ul><p>例：添加一个相对路径为<code>audio/Aimer - LAST STARDUST.mp3</code>的音频，添加显示播放的控件，设置为自动播放，循环播放  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;audio/Aimer - LAST STARDUST.mp3&quot;</span> <span class="attr">controls</span> <span class="attr">autoplay</span> <span class="attr">loop</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E9%9F%B3%E9%A2%91%E6%A0%87%E7%AD%BE.png" alt="音频标签"></p><h1 id="视频标签"><a href="#视频标签" class="headerlink" title="视频标签"></a>视频标签</h1><p>在页面中插入视频，基本写法是<code>&lt;video src=&quot;&quot;&gt;&lt;/video&gt;</code>。  </p><p>属性：  </p><ul><li><p><code>src</code>：添加视频的路径</p></li><li><p><code>controls</code>：显示播放的控件</p></li><li><p><code>autoplay</code>：自动播放（谷歌浏览器中需要配合<code>muted</code>实现静音播放）</p></li><li><p><code>loop</code>：循环播放</p></li><li><p><code>width</code>和<code>height</code>：控制宽度和高度</p></li></ul><p>例：添加一个相对路径为<code>video/CG.mp4</code>的音频，添加显示播放的控件，设置为自动静音播放，循环播放，宽度和高度设置为800和500</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;video/CG.mp4&quot;</span> <span class="attr">controls</span> <span class="attr">autoplay</span> <span class="attr">muted</span> <span class="attr">loop</span> <span class="attr">width</span>=<span class="string">&quot;800&quot;</span> <span class="attr">height</span>=<span class="string">&quot;500&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E8%A7%86%E9%A2%91%E6%A0%87%E7%AD%BE.png" alt="视频标签"></p><h1 id="链接标签"><a href="#链接标签" class="headerlink" title="链接标签"></a>链接标签</h1><p>点击之后，从一个页面跳转至另外一个页面，基本写法是<code>&lt;a href=&quot;&quot;&gt;&lt;/a&gt;</code>其中<code>href</code>后面写跳转到的链接，两个标签之间写显示的文字。  </p><p>在实际开发过程中，可能遇到链接还没有制作的过程，因此可以在<code>href</code>后面写<code>#</code>作为空链接进行占位。  </p><p>属性：</p><ul><li><code>target</code>：有两个属性值<ul><li><p><code>_self</code>：默认值，在当前窗口中跳转（覆盖原网页）</p></li><li><p>·_blank`：在新窗口中跳转（保留原网页）</p></li></ul></li></ul><p>例：制作两个链接，分别在当前窗口跳转和在新窗口中跳转，跳转地址均为该博客  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://big-worth.github.io/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_self&quot;</span>&gt;</span>当前窗口跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://big-worth.github.io/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>新窗口跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E9%93%BE%E6%8E%A5%E6%A0%87%E7%AD%BE.png" alt="链接标签"></p><h1 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h1><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p>在网页中表示一组无顺序之分的列表。  </p><p>标签名：</p><ul><li><p><code>ul</code>：表示无序列表的整体，用于包裹<code>li</code>标签</p></li><li><p><code>li</code>：表示无序列表的每一项，用于包含每一行的内容</p></li></ul><p>显示特点：列表的每一项前默认显示圆点标识。  </p><p>注意点：<code>ul</code>标签中只允许包含<code>li</code>标签，<code>li</code>标签可以包含任意内容。</p><p>例：制作一个无序列表，内容是从星期一至星期日  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>星期一<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>星期二<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>星期三<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>星期四<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>星期五<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>星期六<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>星期日<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果显示：  </p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E6%97%A0%E5%BA%8F%E5%88%97%E8%A1%A8.png" alt="无序列表"></p><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><p>在网页中表示一组有顺序之分的列表。  </p><p>标签名：</p><ul><li><p><code>ol</code>：表示有序列表的整体，用于包裹<code>li</code>标签</p></li><li><p><code>li</code>：表示有序列表的每一项，用于包含每一行的内容</p></li></ul><p>显示特点：列表的每一项前默认显示序号标识。  </p><p>注意点：<code>ol</code>标签中只允许包含<code>li</code>标签，<code>li</code>标签可以包含任意内容。  </p><p>例：制作一个有序列表，内容是从星期一至星期日</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>星期一<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>星期二<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>星期三<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>星期四<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>星期五<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>星期六<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>星期日<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果显示：  </p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E6%9C%89%E5%BA%8F%E5%88%97%E8%A1%A8.png" alt="有序列表"></p><h2 id="自定义列表"><a href="#自定义列表" class="headerlink" title="自定义列表"></a>自定义列表</h2><p>在网页的导航中通常会使用自定义列表实现。  </p><p>标签名：  </p><ul><li><p><code>dl</code>：表示自定义列表的整体，用于包裹<code>dt</code>和<code>dd</code>标签</p></li><li><p><code>dt</code>：表示自定义列表的主题</p></li><li><p><code>dd</code>：表示自定义列表的针对主题的每一项内容</p></li></ul><p>显示特点：<code>dd</code>前会默认显示缩进效果。  </p><p>注意点：<code>dl</code>标签中只允许包含<code>dt</code>和<code>dd</code>标签，<code>dt</code>和<code>dd</code>标签可以包含任意内容。</p><p>例：制作一个自定义列表，分为工作日和休息日，工作日中包括星期一到星期五，休息日中包括星期六到星期日  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>工作日<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>星期一<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>星期二<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>星期三<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>星期四<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>星期五<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>休息日<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>星期六<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>星期日<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%97%E8%A1%A8.png" alt="自定义列表"></p><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><h2 id="标签名与属性"><a href="#标签名与属性" class="headerlink" title="标签名与属性"></a>标签名与属性</h2><p>在网页中以列的单元格的方式整齐展示的数据。  </p><p>标签名：  </p><ul><li><p><code>table</code>：表格整体，可以用于包裹多个<code>tr</code></p></li><li><p><code>tr</code>：表示每行，可用于包裹<code>td</code></p></li><li><p><code>td</code>：表格单元格，可用于包裹内容</p></li></ul><p>注意点：标签的嵌套关系为<code>table</code>&gt;<code>tr</code>&gt;<code>td</code>。  </p><p>属性：  </p><ul><li><p><code>border</code>：属性值为数字，表示边框的宽度</p></li><li><p><code>width</code>：属性值为数字，表示表格的宽度</p></li><li><p><code>height</code>：属性值为数字，表示表格的高度</p></li></ul><p>注意点：在实际开发中一般使用CSS设置表格的样式。</p><h2 id="标题与表头单元格"><a href="#标题与表头单元格" class="headerlink" title="标题与表头单元格"></a>标题与表头单元格</h2><p>在表格中表示整体大标题和一行小标题。  </p><p>标签名：  </p><ul><li><p><code>caption</code>：表格大标题，表示表格整体的大标题，默认在表格整体顶部居中位置显示</p></li><li><p><code>th</code>：表头单元格，表示一行小标题，通常用于表格第一行，默认内部文字加粗并居中显示</p></li></ul><p>注意点：<code>caption</code>标签写在<code>table</code>标签内部，<code>th</code>标签写在<code>th</code>标签内部（用于替换<code>td</code>标签）  </p><h2 id="表格的结构标签"><a href="#表格的结构标签" class="headerlink" title="表格的结构标签"></a>表格的结构标签</h2><p>让表格的内容结构分组，突出表格的不同成分（头部、主题、底部），使语义更加清晰。  </p><p>标签名：  </p><ul><li><p><code>thead</code>： 表格头部</p></li><li><p><code>tbody</code>：表格主体</p></li><li><p><code>foot</code>：表格底部</p></li></ul><h2 id="合并单元格"><a href="#合并单元格" class="headerlink" title="合并单元格"></a>合并单元格</h2><p>跨行合并（垂直合并成一个）  </p><p>跨列合并（水平合并成一个）  </p><p>合并单元格的步骤：  </p><ol><li><p>明确合并哪几个单元格</p></li><li><p>通过左上原则，确定保留谁：</p><ol><li><p>上下合并：只保留最上的，删除其他</p></li><li><p>左右合并：只保留最左的，删除其他</p></li></ol></li><li><p>给保留的单元格设置：跨行合并（<code>rowspan</code>）或者跨列合并（<code>colspan</code>）</p></li></ol><p>属性：  </p><ul><li><p><code>rowspan</code>：属性值表示合并单元格的个数，跨行合并，将多行的单元格垂直合并</p></li><li><p><code>colspan</code>：属性值表示合并单元格的个数，跨列合并，将多列的单元格水平合并</p></li></ul><p>注意点：只有一个结构标签中的单元格才能合并，不能跨结构合并标签（不能跨<code>thead</code> <code>tbody</code> <code>tfoot</code>）  </p><p>例：使用结构标签制作一个乘法表，表头为“九九乘法表”并加粗，并将剩下的没有数据的格子进行合并，边框宽度为1，最后一行用字母表示  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">caption</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>九九乘法表<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span> <span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>1<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>2<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>3<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>4<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>5<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>6<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>7<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>8<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>9<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;9&quot;</span>&gt;</span>1*1=1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1*2=2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;8&quot;</span>&gt;</span>2*2=4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1*3=3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2*3=6<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;7&quot;</span>&gt;</span>3*3=9<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1*4=4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2*4=8<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>3*4=12<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;6&quot;</span>&gt;</span>4*4=16<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>5<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1*5=5<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2*5=10<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>3*5=15<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>4*5=20<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;5&quot;</span>&gt;</span>5*5=25<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>6<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1*6=6<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2*6=12<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>3*6=18<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>4*6=24<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>5*6=30<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;4&quot;</span>&gt;</span>6*6=36<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>7<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1*7=7<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2*7=14<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>3*7=21<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>4*7=28<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>5*7=35<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>6*7=42<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span>7*7=49<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>8<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1*8=8<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2*8=16<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>3*8=24<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>4*8=32<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>5*8=40<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>6*8=48<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>7*8=56<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>8*8=64<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>9<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1*9=9<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2*9=18<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>3*9=27<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>4*9=36<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>5*9=45<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>6*9=54<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>7*9=63<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>8*9=72<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;1&quot;</span>&gt;</span>9*9=81<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">td</span>&gt;</span> <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">td</span>&gt;</span>a<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">td</span>&gt;</span>b<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">td</span>&gt;</span>c<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">td</span>&gt;</span>d<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">td</span>&gt;</span>e<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">td</span>&gt;</span>f<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">td</span>&gt;</span>g<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">td</span>&gt;</span>h<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">td</span>&gt;</span>i<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E8%A1%A8%E6%A0%BC.png" alt="表格"></p><h1 id="input系列标签"><a href="#input系列标签" class="headerlink" title="input系列标签"></a>input系列标签</h1><h2 id="input标签"><a href="#input标签" class="headerlink" title="input标签"></a>input标签</h2><p>在网页中显示收集用户信息的表单，标签名为<code>input</code>，基本写法是<code>&lt;input type=&quot;text&quot;&gt;</code>。  </p><p>属性值：  </p><ul><li><p><code>text</code>：文本框，用于输入单行文本</p></li><li><p><code>password</code>：密码框，用于输入密码</p></li><li><p><code>radio</code>：单选框，用于多选一的情况</p></li><li><p><code>checkbox</code>：多选框，用于多选多的情况</p></li><li><p><code>file</code>：文件选择，用于之后上传文件</p></li><li><p><code>submit</code>：提交按钮，用于提交</p></li><li><p><code>reset</code>：重置按钮，用于重置</p></li><li><p><code>button</code>：普通按钮，默认无功能，之后配合<code>js</code>添加功能</p></li></ul><h2 id="文本框（text-password）系列标签"><a href="#文本框（text-password）系列标签" class="headerlink" title="文本框（text password）系列标签"></a>文本框（text password）系列标签</h2><p>在网页中显示输入单行文本的表单控件。  </p><p>属性：  </p><ul><li><p><code>placeholder</code>：占位符。提示用户输入内容的文本</p></li><li><p><code>value</code>：初始值。会在文本框初始时显示</p></li></ul><p>例：制作一个文本框，提示信息为“账号”，制作一个密码框，提示信息为“密码”  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;账号&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;密码&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E6%96%87%E6%9C%AC%E6%A1%86%E7%B3%BB%E5%88%97%E6%A0%87%E7%AD%BE.png" alt="文本框系列标签"></p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E6%96%87%E6%9C%AC%E6%A1%86%E7%B3%BB%E5%88%97%E6%A0%87%E7%AD%BE%E8%BE%93%E5%85%A5%E5%B1%95%E7%A4%BA.png" alt="文本框系列标签输入展示"></p><h2 id="单选框（radio）系列标签"><a href="#单选框（radio）系列标签" class="headerlink" title="单选框（radio）系列标签"></a>单选框（radio）系列标签</h2><p>在网页中显示多选一的单选表单控件。  </p><p>属性：  </p><ul><li><p><code>name</code>：分组。有相同属性的单选框为一组，一组中同时只能有一个被选中</p></li><li><p><code>checked</code>：默认选中</p></li></ul><p>注意点：<code>name</code>属性对于单选框有分组功能，有相同<code>name</code>属性值的单选框为一组，一组中只能同时有一个被选中。  </p><p>例：制作一个单选框，内容是性别，一共三个选项，分别是男，女，保密，默认选择保密  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    性别： </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>男 </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>女 </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">checked</span>&gt;</span>保密</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E5%8D%95%E9%80%89%E6%A1%86%E7%B3%BB%E5%88%97%E6%A0%87%E7%AD%BE.png" alt="单选框系列标签"></p><h2 id="多选框（checkbox）系列标签"><a href="#多选框（checkbox）系列标签" class="headerlink" title="多选框（checkbox）系列标签"></a>多选框（checkbox）系列标签</h2><p>在网页中显示多选多的多选表单控件。</p><p>属性：</p><ul><li><p><code>name</code>：分组。有相同属性的单选框为一组，一组可以有多个被选中</p></li><li><p><code>checked</code>：默认选中</p></li></ul><p>注意点：<code>name</code>属性对于单选框有分组功能，有相同<code>name</code>属性值的单选框为一组，一组中可以同时有多个被选中。  </p><p>例：制作一个多选框，内容是爱好，设置五个爱好，分别是运动，唱歌，画画，睡觉，其他，其中其他后面需要跟一个文本框，提示信息为其他爱好，默认选择为运动</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    爱好： </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">checked</span>&gt;</span>运动 </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>唱歌 </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>画画 </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>睡觉 </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>其他 </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;其他爱好&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E5%A4%9A%E9%80%89%E6%A1%86%E7%B3%BB%E5%88%97%E6%A0%87%E7%AD%BE.png" alt="多选框系列标签"></p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E5%A4%9A%E9%80%89%E6%A1%86%E7%B3%BB%E5%88%97%E6%A0%87%E7%AD%BE%E8%BE%93%E5%85%A5%E5%B1%95%E7%A4%BA.png" alt="多选框系列标签输入展示"></p><h2 id="文件选择（file）"><a href="#文件选择（file）" class="headerlink" title="文件选择（file）"></a>文件选择（file）</h2><p>在网页中显示文件选择的表单控件。  </p><p>属性：  </p><ul><li><code>multiple</code>：多文件选择</li></ul><p>例：制作一个文件上传控件，设置为多文件选择  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E6%96%87%E4%BB%B6%E9%80%89%E6%8B%A9.png" alt="文件选择"></p><h2 id="按钮（button）"><a href="#按钮（button）" class="headerlink" title="按钮（button）"></a>按钮（button）</h2><p>在网页中显示不用功能的按钮表单控件。</p><p>属性值：  </p><ul><li><p><code>submit</code>：提交按钮。点击之后提交数据给后端服务器</p></li><li><p><code>reset</code>：重置按钮。点击之后恢复表单默认值</p></li><li><p><code>button</code>：普通按钮。默认无功能，之后配合<code>js</code>添加功能</p></li></ul><p>属性：  </p><ul><li><code>value</code>：替换按钮上的文字</li></ul><p>注意点：如果需要实现以上按钮功能，需要配合<code>form</code>标签使用  </p><p><code>form</code>标签使用方法：用<code>form</code>标签把表单标签一起包裹起来即可。  </p><p>属性：  </p><ul><li><code>value</code>：设置按钮名字</li></ul><p>注意点：谷歌浏览器<code>button</code>按钮默认是提交按钮。  </p><p>还可以使用<code>button</code>标签，<code>button</code>标签是双标签，更便于包裹其他内容：文字、图片等。  </p><p>例：制作一个个人信息表单，并能够实现上传重置等功能。  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        姓名： </span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;姓名&quot;</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        性别： </span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>男 </span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>女</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">checked</span>&gt;</span>保密</span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        爱好： </span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">checked</span>&gt;</span>运动 </span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>唱歌 </span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>画画 </span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>睡觉 </span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>其他 </span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">其他爱好</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传信息&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重置信息&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;默认为上传按钮&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>上传信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span>重置信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>默认为上传按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E6%8C%89%E9%92%AE.png" alt="按钮"></p><h2 id="下拉菜单（select）按钮"><a href="#下拉菜单（select）按钮" class="headerlink" title="下拉菜单（select）按钮"></a>下拉菜单（select）按钮</h2><p>在网页中提供多个选择项的下拉菜单表单控件。  </p><p>标签名：  </p><ul><li><p><code>select</code>：下拉菜单的整体</p></li><li><p><code>option</code>：下拉菜单的每一项</p></li></ul><p>属性：  </p><ul><li><code>selected</code>：下拉菜单的默认选中</li></ul><p>例：制作一个时间下拉菜单，内容是星期一到星期五，默认选择星期三  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>星期一<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>星期二<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">selected</span>&gt;</span>星期三<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>星期四<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>星期五<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E4%B8%8B%E6%8B%89%E8%8F%9C%E5%8D%95%E6%8C%89%E9%92%AE.png" alt="下拉菜单按钮"></p><h1 id="文本域标签（textarea）"><a href="#文本域标签（textarea）" class="headerlink" title="文本域标签（textarea）"></a>文本域标签（textarea）</h1><p>在网页中提供可输入多行文本的表单控件，基本写法是<code>&lt;textarea name=&quot;&quot; id=&quot;&quot; cols=&quot;30&quot; rows=&quot;10&quot;&gt;&lt;/textarea&gt;</code>。  </p><p>属性：  </p><ul><li><p><code>clos</code>：规定了文本域内可见宽度</p></li><li><p><code>rows</code>：规定了文本域内可见行数</p></li></ul><p>注意点：右下角可以拖拽改变大小，实际开发时针对于样式效果推荐<code>CSS</code>设置。  </p><p>例：制作一个文本域标签，宽度为20，行数为10  </p><p>结果展示：  </p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E6%96%87%E6%9C%AC%E5%9F%9F%E6%A0%87%E7%AD%BE.png" alt="文本域标签"></p><h1 id="label标签"><a href="#label标签" class="headerlink" title="label标签"></a>label标签</h1><p>常用于绑定内容与表单标签的关系，可以实现点击文本也可以选中单选框多选框，基本写法是<code>&lt;label for=&quot;&quot;&gt;&lt;/label&gt;</code>。  </p><ol><li><p>使用方法1</p><ol><li><p>使用<code>label</code>标签把内容（如文本）包裹起来</p></li><li><p>在表单标签上添加<code>id</code>属性</p></li><li><p>在<code>label</code>标签的<code>for</code>属性中设置对应的<code>id</code>属性值</p></li></ol></li><li><p>使用方法2</p><ol><li><p>直接用<code>label</code>标签把内容（如文本）和表单标签一起包裹起来</p></li><li><p>需要把<code>label</code>标签的<code>for</code>属性删除即可</p></li></ol></li></ol><p>例：制作一个性别选择，分别使用两种方法为男和女两个选项添加<code>label</code>标签  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    性别：</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">id</span>=<span class="string">&quot;male&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;male&quot;</span>&gt;</span> 男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>&gt;</span> 女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/label%E6%A0%87%E7%AD%BE.png" alt="label标签"></p><h1 id="无语义标签"><a href="#无语义标签" class="headerlink" title="无语义标签"></a>无语义标签</h1><p>实际开发网页时会大量频繁使用<code>div</code>和<code>span</code>这两个无语义的布局标签，基本写法是<code>&lt;div&gt;&lt;/div&gt;</code>和<code>&lt;span&gt;&lt;/span&gt;</code>。  </p><p>标签：  </p><ul><li><p><code>div</code>标签：一行只显示一个（独占一行）</p></li><li><p><code>span</code>标签：一行可以显示多个</p></li></ul><h1 id="有语义标签（手机端网页）"><a href="#有语义标签（手机端网页）" class="headerlink" title="有语义标签（手机端网页）"></a>有语义标签（手机端网页）</h1><p>在<code>HTML5</code>新版本中，退出了一些有语义的布局标签供开发者使用。  </p><p>标签名：  </p><ul><li><p><code>header</code>：网页头部</p></li><li><p><code>nav</code>：网页导航</p></li><li><p><code>footer</code>：网页底部</p></li><li><p><code>aside</code>：网页侧边栏</p></li><li><p><code>section</code>：网页区块</p></li><li><p><code>article</code>：网页文章</p></li></ul><p>注意点：以上标签显示特点和<code>div</code>一致，但是比<code>div</code>多了不同的语义。  </p><h1 id="实体字符"><a href="#实体字符" class="headerlink" title="实体字符"></a>实体字符</h1><p>因为很多符号不能直接表示出来，因此需要使用实体字符进行代替。  </p><table><thead><tr><th align="center">显示结果</th><th align="center">描述</th><th align="center">实体名称</th><th align="center">实体编号</th></tr></thead><tbody><tr><td align="center"></td><td align="center">空格</td><td align="center"><code>&amp;nbsp;</code></td><td align="center">&#160;</td></tr><tr><td align="center">&lt;</td><td align="center">小于号</td><td align="center"><code>&amp;lt;</code></td><td align="center">&#60;</td></tr><tr><td align="center">&gt;</td><td align="center">大于号</td><td align="center"><code>&amp;gt;</code></td><td align="center">&#62;</td></tr><tr><td align="center">&amp;</td><td align="center">和号</td><td align="center"><code>&amp;amp;</code></td><td align="center">&#38;</td></tr><tr><td align="center">“</td><td align="center">引号</td><td align="center"><code>&amp;quot;</code></td><td align="center">&#34;</td></tr><tr><td align="center">‘</td><td align="center">撇号</td><td align="center"><code>&amp;apos;</code> (IE不支持)</td><td align="center">&#39;</td></tr><tr><td align="center">￠</td><td align="center">分（cent）</td><td align="center"><code>&amp;cent;</code></td><td align="center">&#162;</td></tr><tr><td align="center">£</td><td align="center">镑（pound）</td><td align="center"><code>&amp;pound;</code></td><td align="center">&#163;</td></tr><tr><td align="center">¥</td><td align="center">元（yen）</td><td align="center"><code>&amp;yen;</code></td><td align="center">&#165;</td></tr><tr><td align="center">€</td><td align="center">欧元（euro）</td><td align="center"><code>&amp;euro;</code></td><td align="center">&#8364;</td></tr><tr><td align="center">§</td><td align="center">小节</td><td align="center"><code>&amp;sect;</code></td><td align="center">&#167;</td></tr><tr><td align="center">©</td><td align="center">版权（copyright）</td><td align="center"><code>&amp;copy;</code></td><td align="center">&#169;</td></tr><tr><td align="center">®</td><td align="center">注册商标</td><td align="center"><code>&amp;reg;</code></td><td align="center">&#174;</td></tr><tr><td align="center">™</td><td align="center">商标</td><td align="center"><code>&amp;trade;</code></td><td align="center">&#8482;</td></tr><tr><td align="center">×</td><td align="center">乘号</td><td align="center"><code>&amp;times;</code></td><td align="center">&#215;</td></tr><tr><td align="center">÷</td><td align="center">除号</td><td align="center"><code>&amp;divide;</code></td><td align="center">&#247;</td></tr></tbody></table><p>使用过程中需要输入实体名称。  </p><p>例：制作一个版权符号  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    ©</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E5%AE%9E%E4%BD%93%E5%AD%97%E7%AC%A6.png" alt="实体字符"></p><hr>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 教程 </tag>
            
            <tag> HTML </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二打一（斗地主）计算机博弈</title>
      <link href="/archives/765139d6.html"/>
      <url>/archives/765139d6.html</url>
      
        <content type="html"><![CDATA[<hr><h1 id="二打一扑克牌项目规则"><a href="#二打一扑克牌项目规则" class="headerlink" title="二打一扑克牌项目规则"></a>二打一扑克牌项目规则</h1><h2 id="官方网站"><a href="#官方网站" class="headerlink" title="官方网站"></a>官方网站</h2><p>全国计算机博弈大赛官网链接：</p><p><a href="http://computergames.caai.cn/">计算机博弈官网</a>  </p><p>二打一扑克牌项目规则官网链接：  </p><p><a href="http://computergames.caai.cn/jsgz10.html">二打一规则官网</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>二打一，民间俗称斗地主，因玩法简单、娱乐性强已成为国内最受喜爱的牌类游戏之一。2013年正式成为国家体育总局认定的正式比赛项目之一。本规则是根据中国机器博弈专业委员会主办的全国大学生计算机博弈大赛的需要，参考人民体育出版社《中国二打一扑克竞赛规则》并结合JJ斗地主、百度百科、维基百科、联众游戏、腾讯游戏等网站文献编写完成。  </p><h2 id="术语约定"><a href="#术语约定" class="headerlink" title="术语约定"></a>术语约定</h2><h3 id="局"><a href="#局" class="headerlink" title="局"></a>局</h3><p>一副牌(编码见附表1)包括发牌、叫牌、出牌、记分的博弈过程，称为一局。  </p><h3 id="轮"><a href="#轮" class="headerlink" title="轮"></a>轮</h3><p>三个参赛选手共坐一桌完成的若干局构成一轮。  </p><h3 id="牌型"><a href="#牌型" class="headerlink" title="牌型"></a>牌型</h3><p>  玩家一次出牌的牌张组合（见附表2）。主要包括火箭、炸弹和普通牌型。</p><h3 id="春天与反春天"><a href="#春天与反春天" class="headerlink" title="春天与反春天"></a>春天与反春天</h3><p>地主所有牌出完，其它两家一张都未出，称为“春天”。  </p><p>其它两家中有一家先出完牌，地主只出过一手牌，“反春天”。  </p><h2 id="一局牌的比赛过程"><a href="#一局牌的比赛过程" class="headerlink" title="一局牌的比赛过程"></a>一局牌的比赛过程</h2><p>一局牌需三个玩家（按方位西0、南1、东2区分）参与。过程包括发牌、叫牌、出牌和计分4步骤完成。通过叫牌，一个玩家成为地主（庄家），其余两个玩家作为农民（防守方）与地主对抗。以某一玩家率先出尽手中牌来结束牌局判定胜负，并计算本局小分。  </p><h3 id="发牌"><a href="#发牌" class="headerlink" title="发牌"></a>发牌</h3><p>一副牌54张，每个玩家发17张，剩余3张作为底牌，在地主未确定之前所有玩家不能看底牌，待地主确定后，亮出底牌并将其归于地主。  </p><h3 id="叫牌"><a href="#叫牌" class="headerlink" title="叫牌"></a>叫牌</h3><p>每轮从西家（0）开始叫牌，并按出牌的顺序轮流进行，每人叫一次牌。叫牌时可以叫“1分”，“2分”，“3分”或“不叫（0）”。后叫牌者只能叫比前面叫过的分数都高或者不叫。如果有牌手叫分后，另外两人选择不叫或有牌手叫到“3分”则结束叫牌，叫牌结束后所叫分值最大的牌手确定为地主。如果三位牌手均选择不叫则视为完成一局，各家本局不得分。确定地主后，底牌亮出并发给地主。  </p><h3 id="出牌"><a href="#出牌" class="headerlink" title="出牌"></a>出牌</h3><p>每局由庄家先出，按逆时针顺序玩家依次出牌或过牌不出。后续跟牌者须按照同样牌型和张数进行跟牌，也可出炸弹或者火箭，后面的出牌必须大于前一手出牌。如果连续两家不出则最后出牌者可领出任意合法牌型。</p><p>出牌大小的比较：  </p><p>对于单牌，自大到小的牌张分值次序为<code>大王、小王、2、A、K、Q、J、10、9、8、7、6、5、4、3</code>。各花色之间无大小的区别。  </p><p>对于组合牌，除火箭及炸弹外，必须牌型与张数均相同时方可进行比较。其中对牌、三条、单顺、双顺、三顺以最大牌张比较大小；三带一、三顺带牌、四带二仅按其中三条、三顺、四条的牌张比较大小，与带牌大小无关。  </p><p>火箭大于炸弹，火箭及炸弹均大于其他牌型，炸弹之间按牌张大小进行比较。</p><h3 id="记分"><a href="#记分" class="headerlink" title="记分"></a>记分</h3><p>一局牌打完之后，双方小分计算方法如下：  </p><p>地主得分=2×胜负参数×100×底分×倍数<br>农民得分=胜负参数×100×底分×倍数<br>胜负参数：胜利方为1，失败方为-1；<br>底分：叫牌时的1、2、3分；<br>倍数：初始为1。<br>本局打出过炸弹则倍数×(1+炸弹个数)。（为减少分数波动程度，避免运气因素影响高技术牌手发挥，因此不采用2n算法）<br>打出火箭，倍数×2<br>打出“春天”，倍数×2<br>打出“反春天”，倍数×2</p><h2 id="协议使用事例"><a href="#协议使用事例" class="headerlink" title="协议使用事例"></a>协议使用事例</h2><p>下表示例为南方位选手与平台交互信息一例</p><table><thead><tr><th align="center">序号</th><th align="center">平台发送信息</th><th align="center">AI应答信息</th><th align="center">信息内容</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">DOUDIZHUVER 1.0</td><td align="center"></td><td align="center">协议版本号</td></tr><tr><td align="center">2</td><td align="center"></td><td align="center">NAME hrbust</td><td align="center">选手名称</td></tr><tr><td align="center">3</td><td align="center">INFO 1,4,1,6,9,2100,15</td><td align="center"></td><td align="center">轮局信息</td></tr><tr><td align="center">4</td><td align="center"></td><td align="center">OK INFO</td><td align="center">应答轮局信息</td></tr><tr><td align="center">5</td><td align="center">DEAL B0,4,5,7,9,10,17,21,25,<br>33,34,39,41,43,44,45,46</td><td align="center"></td><td align="center">发牌信息 <br>(不换行)</td></tr><tr><td align="center">6</td><td align="center"></td><td align="center">OK DEAL</td><td align="center">应答发牌信息</td></tr><tr><td align="center">7</td><td align="center">BID A1</td><td align="center"></td><td align="center">西方位叫牌转播</td></tr><tr><td align="center">8</td><td align="center"></td><td align="center">OK BID</td><td align="center">应答叫牌转播</td></tr><tr><td align="center">9</td><td align="center">BID WHAT</td><td align="center"></td><td align="center">询问南方位叫牌</td></tr><tr><td align="center">10</td><td align="center"></td><td align="center">BID B3</td><td align="center">应答叫牌询问</td></tr><tr><td align="center">11</td><td align="center">BID C0</td><td align="center"></td><td align="center">东方位叫牌转播</td></tr><tr><td align="center">12</td><td align="center"></td><td align="center">OK BID</td><td align="center">应答叫牌转播</td></tr><tr><td align="center">13</td><td align="center">LEFTOVER B27,48,53</td><td align="center"></td><td align="center">底牌信息与交付</td></tr><tr><td align="center">14</td><td align="center"></td><td align="center">OK LEFTOVER</td><td align="center">应答底牌信息</td></tr><tr><td align="center">15</td><td align="center">PLAY WHAT</td><td align="center"></td><td align="center">询问出牌</td></tr><tr><td align="center">16</td><td align="center"></td><td align="center">PLAY B0,4,5,7</td><td align="center">应答出牌询问</td></tr><tr><td align="center">17</td><td align="center">PLAY C-1</td><td align="center"></td><td align="center">东方位出牌转播</td></tr><tr><td align="center">18</td><td align="center"></td><td align="center">OK PLAY</td><td align="center">应答出牌转播</td></tr><tr><td align="center">19</td><td align="center">PLAY A12,13,14,20</td><td align="center"></td><td align="center">西方位出牌转播</td></tr><tr><td align="center">20</td><td align="center"></td><td align="center">OK PLAY</td><td align="center">应答出牌转播</td></tr><tr><td align="center">21</td><td align="center">PLAY WHAT</td><td align="center"></td><td align="center">询问出牌</td></tr><tr><td align="center"></td><td align="center">……</td><td align="center">……</td><td align="center">重复到一方出尽</td></tr><tr><td align="center">n</td><td align="center">GAMEOVER C</td><td align="center"></td><td align="center">赢家信息</td></tr><tr><td align="center">n+1</td><td align="center"></td><td align="center">OK GAMEOVER</td><td align="center">应答赢家信息</td></tr></tbody></table><h2 id="协议指令解释"><a href="#协议指令解释" class="headerlink" title="协议指令解释"></a>协议指令解释</h2><p>注意：以下一条指令中如含多张牌编码，应按升序排列<br>1． DOUDIZHUVER ver<br>裁判告知选手所采用的协议版本号，当前为1.0<br>例如：DOUDIZHUVER 1.0<br>2． NAME player<br>选手回复姓名。<br>例如：NAME hrbust<br>3． INFO turnid,turncount,roundid,roundcount,upcount,maxscore,time<br>裁判告知选手当前轮局信息<br>turnid为当前轮序号<br>turncount为总轮数，暂定4轮，视参赛选手人数可赛前调整<br>roundid为当前局序号<br>roundcount为每轮总局数，暂定6局，视参赛选手人数可赛前调整<br>upcount为本轮可晋级到下一轮的选手数，视比赛进程可赛前调整<br>maxscore为封顶分数，暂定2100，视参赛选手人数可赛前调整<br>time为 AI引擎应答时间限制，单位秒，暂定为15，视比赛进程可赛前调整<br>例如：INFO 1,4,1,6,9,2100,15<br>4． OK INFO<br>选手应答轮局信息，无可变参数<br>5．DEAL dC1,C2,C3,C4,C5,C6,C7,C8,C9,C10,C11,C12,C13,C14,C15,C16,C17<br>裁判告知选手方位和发牌编码<br>d为A时表示选手为西方位，d为B时表示选手为南方位，d为C时表示选手为东方位<br>Ci为发给选手的纸牌编码，参见附表1，各牌编码间用逗号分隔<br>例如：DEAL B0,4,5,7,9,10,17,21,25,33,34,39,41,43,44,45,46<br>6．OK DEAL<br>选手应答发牌信息，无可变参数<br>7．BID dW<br>裁判转发其它选手叫牌信息<br>d为A时表示该选手为西，d为B时表示该选手为南，d为C时表示该选手为东<br>W为0表示不叫，1表示1分，2表示2分，3表示3分<br>例如：BID A1<br>8．OK BID<br>选手应答叫牌信息，无可变参数<br>9．BID WHAT<br>裁判询问选手叫牌，无可变参数<br>10．BID dW<br>选手应答叫牌询问<br>d为A时表示该选手为西，d为B时表示该选手为南，d为C时表示该选手为东<br>W为0表示不叫，1表示1分，2表示2分，3表示3分<br>例如：BID B3<br>11．LEFTOVER dC1,C2,C3 <br>裁判通知底牌信息，含地主方位和牌编码<br>d为A时表示地主为西，d为B时表示地主为南，d为C时表示地主为东<br>Ci为发给地主的底牌编码，参见附表1，各牌编码间用逗号分隔<br>12．OK LEFTOVER<br>选手应答底牌信息，无可变参数<br>13．PLAY WHAT<br>裁判询问选手出牌，无可变参数<br>14．PLAY dC1,C2,…,Cn<br>选手应答裁判出牌询问<br>d为A时表示选手为西，d为B时表示选手为南，d为C时表示选手为东<br>Ci为选手出牌编码，参见附表1，各牌编码间用逗号分隔<br>如果C0为-1，表示弃权不出牌<br>例如：PLAY B0,4,5,7 或 PLAY C-1<br>如果d与引擎方位相同且C0为-1。表示判定引擎所在方位本次因无可出牌张自动PASS。<br>15．PLAY dC1,C2,…,Cn<br>裁判转发其它选手出牌信息，参数含义见上一指令。<br>16．OK PLAY<br>选手应答裁判出牌转发信息，无可变参数<br>17．GAMEOVER d<br>裁判告知本局最先出尽手中牌的赢家方位<br>d为A表示赢家为西，d为B表示赢家为南，d为C表示赢家为东<br>18．OK GAMEOVER<br>选手应答裁判本局赢家信息，无可变参数<br>19．ERROR d<br>裁判转发选手异常错误信息，本局结束<br>d为A表示异常选手为西，d为B表示异常选手为南，d为C表示异常选手为东<br>20．OK ERROR<br>选手应答裁判异常错误信息，无可变参数<br>提示：<br>1．选手引擎程序可通过标准输入输出流（例如cin和cout）以行为单位接受和发送指令。<br>2．指令和参数之间以一个空格分隔。<br>3．竞赛平台可发出的指令类型为：DOUDIZHUVER、INFO、DEAL、BID、LEFTOVER、PLAY、GAMEOVER和ERROR,选手引擎程序可发出的指令类型为：NAME、BID、PLAY和OK。</p><h2 id="赛制"><a href="#赛制" class="headerlink" title="赛制"></a>赛制</h2><h3 id="预赛"><a href="#预赛" class="headerlink" title="预赛"></a>预赛</h3><p>        初赛进行4轮，每轮6局，最后取前9名选手晋级决赛（轮数和局数可根据当年报名参赛队数赛前适度调整）。每局采用同场牌（每张桌打相同的牌）。赛前按种子选手优先及抽签方法确定第一轮选手桌号和方位，之后各轮按积分采用瑞士编排座位。<br>        初赛场分方案：<br>        每轮小分封顶值为350*局数，底线值为-350*局数。每轮结束后，选手按当前所在方向名次获得初赛场分，各方向积分最低者，得1场分，各方向积分每前进1名加1场分，如果其小分低于底线分数再减1场分，如果其小分高于封顶分数再加1场分。如果多人小分相同时，则他们均分其应得的场分。小分高于封顶值时按封顶值记录，其他情况按实际积分记录。<br>        晋级与淘汰：<br>        第2轮比赛结束后取前18名进入下一轮<br>        第3轮比赛结束后取前12名进入下一轮<br>        第4轮比赛结束后取前9名进入决赛<br>        场积分均值：总队数除以6取整+1，例如21个队，该值为INT(21/6)+1=4<br>        轮空处理：首轮轮空选手由抽签决定，之后各方向名次最后者抽签决定轮空，但每名选手在全部赛事中只轮空一次。轮空者获得场分均值+1，6副牌时小分得2100。<br>        迟到处理：选手5分钟内不能到场或开局，本轮按弃权处理，扣弃权者2倍场分均值，另外两家各得场分均值。小分按本场局数*350计。</p><h3 id="决赛"><a href="#决赛" class="headerlink" title="决赛"></a>决赛</h3><p>        决赛采用复式循环赛赛制（决赛9人以下，含9人）：<br>        带分规则：初赛（瑞士移位赛）晋级名单第1名带5.6比赛分，之后每个名次少带0.7比赛分，第8名带0.7比赛分，第9名无带分。<br>        进行4轮，每轮6局，按积分排定名次。（轮数和局数也可能根据进程，赛前调节）<br>        座位编排：采用固定编排，每名选手与其他8名对手相都遇于一次，按预赛瑞士积分赛的名次入座。<br>        积分计算：每桌打相同的牌，每副牌的三个结果中，同方向得分最高的选手获得4比赛分，居中者获得2比赛分，最低者获得0比赛分。得分相同者分享其应得的比赛分。<br>        轮空处理：轮空者在轮空牌副得到2.5比赛分。<br>        迟到处理：选手5分钟内不能到场或开局，本轮按弃权处理，扣弃权者6场分，另外两家各得3分。  </p><h3 id="名次排定及平分处理"><a href="#名次排定及平分处理" class="headerlink" title="名次排定及平分处理"></a>名次排定及平分处理</h3><p>        预赛：排定名次时先比较总场分，再比较总小分。小分仍相同者按抽签决定名次。<br>        决赛：排定名次时先比较总场分，如总场分相同以瑞士移位赛的名次为准。</p><h2 id="竞赛行为准则和处罚方法"><a href="#竞赛行为准则和处罚方法" class="headerlink" title="竞赛行为准则和处罚方法"></a>竞赛行为准则和处罚方法</h2><p>        1．参赛程序必须按照协议与组委会提供的统一平台系统进行通信，不得通过平台以外途径获取信息。<br>        2．一轮比赛进程中不能更换对手、程序、参数；各轮之间可以更换对手、程序、参数。<br>        3．因该项目同时含有合作和对抗性质，为保障竞赛公平性，每校只能有一只队伍参赛。参赛队必须确保操作员按比赛指定位置及时到位开始比赛，任何场次迟到或超时，按相应规则处罚。<br>        4．同一个队伍如果在一轮比赛中出现3局或以上失误或错误时，则取消比赛资格。<br>        5．超时处理<br>        因为比赛进程比较紧凑，需要各桌选手严格按照比赛进程完成各轮比赛。<br>        选手及引擎与平台单次交互时间应在15秒钟内，如果超过时限，按超时错误处理，本局进程到此结束，计分规则为：<br>        （1）如果在底牌分发前产生超时，由超时方支付相应另外两个玩家每人350分（即封顶分除以局数）。<br>        （2）如果在底牌分发后产生超时，按底牌归属后各玩家组成的炸弹总数计算炸弹数（不含春天和反春天），如果地主超时，则支付另外两个玩家每人(炸弹总数+1)<em>叫牌分</em>100，如果含火箭则再乘2；如果农民超时，则支付另一农民(炸弹总数+1)<em>叫牌分</em>100,如果含火箭则再乘2，支付地主为另一农民分数的双倍。</p><h2 id="附表"><a href="#附表" class="headerlink" title="附表"></a>附表</h2><h3 id="附表1-牌编码"><a href="#附表1-牌编码" class="headerlink" title="附表1 牌编码"></a>附表1 牌编码</h3><table><thead><tr><th align="center">编码</th><th align="center">花色点数</th><th align="center">编码</th><th align="center">花色点数</th><th align="center">编码</th><th align="center">花色点数</th><th align="center">编码</th><th align="center">花色点数</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">♥3</td><td align="center">1</td><td align="center">♦3</td><td align="center">2</td><td align="center">♠3</td><td align="center">3</td><td align="center">♣3</td></tr><tr><td align="center">4</td><td align="center">♥4</td><td align="center">5</td><td align="center">♦4</td><td align="center">6</td><td align="center">♠4</td><td align="center">7</td><td align="center">♣4</td></tr><tr><td align="center">8</td><td align="center">♥5</td><td align="center">9</td><td align="center">♦5</td><td align="center">10</td><td align="center">♠5</td><td align="center">11</td><td align="center">♣5</td></tr><tr><td align="center">12</td><td align="center">♥6</td><td align="center">13</td><td align="center">♦6</td><td align="center">14</td><td align="center">♠6</td><td align="center">15</td><td align="center">♣6</td></tr><tr><td align="center">16</td><td align="center">♥7</td><td align="center">17</td><td align="center">♦7</td><td align="center">18</td><td align="center">♠7</td><td align="center">19</td><td align="center">♣7</td></tr><tr><td align="center">20</td><td align="center">♥8</td><td align="center">21</td><td align="center">♦8</td><td align="center">22</td><td align="center">♠8</td><td align="center">23</td><td align="center">♣8</td></tr><tr><td align="center">24</td><td align="center">♥9</td><td align="center">25</td><td align="center">♦9</td><td align="center">26</td><td align="center">♠9</td><td align="center">27</td><td align="center">♣9</td></tr><tr><td align="center">28</td><td align="center">♥10</td><td align="center">29</td><td align="center">♦10</td><td align="center">30</td><td align="center">♠10</td><td align="center">31</td><td align="center">♣10</td></tr><tr><td align="center">32</td><td align="center">♥J</td><td align="center">33</td><td align="center">♦J</td><td align="center">34</td><td align="center">♠J</td><td align="center">35</td><td align="center">♣J</td></tr><tr><td align="center">36</td><td align="center">♥Q</td><td align="center">37</td><td align="center">♦Q</td><td align="center">38</td><td align="center">♠Q</td><td align="center">39</td><td align="center">♣Q</td></tr><tr><td align="center">40</td><td align="center">♥K</td><td align="center">41</td><td align="center">♦K</td><td align="center">42</td><td align="center">♠K</td><td align="center">43</td><td align="center">♣K</td></tr><tr><td align="center">44</td><td align="center">♥A</td><td align="center">45</td><td align="center">♦A</td><td align="center">46</td><td align="center">♠A</td><td align="center">47</td><td align="center">♣A</td></tr><tr><td align="center">48</td><td align="center">♥2</td><td align="center">49</td><td align="center">♦2</td><td align="center">50</td><td align="center">♠2</td><td align="center">51</td><td align="center">♣2</td></tr><tr><td align="center">52</td><td align="center">小王</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">53</td><td align="center">大王</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h3 id="附表2-牌型"><a href="#附表2-牌型" class="headerlink" title="附表2 牌型"></a>附表2 牌型</h3><p>        火箭大于炸弹和普通牌型、炸弹大于普通牌型。为避免牌型解释二义性，牌型按附表2顺序依次比较，首次匹配成功则确定为该牌型，不再向下匹配。<br>        所带牌点数可以相同，即444+555+7+7，或555+666+99+99也为合法，牌型6、10、11带牌之间点数可以不连续。</p><table><thead><tr><th align="center">编号</th><th align="center">牌型</th><th align="center">描述和备注</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">弃权</td><td align="center">无出牌</td></tr><tr><td align="center">1</td><td align="center">火箭</td><td align="center">双王（大王和小王），最大的牌型</td></tr><tr><td align="center">2</td><td align="center">炸弹</td><td align="center">四张同点数牌（型如AAAA）</td></tr><tr><td align="center">3</td><td align="center">单牌</td><td align="center">一张单牌（型如A）</td></tr><tr><td align="center">4</td><td align="center">对牌</td><td align="center">点数相同的两张牌（型如AA）</td></tr><tr><td align="center">5</td><td align="center">三条</td><td align="center">点数相同的三张牌（型如AAA）</td></tr><tr><td align="center">6</td><td align="center">三带一</td><td align="center">三条带一张单牌或一对牌。（型如：AAA+B或AAA+BB）</td></tr><tr><td align="center">7</td><td align="center">单顺</td><td align="center">五张或更多的连续单牌不包括2和王（型如：ABCDE或ABCDE…）</td></tr><tr><td align="center">8</td><td align="center">双顺</td><td align="center">三对或更多的连续对牌不包括2和王（型如：AABBCC或AABBCC..）</td></tr><tr><td align="center">9</td><td align="center">三顺</td><td align="center">二个或更多的连续三条不包括2和王（型如：AAABBB或AAABBBCCC…）</td></tr><tr><td align="center">10</td><td align="center">三顺带牌</td><td align="center">三顺带同数量的单牌或同数量的对牌（型如：AAABBB+C+D或AAABBB+CC+DD或AAABBB… +…+Y+Z或AAABBB… +…+YY+ZZ）</td></tr><tr><td align="center">11</td><td align="center">四带二</td><td align="center">四张同点数牌带2张单牌或2对牌（型如AAAA+B+C或AAAA+BB+CC）</td></tr><tr><td align="center">-1</td><td align="center">非法牌型</td><td align="center">以上牌型以外的牌张组合</td></tr></tbody></table><h1 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h1><p>资源链接： <a href="https://github.com/Big-worth/DDZ.git">https://github.com/Big-worth/DDZ.git</a>  </p><p>使用Git Bash的命令行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/Big-worth/DDZ.git DDZ</span><br></pre></td></tr></table></figure><p>沈阳航空航天大学计算机博弈——二打一讲解：  </p><p><a href="https://www.bilibili.com/video/BV1Z64y1u7u5">讲解视频</a></p><h1 id="代码修改指南"><a href="#代码修改指南" class="headerlink" title="代码修改指南"></a>代码修改指南</h1><h2 id="初始化准备工作"><a href="#初始化准备工作" class="headerlink" title="初始化准备工作"></a>初始化准备工作</h2><p>本文所使用的的环境是<code>Visual Studio 2019</code>，使用其他版本可能会有一定差别。  </p><p>首先打开<code>Visual Studio 2019</code>，将DDZ中的源代码文件夹中的头文件和源文件分别放入相应位置。  </p><p><img src="/img/posts/%E4%BA%8C%E6%89%93%E4%B8%80%EF%BC%88%E6%96%97%E5%9C%B0%E4%B8%BB%EF%BC%89%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8D%9A%E5%BC%88/%E6%96%87%E4%BB%B6%E5%AF%BC%E5%85%A5.png" alt="文件导入"></p><h2 id="修改SDL检查"><a href="#修改SDL检查" class="headerlink" title="修改SDL检查"></a>修改SDL检查</h2><p>点击项目-&gt;属性-&gt;C/C++-&gt;SDL检查改成否。</p><p><img src="/img/posts/%E4%BA%8C%E6%89%93%E4%B8%80%EF%BC%88%E6%96%97%E5%9C%B0%E4%B8%BB%EF%BC%89%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8D%9A%E5%BC%88/SDL%E6%A3%80%E6%9F%A5.png" alt="SDL检查"></p><h2 id="修改队伍名"><a href="#修改队伍名" class="headerlink" title="修改队伍名"></a>修改队伍名</h2><p><code>02.cpp</code>文件中的第一行表示队名，将引号中的名字更改成自己队伍的名字即可。  </p><h2 id="叫分函数"><a href="#叫分函数" class="headerlink" title="叫分函数"></a>叫分函数</h2><p>位于<code>02.cpp</code>的1122行~1194行  </p><p>叫分的原理是根据手牌好坏来决定叫多少分，会对起始的17张牌进行估值，最后选择叫几分。  </p><p><code>iMyBid</code>变量存储的是最后要叫的分数（当然也可以自定义变量，只需要保证最后是<code>int</code>类型，并且函数最下方返回的是这个变量就可以了）。  </p><p><code>sum</code>变量存储的是手牌的估值，最后根据手牌的估值来抉择叫几分。</p><p><code>count</code>变量存储的是临时的叫分数，最后将这个值传给<code>iMyBid</code>（其实并没什么用，可以直接改变<code>iMyBid</code>的值）。</p><p>最开始需要先统计出手牌分别是什么，每张牌都有一个对应的编号，如下图。  </p><p><img src="/img/posts/%E4%BA%8C%E6%89%93%E4%B8%80%EF%BC%88%E6%96%97%E5%9C%B0%E4%B8%BB%EF%BC%89%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8D%9A%E5%BC%88/%E7%BC%96%E5%8F%B7.jpg" alt="编号"></p><p>示例代码中的<code>first_hand_cards</code>数组用来记录初始17张牌，接下来在1134行~1137行开始统计手牌（相当于记牌器，有一说一，这个记牌器挺烂的，建议自己写一个好一点的，统计每张牌各有多少张的那种），<code>pDdz-&gt;iOnHand</code>数组记录的是初始手牌的每张牌编号。</p><p>1139行~1159行是估值部分（这段可以完全自由发挥），根据每种牌型来计算估值是多少，将估值累积进<code>sum</code>变量中。举个栗子：如果同时有大小王那么可以给<code>sum</code>+个<code>5</code>分。估值都是自己设定的，可以很大也可以很小，比如你认为炸弹价值很高就可以设置的高一点，炸弹价值没那么高就可以低一点。一般来讲，可以计算炸弹，<code>A</code>和<code>2</code>的数量，三带，顺子这几个的估值就可以了（示例代码不支持出双顺，但是能够对别人打出的双顺打出正确的出牌）。  </p><p>1161行~1177行可以不用怎么改，根据<code>sum</code>的值去改变<code>count</code>的值，来抉择叫多少分，<code>sum</code>的值就是手牌好坏的评判标准，一般来讲，值越大，那么手牌越好，可以叫的分数越高。  </p><p>1180行~1188行的作用是判断其余几家的叫分是否大于等于自家叫分，比如上家叫了<code>2</code>分，那么自家就不能叫<code>1</code>分，只能改叫<code>0</code>分（也就是不叫），这段代码的作用就是防止乱叫分。原代码用的<code>goto</code>，这么写的话可能会产生许多不可抗力，建议把这段改掉，不用<code>goto</code>去写。</p><h2 id="出牌函数"><a href="#出牌函数" class="headerlink" title="出牌函数"></a>出牌函数</h2><p>56行~74行是根据自家所在的不同位置来选择不同的出牌策略，比如地主的上家可以打得激进一点，来抑制地主出牌。但实际上这样工作量非常大，没这个必要，因此可以让三家都用同一种出牌策略（即调用同一个函数）。</p><p>然后再找到你选用的那个函数，底下可能会有一个（有两个有，一个没有）“在轮次少于<code>22</code>手数时不出大牌”的一段代码，一定要把这段代码注释掉（当然，你给它改出来也行）。这段代码是因为在牌局前期可能不一定非要出大牌，比如说上家出了3334，而你手里只有<code>2223</code>能够压住上家的牌，不过因为是在牌局早期，所以希望尽可能留住大牌，这种时候往往会选择不出。但是这段代码是有的<code>bug</code>的，很有可能导致在你先手的时候不出，导致三家<code>PASS</code>的<code>bug</code>，也就是三家都没有出牌，会直接判负。所以这部分及以下的代码需要全部注释掉。  </p><p><code>CalCardsValue</code>函数就是计算估值的函数。这个函数的原理是会枚举出每一种合法情况，然后会假定已经打出这组牌，去计算剩余牌的估值，然后选择剩余手牌估值最大的情况。</p><p>这段也需要一个记牌器去记录你的手牌情况，原代码的记牌器挺蠢的，建议重新写一个，可以和叫分函数的记牌器用一个。  </p><p><code>sum_count</code>用来记录拿掉一组牌之后剩余手牌的估值（也可以换成其他变量，只需要保证最后return的变量是你用来记录估值的变量就可以了）。  </p><p>剩下的部分的估值策略和叫分函数的估值策略一样但不完全一样，根据维持手牌估值最大的原则，所以需要把想要先出的牌的估值设置的低一些，比如我想优先出单牌而不是优先出炸弹，那么就需要把每个炸弹的估值设置的高一点；或者想先出顺子，那么就需要把顺子的估值设置的比单牌还低，那样就会优先出顺子了。同时也可以考虑一下手牌数量的问题，就是每有一张手牌扣多少估值，这样可以优先打出更多的牌。最后还需要考虑一下手牌打空的情况，当手牌可以直接完全打空的时候，那么此时估值应该设置为最大（自己没牌就赢了那肯定这么出）。需要计算估值的东西可以自己想，大体上和叫分函数里考虑的东西一样，可以考虑得更细致一些。  </p><p>上述估值策略存在一个明显的问题，举个栗子：当你手里有<code>34567</code>的牌型的时候，上家打了一张<code>3</code>，通过这种估值策略会导致拆掉顺子打出一张<code>4</code>从而保证手牌估值最大。  </p><p>如果希望更严谨亿点的话，可以在手牌数量剩的很少的时候改变一下估值策略（即让自己的手牌保持估值更小的做法），众所周知，手牌少的时候一般是拍剧后期，因此可以优先出大牌来争夺牌权，当然这并不一定是最优方式，因此当手牌剩余很少的时候可以改变一下出牌策略。  </p><p>还有一个需要注意的问题，这段的估值非常重要，如果出现越界的话，会导致出现很多<code>bug</code>，比如说出的牌不符合牌型；如果估值估得不够严谨或者不够细致，很有可能出现吃不起的<code>bug</code>（具体表现为把上家的牌抢过来再打一遍），一般来讲这个<code>bug</code>都是因为估值估反了，或者是不够细致，这种错误是最常见的也是最难改的。</p><h1 id="平台的使用"><a href="#平台的使用" class="headerlink" title="平台的使用"></a>平台的使用</h1><p>DDZ文件中的<code>斗地主博弈对战平台与示例引擎.rar</code>和<code>斗地主示例引擎源程序与测试平台2015-04-06E.rar</code>均为平台文件，这里推荐使用前者，操作相对来说较为简单。  </p><p><img src="img/posts/%E4%BA%8C%E6%89%93%E4%B8%80%EF%BC%88%E6%96%97%E5%9C%B0%E4%B8%BB%EF%BC%89%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8D%9A%E5%BC%88/%E5%B9%B3%E5%8F%B0%E6%96%87%E4%BB%B6%E5%A4%B9.png" alt="平台文件夹"></p><p>解压之后打开新平台文件夹  </p><p><img src="/img/posts/%E4%BA%8C%E6%89%93%E4%B8%80%EF%BC%88%E6%96%97%E5%9C%B0%E4%B8%BB%EF%BC%89%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8D%9A%E5%BC%88/%E6%96%B0%E5%B9%B3%E5%8F%B0%E6%96%87%E4%BB%B6%E5%A4%B9.png" alt="新平台文件夹"></p><p>打开<code>斗地主博弈对战平台2015-09-12C</code>文件  </p><p>在代码写完之后进行编译，找到这个代码存储的位置，里面有一个是<code>Debug</code>的文件夹，再点进去有一个生成的<code>exe</code>文件。找到这个文件的位置之后记一下路径，接着打开平台，点击博弈模式-&gt;训练模式。</p><p><img src="/img/posts/%E4%BA%8C%E6%89%93%E4%B8%80%EF%BC%88%E6%96%97%E5%9C%B0%E4%B8%BB%EF%BC%89%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8D%9A%E5%BC%88/%E5%B9%B3%E5%8F%B0.png" alt="平台"></p><p>分别选择<code>AI_西</code> <code>AI_南</code> <code>AI_东</code>，找到刚刚记下路径的<code>exe</code>文件，打开文件。为了更好地测试，可以把底下的停顿时间调的长一点。</p><p><img src="/img/posts/%E4%BA%8C%E6%89%93%E4%B8%80%EF%BC%88%E6%96%97%E5%9C%B0%E4%B8%BB%EF%BC%89%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8D%9A%E5%BC%88/%E8%AE%AD%E7%BB%83%E6%A8%A1%E5%BC%8F.png" alt="训练模式"></p><p>点击牌套数据-&gt;随机产生，最后牌局设定-&gt;开始牌局，就可以看到牌局情况了。  </p><p><img src="/img/posts/%E4%BA%8C%E6%89%93%E4%B8%80%EF%BC%88%E6%96%97%E5%9C%B0%E4%B8%BB%EF%BC%89%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8D%9A%E5%BC%88/%E5%BC%80%E5%A7%8B%E7%89%8C%E5%B1%80.png" alt="开始牌局"></p><hr>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 教程 </tag>
            
            <tag> 斗地主 </tag>
            
            <tag> 计算机博弈 </tag>
            
            <tag> 人工智能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown扩展语法</title>
      <link href="/archives/c677b245.html"/>
      <url>/archives/c677b245.html</url>
      
        <content type="html"><![CDATA[<hr><h1 id="扩展语法"><a href="#扩展语法" class="headerlink" title="扩展语法"></a>扩展语法</h1><p>基本语法能够应付大多数情况下的日常需求，但是对于一些人来说还不够，因此引入了扩展语法。  </p><p>点击链接可查看Markdown官方文档：</p><p><a href="https://markdown.com.cn/" title="Markdown官方文档">Markdown官方文档</a></p><p>点击链接可使用在线Markdown编辑器：</p><p><a href="https://markdown.com.cn/editor/" title="在线markdown编辑器">在线markdown编辑器</a></p><h1 id="Markdown扩展语法可用性"><a href="#Markdown扩展语法可用性" class="headerlink" title="Markdown扩展语法可用性"></a>Markdown扩展语法可用性</h1><p>并非所有Markdown应用程序都支持扩展语法元素，因此需要检查时是否够使用。  </p><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><p>添加表格时，需要使用三个及以上的连字符（<code>---</code>）创建每列表格的标题，并使用管道(<code>|</code>)来分隔每一列。  </p><p>可以通过在标题行中的连字符的左侧，右侧或两侧添加冒号（<code>:</code>），将列中的文本对齐到左侧，右侧或中心。  </p><p>例：制作一个一周七天的天气变化表  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">| 日期  | 天气  |</span><br><span class="line">| --- | --- |</span><br><span class="line">| 周一  | 晴   |</span><br><span class="line">| 周二  | 阴   |</span><br><span class="line">| 周三  | 多云  |</span><br><span class="line">| 周四  | 小雨  |</span><br><span class="line">| 周五  | 阴   |</span><br><span class="line">| 周六  | 暴雨  |</span><br><span class="line">| 周日  | 晴   |</span><br></pre></td></tr></table></figure><p>结果展示：  </p><table><thead><tr><th align="center">日期</th><th align="center">天气</th></tr></thead><tbody><tr><td align="center">周一</td><td align="center">晴</td></tr><tr><td align="center">周二</td><td align="center">阴</td></tr><tr><td align="center">周三</td><td align="center">多云</td></tr><tr><td align="center">周四</td><td align="center">小雨</td></tr><tr><td align="center">周五</td><td align="center">阴</td></tr><tr><td align="center">周六</td><td align="center">暴雨</td></tr><tr><td align="center">周日</td><td align="center">晴</td></tr></tbody></table><h1 id="围栏代码块"><a href="#围栏代码块" class="headerlink" title="围栏代码块"></a>围栏代码块</h1><p>通过使用三个反引号（<code>```</code>）或三个波浪号（<code>~~~</code>）来创建一个受保护的围栏代码块。  </p><p>还可以在第一行的反引号后面加上一种语言，从而自动识别并进行高亮。  </p><p>例：写一个C语言的输出Hello world!  </p><p>结果展示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello world&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="定义列表"><a href="#定义列表" class="headerlink" title="定义列表"></a>定义列表</h1><p>创建定义列表，需要在第一行键入术语，在下一行键入一个冒号，后面跟一个空格和定义。  </p><p>例：创建一个有关“比格沃斯”的定义列表  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">比格沃斯</span><br><span class="line">: 一只猫猫</span><br></pre></td></tr></table></figure><p>结果展示：  </p><dl><dt>比格沃斯</dt><dd>一只猫猫</dd></dl><h1 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h1><p>在单词前后使用两个波浪号（<code>~~</code>）从而实现删除线的效果。  </p><p>例：在比格沃斯上加上删除线  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~比格沃斯~~</span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><del>比格沃斯</del>  </p><h1 id="任务列表语法"><a href="#任务列表语法" class="headerlink" title="任务列表语法"></a>任务列表语法</h1><p>可以创建带有复选框的项目列表，复选框将显示在内容旁边。  </p><p>创建任务列表需要在任务列表之前添加破折号（<code>-</code>）和方括号（<code>[ ]</code>），并在（<code>[ ]</code>）前面加上空格（注：方括号中间有一个空格）。  </p><p>要选择一个复选框，需要在方括号（<code>[ ]</code>）之间添加x，即最后的样式为（<code>[x]</code>）。  </p><p>例：制作一个每日任务表  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> [x] 吃早饭</span><br><span class="line"><span class="bullet">-</span> [ ] 学习</span><br><span class="line"><span class="bullet">-</span> [ ] 跑步</span><br><span class="line"><span class="bullet">-</span> [x] 摸鱼</span><br></pre></td></tr></table></figure><p>结果展示：  </p><ul><li><p><input checked="" disabled="" type="checkbox">  吃早饭</p></li><li><p><input disabled="" type="checkbox">  学习</p></li><li><p><input disabled="" type="checkbox">  跑步</p></li><li><p><input checked="" disabled="" type="checkbox">  摸鱼</p></li></ul><h1 id="使用Emoji表情"><a href="#使用Emoji表情" class="headerlink" title="使用Emoji表情"></a>使用Emoji表情</h1><h2 id="复制和粘贴表情符号"><a href="#复制和粘贴表情符号" class="headerlink" title="复制和粘贴表情符号"></a>复制和粘贴表情符号</h2><p>在大多数情况下，可以直接复制符号表情并将其粘贴到文档中。  </p><p>Emoji表情链接：  </p><p><a href="https://emojipedia.org/">表情网站</a>  </p><p>注：如果使用的是静态网站生成器，需要确保HTML页面编码为UTF-8。</p><p>例：利用该方法复制粘贴水晶球表情  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">🔮</span><br></pre></td></tr></table></figure><p>结果展示：  </p><p>🔮  </p><h2 id="使用表情符号简码"><a href="#使用表情符号简码" class="headerlink" title="使用表情符号简码"></a>使用表情符号简码</h2><p>可以通过键入表情符号短代码来插入表情符号。  </p><p>书写格式是以冒号开头和结尾，并包含表情符号的名称。  </p><p>例：利用表情符号简码来插入表情张噢鞥，其符号简码为<code>crystal_ball</code>  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:crystal<span class="emphasis">_ball:</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><p>:crystal_ball:</p><h1 id="自动网址链接"><a href="#自动网址链接" class="headerlink" title="自动网址链接"></a>自动网址链接</h1><p>直接输入链接地址Markdown处理器会将其自动转换为链接。  </p><p>例：将该博客转换为链接  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://big-worth.github.io/</span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><a href="https://big-worth.github.io/">https://big-worth.github.io/</a></p><h1 id="禁用自动URL链接"><a href="#禁用自动URL链接" class="headerlink" title="禁用自动URL链接"></a>禁用自动URL链接</h1><p>如果不希望自动转换为链接，可以通过使用反引号的代码来删除该链接。  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">`https://big-worth.github.io/`</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><code>https://big-worth.github.io/</code></p><hr>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 教程 </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown基本语法</title>
      <link href="/archives/3c50d03d.html"/>
      <url>/archives/3c50d03d.html</url>
      
        <content type="html"><![CDATA[<hr><h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><p>Markdown是一种轻量级标记语言，排版语法简洁，让人们更多地关注内容本身而非排版。它使用易读易写的纯文本格式编写文档，可与HTML混编，可导出 HTML、PDF 以及本身的 .md 格式的文件。因简洁、高效、易读、易写，Markdown被大量使用，如Github、Wikipedia、简书等。  </p><p>点击链接可查看Markdown官方文档：</p><p><a href="https://markdown.com.cn/" title="Markdown官方文档">Markdown官方文档</a></p><p>点击链接可使用在线Markdown编辑器：  </p><p><a href="https://markdown.com.cn/editor/" title="在线markdown编辑器">在线markdown编辑器</a></p><h1 id="标题语法"><a href="#标题语法" class="headerlink" title="标题语法"></a>标题语法</h1><p>要创建标题，在单词或短语前面添加井号 (<code>#</code>) 。<code>#</code> 的数量代表了标题的级别，最多可以添加六级标题。  </p><p>注意<code>#</code>和后面的内容之间需要有一个空格。  </p><p>例：添加三个 <code>#</code>表示创建一个三级标题</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">### 三级标题</span></span><br></pre></td></tr></table></figure><h1 id="段落语法"><a href="#段落语法" class="headerlink" title="段落语法"></a>段落语法</h1><p>创建段落时，需要使用一个空白行进行分隔。  </p><p>例：书写I have a dream的前三段</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">I am happy to join with you today in what will go down in history as the greatest demonstration for freedom in the history of our nation.  </span><br><span class="line"></span><br><span class="line">Five score years ago, a great American, in whose symbolic shadow we stand today, signed the Emancipation Proclamation. This momentous decree came as a great beacon light of hope to millions of Negro slaves who had been seared in the flames of withering injustice. It came as a joyous daybreak to end the long night of bad captivity.</span><br><span class="line"></span><br><span class="line">But one hundred years later, the Negro still is not free. One hundred years later, the life of the Negro is still sadly crippled by the manacles of segregation and the chains of discrimination. One hundred years later, the Negro lives on a lonely island of poverty in the midst of a vast ocean of material prosperity. One hundred years later, the Negro is still languished in the corners of American society and finds himself an exile in his own land. And so we&#x27;ve come here today to dramatize a shameful condition.</span><br></pre></td></tr></table></figure><p>结果展示：  </p><p>I am happy to join with you today in what will go down in history as the greatest demonstration for freedom in the history of our nation.</p><p>Five score years ago, a great American, in whose symbolic shadow we stand today, signed the Emancipation Proclamation. This momentous decree came as a great beacon light of hope to millions of Negro slaves who had been seared in the flames of withering injustice. It came as a joyous daybreak to end the long night of bad captivity.</p><p>But one hundred years later, the Negro still is not free. One hundred years later, the life of the Negro is still sadly crippled by the manacles of segregation and the chains of discrimination. One hundred years later, the Negro lives on a lonely island of poverty in the midst of a vast ocean of material prosperity. One hundred years later, the Negro is still languished in the corners of American society and finds himself an exile in his own land. And so we’ve come here today to dramatize a shameful condition.  </p><h1 id="换行语法"><a href="#换行语法" class="headerlink" title="换行语法"></a>换行语法</h1><p>在一行的末尾添加两个或多个空格，然后按回车键,即可创建一个换行。</p><h1 id="强调语法"><a href="#强调语法" class="headerlink" title="强调语法"></a>强调语法</h1><h2 id="粗体（Bold）"><a href="#粗体（Bold）" class="headerlink" title="粗体（Bold）"></a>粗体（Bold）</h2><p>通过将文本设置为粗体或斜体来强调其重要性。  </p><p>在文本前后各加两个星号或者下划线可实现粗体效果。  </p><p>例：加粗文本“好耶！”</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">**好耶!**</span>  </span><br><span class="line"><span class="strong">__好耶！__</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><strong>好耶!</strong>   </p><p><strong>好耶！</strong></p><h2 id="斜体（Italic）"><a href="#斜体（Italic）" class="headerlink" title="斜体（Italic）"></a>斜体（Italic）</h2><p>在文本前后各加一个星号或者下划线可实现斜体效果。  </p><p>例：倾斜文本“好耶！”</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">*好耶!*</span>  </span><br><span class="line"><span class="emphasis">_好耶！_</span></span><br></pre></td></tr></table></figure><p>结果展示：</p><p><em>好耶！</em></p><p><em>好耶！</em></p><h1 id="引用语法"><a href="#引用语法" class="headerlink" title="引用语法"></a>引用语法</h1><h2 id="块引用"><a href="#块引用" class="headerlink" title="块引用"></a>块引用</h2><p>要创建块引用，需要在段落前添加一个 <code>&gt;</code> 符号。  </p><p>例：引用“No one breather who is worthier.”  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; No one breather who is worthier.</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><blockquote><p>No one breather who is worthier.  </p></blockquote><h2 id="多个段落的块引用"><a href="#多个段落的块引用" class="headerlink" title="多个段落的块引用"></a>多个段落的块引用</h2><p>块引用可以包含多个段落。为段落之间的空白行添加一个 <code>&gt;</code> 符号。</p><p>例：引用I have a dream的前两段</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; I am happy to join with you today in what will go down in history as the greatest demonstration for freedom in the history of our nation.  </span></span><br><span class="line"><span class="quote">&gt; </span></span><br><span class="line"><span class="quote">&gt; Five score years ago, a great American, in whose symbolic shadow we stand today, signed the Emancipation Proclamation. This momentous decree came as a great beacon light of hope to millions of Negro slaves who had been seared in the flames of withering injustice. It came as a joyous daybreak to end the long night of bad captivity.</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><blockquote><p>I am happy to join with you today in what will go down in history as the greatest demonstration for freedom in the history of our nation.  </p><p>Five score years ago, a great American, in whose symbolic shadow we stand today, signed the Emancipation Proclamation. This momentous decree came as a great beacon light of hope to millions of Negro slaves who had been seared in the flames of withering injustice. It came as a joyous daybreak to end the long night of bad captivity.</p></blockquote><h2 id="嵌套块引用"><a href="#嵌套块引用" class="headerlink" title="嵌套块引用"></a>嵌套块引用</h2><p>块引用可以嵌套。在要嵌套的段落前添加一个 <code>&gt;&gt;</code> 符号。  </p><p>例：引用I have a dream的前两段，其中嵌套第二段  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; I am happy to join with you today in what will go down in history as the greatest demonstration for freedom in the history of our nation.  </span></span><br><span class="line"><span class="quote">&gt; </span></span><br><span class="line"><span class="quote">&gt;&gt; Five score years ago, a great American, in whose symbolic shadow we stand today, signed the Emancipation Proclamation. This momentous decree came as a great beacon light of hope to millions of Negro slaves who had been seared in the flames of withering injustice. It came as a joyous daybreak to end the long night of bad captivity.</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><blockquote><p>I am happy to join with you today in what will go down in history as the greatest demonstration for freedom in the history of our nation.  </p><blockquote><p>Five score years ago, a great American, in whose symbolic shadow we stand today, signed the Emancipation Proclamation. This momentous decree came as a great beacon light of hope to millions of Negro slaves who had been seared in the flames of withering injustice. It came as a joyous daybreak to end the long night of bad captivity.</p></blockquote></blockquote><h2 id="带有其他元素的块引用"><a href="#带有其他元素的块引用" class="headerlink" title="带有其他元素的块引用"></a>带有其他元素的块引用</h2><p>块引用可以包含其他 Markdown 格式的元素，但是并非所有元素都可以使用。</p><h1 id="列表语法"><a href="#列表语法" class="headerlink" title="列表语法"></a>列表语法</h1><p>可以将多个条目组织成有序或无序列表。  </p><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><p>创建有序列表，需要在列表项前添加数字并紧跟一个英文句点，记得加一个空格。数字不必按照数学顺序排列，但是列表是从数字1开始起始的（如果起始数字是5，则从5开始编号）。  </p><p>例：创建一个有序列表，内容是星期一到星期五  </p><blockquote><p>第一种写法</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 星期一</span><br><span class="line"><span class="bullet">2.</span> 星期二</span><br><span class="line"><span class="bullet">3.</span> 星期三</span><br><span class="line"><span class="bullet">4.</span> 星期四</span><br><span class="line"><span class="bullet">5.</span> 星期五</span><br></pre></td></tr></table></figure><blockquote><p>第二种写法</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 星期一</span><br><span class="line"><span class="bullet">1.</span> 星期二</span><br><span class="line"><span class="bullet">1.</span> 星期三</span><br><span class="line"><span class="bullet">1.</span> 星期四</span><br><span class="line"><span class="bullet">1.</span> 星期五</span><br></pre></td></tr></table></figure><blockquote><p>第三种写法</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 星期一</span><br><span class="line"><span class="bullet">4.</span> 星期二</span><br><span class="line"><span class="bullet">1.</span> 星期三</span><br><span class="line"><span class="bullet">5.</span> 星期四</span><br><span class="line"><span class="bullet">9.</span> 星期五</span><br></pre></td></tr></table></figure><p>结果展示：  </p><ol><li>星期一</li><li>星期二</li><li>星期三</li><li>星期四</li><li>星期五</li></ol><h2 id="嵌套有序列表"><a href="#嵌套有序列表" class="headerlink" title="嵌套有序列表"></a>嵌套有序列表</h2><p>如果想制作一个嵌套的有序列表，可以在列表的某一项的下一行进行缩进，然后再创建一个有序列表。  </p><p>例：创建一个有序列表，内容是星期一到星期五,从3号开始标号，星期三中嵌套星期六和星期日  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">3.</span> 星期一</span><br><span class="line"><span class="bullet">1.</span> 星期二</span><br><span class="line"><span class="bullet">4.</span> 星期三</span><br><span class="line"><span class="bullet">    1.</span> 星期六</span><br><span class="line"><span class="bullet">    5.</span> 星期日</span><br><span class="line"><span class="bullet">9.</span> 星期四</span><br><span class="line"><span class="bullet">2.</span> 星期五</span><br></pre></td></tr></table></figure><p>结果展示：  </p><ol start="3"><li>星期一</li><li>星期二</li><li>星期三<ol><li>星期六</li><li>星期日</li></ol></li><li>星期四</li><li>星期五</li></ol><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p>创建无序列表，需要在每个列表项前面添加破折号 (-)、星号 (*) 或加号 (+) ，接着加一个空格。缩进一个或多个列表项可创建嵌套列表。  </p><p>例：创建一个无序列表，内容是星期一到星期五</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 星期一</span><br><span class="line"><span class="bullet">-</span> 星期二</span><br><span class="line"><span class="bullet">-</span> 星期三</span><br><span class="line"><span class="bullet">-</span> 星期四</span><br><span class="line"><span class="bullet">-</span> 星期五</span><br></pre></td></tr></table></figure><p>结果展示：</p><ul><li>星期一</li><li>星期二</li><li>星期三</li><li>星期四</li><li>星期五</li></ul><h1 id="代码语法"><a href="#代码语法" class="headerlink" title="代码语法"></a>代码语法</h1><h2 id="代码单词"><a href="#代码单词" class="headerlink" title="代码单词"></a>代码单词</h2><p>要将单词或短语表示为代码，需要将其包裹在反引号(`)中。  </p><p>例：将Bigglesworth表示为代码  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">`Bigglesworth`</span></span><br></pre></td></tr></table></figure><p>结果展示：</p><p><code>Bigglesworth</code>  </p><h2 id="转义反引号"><a href="#转义反引号" class="headerlink" title="转义反引号"></a>转义反引号</h2><p>如果要表示为代码的单词或短语中包含一个或多个反引号，则可以通过将单词或短语包裹在双反引号(``)中。  </p><p>例：  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">`` `</span>code<span class="code">` `</span>`</span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><code>`code`</code></p><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>创建代码块，需要将代码块的每一行缩进至少四个空格或一个制表符。</p><p>例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h1 id="分隔线语法"><a href="#分隔线语法" class="headerlink" title="分隔线语法"></a>分隔线语法</h1><p>分隔线语法需要在单独一行上使用三个或多个星号 (<code>***</code>)、破折号 (<code>---</code>) 或下划线 (<code>___</code>) ，并且不能包含其他内容。</p><p>例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"><span class="strong">**<span class="emphasis">*</span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="section">---</span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="section">___</span></span></span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><hr><hr><hr><h1 id="链接语法"><a href="#链接语法" class="headerlink" title="链接语法"></a>链接语法</h1><h2 id="Title链接"><a href="#Title链接" class="headerlink" title="Title链接"></a>Title链接</h2><p>链接文本放在中括号内，链接地址放在后面的括号中，链接title可选。  </p><p>title是鼠标悬停时显示的文字</p><p>超链接Markdown语法代码：<code>[超链接显示名](超链接地址 &quot;超链接title&quot;)</code>  </p><p>例：制作一个到该博客的超链接  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">Bigglesworth</span>](<span class="link">https://big-worth.github.io/ &quot;比格沃斯的博客&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><a href="https://big-worth.github.io/" title="比格沃斯的博客">Bigglesworth</a></p><h2 id="网址和Email地址"><a href="#网址和Email地址" class="headerlink" title="网址和Email地址"></a>网址和Email地址</h2><p>使用尖括号可以很方便地把URL或者email地址变成可点击的链接。  </p><p>例：将<a href="mailto:&#x42;&#105;&#x67;&#103;&#x6c;&#x65;&#x73;&#119;&#111;&#x72;&#x74;&#104;&#55;&#x40;&#x31;&#x36;&#51;&#46;&#x63;&#x6f;&#109;">&#x42;&#105;&#x67;&#103;&#x6c;&#x65;&#x73;&#119;&#111;&#x72;&#x74;&#104;&#55;&#x40;&#x31;&#x36;&#51;&#46;&#x63;&#x6f;&#109;</a>邮箱制作成链接  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">&lt;Bigglesworth7@163.com&gt;</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><a href="mailto:&#x42;&#x69;&#103;&#103;&#x6c;&#101;&#x73;&#x77;&#x6f;&#114;&#116;&#x68;&#x37;&#64;&#x31;&#54;&#51;&#46;&#99;&#111;&#109;">&#x42;&#x69;&#103;&#103;&#x6c;&#101;&#x73;&#x77;&#x6f;&#114;&#116;&#x68;&#x37;&#64;&#x31;&#54;&#51;&#46;&#99;&#111;&#109;</a>  </p><h2 id="带格式化的链接"><a href="#带格式化的链接" class="headerlink" title="带格式化的链接"></a>带格式化的链接</h2><p>可以使用强调语法来修饰链接  </p><h1 id="图片语法"><a href="#图片语法" class="headerlink" title="图片语法"></a>图片语法</h1><h2 id="本地图片"><a href="#本地图片" class="headerlink" title="本地图片"></a>本地图片</h2><p>要添加图像，使用感叹号 (<code>!</code>), 然后在方括号增加替代文本，图片链接放在圆括号里，括号里的链接后可以增加一个可选的图片标题文本。  </p><p>title是鼠标悬停时显示的文字</p><p>插入图片Markdown语法代码：<code>![图片alt](图片链接 &quot;图片title&quot;)</code>。</p><p>例：插入一张文件路径为<code>E:/Workspaces/hexo/themes/butterfly/source/img/index_img/index_img.jpg</code>名字为壁纸的图片</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">壁纸</span>](<span class="link">E:/Workspaces/hexo/themes/butterfly/source/img/index_img/index_img.jpg &quot;海琴烟&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><img src="/img/index_img/index_img.jpg" alt="壁纸" title="壁纸"></p><h2 id="链接图片"><a href="#链接图片" class="headerlink" title="链接图片"></a>链接图片</h2><p>将图像的Markdown 括在方括号中，然后将链接添加在圆括号中。  </p><p>例：插入图片<code>E:/Workspaces/hexo/themes/butterfly/source/img/index_img/archive_img.jpg</code>并链接到该博客  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">![链接</span>](<span class="link">E:/Workspaces/hexo/themes/butterfly/source/img/index_img/archive_img.jpg</span>)](<span class="link">https://big-worth.github.io/</span>) </span><br></pre></td></tr></table></figure><p>结果展示：</p><p><a href="https://big-worth.github.io/"><img src="/img/index_img/archive_img.jpg" alt="链接"></a> </p><h1 id="转义字符语法"><a href="#转义字符语法" class="headerlink" title="转义字符语法"></a>转义字符语法</h1><p>要显示原本用于格式化的字符，需要在字符前面添加反斜杠字符<code>\</code>。  </p><p>例：书写*  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\<span class="emphasis">*</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><p>*  </p><hr>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 教程 </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
