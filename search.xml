<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python笔记</title>
      <link href="/archives/d83aff49.html"/>
      <url>/archives/d83aff49.html</url>
      
        <content type="html"><![CDATA[<hr><h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World!"></a>Hello World!</h1><p>例：输出<code>Hello World!</code>。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello World!&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br></pre></td></tr></table></figure><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><p>注释是对代码的解释说明，计算机并不会执行。</p><h2 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h2><p>以<code>#</code>开头，<code>#</code>右边的所有文字当作说明，而不是真正要执行的程序，起辅助说明作用。  </p><p>例：输出<code>Hello World!</code>，后面需要有相应的注释。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello World!&quot;</span>)  <span class="comment">#输出Hello World!</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br></pre></td></tr></table></figure><h2 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h2><p>多行注释需要用三个单引号，即三个<code>&#39;</code>包裹起来。</p><p>例：书写一段多行注释，第一行为<code>比格沃斯</code>，第二行为<code>Bigglesworth</code>。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    比格沃斯</span></span><br><span class="line"><span class="string">    Bigglesworth</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h1><p>在代码中，被写下来的固定值，被称为字面量。  </p><h2 id="常用的值的类型"><a href="#常用的值的类型" class="headerlink" title="常用的值的类型"></a>常用的值的类型</h2><table><thead><tr><th align="center">类型</th><th align="center">描述</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">数字（Number）</td><td align="center"><strong>支持</strong><br>整数（int）<br>浮点数（float）<br>复数（complex）<br>布尔（bool）</td><td align="center">整数（int），如：10、-10<br>浮点数（float），如：13.14、-13.14<br>复数（complex），如：4+3j，以j结尾表示复数<br>布尔（float）表达现实生活中的逻辑，即真和假，<code>True</code>表示真，<code>False</code>表示假。<code>True</code>的本质是一个数字记作1，<code>False</code>记作0</td></tr><tr><td align="center">字符串（String）</td><td align="center">描述文本的一种数据类型</td><td align="center">字符串（String）是由任意数量的字符组成</td></tr><tr><td align="center">列表（List）</td><td align="center">有序的可变序列</td><td align="center">Python中使用最频繁的数据类型，可以有序记录一堆数据</td></tr><tr><td align="center">元组（Tuple）</td><td align="center">有序的不可变序列</td><td align="center">可有序记录一堆不可变的Python数据集合</td></tr><tr><td align="center">集合（Set）</td><td align="center">无序不重复集合</td><td align="center">可无序记录一堆不重复的Python数据集合</td></tr><tr><td align="center">字典（Dictionary）</td><td align="center">无序Key-Value集合</td><td align="center">可无序记录一堆Key-Value型的Python数据集合</td></tr></tbody></table><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>又称为文本，是由任意数量的字符，如中文、英文、各类符号、数字等组成。所以叫做字符的串。  </p><p>如：  </p><ul><li><p>“Bigglesworth”</p></li><li><p>“XXX的编号是：114514”</p></li><li><p>“今天是星期二”</p></li></ul><p>在Python中，字符串需要使用双引号<code>&quot;&quot;</code>包裹起来。  </p><p><strong>被引号包裹起来的均为字符串。</strong></p><h2 id="输出字面量"><a href="#输出字面量" class="headerlink" title="输出字面量"></a>输出字面量</h2><p>使用<code>print()</code>函数将字面量打印在屏幕上。  </p><p>例：分别输出<code>13.14</code>，<code>666</code>,<code>Bigglesworth</code>。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">13.14</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">666</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Bigglesworth&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果展示： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">13.14</span><br><span class="line">666</span><br><span class="line">Bigglesworth</span><br></pre></td></tr></table></figure><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>变量指的是在程序运行时，能储存计算结果或能表示值的抽象概念。  </p><p>简单来说，变量就是在程序运行时，记录数据用的。  </p><h2 id="变量的定义格式"><a href="#变量的定义格式" class="headerlink" title="变量的定义格式"></a>变量的定义格式</h2><p>格式：<code>变量名称 = 变量的值</code>  </p><p>每一个变量都有自己的名称，称之为：<strong>变量名也就是变量本身</strong>。  </p><p>每一个变量都有自己存储的值（内容），称之为：<strong>变量值</strong>。</p><p>赋值，表示将等号右侧的值，赋值给左侧的变量。  </p><p>例：定义一个变量<code>score</code>，其值为<code>13</code>，并将其输出。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">score = <span class="number">13</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;得分为：&quot;</span>, score)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">得分为： 13</span><br></pre></td></tr></table></figure><h2 id="变量运算"><a href="#变量运算" class="headerlink" title="变量运算"></a>变量运算</h2><p>变量可以直接当作其存储的内容进行运算。  </p><p>例：将<code>score</code>的值增加<code>2</code>并输出。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">score = <span class="number">13</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;得分为：&quot;</span>, score)</span><br><span class="line">score = score + <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;变化后的得分为：&quot;</span>, score)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">得分为： 13</span><br><span class="line">变化后的得分为： 15</span><br></pre></td></tr></table></figure><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="直接输出类型信息"><a href="#直接输出类型信息" class="headerlink" title="直接输出类型信息"></a>直接输出类型信息</h2><p>使用<code>type()</code>可以输出一个字面量或者变量的类型信息。  </p><p>例：分别输出<code>Bigglesworth</code>，<code>3.1415926</code>，<code>3+4j</code>的类型信息。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="string">&quot;Bigglesworth&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="number">3.1415926</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="number">3</span>+<span class="number">4j</span>))</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &#x27;str&#x27;&gt;</span><br><span class="line">&lt;class &#x27;float&#x27;&gt;</span><br><span class="line">&lt;class &#x27;complex&#x27;&gt;</span><br></pre></td></tr></table></figure><h2 id="存储类型信息结果"><a href="#存储类型信息结果" class="headerlink" title="存储类型信息结果"></a>存储类型信息结果</h2><p>可以使用一个变量用来存储<code>type()</code>的返回结果，该结果被称作<strong>返回值</strong>。  </p><p>例：利用<code>type()</code>获取<code>114514</code>的数据类型，将其存储在<code>Type</code>变量中并输出。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Type</span> = <span class="built_in">type</span>(<span class="number">114514</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="type">Type</span>)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &#x27;int&#x27;&gt;</span><br></pre></td></tr></table></figure><h2 id="查看变量中存储的数据类型"><a href="#查看变量中存储的数据类型" class="headerlink" title="查看变量中存储的数据类型"></a>查看变量中存储的数据类型</h2><p>例：定义一个变量<code>name</code>，其存储的内容为<code>Bigglesworth</code>，输出其数据类型。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;Bigglesworth&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(name)))</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &#x27;str&#x27;&gt;</span><br></pre></td></tr></table></figure><h1 id="数据类型的转换"><a href="#数据类型的转换" class="headerlink" title="数据类型的转换"></a>数据类型的转换</h1><h2 id="常见的转换语句"><a href="#常见的转换语句" class="headerlink" title="常见的转换语句"></a>常见的转换语句</h2><table><thead><tr><th align="center">语句（函数）</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">int(x)</td><td align="center">将x转换为一个整数</td></tr><tr><td align="center">float(x)</td><td align="center">将x转换为一个浮点数</td></tr><tr><td align="center">str(x)</td><td align="center">将对象x转换为字符串</td></tr></tbody></table><p>注：这三条语句均有返回值。</p><p>例：将字符串类型的<code>3.1415926</code>转换为浮点数类型。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">number = <span class="string">&quot;3.1415926&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(number), number)</span><br><span class="line">number = <span class="built_in">float</span>(number)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(number), number)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &#x27;str&#x27;&gt; 3.1415926</span><br><span class="line">&lt;class &#x27;float&#x27;&gt; 3.1415926</span><br></pre></td></tr></table></figure><p>注：</p><ul><li><p>可以将任何东西转换为字符串，但是字符串转成别的数据类型的时候需要注意是否合法，比如如果要将一个字符串转换为整型，则需要注意字符串内是否全都是数字。  </p></li><li><p>在整型转换为浮点型的时候，会默认加上一个<code>.0</code>，因为浮点类型默认带小数。  </p></li><li><p>在浮点型转换为整型的时候，会将小数点后的数据直接舍去。</p></li></ul><h1 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h1><h2 id="标识符的定义"><a href="#标识符的定义" class="headerlink" title="标识符的定义"></a>标识符的定义</h2><p>在Python程序中，我们可以给很多东西起名字，例如变量、函数、类等等，这些名字被统称为标识符，用来做内容的标识。</p><h2 id="标识符命名规则"><a href="#标识符命名规则" class="headerlink" title="标识符命名规则"></a>标识符命名规则</h2><p>命名规则主要有三点：  </p><ul><li><p>内容限定</p></li><li><p>大小写敏感</p></li><li><p>不可使用关键字</p></li></ul><h3 id="内容限定"><a href="#内容限定" class="headerlink" title="内容限定"></a>内容限定</h3><p>标识符命名中，只允许出现：  </p><ul><li><p>英文</p></li><li><p>中文</p></li><li><p>数字</p></li><li><p>下划线</p></li></ul><p>注意点：  </p><ul><li><p>虽然Python支持中文作为标识符，但是尽量不要去使用。</p></li><li><p>开头不可以是数字</p></li></ul><h3 id="大小写敏感"><a href="#大小写敏感" class="headerlink" title="大小写敏感"></a>大小写敏感</h3><p>两个标识符字母都一样，唯一的区别是字母的大小写不一样，那么也是可以正确区分的。  </p><h3 id="不可使用关键字"><a href="#不可使用关键字" class="headerlink" title="不可使用关键字"></a>不可使用关键字</h3><p>Python中有一系列单词，称之为关键字，关键字在Python中都有特定的用途，我们不可以使用它们作为标识符。  </p><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p>设<code>a=10</code>，<code>b=20</code></p><table><thead><tr><th align="center">运算符</th><th align="center">描述</th><th align="center">实例</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">加</td><td align="center">两个对象相加a + b输出结果30</td></tr><tr><td align="center">-</td><td align="center">减</td><td align="center">两个对象相减a - b输出结果-10</td></tr><tr><td align="center">*</td><td align="center">乘</td><td align="center">两个数相乘或是返回一个被重复若干次的字符串a * b输出结果200</td></tr><tr><td align="center">/</td><td align="center">除</td><td align="center">b / a输出结果2</td></tr><tr><td align="center">//</td><td align="center">取整除</td><td align="center">返回商的整数部分9//2输出结果4,9.0//2.0输出结果4.0</td></tr><tr><td align="center">%</td><td align="center">取余</td><td align="center">返回除法的余数b % a输出结果0</td></tr><tr><td align="center">**</td><td align="center">指数</td><td align="center">a**b为10的20次方</td></tr></tbody></table><p>例：计算上表中的实例。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">10</span></span><br><span class="line">b=<span class="number">20</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a + b =&quot;</span>, a + b)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a - b =&quot;</span>, a - b)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a * b =&quot;</span>, a * b)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;b / a =&quot;</span>, b / a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;9 // 2 =&quot;</span>, <span class="number">9</span> // <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;9.0 // 2.0 =&quot;</span>, <span class="number">9.0</span> // <span class="number">2.0</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;b % a =&quot;</span>, b % a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a ** b =&quot;</span>, a ** b)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a + b = 30</span><br><span class="line">a - b = -10</span><br><span class="line">a * b = 200</span><br><span class="line">b / a = 2.0</span><br><span class="line">9 // 2 = 4</span><br><span class="line">9.0 // 2.0 = 4.0</span><br><span class="line">b % a = 0</span><br><span class="line">a ** b = 100000000000000000000</span><br></pre></td></tr></table></figure><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><h3 id="基础赋值运算符"><a href="#基础赋值运算符" class="headerlink" title="基础赋值运算符"></a>基础赋值运算符</h3><table><thead><tr><th align="center">运算符</th><th align="center">描述</th><th align="center">实例</th></tr></thead><tbody><tr><td align="center">=</td><td align="center">赋值运算符</td><td align="center">把 = 右边的结果 赋值给 左边的变量</td></tr></tbody></table><h3 id="复合赋值运算符"><a href="#复合赋值运算符" class="headerlink" title="复合赋值运算符"></a>复合赋值运算符</h3><table><thead><tr><th align="center">运算符</th><th align="center">描述</th><th align="center">实例</th></tr></thead><tbody><tr><td align="center">+=</td><td align="center">加法赋值运算符</td><td align="center">c += a 等效于 c = c + a</td></tr><tr><td align="center">-=</td><td align="center">减法赋值运算符</td><td align="center">c -= a 等效于 c = c - a</td></tr><tr><td align="center">*=</td><td align="center">乘法赋值运算符</td><td align="center">c *= a 等效于 c = c * a</td></tr><tr><td align="center">/=</td><td align="center">除法赋值运算符</td><td align="center">c /= a 等效于 c = c / a</td></tr><tr><td align="center">%=</td><td align="center">取模赋值运算符</td><td align="center">c %= a 等效于 c = c % a</td></tr><tr><td align="center">**=</td><td align="center">幂赋值运算符</td><td align="center">c **= a 等效于 c = c ** a</td></tr><tr><td align="center">//=</td><td align="center">取整除赋值运算符</td><td align="center">c //= a 等效于 c = c // a</td></tr></tbody></table><h1 id="字符串扩展"><a href="#字符串扩展" class="headerlink" title="字符串扩展"></a>字符串扩展</h1><h2 id="字符串的三种定义方式"><a href="#字符串的三种定义方式" class="headerlink" title="字符串的三种定义方式"></a>字符串的三种定义方式</h2><p>字符串在Python中有多种定义形式：  </p><ol><li><p>单引号定义法：<code>name = &#39;Bigglesworth&#39;</code></p></li><li><p>双引号定义法：<code>name = &quot;Bigglesworth&quot;</code></p></li><li><p>三引号定义法：<code>name = &#39;&#39;&#39;Bigglesworth&#39;&#39;&#39;</code></p></li></ol><p>三引号定义法，和多行注释的写法一样，同样支持换行操作。  </p><p>使用变量接收它，它就是字符串。  </p><p>不使用变量去接收它，就可以作为多行注释使用。  </p><p>Python中基本上不区分单引号和双引号。  </p><h2 id="字符串的引号嵌套"><a href="#字符串的引号嵌套" class="headerlink" title="字符串的引号嵌套"></a>字符串的引号嵌套</h2><p>当字符串中有单引号或者双引号时，可以通过以下几种方法进行嵌套：  </p><ul><li><p>单引号定义法，可以内含双引号</p></li><li><p>双引号定义法，可以内含单引号</p></li><li><p>可以使用转义字符<code>\</code>来将引号解除效用，变成普通字符串</p></li></ul><p>例：将<code>&quot;My name is &#39;Bigglesworth&#39;&quot;</code>存储至变量<code>sentence</code>并输出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sentence = <span class="string">&quot;\&quot;My name is \&#x27;Bigglesworth\&#x27;\&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(sentence)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;My name is &#x27;Bigglesworth&#x27;&quot;</span><br></pre></td></tr></table></figure><h2 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h2><p>如果我们有两个字符串字面量，可以将其拼接成一个字符串，通过<code>+</code>号即可完成。  </p><p>例：将<code>My name is </code>和<code>Bigglesworth</code>拼接在一起。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;My name is &quot;</span> + <span class="string">&quot;Bigglesworth&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">My name is Bigglesworth</span><br></pre></td></tr></table></figure><p>字面量和变量或变量和变量之间会使用拼接。  </p><p>例：将<code>九磅十五便士</code>存入变量<code>money</code>中，利用字符串拼接输出<code>衬衫的价格为九磅十五便士</code>。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">money = <span class="string">&quot;九磅十五便士&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;衬衫的价格是&quot;</span> + money)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">衬衫的价格是九磅十五便士</span><br></pre></td></tr></table></figure><p>注：字符串不能与整数或者浮点数之类的进行拼接。</p><h2 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h2><h3 id="普通格式化"><a href="#普通格式化" class="headerlink" title="普通格式化"></a>普通格式化</h3><p>通过格式符号来进行占位，然后将变量（该变量可以是任意类型的变量）编程字符串放入占位的地方。  </p><p>常用的格式符号：  </p><table><thead><tr><th align="center">格式符号</th><th align="center">转化</th></tr></thead><tbody><tr><td align="center">%s</td><td align="center">将内容转换成字符串，放入占位位置</td></tr><tr><td align="center">%d</td><td align="center">将内容转换成整数，放入占位位置</td></tr><tr><td align="center">%f</td><td align="center">将内容转换成浮点型，放入占位位置</td></tr></tbody></table><p>例：输出<code>我的年龄是19岁，班级号为2001</code>，其中数字使用字符串格式化操作。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">19</span></span><br><span class="line">class_num = <span class="number">2001</span></span><br><span class="line">message = <span class="string">&quot;我的年龄是%d岁，班级号为%d&quot;</span> % (age, class_num)</span><br><span class="line"><span class="built_in">print</span>(message)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我的年龄是19岁，班级号为2001</span><br></pre></td></tr></table></figure><p>注：对于多个变量占位的情况，变量要用括号括起来，并按照占位的顺序填入。  </p><h3 id="快速格式化"><a href="#快速格式化" class="headerlink" title="快速格式化"></a>快速格式化</h3><p>语法：<code>f&quot;内容&#123;变量&#125;&quot;</code>  </p><p>例：将上述例子利用快速格式化进行输出。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">19</span></span><br><span class="line">class_num = <span class="number">2001</span></span><br><span class="line">message = <span class="string">f&quot;我的年龄是<span class="subst">&#123;age&#125;</span>岁，班级号为<span class="subst">&#123;class_num&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">print</span>(message)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我的年龄是<span class="number">19</span>岁，班级号为<span class="number">2001</span></span><br></pre></td></tr></table></figure><h2 id="格式化的精度控制"><a href="#格式化的精度控制" class="headerlink" title="格式化的精度控制"></a>格式化的精度控制</h2><p>我们可以使用辅助符号<code>m.n</code>来控制数据的宽度和精度。  </p><ul><li><p>m用来控制宽度，要求是数字（很少使用），设置的宽度小于数字自身，不生效</p></li><li><p>.n用来控制小数点精度，要求是数字，会进行小数的四舍五入</p></li></ul><p>示例：  </p><ul><li><p>%5d：表示将整数的宽度控制在5位，如数字11，被设置为5d，就会变成：<code>[空格][空格][空格]11</code>，用三个空格补足宽度。</p></li><li><p>%5.2f：表示将宽度控制为5，将小数点精度设置为2；小数点和小数部分也算入宽度计算。如，对11.345设置了%7.2f后，结果是：<code>[空格][空格]11.35</code>。2个空格补足宽度，小数部分限制2位精度后，四舍五入为.35</p></li><li><p>%.2f：表示不限制宽度，只设置小数点精度为2，如11.345设置%2.f后，结果为11.35.</p></li></ul><h2 id="表达式格式化"><a href="#表达式格式化" class="headerlink" title="表达式格式化"></a>表达式格式化</h2><p>表达式：一条具有明确执行结果的代码语句。  </p><p>在无需使用变量进行数据存储的时候，可以直接格式化表达式，简化代码。  </p><p>例：计算<code>2 * 5</code>的值。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;2 * 5的结果是：<span class="subst">&#123;<span class="number">2</span> * <span class="number">5</span>&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span> * <span class="number">5</span>的结果是：<span class="number">10</span></span><br></pre></td></tr></table></figure><h1 id="数据输出"><a href="#数据输出" class="headerlink" title="数据输出"></a>数据输出</h1><h2 id="字面量输出"><a href="#字面量输出" class="headerlink" title="字面量输出"></a>字面量输出</h2><p>直接输出要输出的内容。  </p><p>例：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">3.1415926</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Biggleswotrh&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3.1415926</span><br><span class="line">Biggleswotrh</span><br></pre></td></tr></table></figure><h2 id="变量输出"><a href="#变量输出" class="headerlink" title="变量输出"></a>变量输出</h2><p>可以直接输出一个变量的值。  </p><p>例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10086</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10086</span><br></pre></td></tr></table></figure><h2 id="end输出"><a href="#end输出" class="headerlink" title="end输出"></a>end输出</h2><p>一般情况下，直接利用<code>print</code>函数输出会默认换行，因此可以在<code>print()</code>的括号中的最后加上<code>, end = &#39;&#39;</code>，可以防止其自动换行，当然也可以在<code>end</code>里面加上内容，作为输出的结尾。  </p><p>例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Bigglesworth&quot;</span>, end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">3.14</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">6.28</span>, end = <span class="string">&#x27;a&#x27;</span>)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Bigglesworth3.14</span><br><span class="line">6.28a</span><br></pre></td></tr></table></figure><h2 id="加号拼接"><a href="#加号拼接" class="headerlink" title="加号拼接"></a>加号拼接</h2><p>该方法只针对于字符串，通过加号来对字符串进行拼接。  </p><p>例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">&quot;27.56&quot;</span></span><br><span class="line">float1 = <span class="number">27.56</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;数据为：&quot;</span> + str1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;数据为：&quot;</span> + <span class="built_in">str</span>(float1))</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">数据为：27.56</span><br><span class="line">数据为：27.56</span><br></pre></td></tr></table></figure><h2 id="format格式"><a href="#format格式" class="headerlink" title="format格式"></a>format格式</h2><p>利用<code>format</code>来进行输出，在<code>print</code>中用花括号进行占位，花括号中的值代表后面占位的字面量或者变量的顺序。  </p><p>例：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">27.56</span></span><br><span class="line">b = <span class="number">28.99</span></span><br><span class="line">c = <span class="number">29.66</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;数据为：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(b))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;abc的数据分别为：&#123;0&#125;，&#123;1&#125;，&#123;2&#125;&quot;</span>.<span class="built_in">format</span>(a, b, c))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;abc的数据分别为：&#123;1&#125;，&#123;0&#125;，&#123;2&#125;&quot;</span>.<span class="built_in">format</span>(a, b, c))</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">数据为：28.99</span><br><span class="line">abc的数据分别为：27.56，28.99，29.66</span><br><span class="line">abc的数据分别为：28.99，27.56，29.66</span><br></pre></td></tr></table></figure><h2 id="print-f”-”-用法"><a href="#print-f”-”-用法" class="headerlink" title="print(f”{}”)用法"></a>print(f”{}”)用法</h2><p>该用法在上述中提到过，与其使用方法一致。  </p><p>例：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">27.56</span></span><br><span class="line">b = <span class="number">28.99</span></span><br><span class="line">c = <span class="number">29.66</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;数据为：<span class="subst">&#123;a&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;abc的数据分别为：<span class="subst">&#123;a&#125;</span>，<span class="subst">&#123;b&#125;</span>，<span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">数据为：27.56</span><br><span class="line">abc的数据分别为：27.56，28.99，29.66</span><br></pre></td></tr></table></figure><h2 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h2><table><thead><tr><th align="center">字符</th><th align="center">含有</th></tr></thead><tbody><tr><td align="center">%s</td><td align="center">字符串</td></tr><tr><td align="center">%d</td><td align="center">有符号十进制整数，%06d表示输出的整数显示位数字，不足的地方使用0补全</td></tr><tr><td align="center">%f</td><td align="center">浮点数，%.2f表示小数点后只显示两位</td></tr><tr><td align="center">%%</td><td align="center">输出%</td></tr></tbody></table><p>该用法在上述中提到过，与其使用方法一致。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">19</span></span><br><span class="line">class_num = <span class="number">2001</span></span><br><span class="line">message = <span class="string">&quot;我的年龄是%d岁，班级号为%d&quot;</span> % (age, class_num)</span><br><span class="line"><span class="built_in">print</span>(message)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我的年龄是19岁，班级号为2001</span><br></pre></td></tr></table></figure><h1 id="数据输入"><a href="#数据输入" class="headerlink" title="数据输入"></a>数据输入</h1><p>数据输入需要使用到<code>input()</code>函数，需要用一个变量来接收存储该语句获取的键盘输入数据。</p><p>例：输入名字并将其输出。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;What&#x27;s your name?&quot;</span>)</span><br><span class="line">name = <span class="built_in">input</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Oh, your name is <span class="subst">&#123;name&#125;</span>!&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">What&#x27;s your name?</span><br><span class="line"></span><br><span class="line">Bigglesworth</span><br><span class="line">Oh, your name is Bigglesworth!</span><br></pre></td></tr></table></figure><p>也可以直接把提示信息写在<code>input()</code>函数的括号内。  </p><p>例：将上面的例子中的<code>print</code>函数省略。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="built_in">input</span>(<span class="string">&quot;What&#x27;s your name?&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Oh, your name is <span class="subst">&#123;name&#125;</span>!&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">What&#x27;s your name?Bigglesworth</span><br><span class="line">Oh, your name is Bigglesworth!)</span><br></pre></td></tr></table></figure><p>注：<code>input</code>函数获取的是字符串类型。</p><p>例：从键盘输入两个数字，输出它们相加的结果。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入x&quot;</span>))</span><br><span class="line">y = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入y&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;x + y = <span class="subst">&#123;x + y&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">请输入x10</span><br><span class="line"></span><br><span class="line">请输入y20</span><br><span class="line">x + y = 30</span><br></pre></td></tr></table></figure><h1 id="布尔类型和比较运算符"><a href="#布尔类型和比较运算符" class="headerlink" title="布尔类型和比较运算符"></a>布尔类型和比较运算符</h1><h2 id="布尔类型的定义"><a href="#布尔类型的定义" class="headerlink" title="布尔类型的定义"></a>布尔类型的定义</h2><p>布尔类型的字面量：  </p><ul><li><p>True表示真（是、肯定）</p></li><li><p>False表示假（否，否定）</p></li></ul><p>定义变量存储布尔类型数据：  </p><p><code>变量名称 = 布尔类型字面量</code>  </p><p>布尔类型不仅可以自行定义，同时也可以使用比较运算符进行比较运算得到布尔类型的结果。  </p><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><table><thead><tr><th align="center">运算符</th><th align="center">描述</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center">==</td><td align="center">判断内容是否相等，满足为True，不满足为False</td><td align="center">如a=3,b=3，则(a == b)为True</td></tr><tr><td align="center">!=</td><td align="center">判断内容是否不相等，满足为True，不满足为False</td><td align="center">如a=1，b=3，则(a != b)为True</td></tr><tr><td align="center">&gt;</td><td align="center">判断运算符左侧内容是否大于右侧，满足为True，不满足为False</td><td align="center">如a=7,b=3，则(a &gt; b)为True</td></tr><tr><td align="center">&lt;</td><td align="center">判断运算符左侧内容是否小于右侧，满足为True，不满足为False</td><td align="center">如a=3,b=7，则(a &lt; b)为True</td></tr><tr><td align="center">&gt;=</td><td align="center">判断运算符左侧内容是否大于等于右侧，满足为True，不满足为False</td><td align="center">如a=3,b=3，则(a &gt;= b)为True</td></tr><tr><td align="center">&lt;=</td><td align="center">判断运算符左侧内容是否小于等于右侧，满足为True，不满足为False</td><td align="center">如a=3,b=3，则(a &lt;= b)为True</td></tr></tbody></table><p>注：首字母一定要大写。  </p><h1 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h1><h2 id="if语句的基本格式"><a href="#if语句的基本格式" class="headerlink" title="if语句的基本格式"></a>if语句的基本格式</h2><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 要判断的条件:</span><br><span class="line">    条件成立时，要做的事情</span><br></pre></td></tr></table></figure><p>注：</p><ul><li><p>Python是通过缩进来识别语句的归属的，所以第二行前要有四个空格，以此来说明这句话属于第一行的if语句。  </p></li><li><p>条件后面要有一个英文的冒号。</p></li><li><p>可以有不止一行要做的事情，只需要保证他们都有着相同的缩进即可。</p></li></ul><p>例：输入一个整数，判断它是否是偶数，是的话输出<code>Yes</code>。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span>:  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Yes&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">Yes</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><p>判断语句的结果，必须是布尔类型True或False，True会执行if内的代码语句，False则不会执行。  </p><h2 id="if-else语句"><a href="#if-else语句" class="headerlink" title="if else语句"></a>if else语句</h2><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件:</span><br><span class="line">    满足条件时要做的事</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    不满足条件时要做的事</span><br></pre></td></tr></table></figure><p>例：输入一个整数，判断它是否是偶数，是的话输出<code>Yes</code>，否则输出<code>No</code>。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span>:  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Yes&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;No&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">Yes</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">No</span><br></pre></td></tr></table></figure><h2 id="if-elif-else语句"><a href="#if-elif-else语句" class="headerlink" title="if elif else语句"></a>if elif else语句</h2><p>基本格式：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件<span class="number">1</span>::</span><br><span class="line">    条件<span class="number">1</span>满足时应做的事情</span><br><span class="line"><span class="keyword">elif</span> 条件<span class="number">2</span>:</span><br><span class="line">    条件<span class="number">2</span>满足时应做的事情</span><br><span class="line"><span class="keyword">elif</span> 条件N:</span><br><span class="line">    条件N满足时应做的事情</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    所有条件都不满足时应做的事情</span><br></pre></td></tr></table></figure><p>例：输入一个成绩，根据表格输出对应评价。  </p><table><thead><tr><th align="center">成绩</th><th align="center">评价</th></tr></thead><tbody><tr><td align="center">90~100</td><td align="center">优秀</td></tr><tr><td align="center">80~89</td><td align="center">良好</td></tr><tr><td align="center">70~79</td><td align="center">中等</td></tr><tr><td align="center">60~69</td><td align="center">及格</td></tr><tr><td align="center">0~59</td><td align="center">不及格</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">score = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">if</span> score &gt;= <span class="number">90</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;优秀&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> score &gt;= <span class="number">80</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;良好&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> score &gt;= <span class="number">70</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;中等&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> score &gt;= <span class="number">60</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;及格&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;不及格&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">73</span><br><span class="line">中等</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">43</span><br><span class="line">不及格</span><br></pre></td></tr></table></figure><h2 id="判断语句的嵌套"><a href="#判断语句的嵌套" class="headerlink" title="判断语句的嵌套"></a>判断语句的嵌套</h2><p>基本格式：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件<span class="number">1</span>:</span><br><span class="line">    满足条件<span class="number">1</span> 做的事情<span class="number">1</span></span><br><span class="line">    满足条件<span class="number">1</span> 做的事情<span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> 条件<span class="number">2</span>:</span><br><span class="line">        满足条件<span class="number">2</span> 做的事情<span class="number">1</span></span><br><span class="line">        满足条件<span class="number">2</span> 做的事情<span class="number">2</span></span><br></pre></td></tr></table></figure><p>第二个if，属于第一个if内，只有第一个if满足条件，才会执行第二个if。  </p><p>嵌套的关键点在于<strong>空格缩进</strong>，通过空格缩进，来决定语句之间的<strong>层次关系</strong>。  </p><p>例：输入三个数字，将它们按照从小到大的顺序输出。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入a&quot;</span>))</span><br><span class="line">b = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入b&quot;</span>))</span><br><span class="line">c = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入c&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> a &lt; b:</span><br><span class="line">    <span class="keyword">if</span> b &lt; c:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;a&#125;</span>&lt;<span class="subst">&#123;b&#125;</span>&lt;<span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> a &lt; c:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;a&#125;</span>&lt;<span class="subst">&#123;c&#125;</span>&lt;<span class="subst">&#123;b&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;c&#125;</span>&lt;<span class="subst">&#123;a&#125;</span>&lt;<span class="subst">&#123;b&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">if</span> a &lt; c:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;b&#125;</span>&lt;<span class="subst">&#123;a&#125;</span>&lt;<span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> b &lt; c:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;b&#125;</span>&lt;<span class="subst">&#123;c&#125;</span>&lt;<span class="subst">&#123;a&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;c&#125;</span>&lt;<span class="subst">&#123;b&#125;</span>&lt;<span class="subst">&#123;a&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">请输入a10</span><br><span class="line"></span><br><span class="line">请输入b5</span><br><span class="line"></span><br><span class="line">请输入c8</span><br><span class="line">5&lt;8&lt;10</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">请输入a9</span><br><span class="line"></span><br><span class="line">请输入b8</span><br><span class="line"></span><br><span class="line">请输入c7</span><br><span class="line">7&lt;8&lt;9</span><br></pre></td></tr></table></figure><h1 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h1><p>逻辑运算符一般在遇到复合问题时使用，例如：如果明天不下雨并且休息，我就出去玩。对于这个命题，就用到了且这个逻辑运算符。常见的逻辑运算符一共有如下三种，他们常用于判断和循环的条件内。  </p><table><thead><tr><th align="center">名称</th><th align="center">例子</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">逻辑与</td><td align="center">a and b</td><td align="center">当a和b都为True时，为True</td></tr><tr><td align="center">逻辑或</td><td align="center">a or b</td><td align="center">当a或b有一个为True时，为True</td></tr><tr><td align="center">逻辑非</td><td align="center">not a</td><td align="center">当a为False时，为True</td></tr></tbody></table><p>例：输入一个年份<code>year</code>，判断其是否为闰年，是闰年输出<code>Yes</code>，否则输出<code>No</code>。  </p><p><em>能够整除4且不能整除100的年份为闰年，或者能整除400的为闰年</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">year = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">if</span> year % <span class="number">4</span> == <span class="number">0</span> <span class="keyword">and</span> <span class="keyword">not</span> year % <span class="number">100</span> == <span class="number">0</span> <span class="keyword">or</span> year % <span class="number">400</span> == <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Yes&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;No&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2008</span><br><span class="line">Yes</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2100</span><br><span class="line">No</span><br></pre></td></tr></table></figure><h1 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h1><h2 id="while循环的基本格式"><a href="#while循环的基本格式" class="headerlink" title="while循环的基本格式"></a>while循环的基本格式</h2><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 条件:</span><br><span class="line">    条件满足时，做的事情<span class="number">1</span></span><br><span class="line">    条件满足时，做的事情<span class="number">2</span></span><br><span class="line">    条件满足时，做的事情<span class="number">3</span></span><br></pre></td></tr></table></figure><p>注：只要条件满足，就会无限循环执行。  </p><p>例：输出<code>0~9</code>的所有数字。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">10</span>:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td></tr></table></figure><p>注意点：  </p><ul><li><p>while的条件的结果需要是布尔类型，True表示继续循环，False表示结束循环</p></li><li><p>需要设置循环终止的条件，如i += 1配合i &lt; 10，就能确保10次后停下，否则将无限循环</p></li><li><p>空格缩进和if判断一样，都需要设置</p></li></ul><h2 id="while循环的嵌套应用"><a href="#while循环的嵌套应用" class="headerlink" title="while循环的嵌套应用"></a>while循环的嵌套应用</h2><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 条件<span class="number">1</span>:</span><br><span class="line">    条件<span class="number">1</span>满足时，做的事情<span class="number">1</span></span><br><span class="line">    条件<span class="number">1</span>满足时，做的事情<span class="number">2</span></span><br><span class="line">    条件<span class="number">1</span>满足时，做的事情<span class="number">3</span></span><br><span class="line">    <span class="keyword">while</span> 条件<span class="number">2</span>:</span><br><span class="line">        条件<span class="number">2</span>满足时，做的事情<span class="number">1</span></span><br><span class="line">        条件<span class="number">2</span>满足时，做的事情<span class="number">2</span></span><br><span class="line">        条件<span class="number">2</span>满足时，做的事情<span class="number">3</span></span><br></pre></td></tr></table></figure><p>例：输入一个正整数<code>n</code>，打印仅由<code>*</code>构成的<code>n</code>行直角三角形。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; n:</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> j &lt;= i:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;*&#x27;</span>, end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">*</span><br><span class="line">**</span><br><span class="line">***</span><br><span class="line">****</span><br><span class="line">*****</span><br></pre></td></tr></table></figure><h2 id="for循环的基础语法"><a href="#for循环的基础语法" class="headerlink" title="for循环的基础语法"></a>for循环的基础语法</h2><p>除了while循环语句外，Python同样提供了for循环语句。  </p><p>两者能完成的功能基本差不多，但仍有一些区别：  </p><ul><li><p>while循环的循环条件是自定义的，<strong>自行控制循环条件</strong></p></li><li><p>fore循环是一种“轮询”机制，是对一批内容进行<strong>逐个处理</strong></p></li></ul><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 临时变量 <span class="keyword">in</span> 待处理数据集:</span><br><span class="line">    循环满足条件时执行的代码</span><br></pre></td></tr></table></figure><h2 id="遍历字符串"><a href="#遍历字符串" class="headerlink" title="遍历字符串"></a>遍历字符串</h2><p>例：遍历<code>Bigglesworth</code>，并将变量的结果打印出来。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;Bigglesworth&quot;</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> name:  </span><br><span class="line">    <span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">B</span><br><span class="line">i</span><br><span class="line">g</span><br><span class="line">g</span><br><span class="line">l</span><br><span class="line">e</span><br><span class="line">s</span><br><span class="line">w</span><br><span class="line">o</span><br><span class="line">r</span><br><span class="line">t</span><br><span class="line">h</span><br></pre></td></tr></table></figure><p>for循环就是将被处理的数据内容挨个取出，赋值给变量。  </p><p>可以看出，for循环是将字符串的内容<strong>依次取出</strong>，所以，for循环也被称之为<strong>遍历循环</strong>。  </p><p>同while循环不同，for循环是无法定义循环条件的，只能从被处理的数据集中，依次取出内容进行处理。  </p><p>所以，理论上讲，Python的for循环无法构建无限循环（被处理的数据集不可能无限大）。  </p><h2 id="range语句"><a href="#range语句" class="headerlink" title="range语句"></a>range语句</h2><p>for循环语句，本质上是遍历：序列类型。  </p><p>我们可以通过<code>range</code>语句，获得一个简单的数字序列。  </p><h3 id="语法1"><a href="#语法1" class="headerlink" title="语法1"></a>语法1</h3><p><code>range(num)</code>  </p><p>获取一个从<code>0</code>开始，到<code>num</code>结束的数字序列（不包含<code>num</code>本身）  </p><p>如<code>range(5)</code>取得的数据是：<code>[0, 1, 2, 3, 4]</code>。  </p><h3 id="语法2"><a href="#语法2" class="headerlink" title="语法2"></a>语法2</h3><p><code>range(num1, num2)</code>  </p><p>获得一个从<code>num1</code>开始，到<code>num2</code>结束的数字序列（不含<code>num2</code>本身）  </p><p>如<code>range(5, 10)</code>取得的数据是：<code>[5, 6, 7, 8, 9]</code>。  </p><h3 id="语法3"><a href="#语法3" class="headerlink" title="语法3"></a>语法3</h3><p><code>range(num1, num2, step)</code>  </p><p>获得一个从<code>num1</code>开始，到<code>num2</code>结束的数字序列（不包含<code>num2</code>本身）  </p><p>数字之间的步长，以<code>step</code>为准（<code>step</code>默认是1）  </p><p>如<code>range(5, 10, 2)</code>取得的数据是：<code>[5, 7, 9]</code>。  </p><h2 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h2><p>for循环赋值的是临时变量，在编程规范上，作用范围（作用域），只限定在for循环内部。  </p><p>如果在for循环外部访问临时变量：  </p><ul><li><p>实际上是可以访问到的</p></li><li><p>在编程规范上，是不允许、不建议这么做的</p></li></ul><p>解决临时变量的方法是在全局变量的位置对其定义。  </p><h2 id="for循环的嵌套"><a href="#for循环的嵌套" class="headerlink" title="for循环的嵌套"></a>for循环的嵌套</h2><p>基本格式：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 临时变量 <span class="keyword">in</span> 待处理数据集（序列）:</span><br><span class="line">    循环满足条件应做的事情<span class="number">1</span></span><br><span class="line">    循环满足条件应做的事情<span class="number">2</span></span><br><span class="line">    循环满足条件应做的事情N</span><br><span class="line">        <span class="keyword">for</span> 临时变量 <span class="keyword">in</span> 待处理数据集（序列）:</span><br><span class="line">            循环满足条件应做的事情<span class="number">1</span></span><br><span class="line">            循环满足条件应做的事情<span class="number">2</span></span><br><span class="line">            循环满足条件应做的事情N</span><br></pre></td></tr></table></figure><p>例：输入一个数字<code>n</code>，求<code>1~n</code>中所有完数。  </p><p><em>完数：一个数字的所有真因子相加等于其本身，则该数字被称为完数。</em>  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>):</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, i):</span><br><span class="line">        <span class="keyword">if</span> i % j == <span class="number">0</span>:</span><br><span class="line">            count += j</span><br><span class="line">    <span class="keyword">if</span> count == i:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">100</span><br><span class="line">0</span><br><span class="line">6</span><br><span class="line">28</span><br></pre></td></tr></table></figure><h2 id="循环中断"><a href="#循环中断" class="headerlink" title="循环中断"></a>循环中断</h2><p>无论是while循环或者是for循环，都是重复性的执行特定操作。在这个重复过程中，会出现一切其它情况让我们不得不：  </p><ul><li><p>暂时跳过某次循环，直接进行下一次</p></li><li><p>提前退出循环，不再继续</p></li></ul><p>对于这种场景，Python提供了<code>continue</code>和<code>break</code>关键字用来对循环进行<strong>临时跳过</strong>和<strong>直接结束</strong>。</p><h3 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h3><p><code>continue</code>关键字用于<strong>中断本次</strong>循环，<strong>直接进入下一次</strong>循环。  </p><p><code>continue</code>可以用于<strong>for循环和while循环，效果一致</strong>。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">100</span>):</span><br><span class="line">    语句<span class="number">1</span></span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line">    语句<span class="number">2</span></span><br></pre></td></tr></table></figure><p>对于上面的这个例子中，在循环内，遇到<code>continue</code>就结束当次循环，进行下一次，所以语句2是不会执行的。  </p><p>应用场景：在循环中，因为某些原因，临时结束本次循环。  </p><p>例：输出<code>0~30</code>内的所有数字，跳过所有<code>5</code>的倍数。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">31</span>):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">5</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td></tr></table></figure><h3 id="break"><a href="#break" class="headerlink" title="break"></a>break</h3><p><code>break</code>关键字用于<strong>直接结束循环</strong>。  </p><p><code>break</code>可以用于<strong>for循环和while循环，效果一致</strong>。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">100</span>):</span><br><span class="line">    语句<span class="number">1</span></span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>对于上面这个例子。在循环内，遇到<code>break</code>就结束循环了，所以，执行了语句1后，直接执行语句3了。  </p><p>例：输出<code>0~30</code>内的所有数字，当遇到<code>10</code>的倍数时跳出循环，并输出<code>程序已结束</code>。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">31</span>):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">10</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;程序已结束&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">程序已结束</span><br></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h2><p>函数：是<strong>组织好的</strong>，<strong>可重复使用的</strong>，用来实现特定功能的<strong>代码段</strong>。  </p><p>例：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;Bigglesworth&quot;</span></span><br><span class="line">length = <span class="built_in">len</span>(name)</span><br><span class="line"><span class="built_in">print</span>(length)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">12</span><br></pre></td></tr></table></figure><p>在上述例子中，<code>len()</code>实现了对字符串的长度进行统计，可以随时进行调用，这是因为<code>len()</code>是Python中的内置函数，因此函数应该满如下几点：  </p><ul><li><p>是提前写好的</p></li><li><p>可以重复使用</p></li><li><p>实现某一种特定功能的代码段</p></li></ul><h2 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h2><p>基本格式：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">函数名</span>（传入参数）:</span><br><span class="line">    函数体</span><br><span class="line">    <span class="keyword">return</span> 返回值</span><br></pre></td></tr></table></figure><p>例：定义一个函数<code>Hello</code>，功能是输出<code>Hello World!</code>。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Hello</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello World!&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="函数的调用"><a href="#函数的调用" class="headerlink" title="函数的调用"></a>函数的调用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数名（参数）</span><br></pre></td></tr></table></figure><p>例：调用上一个例子中的函数。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Hello</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello World!&quot;</span>)</span><br><span class="line"></span><br><span class="line">Hello()</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br></pre></td></tr></table></figure><h2 id="函数注意事项"><a href="#函数注意事项" class="headerlink" title="函数注意事项"></a>函数注意事项</h2><ol><li><p>参数如不需要，可以省略</p></li><li><p>返回值如不需要，可以省略</p></li><li><p>函数必须先定义后使用</p></li></ol><h2 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h2><p>传入参数的功能是：在函数进行计算的时候，接受外部（调用时）提供的数据。  </p><p>例：定义一个加法函数，从键盘输入两个数字，将其传入加法函数，并输出结果。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;x + y&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">x = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">y = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">add(x, y)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line"></span><br><span class="line">6</span><br><span class="line">11</span><br></pre></td></tr></table></figure><ul><li><p>函数定义中，提供的<code>x</code>和<code>y</code>称之为：形式参数（形参），表示函数声明将要使用2个参数，参数之间使用逗号进行分隔</p></li><li><p>函数调用中，提供的<code>x</code>和<code>y</code>称之为：实际参数（实参），表示函数执行是时正使用的参数值，传入的时候，按照顺序传入数据，使用逗号分隔</p></li></ul><p><strong>传入参数的数量是不受限制的。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 教程 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL总结</title>
      <link href="/archives/86037912.html"/>
      <url>/archives/86037912.html</url>
      
        <content type="html"><![CDATA[<hr><h1 id="栈（stack）"><a href="#栈（stack）" class="headerlink" title="栈（stack）"></a>栈（stack）</h1><h2 id="基本定义"><a href="#基本定义" class="headerlink" title="基本定义"></a>基本定义</h2><p>栈（<code>stack</code>）又名堆栈，是一种只允许在同一端进行数据插入和删除操作的特殊线性表。  </p><h2 id="栈的相关概念"><a href="#栈的相关概念" class="headerlink" title="栈的相关概念"></a>栈的相关概念</h2><ul><li><p>栈顶（<code>top</code>）：表尾，栈中允许进行数据插入和删除的一端。</p></li><li><p>栈底（<code>bottom</code>）：表头，栈中不允许进行数据操作的一端。</p></li><li><p>入栈或进栈（<code>push</code>）：将数据插入栈顶。</p></li><li><p>出栈或退栈（<code>pop</code>）：将数据取出栈顶并删除。</p></li><li><p>栈上溢（<code>full</code>）：栈内空间已满时，仍进行入栈操作，是一种空间不足的出错状态。</p></li><li><p>栈下溢（<code>empty</code>）：栈内无数据时，仍进行出栈操作，是一种数据不足的出错状态。</p></li><li><p>空栈：元素个数为零的栈。</p></li></ul><h2 id="栈的常用操作"><a href="#栈的常用操作" class="headerlink" title="栈的常用操作"></a>栈的常用操作</h2><h3 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="构造stack容器"><a href="#构造stack容器" class="headerlink" title="构造stack容器"></a>构造stack容器</h3><p>基本语法：<code>stack &lt;Type&gt; s</code>  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stack &lt;<span class="type">int</span>&gt; s;  <span class="comment">//声明存储int类型数据的栈</span></span><br></pre></td></tr></table></figure><h3 id="返回栈顶元素"><a href="#返回栈顶元素" class="headerlink" title="返回栈顶元素"></a>返回栈顶元素</h3><p>基本语法：<code>s.top()</code>  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.<span class="built_in">top</span>();  <span class="comment">//返回栈顶元素</span></span><br></pre></td></tr></table></figure><h3 id="返回栈的大小"><a href="#返回栈的大小" class="headerlink" title="返回栈的大小"></a>返回栈的大小</h3><p>基本语法：<code>s.size()</code>  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.<span class="built_in">size</span>();  <span class="comment">//返回栈的大小</span></span><br></pre></td></tr></table></figure><h3 id="判断栈是否为空"><a href="#判断栈是否为空" class="headerlink" title="判断栈是否为空"></a>判断栈是否为空</h3><p>基本语法：<code>s.empty()</code>  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.<span class="built_in">empty</span>();  <span class="comment">//如果栈为空返回true，否则返回false</span></span><br></pre></td></tr></table></figure><h3 id="入栈操作"><a href="#入栈操作" class="headerlink" title="入栈操作"></a>入栈操作</h3><p>基本语法：<code>s.push(elem)</code>  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.<span class="built_in">push</span>(<span class="number">1</span>);  <span class="comment">//向栈顶插入元素1</span></span><br></pre></td></tr></table></figure><h3 id="出栈操作"><a href="#出栈操作" class="headerlink" title="出栈操作"></a>出栈操作</h3><p>基本语法：<code>s.pop()</code>  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s,<span class="built_in">pop</span>();  <span class="comment">//取出栈顶元素并将其删除</span></span><br></pre></td></tr></table></figure><h1 id="队列（queue）"><a href="#队列（queue）" class="headerlink" title="队列（queue）"></a>队列（queue）</h1><h2 id="基本定义-1"><a href="#基本定义-1" class="headerlink" title="基本定义"></a>基本定义</h2><p>队列是一种特殊的线性表，是一种<strong>先进先出</strong>的数据结构。它只允许在表的前端（<code>front</code>）进行删除操作，而在表的后端（<code>rear</code>）进行插入操作。进行插入操作的端称为队尾，进行删除操作的端称为队头。队列中没有元素时，称为空队列。</p><h2 id="栈的常用操作-1"><a href="#栈的常用操作-1" class="headerlink" title="栈的常用操作"></a>栈的常用操作</h2><h3 id="头文件-1"><a href="#头文件-1" class="headerlink" title="头文件"></a>头文件</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="构造queue容器"><a href="#构造queue容器" class="headerlink" title="构造queue容器"></a>构造queue容器</h3><p>基本语法：<code>queue &lt;Type&gt; q</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">queue &lt;<span class="type">int</span>&gt; q;  <span class="comment">//声明存储int类型数据的队列</span></span><br></pre></td></tr></table></figure><h3 id="返回队首元素"><a href="#返回队首元素" class="headerlink" title="返回队首元素"></a>返回队首元素</h3><p>基本语法：<code>q.front()</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">q.<span class="built_in">front</span>();  <span class="comment">//返回队首元素</span></span><br></pre></td></tr></table></figure><h3 id="返回队尾元素"><a href="#返回队尾元素" class="headerlink" title="返回队尾元素"></a>返回队尾元素</h3><p>基本语法：<code>q.back()</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">q.<span class="built_in">back</span>();  <span class="comment">//返回队尾元素</span></span><br></pre></td></tr></table></figure><h3 id="返回队列的大小"><a href="#返回队列的大小" class="headerlink" title="返回队列的大小"></a>返回队列的大小</h3><p>基本语法：<code>q.size()</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">q.<span class="built_in">size</span>();  <span class="comment">//返回队列的大小</span></span><br></pre></td></tr></table></figure><h3 id="判断队列是否为空"><a href="#判断队列是否为空" class="headerlink" title="判断队列是否为空"></a>判断队列是否为空</h3><p>基本语法：<code>q.empty()</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">q.<span class="built_in">empty</span>();  <span class="comment">//如果队列为空返回true，否则返回false</span></span><br></pre></td></tr></table></figure><h3 id="入队操作"><a href="#入队操作" class="headerlink" title="入队操作"></a>入队操作</h3><p>基本语法：<code>s.push(elem)</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.<span class="built_in">push</span>(<span class="number">1</span>);  <span class="comment">//向队尾添加元素1</span></span><br></pre></td></tr></table></figure><h3 id="出队操作"><a href="#出队操作" class="headerlink" title="出队操作"></a>出队操作</h3><p>基本语法：<code>s.pop()</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s,<span class="built_in">pop</span>();  <span class="comment">//从队尾移除第一个元素</span></span><br></pre></td></tr></table></figure><h1 id="pair"><a href="#pair" class="headerlink" title="pair"></a>pair</h1><h2 id="基本定义-2"><a href="#基本定义-2" class="headerlink" title="基本定义"></a>基本定义</h2><p><code>pair</code>可以将两个元素绑定在一起作为一个合成元素，可以节省编码时间。  </p><h2 id="栈的常用操作-2"><a href="#栈的常用操作-2" class="headerlink" title="栈的常用操作"></a>栈的常用操作</h2><h3 id="头文件-2"><a href="#头文件-2" class="headerlink" title="头文件"></a>头文件</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br></pre></td></tr></table></figure><p>由于<code>map</code>的内部实现中设计<code>pair</code>，就不需要额外再去添加<code>utility</code>头文件了。  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="构造pair容器"><a href="#构造pair容器" class="headerlink" title="构造pair容器"></a>构造pair容器</h3><p>基本语法：<code>pair &lt;Typename1,Typename2&gt; p</code>  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pair &lt;<span class="type">int</span>,<span class="type">float</span>&gt; p;</span><br><span class="line"><span class="comment">//pair有两个参数，分别对应first和second的数据类型，它们可以是任意基本数据类型或应用</span></span><br><span class="line"><span class="comment">//该代码定义了一个新的变量p，其两个参数分别为int和float类型</span></span><br></pre></td></tr></table></figure><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>基本语法：<code>pair &lt;Typename1,Typename2&gt; p(Value1,Value2)</code>  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pair &lt;<span class="type">int</span>,<span class="type">float</span>&gt; <span class="built_in">p</span>(<span class="number">100</span>,<span class="number">3.14</span>);</span><br><span class="line"><span class="comment">//用pair定义一个变量p，其两个参数分别是int和float类型，初始值为100和3.14</span></span><br></pre></td></tr></table></figure><h3 id="元素访问"><a href="#元素访问" class="headerlink" title="元素访问"></a>元素访问</h3><p>可以把<code>pair</code>定义过的东西看作一个二元结构体，该结构体中的两个元素分别是<code>first</code>和<code>second</code>，基本语法：<code>p.first</code> <code>p.first</code>  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pair &lt;<span class="type">int</span>, <span class="type">float</span>&gt; <span class="built_in">p</span>(<span class="number">100</span>, <span class="number">3.14</span>);</span><br><span class="line">cout &lt;&lt; p.first &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; p.second &lt;&lt; endl;  <span class="comment">//输出结果为100 3.14</span></span><br></pre></td></tr></table></figure><h3 id="对变量进行赋值"><a href="#对变量进行赋值" class="headerlink" title="对变量进行赋值"></a>对变量进行赋值</h3><p>如果使用<code>pair</code>定义了一个变量，对其赋值需要使用<code>make_pair</code>函数（利用结构体的写法分别对其first和second赋值也是可以的），基本语法：<code>make_pair(Value1,Value2)</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pair &lt;<span class="type">int</span>, <span class="type">float</span>&gt; p;  <span class="comment">//定义p</span></span><br><span class="line">p = <span class="built_in">make_pair</span>(<span class="number">100</span>, <span class="number">3.14</span>);  <span class="comment">//使用make_pair函数进行赋值</span></span><br><span class="line">cout &lt;&lt; p.first &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; p.second &lt;&lt; endl;  <span class="comment">//输出结果为100 3.14</span></span><br></pre></td></tr></table></figure><h3 id="比较大小"><a href="#比较大小" class="headerlink" title="比较大小"></a>比较大小</h3><p>两个<code>pair</code>类型之间可以进行大小比较，比较规则是先以<code>first</code>的大小作为标准，只有当<code>first</code>相等时才会判别<code>second</code>大小。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 教程 </tag>
            
            <tag> C++ </tag>
            
            <tag> STL </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>穷竭搜索</title>
      <link href="/archives/1857aa15.html"/>
      <url>/archives/1857aa15.html</url>
      
        <content type="html"><![CDATA[<hr><h1 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h1><p>在一个函数中再次调用该函数自身的行为叫做递归，这样的函数被称作递归函数。  </p><p>例如，想要编写一个阶乘的函数<code>int fact(int n)</code>，使用循环来实现是完全可以的。但是根据阶乘的递推式<code>n!=n×(n-1)!</code>，我们可以写成如下形式：  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fact</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!n)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> n * <span class="built_in">fact</span>(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">fact</span>(n));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在编写一个递归函数时，函数的停止条件是必须存在的。在刚刚的例子中，当<code>n=0</code>时<code>fact</code>并不是继续调用自身，而是直接返回<code>1</code>。  </p><p>如果没有这一条件存在，函数就会无限地递归下去，程序就会失控崩溃了。  </p><h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><p>栈（<code>Stack</code>）是支持<code>push</code>和<code>pop</code>两种操作的数据结构。<code>push</code>是在栈的顶端放入一组数据的操作。反之，<code>pop</code>是从其顶端取出一组数据的操作。因此，最后进入栈的一组数据可以最先被取出（这种行为被叫做<code>LIFO:Last In First Out</code>，即后进先出）。  </p><p>通过使用数组或者链表等结构可以很容易实现栈，同时，在<code>C++</code>标准库中，有相应的<code>STL</code>容器去完成该操作。  </p><p>函数调用的过程是通过使用栈实现的。因此，递归函数的递归过程也可以改用栈上的操作来实现。  </p><p>以下是使用<code>stack</code>的例子：  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; s;  <span class="comment">//声明存储int类型数据的栈</span></span><br><span class="line">    s.<span class="built_in">push</span>(<span class="number">1</span>);  <span class="comment">//将元素1压入栈  &#123;1&#125;</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, s.<span class="built_in">size</span>());  <span class="comment">//输出栈中元素的个数 1</span></span><br><span class="line">    <span class="keyword">if</span> (s.<span class="built_in">empty</span>())  <span class="comment">//判断栈是否为空  栈不为空</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;栈为空\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;栈不为空\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, s.<span class="built_in">top</span>());  <span class="comment">//返回栈顶元素</span></span><br><span class="line">    s.<span class="built_in">push</span>(<span class="number">2</span>);  <span class="comment">//将元素2压入栈  &#123;1,2&#125;</span></span><br><span class="line">    s.<span class="built_in">push</span>(<span class="number">3</span>);  <span class="comment">//将元素3压入栈  &#123;1,2,3&#125;</span></span><br><span class="line">    s.<span class="built_in">pop</span>();  <span class="comment">//从栈顶移除元素  &#123;1,2&#125;</span></span><br><span class="line">    s.<span class="built_in">pop</span>();  <span class="comment">//从栈顶移除元素  &#123;1&#125;</span></span><br><span class="line">    s.<span class="built_in">pop</span>();  <span class="comment">//从栈顶移除元素  &#123;&#125;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><p>队列（<code>Queue</code>）与栈一样支持<code>push</code>和<code>pop</code>两个操作。但与栈不同的是，<code>pop</code>完成的不是去除最顶端的元素，而是取出最底端的元素。也就是说最初放入的元素能够最先被取出（这种行为被叫做<code>FIFO:First In First Out</code>，即先进先出）。  </p><p>如同栈一样，队列也预先设置了相应的<code>STL</code>容器去实现这些操作。  </p><p>以下是使用<code>queue</code>的例子：  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; s;  <span class="comment">//声明存储int类型数据的队列</span></span><br><span class="line">    s.<span class="built_in">push</span>(<span class="number">1</span>);  <span class="comment">//将元素1放入队尾  &#123;1&#125;</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, s.<span class="built_in">size</span>());  <span class="comment">//输出队列中元素的个数 1</span></span><br><span class="line">    <span class="keyword">if</span> (s.<span class="built_in">empty</span>())  <span class="comment">//判断栈是否为空  队列不为空</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;队列为空\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;队列不为空\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, s.<span class="built_in">front</span>());  <span class="comment">//返回队首元素</span></span><br><span class="line">    s.<span class="built_in">push</span>(<span class="number">2</span>);  <span class="comment">//将元素2放入队尾  &#123;1,2&#125;</span></span><br><span class="line">    s.<span class="built_in">push</span>(<span class="number">3</span>);  <span class="comment">//将元素3放入队尾  &#123;1,2,3&#125;</span></span><br><span class="line">    s.<span class="built_in">pop</span>();  <span class="comment">//从队首移除元素  &#123;2,3&#125;</span></span><br><span class="line">    s.<span class="built_in">pop</span>();  <span class="comment">//从队首移除元素  &#123;3&#125;</span></span><br><span class="line">    s.<span class="built_in">pop</span>();  <span class="comment">//从队首移除元素  &#123;&#125;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="深度优先搜索"><a href="#深度优先搜索" class="headerlink" title="深度优先搜索"></a>深度优先搜索</h1><p>深度优先搜索（<code>DFS</code>，<code>Depth-First Search</code>）是搜索的手段之一。它从某个状态开始，不断地转移状态直到无法转移，然后回退到前一步的状态，继续转移到其他状态，如此不断重复，直至找到最终的解。例如求解数独，首先在某个格子内填入适当的数字，然后再继续在下一个格子内填入数字，如此继续下去。如果发现某个格子无解了，就放弃前一个格子上选择的数字，改用其他可行的数字。根据深度优先搜索的特点，采用递归函数实现比较简单。  </p><p>深度优先搜索从最开始的状态出发，遍历所有可以到达的状态。由此可以对所有的状态进行操作，或者列举出所有的状态。  </p><p><img src="/img/posts/%E7%A9%B7%E7%AB%AD%E6%90%9C%E7%B4%A2/DFS%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BB%E7%9A%84%E9%A1%BA%E5%BA%8F.png" alt="DFS状态转移的顺序"></p><h2 id="部分和问题"><a href="#部分和问题" class="headerlink" title="部分和问题"></a>部分和问题</h2><h3 id="测评链接"><a href="#测评链接" class="headerlink" title="测评链接"></a>测评链接</h3><p><a href="https://www.luogu.com.cn/problem/U221431">部分和问题</a></p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定整数a<sub>1</sub>、a<sub>2</sub>、…、a<sub>n</sub>，判断是否可以从中选出若干数，使它们的和恰好为<code>k</code>。  </p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>第一行有两个整数<code>n</code>和<code>k</code>，分别表示数字的个数。  </p><p>第二行有<code>n</code>个整数，表示给出的<code>n</code>个整数a<sub>i</sub>。  </p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p><code>Yes</code>或<code>No</code></p><h3 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h3><p><strong>输入 #1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4 13 </span><br><span class="line">1 2 4 7 </span><br></pre></td></tr></table></figure><p><strong>输出 #1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yes</span><br></pre></td></tr></table></figure><p><strong>输入 #2</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4 15 </span><br><span class="line">1 2 4 7 </span><br></pre></td></tr></table></figure><p><strong>输出 #2</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">No</span><br></pre></td></tr></table></figure><h3 id="限制条件"><a href="#限制条件" class="headerlink" title="限制条件"></a>限制条件</h3><ul><li><p>1 ≤ <code>n</code> ≤ 20</p></li><li><p>-10<sup>8</sup> ≤ a<sub>i</sub> ≤ 10<sup>8</sup></p></li><li><p>-10<sup>8</sup> ≤ <code>k</code> ≤ 10<sup>8</sup></p></li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>从a<sub>1</sub>开始按顺序决定每个数加或不加，在全部<code>n</code>个数都决定后再判断它们的和是不是<code>k</code>即可。因为状态数是2<sup>n+1</sup>，所以复杂度是O(2<sup>n</sup>)。  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, k;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> sum)</span>  <span class="comment">//已经从前i项得到了和sum，然后对于i项之后的数据进行处理</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//如果n项都计算过了，则返回结果</span></span><br><span class="line">    <span class="keyword">if</span> (i == n)</span><br><span class="line">        <span class="keyword">return</span> sum == k;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加上a[i]的情况</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">dfs</span>(i + <span class="number">1</span>, sum + a[i]))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不加a[i]的情况</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">dfs</span>(i + <span class="number">1</span>, sum))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果上述这三种情况都不行，则返回false</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//数据输入部分</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;k);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//主体部分</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Yes\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;No\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="广度优先搜索"><a href="#广度优先搜索" class="headerlink" title="广度优先搜索"></a>广度优先搜索</h1><p>广度优先搜索（<code>BFS</code>，<code>Breadth-First Search</code>）也是搜索的手段之一。它与深度优先搜索类似，从某个状态出发探索所有可以到达的状态。  </p><p>与深度优先搜索的不同之处在于搜索的顺序，广度优先搜索总是先搜索距离初始状态近的状态。也就是说，它是按照开始状态<code>-&gt;</code>只需<code>1</code>次转移就可以到达的所有状态<code>-&gt;</code>只需<code>2</code>次转移就可以到达的所有状态<code>-&gt;</code>……这样的顺序进行搜索。  </p><p>对于同一个状态，广度优先搜索只经过一次，因此复杂度O(状态数×转移的方式)。  </p><p><img src="/img/posts/%E7%A9%B7%E7%AB%AD%E6%90%9C%E7%B4%A2/BFS%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BB%E7%9A%84%E9%A1%BA%E5%BA%8F.png" alt="BFS状态转移的顺序"></p><p>深度优先搜索（隐式地）利用了栈进行计算，而广度优先搜索则利用了队列。搜索时首先将初始状态添加到队列里，此后从队列的最前端不断取出状态，把从该状态可以转移到的状态中尚未访问过的部分加入队列，如此往复，直至队列被取空或找到了问题的解。通过观察这个队列，我们就可以知道所有的状态都是按照距初始状态由近及远的顺序遍历的。  </p><h2 id="迷宫最短路径"><a href="#迷宫最短路径" class="headerlink" title="迷宫最短路径"></a>迷宫最短路径</h2><h3 id="测评链接-1"><a href="#测评链接-1" class="headerlink" title="测评链接"></a>测评链接</h3><p><a href="https://www.luogu.com.cn/problem/U221540">迷宫的最短路径</a></p><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个大小为<code>N×M</code>的迷宫。迷宫由通道和墙壁组成，每一步可以向邻接的上下左右四格的通道移动。  </p><p>请求出从起点到终点所需的最小步数。  </p><p><strong>本题假定从起点一定可以移动到终点。</strong></p><h3 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h3><p>第一行有两个整数<code>N</code>和<code>M</code>，分别表示迷宫的行数和列数。</p><p>接下来<code>N</code>行，每行<code>M</code>个字符，<code>#</code>表示墙壁，<code>.</code>表示通道，<code>S</code>表示起点，<code>G</code>表示终点。  </p><h3 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h3><p>一个整数表示从起点到终点所需的最小步数。  </p><h3 id="输入输出样例-1"><a href="#输入输出样例-1" class="headerlink" title="输入输出样例"></a>输入输出样例</h3><p><strong>输入 #1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">10 10</span><br><span class="line">#S######.#</span><br><span class="line">......#..#</span><br><span class="line">.#.##.##.#</span><br><span class="line">.#........</span><br><span class="line">##.##.####</span><br><span class="line">....#....#</span><br><span class="line">.#######.#</span><br><span class="line">....#.....</span><br><span class="line">.####.###.</span><br><span class="line">....#...G#</span><br></pre></td></tr></table></figure><p><strong>输出 #1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">22</span><br></pre></td></tr></table></figure><h3 id="限制条件-1"><a href="#限制条件-1" class="headerlink" title="限制条件"></a>限制条件</h3><ul><li>2 ≤ <code>N</code>,<code>M</code> ≤ 100</li></ul><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><p>广度优先搜索按照距开始状态由近及远的顺序进行搜索，因此可以很容易地用来求最短路径、最少操作之类问题的答案。这个问题中，状态仅仅是目前所在位置的坐标，因此可以构造成<code>pair</code>或者编码成<code>int</code>来表达状态。转移的方式为四方向移动，状态数与迷宫大小是相等的，所以时间复杂度是O(4×N×M)=O(N×M)。  </p><p>在广度优先搜索中，只要将已经访问过的状态用标记管理起来，就可以很好地做到由近及远的搜索。这个问题中由于要求最短距离，因此使用<code>d[N][M]</code>数组把最短距离保存起来。初始距离全部都是0，这样只需特别判定起点，即可分辨出到达的位置和未到达的位置，气到了标记作用。  </p><p>因为要向4个不同方向移动，用二维数组<code>dir[4][2]</code>表示四个方向向量，通过循环就可以实现四个方向移动的遍历。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//由于位置是一个二元坐标，因此使用pair来定义可以节省编码时间</span></span><br><span class="line"><span class="keyword">typedef</span> pair &lt;<span class="type">int</span>, <span class="type">int</span>&gt; P;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">105</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> N, M;  <span class="comment">//用来存储地图的大小</span></span><br><span class="line"><span class="type">int</span> sx, sy;  <span class="comment">//用来存储起点坐标</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> d[MAXN][MAXN];  <span class="comment">//用来存储每个位置到起点的最近距离</span></span><br><span class="line"><span class="type">char</span> maze[MAXN][MAXN];  <span class="comment">//用来存储整个地图</span></span><br><span class="line"><span class="type">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123; &#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125; &#125;;  <span class="comment">//用来存储各个方向，分别为左上右下</span></span><br><span class="line"></span><br><span class="line">queue &lt;P&gt; q;  <span class="comment">//BFS需要使用队列，因此定义一个队列</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//数据输入部分</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;N, &amp;M);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= M; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; maze[i][j];</span><br><span class="line">            <span class="keyword">if</span> (maze[i][j] == <span class="string">&#x27;S&#x27;</span>)  <span class="comment">//记录起点坐标</span></span><br><span class="line">            &#123;</span><br><span class="line">                sx = i;</span><br><span class="line">                sy = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//主体部分</span></span><br><span class="line">    q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(sx, sy));  <span class="comment">//将起点放入队列</span></span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>())  <span class="comment">//只要队列不为空就持续循环</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//将左上右下四个位置放入队列</span></span><br><span class="line">        <span class="type">int</span> x = q.<span class="built_in">front</span>().first, y = q.<span class="built_in">front</span>().second;</span><br><span class="line">        <span class="keyword">if</span> (maze[x + dir[<span class="number">0</span>][<span class="number">0</span>]][y + dir[<span class="number">0</span>][<span class="number">1</span>]] == <span class="string">&#x27;G&#x27;</span>)  <span class="comment">//如果到达终点</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, d[x][y] + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (maze[x + dir[<span class="number">0</span>][<span class="number">0</span>]][y + dir[<span class="number">0</span>][<span class="number">1</span>]] == <span class="string">&#x27;.&#x27;</span> &amp;&amp; d[x + dir[<span class="number">0</span>][<span class="number">0</span>]][y + dir[<span class="number">0</span>][<span class="number">1</span>]] == <span class="number">0</span>)  <span class="comment">//左</span></span><br><span class="line">        &#123;</span><br><span class="line">            q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(x + dir[<span class="number">0</span>][<span class="number">0</span>], y + dir[<span class="number">0</span>][<span class="number">1</span>]));  <span class="comment">//将新位置加入队列</span></span><br><span class="line">            d[x + dir[<span class="number">0</span>][<span class="number">0</span>]][y + dir[<span class="number">0</span>][<span class="number">1</span>]] = d[x][y] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (maze[x + dir[<span class="number">1</span>][<span class="number">0</span>]][y + dir[<span class="number">1</span>][<span class="number">1</span>]] == <span class="string">&#x27;G&#x27;</span>)  <span class="comment">//如果到达终点</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, d[x][y] + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (maze[x + dir[<span class="number">1</span>][<span class="number">0</span>]][y + dir[<span class="number">1</span>][<span class="number">1</span>]] == <span class="string">&#x27;.&#x27;</span> &amp;&amp; d[x + dir[<span class="number">1</span>][<span class="number">0</span>]][y + dir[<span class="number">1</span>][<span class="number">1</span>]] == <span class="number">0</span>)  <span class="comment">//上</span></span><br><span class="line">        &#123;</span><br><span class="line">            q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(x + dir[<span class="number">1</span>][<span class="number">0</span>], y + dir[<span class="number">1</span>][<span class="number">1</span>]));  <span class="comment">//将新位置加入队列</span></span><br><span class="line">            d[x + dir[<span class="number">1</span>][<span class="number">0</span>]][y + dir[<span class="number">1</span>][<span class="number">1</span>]] = d[x][y] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (maze[x + dir[<span class="number">2</span>][<span class="number">0</span>]][y + dir[<span class="number">2</span>][<span class="number">1</span>]] == <span class="string">&#x27;G&#x27;</span>)  <span class="comment">//如果到达终点</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, d[x][y] + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (maze[x + dir[<span class="number">2</span>][<span class="number">0</span>]][y + dir[<span class="number">2</span>][<span class="number">1</span>]] == <span class="string">&#x27;.&#x27;</span> &amp;&amp; d[x + dir[<span class="number">2</span>][<span class="number">0</span>]][y + dir[<span class="number">2</span>][<span class="number">1</span>]] == <span class="number">0</span>)  <span class="comment">//右</span></span><br><span class="line">        &#123;</span><br><span class="line">            q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(x + dir[<span class="number">2</span>][<span class="number">0</span>], y + dir[<span class="number">2</span>][<span class="number">1</span>]));  <span class="comment">//将新位置加入队列</span></span><br><span class="line">            d[x + dir[<span class="number">2</span>][<span class="number">0</span>]][y + dir[<span class="number">2</span>][<span class="number">1</span>]] = d[x][y] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (maze[x + dir[<span class="number">3</span>][<span class="number">0</span>]][y + dir[<span class="number">3</span>][<span class="number">1</span>]] == <span class="string">&#x27;G&#x27;</span>)  <span class="comment">//如果到达终点</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, d[x][y] + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (maze[x + dir[<span class="number">3</span>][<span class="number">0</span>]][y + dir[<span class="number">3</span>][<span class="number">1</span>]] == <span class="string">&#x27;.&#x27;</span> &amp;&amp; d[x + dir[<span class="number">3</span>][<span class="number">0</span>]][y + dir[<span class="number">3</span>][<span class="number">1</span>]] == <span class="number">0</span>)  <span class="comment">//下</span></span><br><span class="line">        &#123;</span><br><span class="line">            q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(x + dir[<span class="number">3</span>][<span class="number">0</span>], y + dir[<span class="number">3</span>][<span class="number">1</span>]));  <span class="comment">//将新位置加入队列</span></span><br><span class="line">            d[x + dir[<span class="number">3</span>][<span class="number">0</span>]][y + dir[<span class="number">3</span>][<span class="number">1</span>]] = d[x][y] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//弹出</span></span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="深度优先搜索与广度优先搜索比较"><a href="#深度优先搜索与广度优先搜索比较" class="headerlink" title="深度优先搜索与广度优先搜索比较"></a>深度优先搜索与广度优先搜索比较</h1><p>二者都会生成所有能够遍历到的状态，因此需要对所有的状态进行处理时二者都是可行的。但是递归函数可以很简短地编写，而且状态的管理也更简单，所以大多数情况下还是用深度优先搜索实现。反之，在求取最短路径时深度优先搜索需要反复经过同样的状态，所以此时还是使用广度优先搜索为好。  </p><p>广度优先搜索会把状态逐个假如队列，因此通常需要与状态数成正比的内存空间。反之，深度优先搜索是与最大的递归深度成正比的。一般与状态数相比，递归的深度并不会太大，所以可以认为深度优先搜索更加节省内存。  </p><h1 id="剪枝"><a href="#剪枝" class="headerlink" title="剪枝"></a>剪枝</h1><p>顾名思义，穷竭搜索会把所有可能的解全都检查一遍，当解空间非常大时，复杂度也会相应变大。比如<code>n</code>个元素进行排列时状态数共有<code>n!</code>个，时间复杂度也就成了O(n!)。这样的话，即使<code>n=15</code>计算也很难较早终止。这里简单介绍一下此类情形要如何进行优化。  </p><p>深度优先搜索时，有时早已明确地知道从当前状态无论如何转移都不会存在解。这种情况下，不再继续搜索而是直接跳过，这一方法被称作剪枝。  </p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 递归函数 </tag>
            
            <tag> 队列 </tag>
            
            <tag> 广度优先搜索 </tag>
            
            <tag> 剪枝 </tag>
            
            <tag> 深度优先搜索 </tag>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML语法</title>
      <link href="/archives/25e991bb.html"/>
      <url>/archives/25e991bb.html</url>
      
        <content type="html"><![CDATA[<hr><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="由来"><a href="#由来" class="headerlink" title="由来"></a>由来</h2><p>        HTML的英文全称是 Hyper Text Markup Language，即超文本标记语言。HTML是由Web的发明者 Tim Berners-Lee和同事 Daniel W. Connolly于1990年创立的一种标记语言，它是标准通用化标记语言SGML的应用。用HTML编写的超文本文档称为HTML文档，它能独立于各种操作系统平台(如UNIX， Windows等)。使用HTML，将所需要表达的信息按某种规则写成HTML文件，通过专用的浏览器来识别，并将这些HTML文件“翻译”成可以识别的信息，即现在所见到的网页。<br>        自1990年以来，HTML就一直被用作万维网的信息表示语言，使用HTML描述的文件需要通过web浏览器显示出效果。HTML是一种建立网页文件的语言，通过标记式的指令(Tag)，将影像、声音、图片、文字动画、影视等内容显示出来。事实上，每一个HTML文档都是一种静态的网页文件，这个文件里面包含了HTML指令代码，这些指令代码并不是一种程序语言，只是一种排版网页中资料显示位置的标记结构语言，易学易懂，非常简单。HTML的普遍应用就是带来了超文本的技术―通过单击鼠标从一个主题跳转到另一个主题，从一个页面跳转到另一个页面，与世界各地主机的文件链接超文本传输协议规定了浏览器在运行HTML文档时所遵循的规则和进行的操作。HTTP的制定使浏览器在运行超文本时有了统一的规则和标准。<br>        万维网（world wide web，简称www）上的一个超媒体文档称之为一个页面（外语：page）。作为一个组织或者个人在万维网上放置开始点的页面称为主页（外语：Homepage）或首页，主页中通常包括有指向其他相关页面或其他节点的指针（超级链接），所谓超级链接，就是一种统一资源定位器（Uniform Resource Locator，外语缩写：URL）指针，通过激活（点击）它，可使浏览器方便地获取新的网页。这也是HTML获得广泛应用的最重要的原因之一。在逻辑上将视为一个整体的一系列页面的有机集合称为网站（Website或Site）。超文本标记语言（英文缩写：HTML）是为“网页创建和其它可在网页浏览器中看到的信息”设计的一种标记语言。<br>        网页的本质就是超文本标记语言，通过结合使用其他的Web技术（如：脚本语言、公共网关接口、组件等），可以创造出功能强大的网页。因而，超文本标记语言是万维网（Web）编程的基础，也就是说万维网是建立在超文本基础之上的。超文本标记语言之所以称为超文本标记语言，是因为文本中包含了所谓“超级链接”点。  </p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>        超文本标记语言是标准通用标记语言下的一个应用，也是一种规范，一种标准，它通过标记符号来标记要显示的网页中的各个部分。网页文件本身是一种文本文件，通过在文本文件中添加标记符，可以告诉浏览器如何显示其中的内容（如：文字如何处理，画面如何安排，图片如何显示等）。浏览器按顺序阅读网页文件，然后根据标记符解释和显示其标记的内容，对书写出错的标记将不指出其错误，且不停止其解释执行过程，编制者只能通过显示效果来分析出错原因和出错部位。但需要注意的是，对于不同的浏览器，对同一标记符可能会有不完全相同的解释，因而可能会有不同的显示效果。  </p><h1 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h1><p>我使用的开发工具是<code>Visual Studio Code</code>  </p><p>下载链接：<a href="https://code.visualstudio.com/">Visual Studio Code官网</a></p><h1 id="常用浏览器及其内核"><a href="#常用浏览器及其内核" class="headerlink" title="常用浏览器及其内核"></a>常用浏览器及其内核</h1><table><thead><tr><th align="center">浏览器</th><th align="center">内核</th></tr></thead><tbody><tr><td align="center">谷歌(Chrome)</td><td align="center">Blink</td></tr><tr><td align="center">火狐（Firefox）</td><td align="center">Gecko</td></tr><tr><td align="center">Safair</td><td align="center">Wenkit</td></tr><tr><td align="center">Opera</td><td align="center">Blink</td></tr><tr><td align="center">IE</td><td align="center">Trident</td></tr></tbody></table><p>这里推荐使用<strong>谷歌浏览器(Chrome)（Blink）</strong></p><h1 id="Visual-Studio-Code-简介"><a href="#Visual-Studio-Code-简介" class="headerlink" title="Visual Studio Code 简介"></a>Visual Studio Code 简介</h1><p>        Visual Studio Code（简称“VS Code”  ）是Microsoft在2015年4月30日Build开发者大会上正式宣布一个运行于 Mac OS X、Windows和 Linux 之上的，针对于编写现代Web和云应用的跨平台源代码编辑器，  可在桌面上运行，并且可用于Windows，macOS和Linux。它具有对JavaScript，TypeScript和Node.js的内置支持，并具有丰富的其他语言（例如C++，C＃，Java，Python，PHP，Go）和运行时（例如.NET和Unity）扩展的生态系统。  </p><h1 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h1><p>VS Code可以安装许多插件，为了更方便地书写和调试代码，这里推荐几个插件。  </p><h2 id="简体中文插件"><a href="#简体中文插件" class="headerlink" title="简体中文插件"></a>简体中文插件</h2><p>VS Code默认是英文界面，使用该插件可以将软件内的所有语言改成中文。  </p><p>插件名：<code>Chinese (Simplified) (简体中文) Language Pack for Visual Studio Code</code></p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%E6%8F%92%E4%BB%B6.png" alt="简体中文插件"></p><h2 id="默认浏览器打开插件"><a href="#默认浏览器打开插件" class="headerlink" title="默认浏览器打开插件"></a>默认浏览器打开插件</h2><p>由于我们调试的时候需要使用浏览器进行运行，但是每次打开浏览器又会非常麻烦，因此安装该插件可以直接使用快捷键进行打开，节省了大量的时间。  </p><p>快捷键：<code>Alt + B</code>  </p><p>插件名：<code>Open In Default Browser</code></p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E9%BB%98%E8%AE%A4%E6%B5%8F%E8%A7%88%E5%99%A8%E6%89%93%E5%BC%80%E6%8F%92%E4%BB%B6.png" alt="默认浏览器打开插件"></p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>首先将谷歌浏览器设置为默认浏览器，然后创建一个后缀名为<code>html</code>的文件，使用VS Code打开文件所在的文件夹。  </p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E5%88%9D%E5%A7%8B%E7%95%8C%E9%9D%A2.png" alt="初始界面"></p><h1 id="HTML基本骨架"><a href="#HTML基本骨架" class="headerlink" title="HTML基本骨架"></a>HTML基本骨架</h1><p>输入一个叹号（<code>!</code>）然后摁回车键可以得到一段初始化好的代码 ，这段代码被称为HTML基本骨架</p><p>注意一定要是英文的叹号。  </p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E5%88%9D%E5%A7%8B%E4%BB%A3%E7%A0%81.png" alt="初始代码"> </p><h1 id="基本骨架含义"><a href="#基本骨架含义" class="headerlink" title="基本骨架含义"></a>基本骨架含义</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span>  <span class="comment">&lt;!-- 一种通用标记语言的文档类型声明，告诉标准通用标记语言解析器，应当使用什么文档类型来进行解析 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span>  <span class="comment">&lt;!-- 定义语言的种类，其中en表示English，表示英文网页 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>  <span class="comment">&lt;!-- 表示网页头部的部分 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span>  <span class="comment">&lt;!-- 通过charset属性来规定HTML文档应该使用哪种字符编码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span>  <span class="comment">&lt;!-- 代表标签网页的标题，即标签页的名字 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>  <span class="comment">&lt;!-- 代表网页的主体 --&gt;</span></span><br><span class="line">    Hello world!  <span class="comment">&lt;!-- 网页的内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以使用快捷键<code>Alt + B</code>在浏览器中打开，切记在运行之前需要使用快捷键<code>Ctrl + S</code>进行保存。</p><p>结果展示：  </p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/Hello.png" alt="Hello world!"></p><h1 id="双标签与单标签"><a href="#双标签与单标签" class="headerlink" title="双标签与单标签"></a>双标签与单标签</h1><p>标签一共分为两种，一种叫做双标签，另一种叫单标签。  </p><p>双标签：前部分叫开始标签，后部分叫结束标签，两部分之间包裹内容。  </p><p>例：  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>双标签演示<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br></pre></td></tr></table></figure><p>单标签：自成一体，无法包裹内容  </p><p>例：  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h1><h2 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h2><p>指目录下的绝对位置，可直接到达目标位置，通常从盘符开始的路径。</p><p>例：<code>E:/Workspaces/hexo/themes/butterfly/source/img/posts/HTML语法/HTML语法/img/壁纸.jpg</code></p><h2 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h2><p>同级目录：<code>./</code>   </p><p>下级目录：<code>文件夹名/</code>   </p><p>上级目录：<code>../</code>  </p><p>例：<code>img/壁纸.jpg</code></p><h1 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h1><p>属性指的是标签的属性，需要借助标签进行设置。  </p><p>属性的注意点：  </p><ul><li><p>标签的属性写在开始标签内部</p></li><li><p>标签上可以同时存在多个属性</p></li><li><p>属性之间以空格隔开</p></li><li><p>标签名与属性之间必须以空格隔开</p></li><li><p>属性之间没有顺序之分</p></li></ul><p>例：  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/壁纸.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;图片加载失败&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中<code>img</code>是标签，<code>src</code>和<code>alt</code>均为属性，而引号里面的东西为属性的值，即属性值。  </p><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><p>注释内容一般是给开发者看的，并不会显示在实际的网页中，基本写法是用<code>&lt;!-- --&gt;</code>将注释内容包裹起来。  </p><p>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注释内容 --&gt;</span></span><br></pre></td></tr></table></figure><h1 id="标题标签"><a href="#标题标签" class="headerlink" title="标题标签"></a>标题标签</h1><p>标题分为1~6级别标题，重要程度依次递减，基本写法是用<code>&lt;h1&gt; &lt;/h1&gt;</code>将标题内容包裹起来，其中h后面的数字表示标题的级别，最多可以写到6。  </p><p>特点：</p><ul><li><p>文字默认加粗</p></li><li><p>依次减小</p></li><li><p>独占一行</p></li></ul><p>例：书写1~6级标题  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>二级标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>三级标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>四级标题<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h5</span>&gt;</span>五级标题<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h6</span>&gt;</span>六级标题<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E6%A0%87%E9%A2%98%E6%A0%87%E7%AD%BE.png" alt="标题标签"></p><h1 id="段落标签"><a href="#段落标签" class="headerlink" title="段落标签"></a>段落标签</h1><p>一个段落，分段显示，基本写法是用<code>&lt;p&gt; &lt;/p&gt;</code>将段落内容包裹起来。  </p><p>特点：</p><ul><li><p>段落之间存在间隙</p></li><li><p>独占一行</p></li></ul><p>例：使用段落标签书写I have a dream前三段  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>I am happy to join with you today in what will go down in history as the greatest demonstration for freedom in the history of our nation.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Five score years ago, a great American, in whose symbolic shadow we stand today, signed the Emancipation Proclamation. This momentous decree came as a great beacon light of hope to millions of Negro slaves who had been seared in the flames of withering injustice. It came as a joyous daybreak to end the long night of bad captivity.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>But one hundred years later, the Negro still is not free. One hundred years later, the life of the Negro is still sadly crippled by the manacles of segregation and the chains of discrimination. One hundred years later, the Negro lives on a lonely island of poverty in the midst of a vast ocean of material prosperity. One hundred years later, the Negro is still languished in the corners of American society and finds himself an exile in his own land. And so we&#x27;ve come here today to dramatize a shameful condition.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E6%AE%B5%E8%90%BD%E6%A0%87%E7%AD%BE.png" alt="段落标签"></p><h1 id="换行标签"><a href="#换行标签" class="headerlink" title="换行标签"></a>换行标签</h1><p>强制换行，基本写法是直接写一个<code>&lt;br&gt;</code>  。</p><p>特点：  </p><ul><li><p>单标签</p></li><li><p>让文字强制换行</p></li></ul><p>例：书写I have a dream前三段，并且每段间隔三行  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>I am happy to join with you today in what will go down in history as the greatest demonstration for freedom in the history of our nation.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Five score years ago, a great American, in whose symbolic shadow we stand today, signed the Emancipation Proclamation. This momentous decree came as a great beacon light of hope to millions of Negro slaves who had been seared in the flames of withering injustice. It came as a joyous daybreak to end the long night of bad captivity.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>But one hundred years later, the Negro still is not free. One hundred years later, the life of the Negro is still sadly crippled by the manacles of segregation and the chains of discrimination. One hundred years later, the Negro lives on a lonely island of poverty in the midst of a vast ocean of material prosperity. One hundred years later, the Negro is still languished in the corners of American society and finds himself an exile in his own land. And so we&#x27;ve come here today to dramatize a shameful condition.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E6%8D%A2%E8%A1%8C%E6%A0%87%E7%AD%BE.png" alt="换行标签"></p><h1 id="水平线标签"><a href="#水平线标签" class="headerlink" title="水平线标签"></a>水平线标签</h1><p>主题的分割转换，基本写法是直接写一个<code>&lt;hr&gt;</code>。</p><p>特点：  </p><ul><li><p>单标签</p></li><li><p>在页面中显示一条水平线</p></li></ul><p>例：书写I have a dream前三段，并且每段使用一个水平线隔开  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>I am happy to join with you today in what will go down in history as the greatest demonstration for freedom in the history of our nation.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Five score years ago, a great American, in whose symbolic shadow we stand today, signed the Emancipation Proclamation. This momentous decree came as a great beacon light of hope to millions of Negro slaves who had been seared in the flames of withering injustice. It came as a joyous daybreak to end the long night of bad captivity.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>But one hundred years later, the Negro still is not free. One hundred years later, the life of the Negro is still sadly crippled by the manacles of segregation and the chains of discrimination. One hundred years later, the Negro lives on a lonely island of poverty in the midst of a vast ocean of material prosperity. One hundred years later, the Negro is still languished in the corners of American society and finds himself an exile in his own land. And so we&#x27;ve come here today to dramatize a shameful condition.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E6%B0%B4%E5%B9%B3%E7%BA%BF%E6%A0%87%E7%AD%BE.png" alt="水平线标签"></p><h1 id="文本格式化标签"><a href="#文本格式化标签" class="headerlink" title="文本格式化标签"></a>文本格式化标签</h1><p>主要功能：  </p><ol><li><p>文字加粗  <code>&lt;b&gt; &lt;/b&gt;</code>    <code>&lt;strong&gt; &lt;/strong&gt;</code></p></li><li><p>下划线  <code>&lt;u&gt; &lt;/u&gt;</code>    <code>&lt;ins&gt; &lt;/ins&gt;</code></p></li><li><p>倾斜  <code>&lt;i&gt; &lt;/i&gt;</code>    <code>&lt;em&gt; &lt;/em&gt;</code></p></li><li><p>删除线  <code>&lt;s&gt; &lt;/s&gt;</code>    <code>&lt;del&gt; &lt;/del&gt;</code></p></li></ol><p>长的标签是为了突出重要性，用来强调语境，视觉效果上是完全相同的。  </p><p>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">b</span>&gt;</span>加粗<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">strong</span>&gt;</span>加粗<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">u</span>&gt;</span>下划线<span class="tag">&lt;/<span class="name">u</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ins</span>&gt;</span>下划线<span class="tag">&lt;/<span class="name">ins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span>&gt;</span>倾斜<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">em</span>&gt;</span>倾斜<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">s</span>&gt;</span>删除线<span class="tag">&lt;/<span class="name">s</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">del</span>&gt;</span>删除线<span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E6%96%87%E6%9C%AC%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%A0%87%E7%AD%BE.png" alt="文本格式化标签"></p><h1 id="图片标签"><a href="#图片标签" class="headerlink" title="图片标签"></a>图片标签</h1><p>在网页中显示图片，基本写法是<code>&lt;img src=&quot;&quot; alt=&quot;&quot;&gt;</code>。  </p><p>特点：  </p><ul><li><p>单标签</p></li><li><p><code>img</code>标签如果要展示对应的效果，需要借助标签的属性进行设置。</p></li></ul><p>属性：  </p><ul><li><p><code>src</code>：添加图片的路径，从而显示图片</p></li><li><p><code>alt</code>：图片加载失败时进行文本替换</p></li><li><p><code>title</code>：鼠标悬停时显示文字</p></li><li><p><code>width</code>和<code>height</code>：表示图片的宽度和高度，如果只设置一个，将会自动比例缩放（图片不会变形），默认单位为像素（px）</p></li></ul><p>例：添加一张相对路径为<code>img/壁纸.jpg</code>的图片，加载失败显示文字为“图片加载失败”，鼠标悬停文字为“壁纸”，宽度和高度分别是800和500  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/壁纸.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;图片加载失败&quot;</span> <span class="attr">title</span>=<span class="string">&quot;壁纸&quot;</span> <span class="attr">width</span>=<span class="string">&quot;800&quot;</span> <span class="attr">height</span>=<span class="string">&quot;500&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E5%9B%BE%E7%89%87%E6%A0%87%E7%AD%BE.png" alt="图片标签"></p><h1 id="音频标签"><a href="#音频标签" class="headerlink" title="音频标签"></a>音频标签</h1><p>在页面中插入音频，基本写法是<code>&lt;audio src=&quot;&quot;&gt;&lt;/audio&gt;</code>。  </p><p>属性：  </p><ul><li><p><code>src</code>：添加音频的路径</p></li><li><p><code>controls</code>：显示播放的控件</p></li><li><p><code>autoplay</code>：自动播放（部分浏览器不支持）</p></li><li><p><code>loop</code>：循环播放</p></li></ul><p>例：添加一个相对路径为<code>audio/Aimer - LAST STARDUST.mp3</code>的音频，添加显示播放的控件，设置为自动播放，循环播放  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;audio/Aimer - LAST STARDUST.mp3&quot;</span> <span class="attr">controls</span> <span class="attr">autoplay</span> <span class="attr">loop</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E9%9F%B3%E9%A2%91%E6%A0%87%E7%AD%BE.png" alt="音频标签"></p><h1 id="视频标签"><a href="#视频标签" class="headerlink" title="视频标签"></a>视频标签</h1><p>在页面中插入视频，基本写法是<code>&lt;video src=&quot;&quot;&gt;&lt;/video&gt;</code>。  </p><p>属性：  </p><ul><li><p><code>src</code>：添加视频的路径</p></li><li><p><code>controls</code>：显示播放的控件</p></li><li><p><code>autoplay</code>：自动播放（谷歌浏览器中需要配合<code>muted</code>实现静音播放）</p></li><li><p><code>loop</code>：循环播放</p></li><li><p><code>width</code>和<code>height</code>：控制宽度和高度</p></li></ul><p>例：添加一个相对路径为<code>video/CG.mp4</code>的音频，添加显示播放的控件，设置为自动静音播放，循环播放，宽度和高度设置为800和500</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;video/CG.mp4&quot;</span> <span class="attr">controls</span> <span class="attr">autoplay</span> <span class="attr">muted</span> <span class="attr">loop</span> <span class="attr">width</span>=<span class="string">&quot;800&quot;</span> <span class="attr">height</span>=<span class="string">&quot;500&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E8%A7%86%E9%A2%91%E6%A0%87%E7%AD%BE.png" alt="视频标签"></p><h1 id="链接标签"><a href="#链接标签" class="headerlink" title="链接标签"></a>链接标签</h1><p>点击之后，从一个页面跳转至另外一个页面，基本写法是<code>&lt;a href=&quot;&quot;&gt;&lt;/a&gt;</code>其中<code>href</code>后面写跳转到的链接，两个标签之间写显示的文字。  </p><p>在实际开发过程中，可能遇到链接还没有制作的过程，因此可以在<code>href</code>后面写<code>#</code>作为空链接进行占位。  </p><p>属性：</p><ul><li><code>target</code>：有两个属性值<ul><li><p><code>_self</code>：默认值，在当前窗口中跳转（覆盖原网页）</p></li><li><p>·_blank`：在新窗口中跳转（保留原网页）</p></li></ul></li></ul><p>例：制作两个链接，分别在当前窗口跳转和在新窗口中跳转，跳转地址均为该博客  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://big-worth.github.io/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_self&quot;</span>&gt;</span>当前窗口跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://big-worth.github.io/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>新窗口跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E9%93%BE%E6%8E%A5%E6%A0%87%E7%AD%BE.png" alt="链接标签"></p><h1 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h1><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p>在网页中表示一组无顺序之分的列表。  </p><p>标签名：</p><ul><li><p><code>ul</code>：表示无序列表的整体，用于包裹<code>li</code>标签</p></li><li><p><code>li</code>：表示无序列表的每一项，用于包含每一行的内容</p></li></ul><p>显示特点：列表的每一项前默认显示圆点标识。  </p><p>注意点：<code>ul</code>标签中只允许包含<code>li</code>标签，<code>li</code>标签可以包含任意内容。</p><p>例：制作一个无序列表，内容是从星期一至星期日  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>星期一<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>星期二<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>星期三<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>星期四<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>星期五<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>星期六<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>星期日<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果显示：  </p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E6%97%A0%E5%BA%8F%E5%88%97%E8%A1%A8.png" alt="无序列表"></p><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><p>在网页中表示一组有顺序之分的列表。  </p><p>标签名：</p><ul><li><p><code>ol</code>：表示有序列表的整体，用于包裹<code>li</code>标签</p></li><li><p><code>li</code>：表示有序列表的每一项，用于包含每一行的内容</p></li></ul><p>显示特点：列表的每一项前默认显示序号标识。  </p><p>注意点：<code>ol</code>标签中只允许包含<code>li</code>标签，<code>li</code>标签可以包含任意内容。  </p><p>例：制作一个有序列表，内容是从星期一至星期日</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>星期一<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>星期二<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>星期三<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>星期四<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>星期五<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>星期六<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>星期日<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果显示：  </p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E6%9C%89%E5%BA%8F%E5%88%97%E8%A1%A8.png" alt="有序列表"></p><h2 id="自定义列表"><a href="#自定义列表" class="headerlink" title="自定义列表"></a>自定义列表</h2><p>在网页的地步导航中通常会使用自定义列表实现。  </p><p>标签名：  </p><ul><li><p><code>dl</code>：表示自定义列表的整体，用于包裹<code>dt</code>和<code>dd</code>标签</p></li><li><p><code>dt</code>：表示自定义列表的主题</p></li><li><p><code>dd</code>：表示自定义列表的针对主题的每一项内容</p></li></ul><p>显示特点：<code>dd</code>前会默认显示缩进效果。  </p><p>注意点：<code>dl</code>标签中只允许包含<code>dt</code>和<code>dd</code>标签，<code>dt</code>和<code>dd</code>标签可以包含任意内容。</p><p>例：制作一个自定义列表，分为工作日和休息日，工作日中包括星期一到星期五，休息日中包括星期六到星期日  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>工作日<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>星期一<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>星期二<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>星期三<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>星期四<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>星期五<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>休息日<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>星期六<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>星期日<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%97%E8%A1%A8.png" alt="自定义列表"></p><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><h2 id="标签名与属性"><a href="#标签名与属性" class="headerlink" title="标签名与属性"></a>标签名与属性</h2><p>在网页中以列的单元格的方式整齐展示的数据。  </p><p>标签名：  </p><ul><li><p><code>table</code>：表格整体，可以用于包裹多个<code>tr</code></p></li><li><p><code>tr</code>：表示每行，可用于包裹<code>td</code></p></li><li><p><code>td</code>：表格单元格，可用于包裹内容</p></li></ul><p>注意点：标签的嵌套关系为<code>table</code>&gt;<code>tr</code>&gt;<code>td</code>。  </p><p>属性：  </p><ul><li><p><code>border</code>：属性值为数字，表示边框的宽度</p></li><li><p><code>width</code>：属性值为数字，表示表格的宽度</p></li><li><p><code>height</code>：属性值为数字，表示表格的高度</p></li></ul><p>注意点：在实际开发中一般使用CSS设置表格的样式。</p><h2 id="标题与表头单元格"><a href="#标题与表头单元格" class="headerlink" title="标题与表头单元格"></a>标题与表头单元格</h2><p>在表格中表示整体大标题和一行小标题。  </p><p>标签名：  </p><ul><li><p><code>caption</code>：表格大标题，表示表格整体的大标题，默认在表格整体顶部居中位置显示</p></li><li><p><code>th</code>：表头单元格，表示一行小标题，通常用于表格第一行，默认内部文字加粗并居中显示</p></li></ul><p>注意点：<code>caption</code>标签写在<code>table</code>标签内部，<code>th</code>标签写在<code>th</code>标签内部（用于替换<code>td</code>标签）  </p><h2 id="表格的结构标签"><a href="#表格的结构标签" class="headerlink" title="表格的结构标签"></a>表格的结构标签</h2><p>让表格的内容结构分组，突出表格的不同成分（头部、主题、底部），使语义更加清晰。  </p><p>标签名：  </p><ul><li><p><code>thead</code>： 表格头部</p></li><li><p><code>tbody</code>：表格主体</p></li><li><p><code>foot</code>：表格底部</p></li></ul><h2 id="合并单元格"><a href="#合并单元格" class="headerlink" title="合并单元格"></a>合并单元格</h2><p>跨行合并（垂直合并成一个）  </p><p>跨列合并（水平合并成一个）  </p><p>合并单元格的步骤：  </p><ol><li><p>明确合并哪几个单元格</p></li><li><p>通过左上原则，确定保留谁：</p><ol><li><p>上下合并：只保留最上的，删除其他</p></li><li><p>左右合并：只保留最左的，删除其他</p></li></ol></li><li><p>给保留的单元格设置：跨行合并（<code>rowspan</code>）或者跨列合并（<code>colspan</code>）</p></li></ol><p>属性：  </p><ul><li><p><code>rowspan</code>：属性值表示合并单元格的个数，跨行合并，将多行的单元格垂直合并</p></li><li><p><code>colspan</code>：属性值表示合并单元格的个数，跨列合并，将多列的单元格水平合并</p></li></ul><p>注意点：只有一个结构标签中的单元格才能合并，不能跨结构合并标签（不能跨<code>thead</code> <code>tbody</code> <code>tfoot</code>）  </p><p>例：使用结构标签制作一个乘法表，表头为“九九乘法表”并加粗，并将剩下的没有数据的格子进行合并，边框宽度为1，最后一行用字母表示  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">caption</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>九九乘法表<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span> <span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>1<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>2<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>3<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>4<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>5<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>6<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>7<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>8<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>9<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;9&quot;</span>&gt;</span>1*1=1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1*2=2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;8&quot;</span>&gt;</span>2*2=4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1*3=3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2*3=6<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;7&quot;</span>&gt;</span>3*3=9<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1*4=4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2*4=8<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>3*4=12<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;6&quot;</span>&gt;</span>4*4=16<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>5<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1*5=5<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2*5=10<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>3*5=15<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>4*5=20<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;5&quot;</span>&gt;</span>5*5=25<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>6<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1*6=6<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2*6=12<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>3*6=18<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>4*6=24<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>5*6=30<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;4&quot;</span>&gt;</span>6*6=36<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>7<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1*7=7<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2*7=14<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>3*7=21<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>4*7=28<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>5*7=35<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>6*7=42<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span>7*7=49<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>8<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1*8=8<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2*8=16<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>3*8=24<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>4*8=32<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>5*8=40<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>6*8=48<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>7*8=56<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>8*8=64<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>9<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1*9=9<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2*9=18<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>3*9=27<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>4*9=36<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>5*9=45<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>6*9=54<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>7*9=63<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>8*9=72<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;1&quot;</span>&gt;</span>9*9=81<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">td</span>&gt;</span> <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">td</span>&gt;</span>a<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">td</span>&gt;</span>b<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">td</span>&gt;</span>c<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">td</span>&gt;</span>d<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">td</span>&gt;</span>e<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">td</span>&gt;</span>f<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">td</span>&gt;</span>g<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">td</span>&gt;</span>h<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">td</span>&gt;</span>i<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E8%A1%A8%E6%A0%BC.png" alt="表格"></p><h1 id="input系列标签"><a href="#input系列标签" class="headerlink" title="input系列标签"></a>input系列标签</h1><h2 id="input标签"><a href="#input标签" class="headerlink" title="input标签"></a>input标签</h2><p>在网页中显示收集用户信息的表单，标签名为<code>input</code>，基本写法是<code>&lt;input type=&quot;text&quot;&gt;</code>。  </p><p>属性值：  </p><ul><li><p><code>text</code>：文本框，用于输入单行文本</p></li><li><p><code>password</code>：密码框，用于输入密码</p></li><li><p><code>radio</code>：单选框，用于多选一的情况</p></li><li><p><code>checkbox</code>：多选框，用于多选多的情况</p></li><li><p><code>file</code>：文件选择，用于之后上传文件</p></li><li><p><code>submit</code>：提交按钮，用于提交</p></li><li><p><code>reset</code>：重置按钮，用于重置</p></li><li><p><code>button</code>：普通按钮，默认无功能，之后配合<code>js</code>添加功能</p></li></ul><h2 id="文本框（text-password）系列标签"><a href="#文本框（text-password）系列标签" class="headerlink" title="文本框（text password）系列标签"></a>文本框（text password）系列标签</h2><p>在网页中显示输入单行文本的表单控件。  </p><p>属性：  </p><ul><li><p><code>placeholder</code>：占位符。提示用户输入内容的文本</p></li><li><p><code>value</code>：初始值。会在文本框初始时显示</p></li></ul><p>例：制作一个文本框，提示信息为“账号”，制作一个密码框，提示信息为“密码”  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;账号&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;密码&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E6%96%87%E6%9C%AC%E6%A1%86%E7%B3%BB%E5%88%97%E6%A0%87%E7%AD%BE.png" alt="文本框系列标签"></p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E6%96%87%E6%9C%AC%E6%A1%86%E7%B3%BB%E5%88%97%E6%A0%87%E7%AD%BE%E8%BE%93%E5%85%A5%E5%B1%95%E7%A4%BA.png" alt="文本框系列标签输入展示"></p><h2 id="单选框（radio）系列标签"><a href="#单选框（radio）系列标签" class="headerlink" title="单选框（radio）系列标签"></a>单选框（radio）系列标签</h2><p>在网页中显示多选一的单选表单控件。  </p><p>属性：  </p><ul><li><p><code>name</code>：分组。有相同属性的单选框为一组，一组中同时只能有一个被选中</p></li><li><p><code>checked</code>：默认选中</p></li></ul><p>注意点：<code>name</code>属性对于单选框有分组功能，有相同<code>name</code>属性值的单选框为一组，一组中只能同时有一个被选中。  </p><p>例：制作一个单选框，内容是性别，一共三个选项，分别是男，女，保密，默认选择保密  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    性别： </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>男 </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>女 </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">checked</span>&gt;</span>保密</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E5%8D%95%E9%80%89%E6%A1%86%E7%B3%BB%E5%88%97%E6%A0%87%E7%AD%BE.png" alt="单选框系列标签"></p><h2 id="多选框（checkbox）系列标签"><a href="#多选框（checkbox）系列标签" class="headerlink" title="多选框（checkbox）系列标签"></a>多选框（checkbox）系列标签</h2><p>在网页中显示多选多的多选表单控件。</p><p>属性：</p><ul><li><p><code>name</code>：分组。有相同属性的单选框为一组，一组可以有多个被选中</p></li><li><p><code>checked</code>：默认选中</p></li></ul><p>注意点：<code>name</code>属性对于单选框有分组功能，有相同<code>name</code>属性值的单选框为一组，一组中可以同时有多个被选中。  </p><p>例：制作一个多选框，内容是爱好，设置五个爱好，分别是运动，唱歌，画画，睡觉，其他，其中其他后面需要跟一个文本框，提示信息为其他爱好，默认选择为运动</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    爱好： </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">checked</span>&gt;</span>运动 </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>唱歌 </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>画画 </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>睡觉 </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>其他 </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;其他爱好&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E5%A4%9A%E9%80%89%E6%A1%86%E7%B3%BB%E5%88%97%E6%A0%87%E7%AD%BE.png" alt="多选框系列标签"></p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E5%A4%9A%E9%80%89%E6%A1%86%E7%B3%BB%E5%88%97%E6%A0%87%E7%AD%BE%E8%BE%93%E5%85%A5%E5%B1%95%E7%A4%BA.png" alt="多选框系列标签输入展示"></p><h2 id="文件选择（file）"><a href="#文件选择（file）" class="headerlink" title="文件选择（file）"></a>文件选择（file）</h2><p>在网页中显示文件选择的表单控件。  </p><p>属性：  </p><ul><li><code>multiple</code>：多文件选择</li></ul><p>例：制作一个文件上传控件，设置为多文件选择  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E6%96%87%E4%BB%B6%E9%80%89%E6%8B%A9.png" alt="文件选择"></p><h2 id="按钮（button）"><a href="#按钮（button）" class="headerlink" title="按钮（button）"></a>按钮（button）</h2><p>在网页中显示不用功能的按钮表单控件。</p><p>属性值：  </p><ul><li><p><code>submit</code>：提交按钮。点击之后提交数据给后端服务器</p></li><li><p><code>reset</code>：重置按钮。点击之后恢复表单默认值</p></li><li><p><code>button</code>普通按钮。默认无功能，之后配合<code>js</code>添加功能</p></li></ul><p>属性：  </p><ul><li><code>value</code>：替换按钮上的文字</li></ul><p>注意点：如果需要实现以上按钮功能，需要配合<code>form</code>标签使用  </p><p><code>form</code>标签使用方法：用<code>form</code>标签把表单标签一起包裹起来即可。  </p><p>属性：  </p><ul><li><code>value</code>：设置按钮名字</li></ul><p>注意点：谷歌浏览器<code>button</code>按钮默认是提交按钮。  </p><p>还可以使用<code>button</code>标签，<code>button</code>标签是双标签，更便于包裹其他内容：文字、图片等。  </p><p>例：制作一个个人信息表单，并能够实现上传重置等功能。  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        姓名： </span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;姓名&quot;</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        性别： </span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>男 </span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>女</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">checked</span>&gt;</span>保密</span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        爱好： </span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">checked</span>&gt;</span>运动 </span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>唱歌 </span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>画画 </span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>睡觉 </span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>其他 </span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">其他爱好</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传信息&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重置信息&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;默认为上传按钮&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>上传信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span>重置信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>默认为上传按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E6%8C%89%E9%92%AE.png" alt="按钮"></p><h2 id="下拉菜单（select）按钮"><a href="#下拉菜单（select）按钮" class="headerlink" title="下拉菜单（select）按钮"></a>下拉菜单（select）按钮</h2><p>在网页中提供多个选择项的下拉菜单表单控件。  </p><p>标签名：  </p><ul><li><p><code>select</code>：下拉菜单的整体</p></li><li><p><code>option</code>：下拉菜单的每一项</p></li></ul><p>属性：  </p><ul><li><code>selected</code>：下拉菜单的默认选中</li></ul><p>例：制作一个时间下拉菜单，内容是星期一到星期五，默认选择星期三  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>星期一<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>星期二<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">selected</span>&gt;</span>星期三<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>星期四<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>星期五<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E4%B8%8B%E6%8B%89%E8%8F%9C%E5%8D%95%E6%8C%89%E9%92%AE.png" alt="下拉菜单按钮"></p><h1 id="文本域标签（textarea）"><a href="#文本域标签（textarea）" class="headerlink" title="文本域标签（textarea）"></a>文本域标签（textarea）</h1><p>在网页中提供可输入多行文本的表单控件，基本写法是<code>&lt;textarea name=&quot;&quot; id=&quot;&quot; cols=&quot;30&quot; rows=&quot;10&quot;&gt;&lt;/textarea&gt;</code>。  </p><p>属性：  </p><ul><li><p><code>clos</code>：规定了文本域内可见宽度</p></li><li><p><code>rows</code>：规定了文本域内可见行数</p></li></ul><p>注意点：右下角可以拖拽改变大小，实际开发时针对于样式效果推荐<code>CSS</code>设置。  </p><p>例：制作一个文本域标签，宽度为20，行数为10  </p><p>结果展示：  </p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E6%96%87%E6%9C%AC%E5%9F%9F%E6%A0%87%E7%AD%BE.png" alt="文本域标签"></p><h1 id="label标签"><a href="#label标签" class="headerlink" title="label标签"></a>label标签</h1><p>常用于绑定内容与表单标签的关系，可以实现点击文本也可以选中单选框多选框，基本写法是<code>&lt;label for=&quot;&quot;&gt;&lt;/label&gt;</code>。  </p><ol><li><p>使用方法1</p><ol><li><p>使用<code>label</code>标签把内容（如文本）包裹起来</p></li><li><p>在表单标签上添加<code>id</code>属性</p></li><li><p>在<code>label</code>标签的<code>for</code>属性中设置对应的<code>id</code>属性值</p></li></ol></li><li><p>使用方法2</p><ol><li><p>直接用<code>label</code>标签把内容（如文本）和表单标签一起包裹起来</p></li><li><p>需要把<code>label</code>标签的<code>for</code>属性删除即可</p></li></ol></li></ol><p>例：制作一个性别选择，分别使用两种方法为男和女两个选项添加<code>label</code>标签  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    性别：</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">id</span>=<span class="string">&quot;male&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;male&quot;</span>&gt;</span> 男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>&gt;</span> 女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/label%E6%A0%87%E7%AD%BE.png" alt="label标签"></p><h1 id="无语义标签"><a href="#无语义标签" class="headerlink" title="无语义标签"></a>无语义标签</h1><p>实际开发网页时会大量频繁使用<code>div</code>和<code>span</code>这两个无语义的布局标签，基本写法是<code>&lt;div&gt;&lt;/div&gt;</code>和<code>&lt;span&gt;&lt;/span&gt;</code>。  </p><p>标签：  </p><ul><li><p><code>div</code>标签：一行只显示一个（独占一行）</p></li><li><p><code>span</code>标签：一行可以显示多个</p></li></ul><h1 id="有语义标签（手机端网页）"><a href="#有语义标签（手机端网页）" class="headerlink" title="有语义标签（手机端网页）"></a>有语义标签（手机端网页）</h1><p>在<code>HTML5</code>新版本中，退出了一些有语义的布局标签供开发者使用。  </p><p>标签名：  </p><ul><li><p><code>header</code>：网页头部</p></li><li><p><code>nav</code>：网页导航</p></li><li><p><code>footer</code>：网页底部</p></li><li><p><code>aside</code>：网页侧边栏</p></li><li><p><code>section</code>：网页区块</p></li><li><p><code>article</code>：网页文章</p></li></ul><p>注意点：以上标签显示特点和<code>div</code>一致，但是比<code>div</code>多了不同的语义。  </p><h1 id="实体字符"><a href="#实体字符" class="headerlink" title="实体字符"></a>实体字符</h1><p>因为很多符号不能直接表示出来，因此需要使用实体字符进行代替。  </p><table><thead><tr><th align="center">显示结果</th><th align="center">描述</th><th align="center">实体名称</th><th align="center">实体编号</th></tr></thead><tbody><tr><td align="center"></td><td align="center">空格</td><td align="center"><code>&amp;nbsp;</code></td><td align="center">&#160;</td></tr><tr><td align="center">&lt;</td><td align="center">小于号</td><td align="center"><code>&amp;lt;</code></td><td align="center">&#60;</td></tr><tr><td align="center">&gt;</td><td align="center">大于号</td><td align="center"><code>&amp;gt;</code></td><td align="center">&#62;</td></tr><tr><td align="center">&amp;</td><td align="center">和号</td><td align="center"><code>&amp;amp;</code></td><td align="center">&#38;</td></tr><tr><td align="center">“</td><td align="center">引号</td><td align="center"><code>&amp;quot;</code></td><td align="center">&#34;</td></tr><tr><td align="center">‘</td><td align="center">撇号</td><td align="center"><code>&amp;apos;</code> (IE不支持)</td><td align="center">&#39;</td></tr><tr><td align="center">￠</td><td align="center">分（cent）</td><td align="center"><code>&amp;cent;</code></td><td align="center">&#162;</td></tr><tr><td align="center">£</td><td align="center">镑（pound）</td><td align="center"><code>&amp;pound;</code></td><td align="center">&#163;</td></tr><tr><td align="center">¥</td><td align="center">元（yen）</td><td align="center"><code>&amp;yen;</code></td><td align="center">&#165;</td></tr><tr><td align="center">€</td><td align="center">欧元（euro）</td><td align="center"><code>&amp;euro;</code></td><td align="center">&#8364;</td></tr><tr><td align="center">§</td><td align="center">小节</td><td align="center"><code>&amp;sect;</code></td><td align="center">&#167;</td></tr><tr><td align="center">©</td><td align="center">版权（copyright）</td><td align="center"><code>&amp;copy;</code></td><td align="center">&#169;</td></tr><tr><td align="center">®</td><td align="center">注册商标</td><td align="center"><code>&amp;reg;</code></td><td align="center">&#174;</td></tr><tr><td align="center">™</td><td align="center">商标</td><td align="center"><code>&amp;trade;</code></td><td align="center">&#8482;</td></tr><tr><td align="center">×</td><td align="center">乘号</td><td align="center"><code>&amp;times;</code></td><td align="center">&#215;</td></tr><tr><td align="center">÷</td><td align="center">除号</td><td align="center"><code>&amp;divide;</code></td><td align="center">&#247;</td></tr></tbody></table><p>使用过程中需要输入实体名称。  </p><p>例：制作一个版权符号  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    ©</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E5%AE%9E%E4%BD%93%E5%AD%97%E7%AC%A6.png" alt="实体字符"></p><hr>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> 笔记 </tag>
            
            <tag> 教程 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二打一（斗地主）计算机博弈</title>
      <link href="/archives/765139d6.html"/>
      <url>/archives/765139d6.html</url>
      
        <content type="html"><![CDATA[<hr><h1 id="二打一扑克牌项目规则"><a href="#二打一扑克牌项目规则" class="headerlink" title="二打一扑克牌项目规则"></a>二打一扑克牌项目规则</h1><h2 id="官方网站"><a href="#官方网站" class="headerlink" title="官方网站"></a>官方网站</h2><p>全国计算机博弈大赛官网链接：</p><p><a href="http://computergames.caai.cn/">计算机博弈官网</a>  </p><p>二打一扑克牌项目规则官网链接：  </p><p><a href="http://computergames.caai.cn/jsgz10.html">二打一规则官网</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>二打一，民间俗称斗地主，因玩法简单、娱乐性强已成为国内最受喜爱的牌类游戏之一。2013年正式成为国家体育总局认定的正式比赛项目之一。本规则是根据中国机器博弈专业委员会主办的全国大学生计算机博弈大赛的需要，参考人民体育出版社《中国二打一扑克竞赛规则》并结合JJ斗地主、百度百科、维基百科、联众游戏、腾讯游戏等网站文献编写完成。  </p><h2 id="术语约定"><a href="#术语约定" class="headerlink" title="术语约定"></a>术语约定</h2><h3 id="局"><a href="#局" class="headerlink" title="局"></a>局</h3><p>一副牌(编码见附表1)包括发牌、叫牌、出牌、记分的博弈过程，称为一局。  </p><h3 id="轮"><a href="#轮" class="headerlink" title="轮"></a>轮</h3><p>三个参赛选手共坐一桌完成的若干局构成一轮。  </p><h3 id="牌型"><a href="#牌型" class="headerlink" title="牌型"></a>牌型</h3><p>  玩家一次出牌的牌张组合（见附表2）。主要包括火箭、炸弹和普通牌型。</p><h3 id="春天与反春天"><a href="#春天与反春天" class="headerlink" title="春天与反春天"></a>春天与反春天</h3><p>地主所有牌出完，其它两家一张都未出，称为“春天”。  </p><p>其它两家中有一家先出完牌，地主只出过一手牌，“反春天”。  </p><h2 id="一局牌的比赛过程"><a href="#一局牌的比赛过程" class="headerlink" title="一局牌的比赛过程"></a>一局牌的比赛过程</h2><p>一局牌需三个玩家（按方位西0、南1、东2区分）参与。过程包括发牌、叫牌、出牌和计分4步骤完成。通过叫牌，一个玩家成为地主（庄家），其余两个玩家作为农民（防守方）与地主对抗。以某一玩家率先出尽手中牌来结束牌局判定胜负，并计算本局小分。  </p><h3 id="发牌"><a href="#发牌" class="headerlink" title="发牌"></a>发牌</h3><p>一副牌54张，每个玩家发17张，剩余3张作为底牌，在地主未确定之前所有玩家不能看底牌，待地主确定后，亮出底牌并将其归于地主。  </p><h3 id="叫牌"><a href="#叫牌" class="headerlink" title="叫牌"></a>叫牌</h3><p>每轮从西家（0）开始叫牌，并按出牌的顺序轮流进行，每人叫一次牌。叫牌时可以叫“1分”，“2分”，“3分”或“不叫（0）”。后叫牌者只能叫比前面叫过的分数都高或者不叫。如果有牌手叫分后，另外两人选择不叫或有牌手叫到“3分”则结束叫牌，叫牌结束后所叫分值最大的牌手确定为地主。如果三位牌手均选择不叫则视为完成一局，各家本局不得分。确定地主后，底牌亮出并发给地主。  </p><h3 id="出牌"><a href="#出牌" class="headerlink" title="出牌"></a>出牌</h3><p>每局由庄家先出，按逆时针顺序玩家依次出牌或过牌不出。后续跟牌者须按照同样牌型和张数进行跟牌，也可出炸弹或者火箭，后面的出牌必须大于前一手出牌。如果连续两家不出则最后出牌者可领出任意合法牌型。</p><p>出牌大小的比较：  </p><p>对于单牌，自大到小的牌张分值次序为<code>大王、小王、2、A、K、Q、J、10、9、8、7、6、5、4、3</code>。各花色之间无大小的区别。  </p><p>对于组合牌，除火箭及炸弹外，必须牌型与张数均相同时方可进行比较。其中对牌、三条、单顺、双顺、三顺以最大牌张比较大小；三带一、三顺带牌、四带二仅按其中三条、三顺、四条的牌张比较大小，与带牌大小无关。  </p><p>火箭大于炸弹，火箭及炸弹均大于其他牌型，炸弹之间按牌张大小进行比较。</p><h3 id="记分"><a href="#记分" class="headerlink" title="记分"></a>记分</h3><p>一局牌打完之后，双方小分计算方法如下：  </p><p>地主得分=2×胜负参数×100×底分×倍数<br>农民得分=胜负参数×100×底分×倍数<br>胜负参数：胜利方为1，失败方为-1；<br>底分：叫牌时的1、2、3分；<br>倍数：初始为1。<br>本局打出过炸弹则倍数×(1+炸弹个数)。（为减少分数波动程度，避免运气因素影响高技术牌手发挥，因此不采用2n算法）<br>打出火箭，倍数×2<br>打出“春天”，倍数×2<br>打出“反春天”，倍数×2</p><h2 id="协议使用事例"><a href="#协议使用事例" class="headerlink" title="协议使用事例"></a>协议使用事例</h2><p>下表示例为南方位选手与平台交互信息一例</p><table><thead><tr><th align="center">序号</th><th align="center">平台发送信息</th><th align="center">AI应答信息</th><th align="center">信息内容</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">DOUDIZHUVER 1.0</td><td align="center"></td><td align="center">协议版本号</td></tr><tr><td align="center">2</td><td align="center"></td><td align="center">NAME hrbust</td><td align="center">选手名称</td></tr><tr><td align="center">3</td><td align="center">INFO 1,4,1,6,9,2100,15</td><td align="center"></td><td align="center">轮局信息</td></tr><tr><td align="center">4</td><td align="center"></td><td align="center">OK INFO</td><td align="center">应答轮局信息</td></tr><tr><td align="center">5</td><td align="center">DEAL B0,4,5,7,9,10,17,21,25,<br>33,34,39,41,43,44,45,46</td><td align="center"></td><td align="center">发牌信息 <br>(不换行)</td></tr><tr><td align="center">6</td><td align="center"></td><td align="center">OK DEAL</td><td align="center">应答发牌信息</td></tr><tr><td align="center">7</td><td align="center">BID A1</td><td align="center"></td><td align="center">西方位叫牌转播</td></tr><tr><td align="center">8</td><td align="center"></td><td align="center">OK BID</td><td align="center">应答叫牌转播</td></tr><tr><td align="center">9</td><td align="center">BID WHAT</td><td align="center"></td><td align="center">询问南方位叫牌</td></tr><tr><td align="center">10</td><td align="center"></td><td align="center">BID B3</td><td align="center">应答叫牌询问</td></tr><tr><td align="center">11</td><td align="center">BID C0</td><td align="center"></td><td align="center">东方位叫牌转播</td></tr><tr><td align="center">12</td><td align="center"></td><td align="center">OK BID</td><td align="center">应答叫牌转播</td></tr><tr><td align="center">13</td><td align="center">LEFTOVER B27,48,53</td><td align="center"></td><td align="center">底牌信息与交付</td></tr><tr><td align="center">14</td><td align="center"></td><td align="center">OK LEFTOVER</td><td align="center">应答底牌信息</td></tr><tr><td align="center">15</td><td align="center">PLAY WHAT</td><td align="center"></td><td align="center">询问出牌</td></tr><tr><td align="center">16</td><td align="center"></td><td align="center">PLAY B0,4,5,7</td><td align="center">应答出牌询问</td></tr><tr><td align="center">17</td><td align="center">PLAY C-1</td><td align="center"></td><td align="center">东方位出牌转播</td></tr><tr><td align="center">18</td><td align="center"></td><td align="center">OK PLAY</td><td align="center">应答出牌转播</td></tr><tr><td align="center">19</td><td align="center">PLAY A12,13,14,20</td><td align="center"></td><td align="center">西方位出牌转播</td></tr><tr><td align="center">20</td><td align="center"></td><td align="center">OK PLAY</td><td align="center">应答出牌转播</td></tr><tr><td align="center">21</td><td align="center">PLAY WHAT</td><td align="center"></td><td align="center">询问出牌</td></tr><tr><td align="center"></td><td align="center">……</td><td align="center">……</td><td align="center">重复到一方出尽</td></tr><tr><td align="center">n</td><td align="center">GAMEOVER C</td><td align="center"></td><td align="center">赢家信息</td></tr><tr><td align="center">n+1</td><td align="center"></td><td align="center">OK GAMEOVER</td><td align="center">应答赢家信息</td></tr></tbody></table><h2 id="协议指令解释"><a href="#协议指令解释" class="headerlink" title="协议指令解释"></a>协议指令解释</h2><p>注意：以下一条指令中如含多张牌编码，应按升序排列<br>1． DOUDIZHUVER ver<br>裁判告知选手所采用的协议版本号，当前为1.0<br>例如：DOUDIZHUVER 1.0<br>2． NAME player<br>选手回复姓名。<br>例如：NAME hrbust<br>3． INFO turnid,turncount,roundid,roundcount,upcount,maxscore,time<br>裁判告知选手当前轮局信息<br>turnid为当前轮序号<br>turncount为总轮数，暂定4轮，视参赛选手人数可赛前调整<br>roundid为当前局序号<br>roundcount为每轮总局数，暂定6局，视参赛选手人数可赛前调整<br>upcount为本轮可晋级到下一轮的选手数，视比赛进程可赛前调整<br>maxscore为封顶分数，暂定2100，视参赛选手人数可赛前调整<br>time为 AI引擎应答时间限制，单位秒，暂定为15，视比赛进程可赛前调整<br>例如：INFO 1,4,1,6,9,2100,15<br>4． OK INFO<br>选手应答轮局信息，无可变参数<br>5．DEAL dC1,C2,C3,C4,C5,C6,C7,C8,C9,C10,C11,C12,C13,C14,C15,C16,C17<br>裁判告知选手方位和发牌编码<br>d为A时表示选手为西方位，d为B时表示选手为南方位，d为C时表示选手为东方位<br>Ci为发给选手的纸牌编码，参见附表1，各牌编码间用逗号分隔<br>例如：DEAL B0,4,5,7,9,10,17,21,25,33,34,39,41,43,44,45,46<br>6．OK DEAL<br>选手应答发牌信息，无可变参数<br>7．BID dW<br>裁判转发其它选手叫牌信息<br>d为A时表示该选手为西，d为B时表示该选手为南，d为C时表示该选手为东<br>W为0表示不叫，1表示1分，2表示2分，3表示3分<br>例如：BID A1<br>8．OK BID<br>选手应答叫牌信息，无可变参数<br>9．BID WHAT<br>裁判询问选手叫牌，无可变参数<br>10．BID dW<br>选手应答叫牌询问<br>d为A时表示该选手为西，d为B时表示该选手为南，d为C时表示该选手为东<br>W为0表示不叫，1表示1分，2表示2分，3表示3分<br>例如：BID B3<br>11．LEFTOVER dC1,C2,C3 <br>裁判通知底牌信息，含地主方位和牌编码<br>d为A时表示地主为西，d为B时表示地主为南，d为C时表示地主为东<br>Ci为发给地主的底牌编码，参见附表1，各牌编码间用逗号分隔<br>12．OK LEFTOVER<br>选手应答底牌信息，无可变参数<br>13．PLAY WHAT<br>裁判询问选手出牌，无可变参数<br>14．PLAY dC1,C2,…,Cn<br>选手应答裁判出牌询问<br>d为A时表示选手为西，d为B时表示选手为南，d为C时表示选手为东<br>Ci为选手出牌编码，参见附表1，各牌编码间用逗号分隔<br>如果C0为-1，表示弃权不出牌<br>例如：PLAY B0,4,5,7 或 PLAY C-1<br>如果d与引擎方位相同且C0为-1。表示判定引擎所在方位本次因无可出牌张自动PASS。<br>15．PLAY dC1,C2,…,Cn<br>裁判转发其它选手出牌信息，参数含义见上一指令。<br>16．OK PLAY<br>选手应答裁判出牌转发信息，无可变参数<br>17．GAMEOVER d<br>裁判告知本局最先出尽手中牌的赢家方位<br>d为A表示赢家为西，d为B表示赢家为南，d为C表示赢家为东<br>18．OK GAMEOVER<br>选手应答裁判本局赢家信息，无可变参数<br>19．ERROR d<br>裁判转发选手异常错误信息，本局结束<br>d为A表示异常选手为西，d为B表示异常选手为南，d为C表示异常选手为东<br>20．OK ERROR<br>选手应答裁判异常错误信息，无可变参数<br>提示：<br>1．选手引擎程序可通过标准输入输出流（例如cin和cout）以行为单位接受和发送指令。<br>2．指令和参数之间以一个空格分隔。<br>3．竞赛平台可发出的指令类型为：DOUDIZHUVER、INFO、DEAL、BID、LEFTOVER、PLAY、GAMEOVER和ERROR,选手引擎程序可发出的指令类型为：NAME、BID、PLAY和OK。</p><h2 id="赛制"><a href="#赛制" class="headerlink" title="赛制"></a>赛制</h2><h3 id="预赛"><a href="#预赛" class="headerlink" title="预赛"></a>预赛</h3><p>        初赛进行4轮，每轮6局，最后取前9名选手晋级决赛（轮数和局数可根据当年报名参赛队数赛前适度调整）。每局采用同场牌（每张桌打相同的牌）。赛前按种子选手优先及抽签方法确定第一轮选手桌号和方位，之后各轮按积分采用瑞士编排座位。<br>        初赛场分方案：<br>        每轮小分封顶值为350*局数，底线值为-350*局数。每轮结束后，选手按当前所在方向名次获得初赛场分，各方向积分最低者，得1场分，各方向积分每前进1名加1场分，如果其小分低于底线分数再减1场分，如果其小分高于封顶分数再加1场分。如果多人小分相同时，则他们均分其应得的场分。小分高于封顶值时按封顶值记录，其他情况按实际积分记录。<br>        晋级与淘汰：<br>        第2轮比赛结束后取前18名进入下一轮<br>        第3轮比赛结束后取前12名进入下一轮<br>        第4轮比赛结束后取前9名进入决赛<br>        场积分均值：总队数除以6取整+1，例如21个队，该值为INT(21/6)+1=4<br>        轮空处理：首轮轮空选手由抽签决定，之后各方向名次最后者抽签决定轮空，但每名选手在全部赛事中只轮空一次。轮空者获得场分均值+1，6副牌时小分得2100。<br>        迟到处理：选手5分钟内不能到场或开局，本轮按弃权处理，扣弃权者2倍场分均值，另外两家各得场分均值。小分按本场局数*350计。</p><h3 id="决赛"><a href="#决赛" class="headerlink" title="决赛"></a>决赛</h3><p>        决赛采用复式循环赛赛制（决赛9人以下，含9人）：<br>        带分规则：初赛（瑞士移位赛）晋级名单第1名带5.6比赛分，之后每个名次少带0.7比赛分，第8名带0.7比赛分，第9名无带分。<br>        进行4轮，每轮6局，按积分排定名次。（轮数和局数也可能根据进程，赛前调节）<br>        座位编排：采用固定编排，每名选手与其他8名对手相都遇于一次，按预赛瑞士积分赛的名次入座。<br>        积分计算：每桌打相同的牌，每副牌的三个结果中，同方向得分最高的选手获得4比赛分，居中者获得2比赛分，最低者获得0比赛分。得分相同者分享其应得的比赛分。<br>        轮空处理：轮空者在轮空牌副得到2.5比赛分。<br>        迟到处理：选手5分钟内不能到场或开局，本轮按弃权处理，扣弃权者6场分，另外两家各得3分。  </p><h3 id="名次排定及平分处理"><a href="#名次排定及平分处理" class="headerlink" title="名次排定及平分处理"></a>名次排定及平分处理</h3><p>        预赛：排定名次时先比较总场分，再比较总小分。小分仍相同者按抽签决定名次。<br>        决赛：排定名次时先比较总场分，如总场分相同以瑞士移位赛的名次为准。</p><h2 id="竞赛行为准则和处罚方法"><a href="#竞赛行为准则和处罚方法" class="headerlink" title="竞赛行为准则和处罚方法"></a>竞赛行为准则和处罚方法</h2><p>        1．参赛程序必须按照协议与组委会提供的统一平台系统进行通信，不得通过平台以外途径获取信息。<br>        2．一轮比赛进程中不能更换对手、程序、参数；各轮之间可以更换对手、程序、参数。<br>        3．因该项目同时含有合作和对抗性质，为保障竞赛公平性，每校只能有一只队伍参赛。参赛队必须确保操作员按比赛指定位置及时到位开始比赛，任何场次迟到或超时，按相应规则处罚。<br>        4．同一个队伍如果在一轮比赛中出现3局或以上失误或错误时，则取消比赛资格。<br>        5．超时处理<br>        因为比赛进程比较紧凑，需要各桌选手严格按照比赛进程完成各轮比赛。<br>        选手及引擎与平台单次交互时间应在15秒钟内，如果超过时限，按超时错误处理，本局进程到此结束，计分规则为：<br>        （1）如果在底牌分发前产生超时，由超时方支付相应另外两个玩家每人350分（即封顶分除以局数）。<br>        （2）如果在底牌分发后产生超时，按底牌归属后各玩家组成的炸弹总数计算炸弹数（不含春天和反春天），如果地主超时，则支付另外两个玩家每人(炸弹总数+1)<em>叫牌分</em>100，如果含火箭则再乘2；如果农民超时，则支付另一农民(炸弹总数+1)<em>叫牌分</em>100,如果含火箭则再乘2，支付地主为另一农民分数的双倍。</p><h2 id="附表"><a href="#附表" class="headerlink" title="附表"></a>附表</h2><h3 id="附表1-牌编码"><a href="#附表1-牌编码" class="headerlink" title="附表1 牌编码"></a>附表1 牌编码</h3><table><thead><tr><th align="center">编码</th><th align="center">花色点数</th><th align="center">编码</th><th align="center">花色点数</th><th align="center">编码</th><th align="center">花色点数</th><th align="center">编码</th><th align="center">花色点数</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">♥3</td><td align="center">1</td><td align="center">♦3</td><td align="center">2</td><td align="center">♠3</td><td align="center">3</td><td align="center">♣3</td></tr><tr><td align="center">4</td><td align="center">♥4</td><td align="center">5</td><td align="center">♦4</td><td align="center">6</td><td align="center">♠4</td><td align="center">7</td><td align="center">♣4</td></tr><tr><td align="center">8</td><td align="center">♥5</td><td align="center">9</td><td align="center">♦5</td><td align="center">10</td><td align="center">♠5</td><td align="center">11</td><td align="center">♣5</td></tr><tr><td align="center">12</td><td align="center">♥6</td><td align="center">13</td><td align="center">♦6</td><td align="center">14</td><td align="center">♠6</td><td align="center">15</td><td align="center">♣6</td></tr><tr><td align="center">16</td><td align="center">♥7</td><td align="center">17</td><td align="center">♦7</td><td align="center">18</td><td align="center">♠7</td><td align="center">19</td><td align="center">♣7</td></tr><tr><td align="center">20</td><td align="center">♥8</td><td align="center">21</td><td align="center">♦8</td><td align="center">22</td><td align="center">♠8</td><td align="center">23</td><td align="center">♣8</td></tr><tr><td align="center">24</td><td align="center">♥9</td><td align="center">25</td><td align="center">♦9</td><td align="center">26</td><td align="center">♠9</td><td align="center">27</td><td align="center">♣9</td></tr><tr><td align="center">28</td><td align="center">♥10</td><td align="center">29</td><td align="center">♦10</td><td align="center">30</td><td align="center">♠10</td><td align="center">31</td><td align="center">♣10</td></tr><tr><td align="center">32</td><td align="center">♥J</td><td align="center">33</td><td align="center">♦J</td><td align="center">34</td><td align="center">♠J</td><td align="center">35</td><td align="center">♣J</td></tr><tr><td align="center">36</td><td align="center">♥Q</td><td align="center">37</td><td align="center">♦Q</td><td align="center">38</td><td align="center">♠Q</td><td align="center">39</td><td align="center">♣Q</td></tr><tr><td align="center">40</td><td align="center">♥K</td><td align="center">41</td><td align="center">♦K</td><td align="center">42</td><td align="center">♠K</td><td align="center">43</td><td align="center">♣K</td></tr><tr><td align="center">44</td><td align="center">♥A</td><td align="center">45</td><td align="center">♦A</td><td align="center">46</td><td align="center">♠A</td><td align="center">47</td><td align="center">♣A</td></tr><tr><td align="center">48</td><td align="center">♥2</td><td align="center">49</td><td align="center">♦2</td><td align="center">50</td><td align="center">♠2</td><td align="center">51</td><td align="center">♣2</td></tr><tr><td align="center">52</td><td align="center">小王</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">53</td><td align="center">大王</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h3 id="附表2-牌型"><a href="#附表2-牌型" class="headerlink" title="附表2 牌型"></a>附表2 牌型</h3><p>        火箭大于炸弹和普通牌型、炸弹大于普通牌型。为避免牌型解释二义性，牌型按附表2顺序依次比较，首次匹配成功则确定为该牌型，不再向下匹配。<br>        所带牌点数可以相同，即444+555+7+7，或555+666+99+99也为合法，牌型6、10、11带牌之间点数可以不连续。</p><table><thead><tr><th align="center">编号</th><th align="center">牌型</th><th align="center">描述和备注</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">弃权</td><td align="center">无出牌</td></tr><tr><td align="center">1</td><td align="center">火箭</td><td align="center">双王（大王和小王），最大的牌型</td></tr><tr><td align="center">2</td><td align="center">炸弹</td><td align="center">四张同点数牌（型如AAAA）</td></tr><tr><td align="center">3</td><td align="center">单牌</td><td align="center">一张单牌（型如A）</td></tr><tr><td align="center">4</td><td align="center">对牌</td><td align="center">点数相同的两张牌（型如AA）</td></tr><tr><td align="center">5</td><td align="center">三条</td><td align="center">点数相同的三张牌（型如AAA）</td></tr><tr><td align="center">6</td><td align="center">三带一</td><td align="center">三条带一张单牌或一对牌。（型如：AAA+B或AAA+BB）</td></tr><tr><td align="center">7</td><td align="center">单顺</td><td align="center">五张或更多的连续单牌不包括2和王（型如：ABCDE或ABCDE…）</td></tr><tr><td align="center">8</td><td align="center">双顺</td><td align="center">三对或更多的连续对牌不包括2和王（型如：AABBCC或AABBCC..）</td></tr><tr><td align="center">9</td><td align="center">三顺</td><td align="center">二个或更多的连续三条不包括2和王（型如：AAABBB或AAABBBCCC…）</td></tr><tr><td align="center">10</td><td align="center">三顺带牌</td><td align="center">三顺带同数量的单牌或同数量的对牌（型如：AAABBB+C+D或AAABBB+CC+DD或AAABBB… +…+Y+Z或AAABBB… +…+YY+ZZ）</td></tr><tr><td align="center">11</td><td align="center">四带二</td><td align="center">四张同点数牌带2张单牌或2对牌（型如AAAA+B+C或AAAA+BB+CC）</td></tr><tr><td align="center">-1</td><td align="center">非法牌型</td><td align="center">以上牌型以外的牌张组合</td></tr></tbody></table><h1 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h1><p>资源链接： <a href="https://github.com/Big-worth/DDZ.git">https://github.com/Big-worth/DDZ.git</a>  </p><p>使用Git Bash的命令行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/Big-worth/DDZ.git DDZ</span><br></pre></td></tr></table></figure><p>沈阳航空航天大学计算机博弈——二打一讲解：  </p><p><a href="https://www.bilibili.com/video/BV1Z64y1u7u5">讲解视频</a></p><h1 id="代码修改指南"><a href="#代码修改指南" class="headerlink" title="代码修改指南"></a>代码修改指南</h1><h2 id="初始化准备工作"><a href="#初始化准备工作" class="headerlink" title="初始化准备工作"></a>初始化准备工作</h2><p>本文所使用的的环境是<code>Visual Studio 2019</code>，使用其他版本可能会有一定差别。  </p><p>首先打开<code>Visual Studio 2019</code>，将DDZ中的源代码文件夹中的头文件和源文件分别放入相应位置。  </p><p><img src="/img/posts/%E4%BA%8C%E6%89%93%E4%B8%80%EF%BC%88%E6%96%97%E5%9C%B0%E4%B8%BB%EF%BC%89%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8D%9A%E5%BC%88/%E6%96%87%E4%BB%B6%E5%AF%BC%E5%85%A5.png" alt="文件导入"></p><h2 id="修改SDL检查"><a href="#修改SDL检查" class="headerlink" title="修改SDL检查"></a>修改SDL检查</h2><p>点击项目-&gt;属性-&gt;C/C++-&gt;SDL检查改成否。</p><p><img src="/img/posts/%E4%BA%8C%E6%89%93%E4%B8%80%EF%BC%88%E6%96%97%E5%9C%B0%E4%B8%BB%EF%BC%89%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8D%9A%E5%BC%88/SDL%E6%A3%80%E6%9F%A5.png" alt="SDL检查"></p><h2 id="修改队伍名"><a href="#修改队伍名" class="headerlink" title="修改队伍名"></a>修改队伍名</h2><p><code>02.cpp</code>文件中的第一行表示队名，将引号中的名字更改成自己队伍的名字即可。  </p><h2 id="叫分函数"><a href="#叫分函数" class="headerlink" title="叫分函数"></a>叫分函数</h2><p>位于<code>02.cpp</code>的1122行~1194行  </p><p>叫分的原理是根据手牌好坏来决定叫多少分，会对起始的17张牌进行估值，最后选择叫几分。  </p><p><code>iMyBid</code>变量存储的是最后要叫的分数（当然也可以自定义变量，只需要保证最后是<code>int</code>类型，并且函数最下方返回的是这个变量就可以了）。  </p><p><code>sum</code>变量存储的是手牌的估值，最后根据手牌的估值来抉择叫几分。</p><p><code>count</code>变量存储的是临时的叫分数，最后将这个值传给<code>iMyBid</code>（其实并没什么用，可以直接改变<code>iMyBid</code>的值）。</p><p>最开始需要先统计出手牌分别是什么，每张牌都有一个对应的编号，如下图。  </p><p><img src="/img/posts/%E4%BA%8C%E6%89%93%E4%B8%80%EF%BC%88%E6%96%97%E5%9C%B0%E4%B8%BB%EF%BC%89%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8D%9A%E5%BC%88/%E7%BC%96%E5%8F%B7.jpg" alt="编号"></p><p>示例代码中的<code>first_hand_cards</code>数组用来记录初始17张牌，接下来在1134行~1137行开始统计手牌（相当于记牌器，有一说一，这个记牌器挺烂的，建议自己写一个好一点的，统计每张牌各有多少张的那种），<code>pDdz-&gt;iOnHand</code>数组记录的是初始手牌的每张牌编号。</p><p>1139行~1159行是估值部分（这段可以完全自由发挥），根据每种牌型来计算估值是多少，将估值累积进<code>sum</code>变量中。举个栗子：如果同时有大小王那么可以给<code>sum</code>+个<code>5</code>分。估值都是自己设定的，可以很大也可以很小，比如你认为炸弹价值很高就可以设置的高一点，炸弹价值没那么高就可以低一点。一般来讲，可以计算炸弹，<code>A</code>和<code>2</code>的数量，三带，顺子这几个的估值就可以了（示例代码不支持出双顺，但是能够对别人打出的双顺打出正确的出牌）。  </p><p>1161行~1177行可以不用怎么改，根据<code>sum</code>的值去改变<code>count</code>的值，来抉择叫多少分，<code>sum</code>的值就是手牌好坏的评判标准，一般来讲，值越大，那么手牌越好，可以叫的分数越高。  </p><p>1180行~1188行的作用是判断其余几家的叫分是否大于等于自家叫分，比如上家叫了<code>2</code>分，那么自家就不能叫<code>1</code>分，只能改叫<code>0</code>分（也就是不叫），这段代码的作用就是防止乱叫分。原代码用的<code>goto</code>，这么写的话可能会产生许多不可抗力，建议把这段改掉，不用<code>goto</code>去写。</p><h2 id="出牌函数"><a href="#出牌函数" class="headerlink" title="出牌函数"></a>出牌函数</h2><p>56行~74行是根据自家所在的不同位置来选择不同的出牌策略，比如地主的上家可以打得激进一点，来抑制地主出牌。但实际上这样工作量非常大，没这个必要，因此可以让三家都用同一种出牌策略（即调用同一个函数）。</p><p>然后再找到你选用的那个函数，底下可能会有一个（有两个有，一个没有）“在轮次少于<code>22</code>手数时不出大牌”的一段代码，一定要把这段代码注释掉（当然，你给它改出来也行）。这段代码是因为在牌局前期可能不一定非要出大牌，比如说上家出了3334，而你手里只有<code>2223</code>能够压住上家的牌，不过因为是在牌局早期，所以希望尽可能留住大牌，这种时候往往会选择不出。但是这段代码是有的<code>bug</code>的，很有可能导致在你先手的时候不出，导致三家<code>PASS</code>的<code>bug</code>，也就是三家都没有出牌，会直接判负。所以这部分及以下的代码需要全部注释掉。  </p><p><code>CalCardsValue</code>函数就是计算估值的函数。这个函数的原理是会枚举出每一种合法情况，然后会假定已经打出这组牌，去计算剩余牌的估值，然后选择剩余手牌估值最大的情况。</p><p>这段也需要一个记牌器去记录你的手牌情况，原代码的记牌器挺蠢的，建议重新写一个，可以和叫分函数的记牌器用一个。  </p><p><code>sum_count</code>用来记录拿掉一组牌之后剩余手牌的估值（也可以换成其他变量，只需要保证最后return的变量是你用来记录估值的变量就可以了）。  </p><p>剩下的部分的估值策略和叫分函数的估值策略一样但不完全一样，根据维持手牌估值最大的原则，所以需要把想要先出的牌的估值设置的低一些，比如我想优先出单牌而不是优先出炸弹，那么就需要把每个炸弹的估值设置的高一点；或者想先出顺子，那么就需要把顺子的估值设置的比单牌还低，那样就会优先出顺子了。同时也可以考虑一下手牌数量的问题，就是每有一张手牌扣多少估值，这样可以优先打出更多的牌。最后还需要考虑一下手牌打空的情况，当手牌可以直接完全打空的时候，那么此时估值应该设置为最大（自己没牌就赢了那肯定这么出）。需要计算估值的东西可以自己想，大体上和叫分函数里考虑的东西一样，可以考虑得更细致一些。  </p><p>上述估值策略存在一个明显的问题，举个栗子：当你手里有<code>34567</code>的牌型的时候，上家打了一张<code>3</code>，通过这种估值策略会导致拆掉顺子打出一张<code>4</code>从而保证手牌估值最大。  </p><p>如果希望更严谨亿点的话，可以在手牌数量剩的很少的时候改变一下估值策略（即让自己的手牌保持估值更小的做法），众所周知，手牌少的时候一般是拍剧后期，因此可以优先出大牌来争夺牌权，当然这并不一定是最优方式，因此当手牌剩余很少的时候可以改变一下出牌策略。  </p><p>还有一个需要注意的问题，这段的估值非常重要，如果出现越界的话，会导致出现很多<code>bug</code>，比如说出的牌不符合牌型；如果估值估得不够严谨或者不够细致，很有可能出现吃不起的<code>bug</code>（具体表现为把上家的牌抢过来再打一遍），一般来讲这个<code>bug</code>都是因为估值估反了，或者是不够细致，这种错误是最常见的也是最难改的。</p><h1 id="平台的使用"><a href="#平台的使用" class="headerlink" title="平台的使用"></a>平台的使用</h1><p>DDZ文件中的<code>斗地主博弈对战平台与示例引擎.rar</code>和<code>斗地主示例引擎源程序与测试平台2015-04-06E.rar</code>均为平台文件，这里推荐使用前者，操作相对来说较为简单。  </p><p><img src="img/posts/%E4%BA%8C%E6%89%93%E4%B8%80%EF%BC%88%E6%96%97%E5%9C%B0%E4%B8%BB%EF%BC%89%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8D%9A%E5%BC%88/%E5%B9%B3%E5%8F%B0%E6%96%87%E4%BB%B6%E5%A4%B9.png" alt="平台文件夹"></p><p>解压之后打开新平台文件夹  </p><p><img src="/img/posts/%E4%BA%8C%E6%89%93%E4%B8%80%EF%BC%88%E6%96%97%E5%9C%B0%E4%B8%BB%EF%BC%89%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8D%9A%E5%BC%88/%E6%96%B0%E5%B9%B3%E5%8F%B0%E6%96%87%E4%BB%B6%E5%A4%B9.png" alt="新平台文件夹"></p><p>打开<code>斗地主博弈对战平台2015-09-12C</code>文件  </p><p>在代码写完之后进行编译，找到这个代码存储的位置，里面有一个是<code>Debug</code>的文件夹，再点进去有一个生成的<code>exe</code>文件。找到这个文件的位置之后记一下路径，接着打开平台，点击博弈模式-&gt;训练模式。</p><p><img src="/img/posts/%E4%BA%8C%E6%89%93%E4%B8%80%EF%BC%88%E6%96%97%E5%9C%B0%E4%B8%BB%EF%BC%89%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8D%9A%E5%BC%88/%E5%B9%B3%E5%8F%B0.png" alt="平台"></p><p>分别选择<code>AI_西</code> <code>AI_南</code> <code>AI_东</code>，找到刚刚记下路径的<code>exe</code>文件，打开文件。为了更好地测试，可以把底下的停顿时间调的长一点。</p><p><img src="/img/posts/%E4%BA%8C%E6%89%93%E4%B8%80%EF%BC%88%E6%96%97%E5%9C%B0%E4%B8%BB%EF%BC%89%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8D%9A%E5%BC%88/%E8%AE%AD%E7%BB%83%E6%A8%A1%E5%BC%8F.png" alt="训练模式"></p><p>点击牌套数据-&gt;随机产生，最后牌局设定-&gt;开始牌局，就可以看到牌局情况了。  </p><p><img src="/img/posts/%E4%BA%8C%E6%89%93%E4%B8%80%EF%BC%88%E6%96%97%E5%9C%B0%E4%B8%BB%EF%BC%89%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8D%9A%E5%BC%88/%E5%BC%80%E5%A7%8B%E7%89%8C%E5%B1%80.png" alt="开始牌局"></p><hr>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> C++ </tag>
            
            <tag> 斗地主 </tag>
            
            <tag> 计算机博弈 </tag>
            
            <tag> 人工智能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown扩展语法</title>
      <link href="/archives/c677b245.html"/>
      <url>/archives/c677b245.html</url>
      
        <content type="html"><![CDATA[<hr><h1 id="扩展语法"><a href="#扩展语法" class="headerlink" title="扩展语法"></a>扩展语法</h1><p>基本语法能够应付大多数情况下的日常需求，但是对于一些人来说还不够，因此引入了扩展语法。  </p><p>点击链接可查看Markdown官方文档：</p><p><a href="https://markdown.com.cn/" title="Markdown官方文档">Markdown官方文档</a></p><p>点击链接可使用在线Markdown编辑器：</p><p><a href="https://markdown.com.cn/editor/" title="在线markdown编辑器">在线markdown编辑器</a></p><h1 id="Markdown扩展语法可用性"><a href="#Markdown扩展语法可用性" class="headerlink" title="Markdown扩展语法可用性"></a>Markdown扩展语法可用性</h1><p>并非所有Markdown应用程序都支持扩展语法元素，因此需要检查时是否够使用。  </p><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><p>添加表格时，需要使用三个及以上的连字符（<code>---</code>）创建每列表格的标题，并使用管道(<code>|</code>)来分隔每一列。  </p><p>可以通过在标题行中的连字符的左侧，右侧或两侧添加冒号（<code>:</code>），将列中的文本对齐到左侧，右侧或中心。  </p><p>例：制作一个一周七天的天气变化表  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">| 日期  | 天气  |</span><br><span class="line">| --- | --- |</span><br><span class="line">| 周一  | 晴   |</span><br><span class="line">| 周二  | 阴   |</span><br><span class="line">| 周三  | 多云  |</span><br><span class="line">| 周四  | 小雨  |</span><br><span class="line">| 周五  | 阴   |</span><br><span class="line">| 周六  | 暴雨  |</span><br><span class="line">| 周日  | 晴   |</span><br></pre></td></tr></table></figure><p>结果展示：  </p><table><thead><tr><th align="center">日期</th><th align="center">天气</th></tr></thead><tbody><tr><td align="center">周一</td><td align="center">晴</td></tr><tr><td align="center">周二</td><td align="center">阴</td></tr><tr><td align="center">周三</td><td align="center">多云</td></tr><tr><td align="center">周四</td><td align="center">小雨</td></tr><tr><td align="center">周五</td><td align="center">阴</td></tr><tr><td align="center">周六</td><td align="center">暴雨</td></tr><tr><td align="center">周日</td><td align="center">晴</td></tr></tbody></table><h1 id="围栏代码块"><a href="#围栏代码块" class="headerlink" title="围栏代码块"></a>围栏代码块</h1><p>通过使用三个反引号（<code>```</code>）或三个波浪号（<code>~~~</code>）来创建一个受保护的围栏代码块。  </p><p>还可以在第一行的反引号后面加上一种语言，从而自动识别并进行高亮。  </p><p>例：写一个C语言的输出Hello world!  </p><p>结果展示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello world&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="定义列表"><a href="#定义列表" class="headerlink" title="定义列表"></a>定义列表</h1><p>创建定义列表，需要在第一行键入术语，在下一行键入一个冒号，后面跟一个空格和定义。  </p><p>例：创建一个有关“比格沃斯”的定义列表  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">比格沃斯</span><br><span class="line">: 一只猫猫</span><br></pre></td></tr></table></figure><p>结果展示：  </p><dl><dt>比格沃斯</dt><dd>一只猫猫</dd></dl><h1 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h1><p>在单词前后使用两个波浪号（<code>~~</code>）从而实现删除线的效果。  </p><p>例：在比格沃斯上加上删除线  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~比格沃斯~~</span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><del>比格沃斯</del>  </p><h1 id="任务列表语法"><a href="#任务列表语法" class="headerlink" title="任务列表语法"></a>任务列表语法</h1><p>可以创建带有复选框的项目列表，复选框将显示在内容旁边。  </p><p>创建任务列表需要在任务列表之前添加破折号（<code>-</code>）和方括号（<code>[ ]</code>），并在（<code>[ ]</code>）前面加上空格（注：方括号中间有一个空格）。  </p><p>要选择一个复选框，需要在方括号（<code>[ ]</code>）之间添加x，即最后的样式为（<code>[x]</code>）。  </p><p>例：制作一个每日任务表  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> [x] 吃早饭</span><br><span class="line"><span class="bullet">-</span> [ ] 学习</span><br><span class="line"><span class="bullet">-</span> [ ] 跑步</span><br><span class="line"><span class="bullet">-</span> [x] 摸鱼</span><br></pre></td></tr></table></figure><p>结果展示：  </p><ul><li><p><input checked="" disabled="" type="checkbox">  吃早饭</p></li><li><p><input disabled="" type="checkbox">  学习</p></li><li><p><input disabled="" type="checkbox">  跑步</p></li><li><p><input checked="" disabled="" type="checkbox">  摸鱼</p></li></ul><h1 id="使用Emoji表情"><a href="#使用Emoji表情" class="headerlink" title="使用Emoji表情"></a>使用Emoji表情</h1><h2 id="复制和粘贴表情符号"><a href="#复制和粘贴表情符号" class="headerlink" title="复制和粘贴表情符号"></a>复制和粘贴表情符号</h2><p>在大多数情况下，可以直接复制符号表情并将其粘贴到文档中。  </p><p>Emoji表情链接：  </p><p><a href="https://emojipedia.org/">表情网站</a>  </p><p>注：如果使用的是静态网站生成器，需要确保HTML页面编码为UTF-8。</p><p>例：利用该方法复制粘贴水晶球表情  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">🔮</span><br></pre></td></tr></table></figure><p>结果展示：  </p><p>🔮  </p><h2 id="使用表情符号简码"><a href="#使用表情符号简码" class="headerlink" title="使用表情符号简码"></a>使用表情符号简码</h2><p>可以通过键入表情符号短代码来插入表情符号。  </p><p>书写格式是以冒号开头和结尾，并包含表情符号的名称。  </p><p>例：利用表情符号简码来插入表情张噢鞥，其符号简码为<code>crystal_ball</code>  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:crystal<span class="emphasis">_ball:</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><p>:crystal_ball:</p><h1 id="自动网址链接"><a href="#自动网址链接" class="headerlink" title="自动网址链接"></a>自动网址链接</h1><p>直接输入链接地址Markdown处理器会将其自动转换为链接。  </p><p>例：将该博客转换为链接  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://big-worth.github.io/</span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><a href="https://big-worth.github.io/">https://big-worth.github.io/</a></p><h1 id="禁用自动URL链接"><a href="#禁用自动URL链接" class="headerlink" title="禁用自动URL链接"></a>禁用自动URL链接</h1><p>如果不希望自动转换为链接，可以通过使用反引号的代码来删除该链接。  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">`https://big-worth.github.io/`</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><code>https://big-worth.github.io/</code></p><hr>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 教程 </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown基本语法</title>
      <link href="/archives/3c50d03d.html"/>
      <url>/archives/3c50d03d.html</url>
      
        <content type="html"><![CDATA[<hr><h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><p>Markdown是一种轻量级标记语言，排版语法简洁，让人们更多地关注内容本身而非排版。它使用易读易写的纯文本格式编写文档，可与HTML混编，可导出 HTML、PDF 以及本身的 .md 格式的文件。因简洁、高效、易读、易写，Markdown被大量使用，如Github、Wikipedia、简书等。  </p><p>点击链接可查看Markdown官方文档：</p><p><a href="https://markdown.com.cn/" title="Markdown官方文档">Markdown官方文档</a></p><p>点击链接可使用在线Markdown编辑器：  </p><p><a href="https://markdown.com.cn/editor/" title="在线markdown编辑器">在线markdown编辑器</a></p><h1 id="标题语法"><a href="#标题语法" class="headerlink" title="标题语法"></a>标题语法</h1><p>要创建标题，在单词或短语前面添加井号 (<code>#</code>) 。<code>#</code> 的数量代表了标题的级别，最多可以添加六级标题。  </p><p>注意<code>#</code>和后面的内容之间需要有一个空格。  </p><p>例：添加三个 <code>#</code>表示创建一个三级标题</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">### 三级标题</span></span><br></pre></td></tr></table></figure><h1 id="段落语法"><a href="#段落语法" class="headerlink" title="段落语法"></a>段落语法</h1><p>创建段落时，需要使用一个空白行进行分隔。  </p><p>例：书写I have a dream的前三段</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">I am happy to join with you today in what will go down in history as the greatest demonstration for freedom in the history of our nation.  </span><br><span class="line"></span><br><span class="line">Five score years ago, a great American, in whose symbolic shadow we stand today, signed the Emancipation Proclamation. This momentous decree came as a great beacon light of hope to millions of Negro slaves who had been seared in the flames of withering injustice. It came as a joyous daybreak to end the long night of bad captivity.</span><br><span class="line"></span><br><span class="line">But one hundred years later, the Negro still is not free. One hundred years later, the life of the Negro is still sadly crippled by the manacles of segregation and the chains of discrimination. One hundred years later, the Negro lives on a lonely island of poverty in the midst of a vast ocean of material prosperity. One hundred years later, the Negro is still languished in the corners of American society and finds himself an exile in his own land. And so we&#x27;ve come here today to dramatize a shameful condition.</span><br></pre></td></tr></table></figure><p>结果展示：  </p><p>I am happy to join with you today in what will go down in history as the greatest demonstration for freedom in the history of our nation.</p><p>Five score years ago, a great American, in whose symbolic shadow we stand today, signed the Emancipation Proclamation. This momentous decree came as a great beacon light of hope to millions of Negro slaves who had been seared in the flames of withering injustice. It came as a joyous daybreak to end the long night of bad captivity.</p><p>But one hundred years later, the Negro still is not free. One hundred years later, the life of the Negro is still sadly crippled by the manacles of segregation and the chains of discrimination. One hundred years later, the Negro lives on a lonely island of poverty in the midst of a vast ocean of material prosperity. One hundred years later, the Negro is still languished in the corners of American society and finds himself an exile in his own land. And so we’ve come here today to dramatize a shameful condition.  </p><h1 id="换行语法"><a href="#换行语法" class="headerlink" title="换行语法"></a>换行语法</h1><p>在一行的末尾添加两个或多个空格，然后按回车键,即可创建一个换行。</p><h1 id="强调语法"><a href="#强调语法" class="headerlink" title="强调语法"></a>强调语法</h1><h2 id="粗体（Bold）"><a href="#粗体（Bold）" class="headerlink" title="粗体（Bold）"></a>粗体（Bold）</h2><p>通过将文本设置为粗体或斜体来强调其重要性。  </p><p>在文本前后各加两个星号或者下划线可实现粗体效果。  </p><p>例：加粗文本“好耶！”</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">**好耶!**</span>  </span><br><span class="line"><span class="strong">__好耶！__</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><strong>好耶!</strong>   </p><p><strong>好耶！</strong></p><h2 id="斜体（Italic）"><a href="#斜体（Italic）" class="headerlink" title="斜体（Italic）"></a>斜体（Italic）</h2><p>在文本前后各加一个星号或者下划线可实现斜体效果。  </p><p>例：倾斜文本“好耶！”</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">*好耶!*</span>  </span><br><span class="line"><span class="emphasis">_好耶！_</span></span><br></pre></td></tr></table></figure><p>结果展示：</p><p><em>好耶！</em></p><p><em>好耶！</em></p><h1 id="引用语法"><a href="#引用语法" class="headerlink" title="引用语法"></a>引用语法</h1><h2 id="块引用"><a href="#块引用" class="headerlink" title="块引用"></a>块引用</h2><p>要创建块引用，需要在段落前添加一个 <code>&gt;</code> 符号。  </p><p>例：引用“No one breather who is worthier.”  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; No one breather who is worthier.</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><blockquote><p>No one breather who is worthier.  </p></blockquote><h2 id="多个段落的块引用"><a href="#多个段落的块引用" class="headerlink" title="多个段落的块引用"></a>多个段落的块引用</h2><p>块引用可以包含多个段落。为段落之间的空白行添加一个 <code>&gt;</code> 符号。</p><p>例：引用I have a dream的前两段</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; I am happy to join with you today in what will go down in history as the greatest demonstration for freedom in the history of our nation.  </span></span><br><span class="line"><span class="quote">&gt; </span></span><br><span class="line"><span class="quote">&gt; Five score years ago, a great American, in whose symbolic shadow we stand today, signed the Emancipation Proclamation. This momentous decree came as a great beacon light of hope to millions of Negro slaves who had been seared in the flames of withering injustice. It came as a joyous daybreak to end the long night of bad captivity.</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><blockquote><p>I am happy to join with you today in what will go down in history as the greatest demonstration for freedom in the history of our nation.  </p><p>Five score years ago, a great American, in whose symbolic shadow we stand today, signed the Emancipation Proclamation. This momentous decree came as a great beacon light of hope to millions of Negro slaves who had been seared in the flames of withering injustice. It came as a joyous daybreak to end the long night of bad captivity.</p></blockquote><h2 id="嵌套块引用"><a href="#嵌套块引用" class="headerlink" title="嵌套块引用"></a>嵌套块引用</h2><p>块引用可以嵌套。在要嵌套的段落前添加一个 <code>&gt;&gt;</code> 符号。  </p><p>例：引用I have a dream的前两段，其中嵌套第二段  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; I am happy to join with you today in what will go down in history as the greatest demonstration for freedom in the history of our nation.  </span></span><br><span class="line"><span class="quote">&gt; </span></span><br><span class="line"><span class="quote">&gt;&gt; Five score years ago, a great American, in whose symbolic shadow we stand today, signed the Emancipation Proclamation. This momentous decree came as a great beacon light of hope to millions of Negro slaves who had been seared in the flames of withering injustice. It came as a joyous daybreak to end the long night of bad captivity.</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><blockquote><p>I am happy to join with you today in what will go down in history as the greatest demonstration for freedom in the history of our nation.  </p><blockquote><p>Five score years ago, a great American, in whose symbolic shadow we stand today, signed the Emancipation Proclamation. This momentous decree came as a great beacon light of hope to millions of Negro slaves who had been seared in the flames of withering injustice. It came as a joyous daybreak to end the long night of bad captivity.</p></blockquote></blockquote><h2 id="带有其他元素的块引用"><a href="#带有其他元素的块引用" class="headerlink" title="带有其他元素的块引用"></a>带有其他元素的块引用</h2><p>块引用可以包含其他 Markdown 格式的元素，但是并非所有元素都可以使用。</p><h1 id="列表语法"><a href="#列表语法" class="headerlink" title="列表语法"></a>列表语法</h1><p>可以将多个条目组织成有序或无序列表。  </p><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><p>创建有序列表，需要在列表项前添加数字并紧跟一个英文句点，记得加一个空格。数字不必按照数学顺序排列，但是列表是从数字1开始起始的（如果起始数字是5，则从5开始编号）。  </p><p>例：创建一个有序列表，内容是星期一到星期五  </p><blockquote><p>第一种写法</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 星期一</span><br><span class="line"><span class="bullet">2.</span> 星期二</span><br><span class="line"><span class="bullet">3.</span> 星期三</span><br><span class="line"><span class="bullet">4.</span> 星期四</span><br><span class="line"><span class="bullet">5.</span> 星期五</span><br></pre></td></tr></table></figure><blockquote><p>第二种写法</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 星期一</span><br><span class="line"><span class="bullet">1.</span> 星期二</span><br><span class="line"><span class="bullet">1.</span> 星期三</span><br><span class="line"><span class="bullet">1.</span> 星期四</span><br><span class="line"><span class="bullet">1.</span> 星期五</span><br></pre></td></tr></table></figure><blockquote><p>第三种写法</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 星期一</span><br><span class="line"><span class="bullet">4.</span> 星期二</span><br><span class="line"><span class="bullet">1.</span> 星期三</span><br><span class="line"><span class="bullet">5.</span> 星期四</span><br><span class="line"><span class="bullet">9.</span> 星期五</span><br></pre></td></tr></table></figure><p>结果展示：  </p><ol><li>星期一</li><li>星期二</li><li>星期三</li><li>星期四</li><li>星期五</li></ol><h2 id="嵌套有序列表"><a href="#嵌套有序列表" class="headerlink" title="嵌套有序列表"></a>嵌套有序列表</h2><p>如果想制作一个嵌套的有序列表，可以在列表的某一项的下一行进行缩进，然后再创建一个有序列表。  </p><p>例：创建一个有序列表，内容是星期一到星期五,从3号开始标号，星期三中嵌套星期六和星期日  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">3.</span> 星期一</span><br><span class="line"><span class="bullet">1.</span> 星期二</span><br><span class="line"><span class="bullet">4.</span> 星期三</span><br><span class="line"><span class="bullet">    1.</span> 星期六</span><br><span class="line"><span class="bullet">    5.</span> 星期日</span><br><span class="line"><span class="bullet">9.</span> 星期四</span><br><span class="line"><span class="bullet">2.</span> 星期五</span><br></pre></td></tr></table></figure><p>结果展示：  </p><ol start="3"><li>星期一</li><li>星期二</li><li>星期三<ol><li>星期六</li><li>星期日</li></ol></li><li>星期四</li><li>星期五</li></ol><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p>创建无序列表，需要在每个列表项前面添加破折号 (-)、星号 (*) 或加号 (+) ，接着加一个空格。缩进一个或多个列表项可创建嵌套列表。  </p><p>例：创建一个无序列表，内容是星期一到星期五</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 星期一</span><br><span class="line"><span class="bullet">-</span> 星期二</span><br><span class="line"><span class="bullet">-</span> 星期三</span><br><span class="line"><span class="bullet">-</span> 星期四</span><br><span class="line"><span class="bullet">-</span> 星期五</span><br></pre></td></tr></table></figure><p>结果展示：</p><ul><li>星期一</li><li>星期二</li><li>星期三</li><li>星期四</li><li>星期五</li></ul><h1 id="代码语法"><a href="#代码语法" class="headerlink" title="代码语法"></a>代码语法</h1><h2 id="代码单词"><a href="#代码单词" class="headerlink" title="代码单词"></a>代码单词</h2><p>要将单词或短语表示为代码，需要将其包裹在反引号(`)中。  </p><p>例：将Bigglesworth表示为代码  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">`Bigglesworth`</span></span><br></pre></td></tr></table></figure><p>结果展示：</p><p><code>Bigglesworth</code>  </p><h2 id="转义反引号"><a href="#转义反引号" class="headerlink" title="转义反引号"></a>转义反引号</h2><p>如果要表示为代码的单词或短语中包含一个或多个反引号，则可以通过将单词或短语包裹在双反引号(``)中。  </p><p>例：  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">`` `</span>code<span class="code">` `</span>`</span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><code>`code`</code></p><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>创建代码块，需要将代码块的每一行缩进至少四个空格或一个制表符。</p><p>例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h1 id="分隔线语法"><a href="#分隔线语法" class="headerlink" title="分隔线语法"></a>分隔线语法</h1><p>分隔线语法需要在单独一行上使用三个或多个星号 (<code>***</code>)、破折号 (<code>---</code>) 或下划线 (<code>___</code>) ，并且不能包含其他内容。</p><p>例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"><span class="strong">**<span class="emphasis">*</span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="section">---</span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="section">___</span></span></span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><hr><hr><hr><h1 id="链接语法"><a href="#链接语法" class="headerlink" title="链接语法"></a>链接语法</h1><h2 id="Title链接"><a href="#Title链接" class="headerlink" title="Title链接"></a>Title链接</h2><p>链接文本放在中括号内，链接地址放在后面的括号中，链接title可选。  </p><p>title是鼠标悬停时显示的文字</p><p>超链接Markdown语法代码：<code>[超链接显示名](超链接地址 &quot;超链接title&quot;)</code>  </p><p>例：制作一个到该博客的超链接  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">Bigglesworth</span>](<span class="link">https://big-worth.github.io/ &quot;比格沃斯的博客&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><a href="https://big-worth.github.io/" title="比格沃斯的博客">Bigglesworth</a></p><h2 id="网址和Email地址"><a href="#网址和Email地址" class="headerlink" title="网址和Email地址"></a>网址和Email地址</h2><p>使用尖括号可以很方便地把URL或者email地址变成可点击的链接。  </p><p>例：将<a href="mailto:&#66;&#x69;&#103;&#103;&#108;&#x65;&#115;&#119;&#111;&#x72;&#116;&#x68;&#x37;&#x40;&#49;&#x36;&#51;&#46;&#99;&#x6f;&#109;">&#66;&#x69;&#103;&#103;&#108;&#x65;&#115;&#119;&#111;&#x72;&#116;&#x68;&#x37;&#x40;&#49;&#x36;&#51;&#46;&#99;&#x6f;&#109;</a>邮箱制作成链接  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">&lt;Bigglesworth7@163.com&gt;</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><a href="mailto:&#66;&#x69;&#x67;&#103;&#108;&#101;&#115;&#x77;&#111;&#114;&#116;&#104;&#x37;&#64;&#49;&#x36;&#x33;&#x2e;&#x63;&#x6f;&#109;">&#66;&#x69;&#x67;&#103;&#108;&#101;&#115;&#x77;&#111;&#114;&#116;&#104;&#x37;&#64;&#49;&#x36;&#x33;&#x2e;&#x63;&#x6f;&#109;</a>  </p><h2 id="带格式化的链接"><a href="#带格式化的链接" class="headerlink" title="带格式化的链接"></a>带格式化的链接</h2><p>可以使用强调语法来修饰链接  </p><h1 id="图片语法"><a href="#图片语法" class="headerlink" title="图片语法"></a>图片语法</h1><h2 id="本地图片"><a href="#本地图片" class="headerlink" title="本地图片"></a>本地图片</h2><p>要添加图像，使用感叹号 (<code>!</code>), 然后在方括号增加替代文本，图片链接放在圆括号里，括号里的链接后可以增加一个可选的图片标题文本。  </p><p>title是鼠标悬停时显示的文字</p><p>插入图片Markdown语法代码：<code>![图片alt](图片链接 &quot;图片title&quot;)</code>。</p><p>例：插入一张文件路径为<code>E:/Workspaces/hexo/themes/butterfly/source/img/index_img/index_img.jpg</code>名字为壁纸的图片</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">壁纸</span>](<span class="link">E:/Workspaces/hexo/themes/butterfly/source/img/index_img/index_img.jpg &quot;海琴烟&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><img src="/img/index_img/index_img.jpg" alt="壁纸" title="壁纸"></p><h2 id="链接图片"><a href="#链接图片" class="headerlink" title="链接图片"></a>链接图片</h2><p>将图像的Markdown 括在方括号中，然后将链接添加在圆括号中。  </p><p>例：插入图片<code>E:/Workspaces/hexo/themes/butterfly/source/img/index_img/archive_img.jpg</code>并链接到该博客  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">![链接</span>](<span class="link">E:/Workspaces/hexo/themes/butterfly/source/img/index_img/archive_img.jpg</span>)](<span class="link">https://big-worth.github.io/</span>) </span><br></pre></td></tr></table></figure><p>结果展示：</p><p><a href="https://big-worth.github.io/"><img src="/img/index_img/archive_img.jpg" alt="链接"></a> </p><h1 id="转义字符语法"><a href="#转义字符语法" class="headerlink" title="转义字符语法"></a>转义字符语法</h1><p>要显示原本用于格式化的字符，需要在字符前面添加反斜杠字符<code>\</code>。  </p><p>例：书写*  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\<span class="emphasis">*</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><p>*  </p><hr>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 教程 </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
