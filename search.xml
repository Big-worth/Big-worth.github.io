<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>NeRF</title>
      <link href="/archives/3a122aa.html"/>
      <url>/archives/3a122aa.html</url>
      
        <content type="html"><![CDATA[<hr><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="https://arxiv.org/abs/2003.08934">论文地址</a></p><p><a href="https://github.com/yenchenlin/nerf-pytorch">基础版NeRF实现（PyTorch）</a></p><p><a href="https://github.com/bmild/nerf">基础版NeRF实现（TensonFlow）</a></p><h2 id="广义理解"><a href="#广义理解" class="headerlink" title="广义理解"></a>广义理解</h2><p><code>NeRF</code>通过神经网络（<code>MLP</code>)来隐式的存储<code>3D</code>信息。</p><ul><li>显式的<code>3D</code>信息：有明确的<code>x,y,z</code>值。</li><li>隐式的<code>3D</code>信息：无明确的<code>x,y,z</code>的值，只能输出指定角度的<code>2D</code>图片。</li></ul><p>也因此，模型并不具备泛化能力，一个模型只能存储一个<code>3D</code>信息。</p><h2 id="模型结构"><a href="#模型结构" class="headerlink" title="模型结构"></a>模型结构</h2><p>论文中模型的输入是一个<code>5D</code>的向量（<code>x,y,z,theta,phi</code>），分别是坐标值、方位角、仰角。输出是<code>4D</code>向量，分别是密度和颜色（<code>RGB</code>）。模型的结构是一个<code>8</code>层的<code>MLP</code>。</p><p><code>NeRF</code>的模型结构比较简单，重点在于是前处理和后处理。对于输入，需要有一个图片转<code>5D</code>的前处理；对于输出，需要有一个<code>4D</code>转图片的后处理。</p><p>实际上，输入的<code>5D</code>向量是粒子的空间位姿，输出的<code>4D</code>向量是粒子对应的颜色以及密度。</p><h1 id="真实场景及相机模型"><a href="#真实场景及相机模型" class="headerlink" title="真实场景及相机模型"></a>真实场景及相机模型</h1><h2 id="真实场景"><a href="#真实场景" class="headerlink" title="真实场景"></a>真实场景</h2><p>现实生活中有多个光源，同时会有物体的折射和反射。</p><h2 id="相机模型"><a href="#相机模型" class="headerlink" title="相机模型"></a>相机模型</h2><p>相机模型连接了<code>3D</code>世界与<code>2D</code>图片，主要分为四个坐标系：</p><ul><li>世界坐标系：现实世界的三维坐标系，相当于地球的经纬度。</li><li>相机坐标系：以<strong>相机镜头中心</strong>为原点的三维坐标系，通过相机的<strong>位置+朝向</strong>将世界坐标转换过来。</li><li>归一化相机坐标系：把相机前方的空间压缩成一个<strong>固定边长的立方体（一般为2）</strong>，统一不同距离的物体缩放比例。</li><li>像素坐标系：最终照片上的<strong>像素网格位置</strong>。</li></ul><h1 id="体渲染"><a href="#体渲染" class="headerlink" title="体渲染"></a>体渲染</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul><li>属于渲染技术的分支</li><li>目的是解决云/烟/果冻等非刚性物体的渲染建模</li><li>将物质抽象成一团飘忽不定的粒子群</li><li>光线在穿过时，是光子在跟粒子发生碰撞的过程</li></ul><h2 id="光子与粒子发生作用的过程"><a href="#光子与粒子发生作用的过程" class="headerlink" title="光子与粒子发生作用的过程"></a>光子与粒子发生作用的过程</h2><ul><li>吸收：光子被粒子吸收</li><li>放射：粒子本身发光</li><li>外射光：光子在冲击后，被弹射</li><li>内射光：其他方向弹射来的粒子。</li></ul><h2 id="NeRF假设"><a href="#NeRF假设" class="headerlink" title="NeRF假设"></a>NeRF假设</h2><ul><li>物体是一团自发光的粒子</li><li>粒子有密度和颜色</li><li>外射光和内射光抵消</li><li>多个粒子被渲染成指定角度的图片</li></ul><h2 id="模型的输入输出"><a href="#模型的输入输出" class="headerlink" title="模型的输入输出"></a>模型的输入输出</h2><p>模型的输入：将物体进行稀疏表示的<strong>单个粒子</strong>的<strong>位姿</strong>。</p><p>模型的输出：该<strong>粒子</strong>的<strong>密度和颜色</strong>。</p><h1 id="粒子的采集——光线原理"><a href="#粒子的采集——光线原理" class="headerlink" title="粒子的采集——光线原理"></a>粒子的采集——光线原理</h1><h2 id="射线推导像素点"><a href="#射线推导像素点" class="headerlink" title="射线推导像素点"></a>射线推导像素点</h2><p>对于空间中的一个发光粒子：</p><ul><li>空间坐标<code>(x, y, z)</code></li><li>发射的光线通过相机模型</li><li>成为图片上的像素坐标<code>(u, v)</code></li><li>粒子颜色即为像素颜色</li></ul><p>其中<code>(u, v)</code>与<code>(x, y, z)</code>的公式如下：</p><p><img src="/img/posts/NeRF/%E8%BD%AC%E6%8D%A2%E5%85%AC%E5%BC%8F.jpg" alt="转换公式"></p><p>其中<code>R</code>为旋转矩阵<code>(3x3)</code>，<code>T</code>为平移向量<code>(3x1)</code>。</p><p>反之，对于图片上的某一个像素<code>(u, v)</code>的颜色。可以看作是沿着某一条射线上的无数个发光点的“和”，利用相机模型，反推射线，那么这个涉嫌表示为：<br>$$<br>r(t)=o+td<br>$$<br>其中<code>o</code>为射线原点，<code>d</code>为方向，<code>t</code>为距离，使用极坐标的方法表示。理论上来讲，<code>t</code>的取值范围为$(0,+\infty)$。</p><p>对于一张大小为<code>(H, W)</code>的图片而言，其射线数量为$H\times W$。</p><h2 id="像素点推导射线"><a href="#像素点推导射线" class="headerlink" title="像素点推导射线"></a>像素点推导射线</h2><p><img src="/img/posts/NeRF/%E7%B2%92%E5%AD%90%E7%9A%84%E9%87%87%E9%9B%86%E2%80%94%E2%80%94%E5%85%89%E7%BA%BF%E5%8E%9F%E7%90%86.jpg" alt="粒子的采集——光线原理"></p><p>由像素点$P(u, v)$反推射线基本过程如下。</p><p>像素平面$\rightarrow$物理成像平面：<br>$$<br>(x_n,y_n)=(-(u-\frac{w}{2}),v-\frac{h}{2})=(\frac{w}{2}-u,v-\frac{h}{2})<br>$$<br>物理成像平面$\rightarrow$相机坐标系：<br>$$<br>(x_c,y_c,z_c)=(x_n,y_n,-f)<br>$$<br>其中$f$为相机焦距。</p><p>归一化：<br>$$<br>(x_c,y_c,z_c)=(\frac{x_c}{f},\frac{y_c}{f},-1)<br>$$<br>相机坐标系$\rightarrow$世界坐标系：<br>$$<br>(x_w,y_w,z_w)=c2w\times(x_c,y_c,z_c)<br>$$</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Ray helpers</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_rays</span>(<span class="params">H, W, K, c2w</span>):</span><br><span class="line">    i, j = torch.meshgrid(torch.linspace(<span class="number">0</span>, W-<span class="number">1</span>, W), torch.linspace(<span class="number">0</span>, H-<span class="number">1</span>, H))  <span class="comment"># pytorch&#x27;s meshgrid has indexing=&#x27;ij&#x27;</span></span><br><span class="line">    i = i.t()</span><br><span class="line">    j = j.t()</span><br><span class="line">    dirs = torch.stack([(i-K[<span class="number">0</span>][<span class="number">2</span>])/K[<span class="number">0</span>][<span class="number">0</span>], -(j-K[<span class="number">1</span>][<span class="number">2</span>])/K[<span class="number">1</span>][<span class="number">1</span>], -torch.ones_like(i)], -<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># Rotate ray directions from camera frame to the world frame</span></span><br><span class="line">    rays_d = torch.<span class="built_in">sum</span>(dirs[..., np.newaxis, :] * c2w[:<span class="number">3</span>,:<span class="number">3</span>], -<span class="number">1</span>)  <span class="comment"># dot product, equals to: [c2w.dot(dir) for dir in dirs]</span></span><br><span class="line">    <span class="comment"># Translate camera frame&#x27;s origin to the world frame. It is the origin of all rays.</span></span><br><span class="line">    rays_o = c2w[:<span class="number">3</span>,-<span class="number">1</span>].expand(rays_d.shape)</span><br><span class="line">    <span class="keyword">return</span> rays_o, rays_d</span><br></pre></td></tr></table></figure><p>这个方法一共有四个参数，<code>H</code>和<code>W</code>表示图像的大小，<code>K</code>表示相机的内参，<code>c2w</code>表示旋转矩阵和平移向量。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 机器学习 </tag>
            
            <tag> 论文 </tag>
            
            <tag> 人工智能 </tag>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt</title>
      <link href="/archives/bdde4244.html"/>
      <url>/archives/bdde4244.html</url>
      
        <content type="html"><![CDATA[<hr><h1 id="创建程序"><a href="#创建程序" class="headerlink" title="创建程序"></a>创建程序</h1><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>创建<code>Qt</code>程序需要选择模板，选择<code>Application</code>下的<code>Qt Widgets Application</code>即可。这是一个桌面<code>Qt</code>应用，包含一个基于<code>Qt</code>设计师的主窗体。</li><li>项目命名时不能出现空格、汉字等，可以由数字、英文、下划线组成。</li><li>路径中也不能有中文，否则可以正常创建，但不能运行。</li><li>创建项目时需要创建一个类作为主窗体，这个类的基类有三种选择：<code>QWidget</code>，<code>QMainWindow</code>，<code>QDialog</code>，第一种是剩下两种的父类。<code>QWidget</code>是最简单的一个窗口，<code>QMainWindow</code>多了菜单栏，工具栏，状态栏等，<code>QDialog</code>是对话框类，一般没有最大化和最小化的按钮，有一些让用户进行选择的按钮。</li></ol><h2 id="组成代码"><a href="#组成代码" class="headerlink" title="组成代码"></a>组成代码</h2><h3 id="主文件"><a href="#主文件" class="headerlink" title="主文件"></a>主文件</h3><p>创建项目后，得到的<code>main.cpp</code>文件如下所示：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QApplication&gt;</span>  <span class="comment">//包含一个应用程序类的头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//main程序入口  argc命令行变量的数量  argv命令行变量的数组</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//a应用程序对象，在Qt中，应用程序对象有且仅有一个</span></span><br><span class="line">    <span class="function">QApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//窗口对象  Widget是从QWidget派生出来的类</span></span><br><span class="line">    Widget w;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//show方法  窗口对象默认不会显示，必须要使用show方法</span></span><br><span class="line">    w.<span class="built_in">show</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//让应用程序对象进入消息循环，防止窗口消失，让代码阻塞到这行</span></span><br><span class="line">    <span class="keyword">return</span> a.<span class="built_in">exec</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="pro文件"><a href="#pro文件" class="headerlink" title="pro文件"></a>pro文件</h3><p><code>pro</code>文件如下所示：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Qt包含的模块 core是核心模块 gui是图形模块</span></span><br><span class="line"><span class="attr">QT</span>       <span class="string">+= core gui</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 大于4版本以上 包含widget模块</span></span><br><span class="line"><span class="attr">greaterThan(QT_MAJOR_VERSION,</span> <span class="string">4): QT += widgets</span></span><br><span class="line"></span><br><span class="line"><span class="attr">CONFIG</span> <span class="string">+= c++17</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># You can make your code fail to compile if it uses deprecated APIs.</span></span><br><span class="line"><span class="comment"># In order to do so, uncomment the following line.</span></span><br><span class="line"><span class="comment">#DEFINES += QT_DISABLE_DEPRECATED_BEFORE=0x060000    # disables all the APIs deprecated before Qt 6.0.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 源文件</span></span><br><span class="line"><span class="attr">SOURCES</span> <span class="string">+= \</span></span><br><span class="line"><span class="string">    main.cpp \</span></span><br><span class="line"><span class="string">    widget.cpp</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 头文件</span></span><br><span class="line"><span class="attr">HEADERS</span> <span class="string">+= \</span></span><br><span class="line"><span class="string">    widget.h</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Default rules for deployment.</span></span><br><span class="line"><span class="attr">qnx</span>: <span class="string">target.path = /tmp/$$&#123;TARGET&#125;/bin</span></span><br><span class="line"><span class="attr">else</span>: <span class="string">unix:!android: target.path = /opt/$$&#123;TARGET&#125;/bin</span></span><br><span class="line"><span class="comment">!isEmpty(target.path): INSTALLS += target</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h3><p>头文件代码如下所示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QApplication&gt;</span>  <span class="comment">//包含一个应用程序类的头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//main程序入口  argc命令行变量的数量  argv命令行变量的数组</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//a应用程序对象，在Qt中，应用程序对象有且仅有一个</span></span><br><span class="line">    <span class="function">QApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//窗口对象  Widget是从QWidget派生出来的类</span></span><br><span class="line">    Widget w;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//show方法  窗口对象默认不会显示，必须要使用show方法</span></span><br><span class="line">    w.<span class="built_in">show</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//让应用程序对象进入消息循环，防止窗口消失，让代码阻塞到这行</span></span><br><span class="line">    <span class="keyword">return</span> a.<span class="built_in">exec</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="源文件"><a href="#源文件" class="headerlink" title="源文件"></a>源文件</h3><p>源文件代码如下所示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)  <span class="comment">//初始化列表</span></span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line">Widget::~<span class="built_in">Widget</span>() &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>头文件类的声明放在源文件中。</p><h2 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h2><ol><li>类名：采用<code>Pascal</code>命名法，首字母大写，单词与单词之间首字母大写。</li><li>函数名 变量名称：采用驼峰命名法，首字母小写，单词与单词之间首字母大写。</li></ol><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><ol><li>注释：<code>ctrl + /</code></li><li>运行：<code>ctrl + r</code></li><li>编译：<code>ctrl + b</code></li><li>字体缩放：<code>ctrl + 鼠标滚轮</code></li><li>查找：<code>ctrl f</code></li><li>整行移动：<code>ctrl + shift + ↑/↓</code></li><li>帮助文档：<code>F1</code></li><li>自动对齐：<code>ctrl + i</code></li><li>同名之间的<code>.h</code>和<code>.cpp</code>切换：<code>F4</code></li></ol><h1 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h1><h2 id="头文件-1"><a href="#头文件-1" class="headerlink" title="头文件"></a>头文件</h2><p>创建需要引入相关的头文件，与按钮有关的头文件是<code>QPushButton</code>，因此需要在窗口的代码中引用。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPushButton&gt;</span></span></span><br></pre></td></tr></table></figure><p>需要先进行实例化，使用指针指向一个开辟在堆区的按钮对象。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个按钮</span></span><br><span class="line">QPushButton * btn = <span class="keyword">new</span> QPushButton;</span><br></pre></td></tr></table></figure><h2 id="设置父亲"><a href="#设置父亲" class="headerlink" title="设置父亲"></a>设置父亲</h2><p>可以使用<code>show</code>方法直接将按钮显示出来。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//show以顶层的方式弹出窗口控件</span></span><br><span class="line">btn-&gt;<span class="built_in">show</span>();</span><br></pre></td></tr></table></figure><p>但我们希望按钮出现在窗口中，这种方法会导致按钮独立出来。为了实现我们的需求，可以设置一下这个按钮的<code>Parent</code>，让其依赖在窗体中。因为这个按钮是在窗口类中编写的，只需要将<code>Parent</code>设置为<code>this</code>即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//让btn对象依赖在Widget窗口中</span></span><br><span class="line">btn-&gt;<span class="built_in">setParent</span>(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure><h2 id="添加文本"><a href="#添加文本" class="headerlink" title="添加文本"></a>添加文本</h2><p>希望在这个按钮上添加一些文本信息，可以使用<code>setText</code>方法。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//显示文本</span></span><br><span class="line">btn-&gt;<span class="built_in">setText</span>(<span class="string">&quot;第一个按钮&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>通过上述方法，即可生成一个有按钮的窗口，完整代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPushButton&gt;</span>  <span class="comment">//按钮控件的头文件</span></span></span><br><span class="line"></span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)  <span class="comment">//初始化列表</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//创建一个按钮</span></span><br><span class="line">    QPushButton * btn = <span class="keyword">new</span> QPushButton;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//show以顶层的方式弹出窗口控件</span></span><br><span class="line">    <span class="comment">// btn-&gt;show();</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//让btn对象依赖在Widget窗口中</span></span><br><span class="line">    btn-&gt;<span class="built_in">setParent</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//显示文本</span></span><br><span class="line">    btn-&gt;<span class="built_in">setText</span>(<span class="string">&quot;这是一个按钮&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Widget::~<span class="built_in">Widget</span>() &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/Qt/%E6%8C%89%E9%92%AE%E7%A4%BA%E4%BE%8B.jpg" alt="按钮示例"></p><p>上述代码主要是设置了<code>Parent</code>和<code>Text</code>，这些内容都可以在创建时直接设置。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPushButton&gt;</span>  <span class="comment">//按钮控件的头文件</span></span></span><br><span class="line"></span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)  <span class="comment">//初始化列表</span></span><br><span class="line">&#123;</span><br><span class="line">    QPushButton * btn = <span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="string">&quot;这是一个按钮&quot;</span>,<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Widget::~<span class="built_in">Widget</span>() &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h1><h2 id="重置窗口"><a href="#重置窗口" class="headerlink" title="重置窗口"></a>重置窗口</h2><p>使用有参构造的方式创建按钮有一个缺点，会改变窗口大小，默认按照控件的大小创建窗口。</p><p>因此可以增加一行代码来重置窗口大小，使用<code>resize</code>方法即可完成，传入的两个参数分别对应长和宽。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPushButton&gt;</span>  <span class="comment">//按钮控件的头文件</span></span></span><br><span class="line"></span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)  <span class="comment">//初始化列表</span></span><br><span class="line">&#123;</span><br><span class="line">    QPushButton * btn = <span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="string">&quot;这是一个按钮&quot;</span>,<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重置窗口大小</span></span><br><span class="line">    <span class="built_in">resize</span>(<span class="number">600</span>, <span class="number">400</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Widget::~<span class="built_in">Widget</span>() &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h2><p>可以通过<code>move</code>方法对控件进行移动，只需要调用方法，并指定坐标即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//移动按钮</span></span><br><span class="line">btn-&gt;<span class="built_in">move</span>(<span class="number">280</span>, <span class="number">190</span>);</span><br></pre></td></tr></table></figure><h2 id="设置标题"><a href="#设置标题" class="headerlink" title="设置标题"></a>设置标题</h2><p>还可以设置窗口标题，需要调用<code>setWindowTitle</code>方法。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置窗口标题</span></span><br><span class="line"><span class="built_in">setWindowTitle</span>(<span class="string">&quot;测试&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="固定窗口"><a href="#固定窗口" class="headerlink" title="固定窗口"></a>固定窗口</h2><p>实际操作中发现，窗口可以随意拖动来控制大小，可以使用<code>setFixedSize</code>来固定窗口大小。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置固定窗口大小</span></span><br><span class="line"><span class="built_in">setFixedSize</span>(<span class="number">600</span>, <span class="number">400</span>);</span><br></pre></td></tr></table></figure><p>不仅窗口可以重置大小，按钮也可以使用<code>resize</code>进行重置。</p><h2 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h2><p>所有代码如下所示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPushButton&gt;</span>  <span class="comment">//按钮控件的头文件</span></span></span><br><span class="line"></span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)  <span class="comment">//初始化列表</span></span><br><span class="line">&#123;</span><br><span class="line">    QPushButton * btn = <span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="string">&quot;这是一个按钮&quot;</span>,<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重置窗口大小</span></span><br><span class="line">    <span class="built_in">resize</span>(<span class="number">600</span>, <span class="number">400</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//移动按钮</span></span><br><span class="line">    btn-&gt;<span class="built_in">move</span>(<span class="number">280</span>, <span class="number">190</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置窗口标题</span></span><br><span class="line">    <span class="built_in">setWindowTitle</span>(<span class="string">&quot;测试&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Widget::~<span class="built_in">Widget</span>() &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/Qt/%E5%B8%83%E5%B1%80%E7%A4%BA%E4%BE%8B.jpg" alt="布局示例"></p><h1 id="对象树"><a href="#对象树" class="headerlink" title="对象树"></a>对象树</h1><p>对于普通的<code>C++</code>编程实例化，每次都需要手动回收创建在堆区的内存，但<code>Qt</code>不需要手动释放，这正是因为对象树的存在。</p><p>在<code>Qt</code>中创建对象的时候会提供一个<code>Parent</code>对象指针。<code>QObject</code>是以对象树的形式组织起来的，当创建一个<code>    QObject</code>对象时，会看到<code>QObject</code>的构造函数接收一个<code>QObject</code>指针作为参数，这个参数就是<code>Parent</code>，也就是父对象指针。</p><p>这相当于，在创建<code>QObject</code>对象时，可以提供一个其父对象，我们创建的这个<code>QObject</code>对象会自动添加到其父对象的<code>children()</code>列表。</p><p>当父对象析构的时候，这个列表中的所有对象也会被析构（注意，这里的父对象并不是继承意义上的父类）。</p><p>这种机制在<code>GUI</code>程序设计中相当有用。例如，一个按钮有一个<code>QShortcut</code>（快捷键）对象作为其子对象。当我们删除按钮的时候，这个快捷键理应被删除，因此这是合理的。</p><p>总的来说，当创建的对象在堆区的时候，如果指定的父亲是<code>QObject</code>派生下来的类或者<code>QObject</code>子类派生下来的类，可以不用管理内存释放的操作，对象会放到对象树中，这样一定程度上简化了内存回收机制。</p><h1 id="Qt窗口坐标体系"><a href="#Qt窗口坐标体系" class="headerlink" title="Qt窗口坐标体系"></a>Qt窗口坐标体系</h1><p>坐标体系：以左上角为原点(0, 0)，<code>X</code>向右增加，<code>Y</code>向下增加。</p><p>对于嵌套窗口，其坐标是<strong>相对于父窗口</strong>来说的。</p><h1 id="信号和槽"><a href="#信号和槽" class="headerlink" title="信号和槽"></a>信号和槽</h1><h2 id="按钮信号"><a href="#按钮信号" class="headerlink" title="按钮信号"></a>按钮信号</h2><p>针对按钮的信号一共有四种：</p><table><thead><tr><th align="center">信号</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">clicked(bool checked = false)</td><td align="center">点击</td></tr><tr><td align="center">pressed()</td><td align="center">按下</td></tr><tr><td align="center">released()</td><td align="center">释放</td></tr><tr><td align="center">toggled(bool checked)</td><td align="center">切换</td></tr></tbody></table><h2 id="点击按钮关闭窗口"><a href="#点击按钮关闭窗口" class="headerlink" title="点击按钮关闭窗口"></a>点击按钮关闭窗口</h2><p>实现点击按钮关闭窗口的功能主要有四个部分，首先需要有按钮，点击之后，窗口会执行关闭操作。</p><p>具体而言，整个流程是将信号的发送者，发送的具体信号，信号的接受者，信号的处理（槽）这四个部分进行<code>connect</code>连接。</p><p>信号与槽的优点是松散耦合，信号发送端和接受端是没有关联的，通过<code>connect</code>连接，将两端耦合在一起。</p><p>使用<code>connect</code>方法即可完成这一功能，一共需要传递四个参数。</p><p>参数1是信号的发送者，参数2是发送的信号（函数的地址），参数3是信号的接受者，参数4是处理的槽函数。</p><p>具体代码如下所示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPushButton&gt;</span>  <span class="comment">//按钮控件的头文件</span></span></span><br><span class="line"></span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)  <span class="comment">//初始化列表</span></span><br><span class="line">&#123;</span><br><span class="line">    QPushButton * btn = <span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="string">&quot;关闭窗口&quot;</span>, <span class="keyword">this</span>);</span><br><span class="line">    <span class="built_in">setFixedSize</span>(<span class="number">600</span>, <span class="number">400</span>);</span><br><span class="line">    btn-&gt;<span class="built_in">resize</span>(<span class="number">60</span>, <span class="number">40</span>);</span><br><span class="line">    btn-&gt;<span class="built_in">move</span>(<span class="number">270</span>,<span class="number">180</span>);</span><br><span class="line">    <span class="built_in">connect</span>(btn, &amp;QPushButton::clicked, <span class="keyword">this</span>, &amp;Widget::close);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Widget::~<span class="built_in">Widget</span>() &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/Qt/%E7%82%B9%E5%87%BB%E6%8C%89%E9%92%AE%E5%85%B3%E9%97%AD%E7%AA%97%E5%8F%A3.jpg" alt="点击按钮关闭窗口"></p><p>这样就实现了点击按钮关闭窗口的功能，只需要点击窗口中间的按钮，即可关闭。</p><h2 id="自定义的信号和槽"><a href="#自定义的信号和槽" class="headerlink" title="自定义的信号和槽"></a>自定义的信号和槽</h2><p>对于创建的类，可以自定义信号和槽。</p><p>自定义的信号需要写在<code>signals</code>下，返回值必须是void。只需要声明，不需要实现，可以有参数，也可以发生重载。</p><p>自定义的槽在早期的版本中，必须要写在<code>public slots</code>下，高级版本可以写到<code>public</code>或者全局下。返回值是<code>void</code>，需要声明，也需要实现，可以有参数，也可以发生重载。</p><p>现在要实现这样的功能：下课的时候，老师说下课，然后学生离开教室。</p><p>为了完成这一需求，需要构造一个老师类和一个学生类。</p><p>老师类中，需要有<code>sayClassIsOver</code>这一信号，只声明不实现即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> TEACHER_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TEACHER_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QObject&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span> : <span class="keyword">public</span> QObject</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Teacher</span><span class="params">(QObject *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">sayClassIsOver</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// TEACHER_H</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对应的<code>cpp</code>文件中不需要添加多余的东西。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;teacher.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">Teacher::<span class="built_in">Teacher</span>(QObject *parent)</span><br><span class="line">    : QObject&#123;parent&#125;</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>学生类需要构造对应的槽，在头文件中进行声明，源文件中进行编写。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> STUDENT_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STUDENT_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QObject&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> : <span class="keyword">public</span> QObject</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Student</span><span class="params">(QObject *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Leave</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// STUDENT_H</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>源文件中编写槽具体对应的功能。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;student.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line"></span><br><span class="line">Student::<span class="built_in">Student</span>(QObject *parent)</span><br><span class="line">    : QObject&#123;parent&#125;</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Student::Leave</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;The students left the classroom.&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>窗体代码中需要定义相应的成员，声明下课的函数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> WIDGET_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WIDGET_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QWidget&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;teacher.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;student.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">QT_BEGIN_NAMESPACE</span><br><span class="line"><span class="keyword">namespace</span> Ui &#123;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Widget</span>;</span><br><span class="line">&#125;</span><br><span class="line">QT_END_NAMESPACE</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Widget</span> : <span class="keyword">public</span> QWidget</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Widget</span>(QWidget *parent = <span class="literal">nullptr</span>);</span><br><span class="line">    ~<span class="built_in">Widget</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Ui::Widget *ui;</span><br><span class="line"></span><br><span class="line">    Teacher * teacher;</span><br><span class="line">    Student * student;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">classIsOver</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// WIDGET_H</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>源代码中进行对象实例化，使用<code>emit</code>关键字触发对应的信号。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_widget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Teacher 类 老师类</span></span><br><span class="line"><span class="comment">//Student 类 学生类</span></span><br><span class="line"><span class="comment">//下课后，老师说下课，学生离开教室</span></span><br><span class="line"></span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建一个老师对象</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;teacher = <span class="keyword">new</span> <span class="built_in">Teacher</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建一个学生对象</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;student = <span class="keyword">new</span> <span class="built_in">Student</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//老师说下课学生离开教室</span></span><br><span class="line">    <span class="built_in">connect</span>(<span class="keyword">this</span>-&gt;teacher, &amp;Teacher::sayClassIsOver, <span class="keyword">this</span>-&gt;student, &amp;Student::Leave);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">classIsOver</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::classIsOver</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    emit <span class="keyword">this</span>-&gt;teacher-&gt;<span class="built_in">sayClassIsOver</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Widget::~<span class="built_in">Widget</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The students left the classroom.</span><br></pre></td></tr></table></figure><h2 id="重载问题"><a href="#重载问题" class="headerlink" title="重载问题"></a>重载问题</h2><p>上面讲到，自定义的信号和槽可以发生重载，这样连接的时候会产生问题，程序不知道该调用哪个函数。因此，如果要连接带参数的信号和槽，需要使用函数指针。</p><p>指针函数基本格式：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">返回值类型(类名::* 函数指针名)(参数列表) = &amp;类名::函数名</span><br></pre></td></tr></table></figure><p><code>Teacher</code>和<code>Student</code>需要分别定义重载的函数。</p><p><code>Teacher</code>头文件：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> TEACHER_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TEACHER_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QObject&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span> : <span class="keyword">public</span> QObject</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Teacher</span><span class="params">(QObject *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">sayClassIsOver</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">sayClassIsOver</span><span class="params">(QString subject)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// TEACHER_H</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>Teacher</code>源文件：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;teacher.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">Teacher::<span class="built_in">Teacher</span>(QObject *parent)</span><br><span class="line">    : QObject&#123;parent&#125;</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>Student</code>头文件：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> STUDENT_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STUDENT_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QObject&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> : <span class="keyword">public</span> QObject</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Student</span><span class="params">(QObject *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Leave</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Leave</span><span class="params">(QString subject)</span></span>;</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// STUDENT_H</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>Student</code>源文件：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;student.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line"></span><br><span class="line">Student::<span class="built_in">Student</span>(QObject *parent)</span><br><span class="line">    : QObject&#123;parent&#125;</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Student::Leave</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;The students left the classroom.&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Student::Leave</span><span class="params">(QString subject)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;The students left the &quot;</span> &lt;&lt; subject &lt;&lt; <span class="string">&quot; classroom.&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>窗口源文件：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_widget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Teacher 类 老师类</span></span><br><span class="line"><span class="comment">//Student 类 学生类</span></span><br><span class="line"><span class="comment">//下课后，老师说下课，学生离开教室</span></span><br><span class="line"></span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建一个老师对象</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;teacher = <span class="keyword">new</span> <span class="built_in">Teacher</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建一个学生对象</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;student = <span class="keyword">new</span> <span class="built_in">Student</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">void</span>(Teacher:: *teacherSignal)(QString) = &amp;Teacher::sayClassIsOver;</span><br><span class="line">    <span class="built_in">void</span>(Student:: *studentSlot)(QString) = &amp;Student::Leave;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">connect</span>(<span class="keyword">this</span>-&gt;teacher, teacherSignal, <span class="keyword">this</span>-&gt;student, studentSlot);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">classIsOver</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::classIsOver</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    emit <span class="keyword">this</span>-&gt;teacher-&gt;<span class="built_in">sayClassIsOver</span>(<span class="string">&quot;English&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Widget::~<span class="built_in">Widget</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The students left the  &quot;English&quot;  classroom.</span><br></pre></td></tr></table></figure><p>可以发现，通过这种方式会额外输出一对引号。可以使用<code>.toUtf8()</code>转成<code>QByteArray</code>类型，在使用<code>data()</code>转成<code>char *</code>类型即可完成需求。</p><p>修改<code>Student</code>的源文件为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;student.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line"></span><br><span class="line">Student::<span class="built_in">Student</span>(QObject *parent)</span><br><span class="line">    : QObject&#123;parent&#125;</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Student::Leave</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;The students left the classroom.&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Student::Leave</span><span class="params">(QString subject)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;The students left the&quot;</span> &lt;&lt; subject.<span class="built_in">toUtf8</span>().<span class="built_in">data</span>() &lt;&lt; <span class="string">&quot;classroom.&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The students left the English classroom.</span><br></pre></td></tr></table></figure><h2 id="信号连接信号"><a href="#信号连接信号" class="headerlink" title="信号连接信号"></a>信号连接信号</h2><p>信号不仅可以和槽进行连接，也可以直接与信号相连。</p><p>现在更改一下需求，设置一个下课按钮，每次点击都会输出一次学生离开教室。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_widget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPushButton&gt;</span></span></span><br><span class="line"></span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建一个老师对象</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;teacher = <span class="keyword">new</span> <span class="built_in">Teacher</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建一个学生对象</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;student = <span class="keyword">new</span> <span class="built_in">Student</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//连接老师下课和学生离开教室</span></span><br><span class="line">    <span class="built_in">connect</span>(<span class="keyword">this</span>-&gt;teacher, &amp;Teacher::sayClassIsOver, <span class="keyword">this</span>-&gt;student, &amp;Student::Leave);</span><br><span class="line"></span><br><span class="line">    QPushButton * btn = <span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="string">&quot;下课&quot;</span>,<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//控制布局</span></span><br><span class="line">    <span class="built_in">setFixedSize</span>(<span class="number">600</span>, <span class="number">400</span>);</span><br><span class="line">    btn-&gt;<span class="built_in">resize</span>(<span class="number">60</span>, <span class="number">40</span>);</span><br><span class="line">    btn-&gt;<span class="built_in">move</span>(<span class="number">270</span>,<span class="number">180</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//连接按钮点击信号与老师说下课信号</span></span><br><span class="line">    <span class="built_in">connect</span>(btn, &amp;QPushButton::clicked, <span class="keyword">this</span>-&gt;teacher, &amp;Teacher::sayClassIsOver);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用</span></span><br><span class="line">    <span class="comment">//this-&gt;classIsOver();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::classIsOver</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    emit <span class="keyword">this</span>-&gt;teacher-&gt;<span class="built_in">sayClassIsOver</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Widget::~<span class="built_in">Widget</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/Qt/%E6%8C%89%E9%92%AE%E4%B8%8B%E8%AF%BE.jpg" alt="按钮下课"></p><p>每一次点击下课按钮，都会输出学生离开教室的信息。</p><p>如果想要断开连接，可以使用<code>disconnect</code>，使用方法与<code>connect</code>相同。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">disconnect</span>(btn, &amp;QPushButton::clicked, <span class="keyword">this</span>-&gt;teacher, &amp;Teacher::sayClassIsOver);</span><br></pre></td></tr></table></figure><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><ol><li><p>信号是可以连接信号的。</p></li><li><p>一个信号可以连接多个槽函数。</p></li><li><p>多个信号，可以连接同一个槽函数。</p></li><li><p>信号和槽函数的参数，必须类型一一对应。</p></li><li><p>信号的参数个数，可以多于槽函数的参数个数。</p></li></ol><h2 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2><p><code>C++11</code>中的<code>Lambda</code>表达式用于定义并创建匿名的函数对象，以简化编程工作。</p><p><code>Lambda</code>表达式的基本构成：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[capture](parameters)<span class="keyword">mutable</span>-&gt;<span class="keyword">return</span>-type</span><br><span class="line">&#123;</span><br><span class="line">    statement</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[]</code>表示一个<code>Lambda</code>的开始，这部分必须存在，<strong>不能省略</strong>。函数对象参数是传递给编译器自动生成的函数对象类的构造函数的。函数对象参数只能使用那些到定义<code>Lambda</code>位置时<code>Lambda</code>所在作用范围内可见的局部变量（包括<code>Lambda</code>所在类的<code>this</code>）。函数对象参数有以下形式：</p><ul><li>空。没有使用任何函数对象参数。</li><li><code>=</code>。函数体内可以使用<code>Lambda</code>所在作用范围内所有可见的局部变量（包括<code>Lambda</code>所在类的<code>this</code>），并且是<strong>值传递方式</strong>（相当于编译器自助为我们按值传递了所有局部变量）。</li><li><code>&amp;</code>。函数体内可以使用<code>Lambda</code>所在作用范围内所有可见的局部变量（包括<code>Lambda</code>所在类的<code>this</code>），并且是<strong>引用传递方式</strong>（相当于编译器自助为我们按引用传递了所有局部变量）。</li><li><code>this</code>。函数体内可以使用<code>Lambda</code>所在类中的成员变量。</li><li><code>a</code>。将<code>a</code>按值进行传递。按值进行传递时，函数体内不能修改传递进来的<code>a</code>的拷贝，因为默认情况下函数是<code>const</code>的。<strong>要求改传递进来的<code>a</code>的拷贝</strong>，可以添加<code>mutable</code>修饰符。</li><li><code>&amp;a</code>。将<code>a</code>按引用进行传递。</li><li><code>a</code>，<code>&amp;b</code>。将<code>a</code>按值进行传递，<code>b</code>按引用进行传递。</li><li><code>=, &amp;a, &amp;b</code>。除<code>a</code>和<code>b</code>按引用进行传递外，其他参数都按值进行传递。</li><li><code>&amp;, a, b</code>。除<code>a</code>和<code>b</code>按值进行传递外，其它参数都按引用进行传递。</li></ul><p>在点击按钮下课的例子中，可以尝试使用<code>Lambda</code>表达式将按钮上的文本信息改为“上课”。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_widget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPushButton&gt;</span></span></span><br><span class="line"></span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建一个老师对象</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;teacher = <span class="keyword">new</span> <span class="built_in">Teacher</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建一个学生对象</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;student = <span class="keyword">new</span> <span class="built_in">Student</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//连接老师下课和学生离开教室</span></span><br><span class="line">    <span class="built_in">connect</span>(<span class="keyword">this</span>-&gt;teacher, &amp;Teacher::sayClassIsOver, <span class="keyword">this</span>-&gt;student, &amp;Student::Leave);</span><br><span class="line"></span><br><span class="line">    QPushButton * btn = <span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="string">&quot;下课&quot;</span>,<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//控制布局</span></span><br><span class="line">    <span class="built_in">setFixedSize</span>(<span class="number">600</span>, <span class="number">400</span>);</span><br><span class="line">    btn-&gt;<span class="built_in">resize</span>(<span class="number">60</span>, <span class="number">40</span>);</span><br><span class="line">    btn-&gt;<span class="built_in">move</span>(<span class="number">270</span>,<span class="number">180</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//连接按钮点击信号与老师说下课信号</span></span><br><span class="line">    <span class="built_in">connect</span>(btn, &amp;QPushButton::clicked, <span class="keyword">this</span>-&gt;teacher, &amp;Teacher::sayClassIsOver);</span><br><span class="line"></span><br><span class="line">    [=]()</span><br><span class="line">    &#123;</span><br><span class="line">        btn-&gt;<span class="built_in">setText</span>(<span class="string">&quot;上课&quot;</span>);</span><br><span class="line">    &#125;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用</span></span><br><span class="line">    <span class="comment">//this-&gt;classIsOver();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::classIsOver</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    emit <span class="keyword">this</span>-&gt;teacher-&gt;<span class="built_in">sayClassIsOver</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Widget::~<span class="built_in">Widget</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/Qt/Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%A4%BA%E4%BE%8B.jpg" alt="Lambda表达式示例"></p><p>操作符重载函数参数，标识重载的<code>()</code>操作符的参数，没有参数时，这部分可以省略。参数可以通过按值和按引用两种方式进行传递。</p><p>可修改的标识符使用<code>mutable</code>声明，这部分可以省略。按值传递函数对象参数时，加上<code>mutable</code>修饰符后，可以修改按值传递进来的拷贝（注意是能修改拷贝，而不是值本身）。</p><p>例如现在声明一个变量，将其传递进<code>Lambda</code>表达式中，无法修改其值，但是加上<code>mutable</code>声明就可以进行修改了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> m = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">[m]() <span class="keyword">mutable</span></span><br><span class="line">&#123;</span><br><span class="line">    m += <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; m;</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">20</span><br></pre></td></tr></table></figure><p>函数返回值，使用<code>-&gt;</code>标识函数返回值的类型，当返回值为<code>void</code>，或者函数体中只有一处<code>return</code>的地方（此时编译器可以自动推断出返回值类型）时，这部分可以省略。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> ret = []()-&gt;<span class="type">int</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1000</span>;</span><br><span class="line">&#125;();</span><br><span class="line"><span class="built_in">qDebug</span>() &lt;&lt; ret;</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1000</span><br></pre></td></tr></table></figure><p>利用<code>Lambda</code>表达式可以在<code>connect</code>中充当槽函数的位置，简化代码。</p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>制作一个窗口，里面包含一个按钮，初始显示为<code>open</code>。点击一次弹出一个新的窗口，且按钮变为<code>close</code>。点击<code>close</code>按钮会关闭弹出的窗口，且按钮变为<code>open</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPushButton&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line"></span><br><span class="line">    Widget * w1 = <span class="keyword">new</span> Widget;  <span class="comment">//界面1</span></span><br><span class="line">    Widget * w2 = <span class="keyword">new</span> Widget;  <span class="comment">//界面2</span></span><br><span class="line"></span><br><span class="line">    QPushButton * btn = <span class="keyword">new</span> QPushButton;  <span class="comment">//按钮</span></span><br><span class="line">    btn-&gt;<span class="built_in">setCheckable</span>(<span class="literal">true</span>);  <span class="comment">//设置为可切换状态</span></span><br><span class="line">    w1-&gt;<span class="built_in">setFixedSize</span>(<span class="number">600</span>, <span class="number">400</span>);</span><br><span class="line">    w2-&gt;<span class="built_in">setFixedSize</span>(<span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line">    btn-&gt;<span class="built_in">setParent</span>(w1);</span><br><span class="line">    btn-&gt;<span class="built_in">resize</span>(<span class="number">60</span>, <span class="number">40</span>);</span><br><span class="line">    btn-&gt;<span class="built_in">move</span>(<span class="number">270</span>,<span class="number">180</span>);</span><br><span class="line">    btn-&gt;<span class="built_in">setText</span>(<span class="string">&quot;open&quot;</span>);</span><br><span class="line">    <span class="comment">//按钮改变连接</span></span><br><span class="line">    QObject::<span class="built_in">connect</span>(btn, &amp;QPushButton::toggled, btn, [=](<span class="type">bool</span> checked)&#123;</span><br><span class="line">        <span class="keyword">if</span>(checked == <span class="literal">false</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            btn-&gt;<span class="built_in">setText</span>(<span class="string">&quot;open&quot;</span>);</span><br><span class="line">            w2-&gt;<span class="built_in">close</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            w2-&gt;<span class="built_in">show</span>();</span><br><span class="line">            btn-&gt;<span class="built_in">setText</span>(<span class="string">&quot;close&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    w1-&gt;<span class="built_in">show</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> a.<span class="built_in">exec</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="QMainWindow"><a href="#QMainWindow" class="headerlink" title="QMainWindow"></a>QMainWindow</h1><p><code>QMainWindow</code>是一个为用户提供主窗口程序的类，包含一个菜单栏（<code>menu bar</code>）、多个工具栏（<code>tool bars</code>），多个锚接部件（<code>dock widgets</code>）、一个状态栏（<code>status bar</code>）及一个中心部件（<code>central widget</code>）。是许多应用程序的基础，如文本编辑器，图片编辑器等。</p><h2 id="菜单栏"><a href="#菜单栏" class="headerlink" title="菜单栏"></a>菜单栏</h2><h3 id="创建菜单栏"><a href="#创建菜单栏" class="headerlink" title="创建菜单栏"></a>创建菜单栏</h3><p>菜单栏所属的类是<code>QMenuBar</code>，创建菜单栏与创建按钮一致。需要注意的是，<code>menuBar()</code>是一个成员函数，因此不需要使用<code>new</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QMenuBar * bar = <span class="built_in">menuBar</span>();</span><br></pre></td></tr></table></figure><p>创建完成后，需要将菜单栏放入窗口中。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setMenuBar</span>(bar);</span><br></pre></td></tr></table></figure><p>由于当前菜单为空，因此不会显示任何东西。如果想要构造菜单中的东西的话，需要引入<code>QMenuBar</code>头文件。</p><h3 id="创建菜单"><a href="#创建菜单" class="headerlink" title="创建菜单"></a>创建菜单</h3><p>通过使用<code>addMenu</code>成员函数来创建菜单中的项目，这个函数有一个<code>QMenu</code>类型的指针返回值，需要用相应的指针变量接收，方便后续使用。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">QMenu * fileMenu = bar-&gt;<span class="built_in">addMenu</span>(<span class="string">&quot;文件&quot;</span>);</span><br><span class="line">QMenu * editMenu = bar-&gt;<span class="built_in">addMenu</span>(<span class="string">&quot;编辑&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="创建菜单项"><a href="#创建菜单项" class="headerlink" title="创建菜单项"></a>创建菜单项</h3><p>调用相应指针中的<code>addAcition</code>成员函数，可以添加菜单项。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fileMenu-&gt;<span class="built_in">addAction</span>(<span class="string">&quot;新建&quot;</span>);</span><br><span class="line">fileMenu-&gt;<span class="built_in">addAction</span>(<span class="string">&quot;打开&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="添加分隔符"><a href="#添加分隔符" class="headerlink" title="添加分隔符"></a>添加分隔符</h3><p>我们平常使用的软件，菜单项之间一般会有一个分隔符，这个分隔符也是可以添加的。通过使用<code>addSeparator</code>成员函数，即可添加分隔符。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fileMenu-&gt;<span class="built_in">addSeparator</span>();</span><br></pre></td></tr></table></figure><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h3><p>完整代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mainwindow.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMenubar&gt;</span></span></span><br><span class="line"></span><br><span class="line">MainWindow::<span class="built_in">MainWindow</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QMainWindow</span>(parent)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">setFixedSize</span>(<span class="number">600</span>, <span class="number">400</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜单栏创建</span></span><br><span class="line">    QMenuBar * bar = <span class="built_in">menuBar</span>();</span><br><span class="line">    <span class="comment">//将菜单栏放入到窗口中</span></span><br><span class="line">    <span class="built_in">setMenuBar</span>(bar);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建菜单</span></span><br><span class="line">    QMenu * fileMenu = bar-&gt;<span class="built_in">addMenu</span>(<span class="string">&quot;文件&quot;</span>);</span><br><span class="line">    QMenu * editMenu = bar-&gt;<span class="built_in">addMenu</span>(<span class="string">&quot;编辑&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建菜单项</span></span><br><span class="line">    fileMenu-&gt;<span class="built_in">addAction</span>(<span class="string">&quot;新建&quot;</span>);</span><br><span class="line">    fileMenu-&gt;<span class="built_in">addSeparator</span>();</span><br><span class="line">    fileMenu-&gt;<span class="built_in">addAction</span>(<span class="string">&quot;打开&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MainWindow::~<span class="built_in">MainWindow</span>() &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/Qt/%E8%8F%9C%E5%8D%95%E6%A0%8F%E7%A4%BA%E4%BE%8B.jpg" alt="菜单栏示例"></p><h2 id="工具栏"><a href="#工具栏" class="headerlink" title="工具栏"></a>工具栏</h2><h3 id="创建工具栏"><a href="#创建工具栏" class="headerlink" title="创建工具栏"></a>创建工具栏</h3><p>工具栏可以有多个，需要使用<code>QToolBar</code>头文件。</p><p>创建工具栏时只需要使用<code>new</code>实例化一个对象即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QToolBar * toolBar = <span class="keyword">new</span> <span class="built_in">QToolBar</span>(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure><p>创建出来的工具栏是独立出去的，需要使用<code>addToolBar</code>使其依附在窗口中。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">addToolBar</span>(toolBar);</span><br></pre></td></tr></table></figure><h3 id="默认位置"><a href="#默认位置" class="headerlink" title="默认位置"></a>默认位置</h3><p>初始的工具栏默认位置在上方，如果想改变位置，可以使用相应的参数，例如想要让其初始位置在左边，可以写下面这段代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">addToolBar</span>(Qt::LeftToolBarArea, toolBar);</span><br></pre></td></tr></table></figure><h3 id="设置停靠权限"><a href="#设置停靠权限" class="headerlink" title="设置停靠权限"></a>设置停靠权限</h3><p>工具栏默认可以在任何位置停靠，可以通过枚举取或的方式来调整停靠权限。例如希望工具栏只能停留在左侧或右侧，则可以使用<code>setAllowedAreas</code>函数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">toolBar-&gt;<span class="built_in">setAllowedAreas</span>(Qt::LeftToolBarArea | Qt::RightToolBarArea);</span><br></pre></td></tr></table></figure><h3 id="设置浮动"><a href="#设置浮动" class="headerlink" title="设置浮动"></a>设置浮动</h3><p>如果工具栏不进行停靠的话，可以浮动在任何地方。如果不想让他任意浮动的话，可以设置相应的参数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">toolBar-&gt;<span class="built_in">setFloatable</span>(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure><h3 id="设置移动"><a href="#设置移动" class="headerlink" title="设置移动"></a>设置移动</h3><p>设置移动相当于一个总开关，如果置为<code>false</code>则不能进行移动。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">toolBar-&gt;<span class="built_in">setMovable</span>(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure><h3 id="设置内容"><a href="#设置内容" class="headerlink" title="设置内容"></a>设置内容</h3><p>与之前相类似，先创建相应的项目，然后添加到工具栏中。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">QAction * welcomeAction = <span class="built_in">addAction</span>(<span class="string">&quot;欢迎&quot;</span>);</span><br><span class="line">QAction * editAction = <span class="built_in">addAction</span>(<span class="string">&quot;编辑&quot;</span>);</span><br><span class="line"></span><br><span class="line">toolBar-&gt;<span class="built_in">addAction</span>(welcomeAction);</span><br><span class="line">toolBar-&gt;<span class="built_in">addAction</span>(editAction);</span><br></pre></td></tr></table></figure><h3 id="设置分割线"><a href="#设置分割线" class="headerlink" title="设置分割线"></a>设置分割线</h3><p>工具栏中也可以使用<code>addSeparator</code>来设置分割线。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">QAction * welcomeAction = <span class="built_in">addAction</span>(<span class="string">&quot;欢迎&quot;</span>);</span><br><span class="line">QAction * editAction = <span class="built_in">addAction</span>(<span class="string">&quot;编辑&quot;</span>);</span><br><span class="line"></span><br><span class="line">toolBar-&gt;<span class="built_in">addAction</span>(welcomeAction);</span><br><span class="line">toolBar-&gt;<span class="built_in">addSeparator</span>();</span><br><span class="line">toolBar-&gt;<span class="built_in">addAction</span>(editAction);</span><br></pre></td></tr></table></figure><h3 id="添加按钮"><a href="#添加按钮" class="headerlink" title="添加按钮"></a>添加按钮</h3><p>工具栏中也是可以添加按钮的，使用<code>addWidget</code>即可实现。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">QPushButton * btn = <span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="string">&quot;Click Me!&quot;</span>, <span class="keyword">this</span>);</span><br><span class="line">toolBar-&gt;<span class="built_in">addWidget</span>(btn);</span><br></pre></td></tr></table></figure><h3 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h3><p>完整代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mainwindow.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMenubar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QToolBar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPushButton&gt;</span></span></span><br><span class="line"></span><br><span class="line">MainWindow::<span class="built_in">MainWindow</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QMainWindow</span>(parent)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">setFixedSize</span>(<span class="number">600</span>, <span class="number">400</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜单栏创建</span></span><br><span class="line">    QMenuBar * bar = <span class="built_in">menuBar</span>();</span><br><span class="line">    <span class="comment">//将菜单栏放入到窗口中</span></span><br><span class="line">    <span class="built_in">setMenuBar</span>(bar);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建菜单</span></span><br><span class="line">    QMenu * fileMenu = bar-&gt;<span class="built_in">addMenu</span>(<span class="string">&quot;文件&quot;</span>);</span><br><span class="line">    QMenu * editMenu = bar-&gt;<span class="built_in">addMenu</span>(<span class="string">&quot;编辑&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建菜单项</span></span><br><span class="line">    fileMenu-&gt;<span class="built_in">addAction</span>(<span class="string">&quot;新建&quot;</span>);</span><br><span class="line">    fileMenu-&gt;<span class="built_in">addSeparator</span>();</span><br><span class="line">    fileMenu-&gt;<span class="built_in">addAction</span>(<span class="string">&quot;打开&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//工具栏</span></span><br><span class="line">    QToolBar * toolBar = <span class="keyword">new</span> <span class="built_in">QToolBar</span>(<span class="keyword">this</span>);</span><br><span class="line">    <span class="built_in">addToolBar</span>(Qt::LeftToolBarArea, toolBar);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更改默认停靠位置</span></span><br><span class="line">    toolBar-&gt;<span class="built_in">setAllowedAreas</span>(Qt::LeftToolBarArea | Qt::RightToolBarArea);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//禁止浮动</span></span><br><span class="line">    toolBar-&gt;<span class="built_in">setFloatable</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//禁止移动</span></span><br><span class="line">    toolBar-&gt;<span class="built_in">setMovable</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置内容</span></span><br><span class="line">    QAction * welcomeAction = <span class="built_in">addAction</span>(<span class="string">&quot;欢迎&quot;</span>);</span><br><span class="line">    QAction * editAction = <span class="built_in">addAction</span>(<span class="string">&quot;编辑&quot;</span>);</span><br><span class="line"></span><br><span class="line">    toolBar-&gt;<span class="built_in">addAction</span>(welcomeAction);</span><br><span class="line">    toolBar-&gt;<span class="built_in">addSeparator</span>();</span><br><span class="line">    toolBar-&gt;<span class="built_in">addAction</span>(editAction);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//工具栏中添加控件</span></span><br><span class="line">    QPushButton * btn = <span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="string">&quot;Click Me!&quot;</span>, <span class="keyword">this</span>);</span><br><span class="line">    toolBar-&gt;<span class="built_in">addWidget</span>(btn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MainWindow::~<span class="built_in">MainWindow</span>() &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/Qt/%E5%B7%A5%E5%85%B7%E6%A0%8F%E7%A4%BA%E4%BE%8B.jpg" alt="工具栏示例"></p><h2 id="状态栏"><a href="#状态栏" class="headerlink" title="状态栏"></a>状态栏</h2><h3 id="创建状态栏"><a href="#创建状态栏" class="headerlink" title="创建状态栏"></a>创建状态栏</h3><p>状态栏最多只有一个，需要使用头文件<code>QStatusBar</code>。和菜单栏一样，创建时使用的都是成员函数，使用对应类型的指针即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QStatusBar * stBar = <span class="built_in">statusBar</span>();</span><br></pre></td></tr></table></figure><p>创建后，同样需要将其放入窗口中。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setStatusBar</span>(stBar);</span><br></pre></td></tr></table></figure><h3 id="放置标签控件"><a href="#放置标签控件" class="headerlink" title="放置标签控件"></a>放置标签控件</h3><p>标签控件使用的头文件是<code>QLabel</code>，和按钮一样，需要实例化来创建，调用<code>addWidget</code>来添加到状态栏中。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">QLabel * label = <span class="keyword">new</span> <span class="built_in">QLabel</span>(<span class="string">&quot;提示信息&quot;</span>, <span class="keyword">this</span>);</span><br><span class="line">stBar-&gt;<span class="built_in">addWidget</span>(label);</span><br></pre></td></tr></table></figure><h3 id="设置标签位置"><a href="#设置标签位置" class="headerlink" title="设置标签位置"></a>设置标签位置</h3><p>使用上述方法设置的标签默认位置在左侧，如果想要设置在右侧可以使用<code>addPermanentWidget</code>方法。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">QLabel * label_ = <span class="keyword">new</span> <span class="built_in">QLabel</span>(<span class="string">&quot;右侧提示信息&quot;</span>, <span class="keyword">this</span>);</span><br><span class="line">stBar-&gt;<span class="built_in">addPermanentWidget</span>(label_);</span><br></pre></td></tr></table></figure><h3 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h3><p>完整代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mainwindow.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMenubar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QToolBar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QStatusBar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPushButton&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QLabel&gt;</span></span></span><br><span class="line"></span><br><span class="line">MainWindow::<span class="built_in">MainWindow</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QMainWindow</span>(parent)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">setFixedSize</span>(<span class="number">600</span>, <span class="number">400</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜单栏创建</span></span><br><span class="line">    QMenuBar * bar = <span class="built_in">menuBar</span>();</span><br><span class="line">    <span class="comment">//将菜单栏放入到窗口中</span></span><br><span class="line">    <span class="built_in">setMenuBar</span>(bar);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建菜单</span></span><br><span class="line">    QMenu * fileMenu = bar-&gt;<span class="built_in">addMenu</span>(<span class="string">&quot;文件&quot;</span>);</span><br><span class="line">    QMenu * editMenu = bar-&gt;<span class="built_in">addMenu</span>(<span class="string">&quot;编辑&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建菜单项</span></span><br><span class="line">    fileMenu-&gt;<span class="built_in">addAction</span>(<span class="string">&quot;新建&quot;</span>);</span><br><span class="line">    fileMenu-&gt;<span class="built_in">addSeparator</span>();</span><br><span class="line">    fileMenu-&gt;<span class="built_in">addAction</span>(<span class="string">&quot;打开&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//工具栏</span></span><br><span class="line">    QToolBar * toolBar = <span class="keyword">new</span> <span class="built_in">QToolBar</span>(<span class="keyword">this</span>);</span><br><span class="line">    <span class="built_in">addToolBar</span>(Qt::LeftToolBarArea, toolBar);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更改默认停靠位置</span></span><br><span class="line">    toolBar-&gt;<span class="built_in">setAllowedAreas</span>(Qt::LeftToolBarArea | Qt::RightToolBarArea);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//禁止浮动</span></span><br><span class="line">    toolBar-&gt;<span class="built_in">setFloatable</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//禁止移动</span></span><br><span class="line">    toolBar-&gt;<span class="built_in">setMovable</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置内容</span></span><br><span class="line">    QAction * welcomeAction = <span class="built_in">addAction</span>(<span class="string">&quot;欢迎&quot;</span>);</span><br><span class="line">    QAction * editAction = <span class="built_in">addAction</span>(<span class="string">&quot;编辑&quot;</span>);</span><br><span class="line"></span><br><span class="line">    toolBar-&gt;<span class="built_in">addAction</span>(welcomeAction);</span><br><span class="line">    toolBar-&gt;<span class="built_in">addSeparator</span>();</span><br><span class="line">    toolBar-&gt;<span class="built_in">addAction</span>(editAction);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//工具栏中添加控件</span></span><br><span class="line">    QPushButton * btn = <span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="string">&quot;Click Me!&quot;</span>, <span class="keyword">this</span>);</span><br><span class="line">    toolBar-&gt;<span class="built_in">addWidget</span>(btn);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建工具栏</span></span><br><span class="line">    QStatusBar * stBar = <span class="built_in">statusBar</span>();</span><br><span class="line">    <span class="comment">//设置到窗口中</span></span><br><span class="line">    <span class="built_in">setStatusBar</span>(stBar);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//放置标签控件</span></span><br><span class="line">    QLabel * label = <span class="keyword">new</span> <span class="built_in">QLabel</span>(<span class="string">&quot;提示信息&quot;</span>, <span class="keyword">this</span>);</span><br><span class="line">    stBar-&gt;<span class="built_in">addWidget</span>(label);</span><br><span class="line">    <span class="comment">//放置右侧标签</span></span><br><span class="line">    QLabel * label_ = <span class="keyword">new</span> <span class="built_in">QLabel</span>(<span class="string">&quot;右侧提示信息&quot;</span>, <span class="keyword">this</span>);</span><br><span class="line">    stBar-&gt;<span class="built_in">addPermanentWidget</span>(label_);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MainWindow::~<span class="built_in">MainWindow</span>() &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/Qt/%E7%8A%B6%E6%80%81%E6%A0%8F%E7%A4%BA%E4%BE%8B.jpg" alt="状态栏示例"></p><h2 id="铆接部件"><a href="#铆接部件" class="headerlink" title="铆接部件"></a>铆接部件</h2><h3 id="创建铆接部件"><a href="#创建铆接部件" class="headerlink" title="创建铆接部件"></a>创建铆接部件</h3><p>铆接部件是浮动的窗口，可以有多个，需要使用头文件<code>QDockWidget</code>。由于有多个，因此可以使用实例化的方式来创建，初始可以设置铆接部件的名称和<code>Parent</code>。</p><p>添加到窗口中需要使用<code>addDockWidget</code>函数，其中有两个参数，第一个是铆接部件的位置信息，第二个是铆接部件对象。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">QDockWidget * dockWidget = <span class="keyword">new</span> <span class="built_in">QDockWidget</span>(<span class="string">&quot;浮动&quot;</span>, <span class="keyword">this</span>);</span><br><span class="line"><span class="built_in">addDockWidget</span>(Qt::BottomDockWidgetArea, dockWidget);</span><br></pre></td></tr></table></figure><h3 id="设置停靠权限-1"><a href="#设置停靠权限-1" class="headerlink" title="设置停靠权限"></a>设置停靠权限</h3><p>铆接部件可以在上下左右四个位置进行停靠，可以通过设置来改变其权限，例如如果只想使其实现上下停靠，可以使用如下代码。</p><h3 id="示例-5"><a href="#示例-5" class="headerlink" title="示例"></a>示例</h3><p>完整代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mainwindow.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMenubar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QToolBar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QStatusBar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDockWidget&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPushButton&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QLabel&gt;</span></span></span><br><span class="line"></span><br><span class="line">MainWindow::<span class="built_in">MainWindow</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QMainWindow</span>(parent)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">setFixedSize</span>(<span class="number">600</span>, <span class="number">400</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜单栏创建</span></span><br><span class="line">    QMenuBar * bar = <span class="built_in">menuBar</span>();</span><br><span class="line">    <span class="comment">//将菜单栏放入到窗口中</span></span><br><span class="line">    <span class="built_in">setMenuBar</span>(bar);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建菜单</span></span><br><span class="line">    QMenu * fileMenu = bar-&gt;<span class="built_in">addMenu</span>(<span class="string">&quot;文件&quot;</span>);</span><br><span class="line">    QMenu * editMenu = bar-&gt;<span class="built_in">addMenu</span>(<span class="string">&quot;编辑&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建菜单项</span></span><br><span class="line">    fileMenu-&gt;<span class="built_in">addAction</span>(<span class="string">&quot;新建&quot;</span>);</span><br><span class="line">    fileMenu-&gt;<span class="built_in">addSeparator</span>();</span><br><span class="line">    fileMenu-&gt;<span class="built_in">addAction</span>(<span class="string">&quot;打开&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//工具栏</span></span><br><span class="line">    QToolBar * toolBar = <span class="keyword">new</span> <span class="built_in">QToolBar</span>(<span class="keyword">this</span>);</span><br><span class="line">    <span class="built_in">addToolBar</span>(Qt::LeftToolBarArea, toolBar);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更改默认停靠位置</span></span><br><span class="line">    toolBar-&gt;<span class="built_in">setAllowedAreas</span>(Qt::LeftToolBarArea | Qt::RightToolBarArea);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//禁止浮动</span></span><br><span class="line">    toolBar-&gt;<span class="built_in">setFloatable</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//禁止移动</span></span><br><span class="line">    toolBar-&gt;<span class="built_in">setMovable</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置内容</span></span><br><span class="line">    QAction * welcomeAction = <span class="built_in">addAction</span>(<span class="string">&quot;欢迎&quot;</span>);</span><br><span class="line">    QAction * editAction = <span class="built_in">addAction</span>(<span class="string">&quot;编辑&quot;</span>);</span><br><span class="line"></span><br><span class="line">    toolBar-&gt;<span class="built_in">addAction</span>(welcomeAction);</span><br><span class="line">    toolBar-&gt;<span class="built_in">addSeparator</span>();</span><br><span class="line">    toolBar-&gt;<span class="built_in">addAction</span>(editAction);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//工具栏中添加控件</span></span><br><span class="line">    QPushButton * btn = <span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="string">&quot;Click Me!&quot;</span>, <span class="keyword">this</span>);</span><br><span class="line">    toolBar-&gt;<span class="built_in">addWidget</span>(btn);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建工具栏</span></span><br><span class="line">    QStatusBar * stBar = <span class="built_in">statusBar</span>();</span><br><span class="line">    <span class="comment">//设置到窗口中</span></span><br><span class="line">    <span class="built_in">setStatusBar</span>(stBar);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//放置标签控件</span></span><br><span class="line">    QLabel * label = <span class="keyword">new</span> <span class="built_in">QLabel</span>(<span class="string">&quot;提示信息&quot;</span>, <span class="keyword">this</span>);</span><br><span class="line">    stBar-&gt;<span class="built_in">addWidget</span>(label);</span><br><span class="line">    <span class="comment">//放置右侧标签</span></span><br><span class="line">    QLabel * label_ = <span class="keyword">new</span> <span class="built_in">QLabel</span>(<span class="string">&quot;右侧提示信息&quot;</span>, <span class="keyword">this</span>);</span><br><span class="line">    stBar-&gt;<span class="built_in">addPermanentWidget</span>(label_);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建铆接部件</span></span><br><span class="line">    QDockWidget * dockWidget = <span class="keyword">new</span> <span class="built_in">QDockWidget</span>(<span class="string">&quot;浮动&quot;</span>, <span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">//设置在窗口中</span></span><br><span class="line">    <span class="built_in">addDockWidget</span>(Qt::BottomDockWidgetArea, dockWidget);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//设置停靠权限</span></span><br><span class="line">    dockWidget-&gt;<span class="built_in">setAllowedAreas</span>(Qt::TopDockWidgetArea | Qt::BottomDockWidgetArea);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MainWindow::~<span class="built_in">MainWindow</span>() &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/Qt/%E9%93%86%E6%8E%A5%E9%83%A8%E4%BB%B6%E7%A4%BA%E4%BE%8B.jpg" alt="铆接部件示例"></p><h2 id="核心部件"><a href="#核心部件" class="headerlink" title="核心部件"></a>核心部件</h2><p>核心部件可以理解为工作区，例如想要设置一个记事本，可以引入<code>QTextEdit</code>头文件。核心部件只能有一个，需要使用<code>setCentralWidget</code>方法来设置。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">QTextEdit * edit = <span class="keyword">new</span> <span class="built_in">QTextEdit</span>(<span class="keyword">this</span>);</span><br><span class="line"><span class="built_in">setCentralWidget</span>(edit);</span><br></pre></td></tr></table></figure><h3 id="示例-6"><a href="#示例-6" class="headerlink" title="示例"></a>示例</h3><p>完整代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mainwindow.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMenubar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QToolBar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QStatusBar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDockWidget&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPushButton&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QLabel&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QTextEdit&gt;</span></span></span><br><span class="line"></span><br><span class="line">MainWindow::<span class="built_in">MainWindow</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QMainWindow</span>(parent)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">setFixedSize</span>(<span class="number">600</span>, <span class="number">400</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜单栏创建</span></span><br><span class="line">    QMenuBar * bar = <span class="built_in">menuBar</span>();</span><br><span class="line">    <span class="comment">//将菜单栏放入到窗口中</span></span><br><span class="line">    <span class="built_in">setMenuBar</span>(bar);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建菜单</span></span><br><span class="line">    QMenu * fileMenu = bar-&gt;<span class="built_in">addMenu</span>(<span class="string">&quot;文件&quot;</span>);</span><br><span class="line">    QMenu * editMenu = bar-&gt;<span class="built_in">addMenu</span>(<span class="string">&quot;编辑&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建菜单项</span></span><br><span class="line">    fileMenu-&gt;<span class="built_in">addAction</span>(<span class="string">&quot;新建&quot;</span>);</span><br><span class="line">    fileMenu-&gt;<span class="built_in">addSeparator</span>();</span><br><span class="line">    fileMenu-&gt;<span class="built_in">addAction</span>(<span class="string">&quot;打开&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//工具栏</span></span><br><span class="line">    QToolBar * toolBar = <span class="keyword">new</span> <span class="built_in">QToolBar</span>(<span class="keyword">this</span>);</span><br><span class="line">    <span class="built_in">addToolBar</span>(Qt::LeftToolBarArea, toolBar);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更改默认停靠位置</span></span><br><span class="line">    toolBar-&gt;<span class="built_in">setAllowedAreas</span>(Qt::LeftToolBarArea | Qt::RightToolBarArea);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//禁止浮动</span></span><br><span class="line">    toolBar-&gt;<span class="built_in">setFloatable</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//禁止移动</span></span><br><span class="line">    toolBar-&gt;<span class="built_in">setMovable</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置内容</span></span><br><span class="line">    QAction * welcomeAction = <span class="built_in">addAction</span>(<span class="string">&quot;欢迎&quot;</span>);</span><br><span class="line">    QAction * editAction = <span class="built_in">addAction</span>(<span class="string">&quot;编辑&quot;</span>);</span><br><span class="line"></span><br><span class="line">    toolBar-&gt;<span class="built_in">addAction</span>(welcomeAction);</span><br><span class="line">    toolBar-&gt;<span class="built_in">addSeparator</span>();</span><br><span class="line">    toolBar-&gt;<span class="built_in">addAction</span>(editAction);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//工具栏中添加控件</span></span><br><span class="line">    QPushButton * btn = <span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="string">&quot;Click Me!&quot;</span>, <span class="keyword">this</span>);</span><br><span class="line">    toolBar-&gt;<span class="built_in">addWidget</span>(btn);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建工具栏</span></span><br><span class="line">    QStatusBar * stBar = <span class="built_in">statusBar</span>();</span><br><span class="line">    <span class="comment">//设置到窗口中</span></span><br><span class="line">    <span class="built_in">setStatusBar</span>(stBar);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//放置标签控件</span></span><br><span class="line">    QLabel * label = <span class="keyword">new</span> <span class="built_in">QLabel</span>(<span class="string">&quot;提示信息&quot;</span>, <span class="keyword">this</span>);</span><br><span class="line">    stBar-&gt;<span class="built_in">addWidget</span>(label);</span><br><span class="line">    <span class="comment">//放置右侧标签</span></span><br><span class="line">    QLabel * label_ = <span class="keyword">new</span> <span class="built_in">QLabel</span>(<span class="string">&quot;右侧提示信息&quot;</span>, <span class="keyword">this</span>);</span><br><span class="line">    stBar-&gt;<span class="built_in">addPermanentWidget</span>(label_);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建铆接部件</span></span><br><span class="line">    QDockWidget * dockWidget = <span class="keyword">new</span> <span class="built_in">QDockWidget</span>(<span class="string">&quot;浮动&quot;</span>, <span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">//设置在窗口中</span></span><br><span class="line">    <span class="built_in">addDockWidget</span>(Qt::BottomDockWidgetArea, dockWidget);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置停靠权限</span></span><br><span class="line">    dockWidget-&gt;<span class="built_in">setAllowedAreas</span>(Qt::TopDockWidgetArea | Qt::BottomDockWidgetArea);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建核心部件</span></span><br><span class="line">    QTextEdit * edit = <span class="keyword">new</span> <span class="built_in">QTextEdit</span>(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">//设置在窗口中</span></span><br><span class="line">    <span class="built_in">setCentralWidget</span>(edit);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MainWindow::~<span class="built_in">MainWindow</span>() &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/Qt/%E6%A0%B8%E5%BF%83%E9%83%A8%E4%BB%B6%E7%A4%BA%E4%BE%8B.jpg" alt="核心部件示例"></p><h1 id="资源文件"><a href="#资源文件" class="headerlink" title="资源文件"></a>资源文件</h1><p>资源文件指的是图片、视频这类文件，需要先把要添加的资源文件复制到项目文件夹中，右键项目选择添加新文件。</p><p><img src="/img/posts/Qt/%E6%B7%BB%E5%8A%A0%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6.jpg" alt="添加资源文件"></p><p>在文件和类下的<code>Qt</code>中找到<code>Qt Resource File</code>，选择后对资源文件起一个名称，下一步即可。</p><p><img src="/img/posts/Qt/%E6%B7%BB%E5%8A%A0%E7%82%B9%E7%BC%80.jpg" alt="添加前缀"></p><p>首先需要添加一个前缀，用于区分不同类别的资源，如果不想进行区分，写一个<code>/</code>即可。</p><p>创建完前缀后，可以点击添加文件将文件导入进来，编译后即可显示。</p><p>使用添加<code>Qt</code>资源的基本格式如下所示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;: + 前缀名 + 文件空&quot;</span></span><br></pre></td></tr></table></figure><p>例如想要对<code>ui</code>下的一个对象添加图标，可以使用下面这段代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ui-&gt;actionNew-&gt;<span class="built_in">setIcon</span>(<span class="built_in">QIcon</span>(<span class="string">&quot;:/favicon&quot;</span>));</span><br></pre></td></tr></table></figure><p><img src="/img/posts/Qt/%E6%B7%BB%E5%8A%A0%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6%E6%95%88%E6%9E%9C%E5%9B%BE.jpg" alt="添加资源文件效果图"></p><p>可以看到图标均可正常显示。</p><h1 id="对话框"><a href="#对话框" class="headerlink" title="对话框"></a>对话框</h1><p>对话框分为两种，分别是模态对话框和非模态对话框。模态对话框不可以对其他窗口进行操作，非模态对话框可以对其他窗口操作。</p><p>现在想要实现一个功能：点击新建按钮，弹出一个对话框。</p><p>为了实现这一功能，需要先引入对话框的头文件。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDialog&gt;</span></span></span><br></pre></td></tr></table></figure><p>接着需要使用槽函数，来建立对应的关系，对于<code>QAction</code>类型的对象而言，点击对应的信号是<code>triggered</code>。</p><h2 id="模态对话框创建"><a href="#模态对话框创建" class="headerlink" title="模态对话框创建"></a>模态对话框创建</h2><p>先建立一个模态对话框，由于不可以对其他窗口进行操作，因此需要对原有的进程进行阻塞。如果不对弹出的对话框进行任何操作的话，会产生对话框太小的警告，因此可以先提前设置一下对话框的大小。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_mainwindow.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDialog&gt;</span></span></span><br><span class="line"></span><br><span class="line">MainWindow::<span class="built_in">MainWindow</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QMainWindow</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">connect</span>(ui-&gt;actionNew, &amp;QAction::triggered, [=]()&#123;</span><br><span class="line">        <span class="comment">//创建对话框</span></span><br><span class="line">        QDialog <span class="built_in">dlg</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置对话框大小</span></span><br><span class="line">        dlg.<span class="built_in">resize</span>(<span class="number">200</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//弹出对话框并阻塞进程</span></span><br><span class="line">        dlg.<span class="built_in">exec</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MainWindow::~<span class="built_in">MainWindow</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/Qt/%E6%A8%A1%E6%80%81%E5%88%9B%E5%BB%BA.jpg" alt="模态创建"></p><h2 id="非模态对话框创建"><a href="#非模态对话框创建" class="headerlink" title="非模态对话框创建"></a>非模态对话框创建</h2><p>非模态对话框需要将对话框开辟在堆区，因为它不需要进行阻塞，如果不开辟在堆区的话，会在执行完这个函数后直接消失掉。</p><p>同时，为了能够在有对话框的时候进行操作，需要使用<code>show</code>方法进行显示。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_mainwindow.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDialog&gt;</span></span></span><br><span class="line"></span><br><span class="line">MainWindow::<span class="built_in">MainWindow</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QMainWindow</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">connect</span>(ui-&gt;actionNew, &amp;QAction::triggered, [=]()&#123;</span><br><span class="line">        <span class="comment">//创建对话框</span></span><br><span class="line">        QDialog * dlg = <span class="keyword">new</span> <span class="built_in">QDialog</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置对话框大小</span></span><br><span class="line">        dlg-&gt;<span class="built_in">resize</span>(<span class="number">200</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//弹出对话框</span></span><br><span class="line">        dlg-&gt;<span class="built_in">show</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MainWindow::~<span class="built_in">MainWindow</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/Qt/%E9%9D%9E%E6%A8%A1%E6%80%81%E5%88%9B%E5%BB%BA.jpg" alt="非模态创建"></p><p>上述代码有一个问题，创建了一个对话框在堆区，而它是挂在<code>this</code>上的，这就导致只有整个程序关闭才会释放掉这部分内存。为了解决这一问题，可以调用<code>setAttribute</code>中的<code>Qt::WA_DeleteOnClose</code>属性，这是55号属性，可以保证在关闭子窗口时主动释放掉它。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_mainwindow.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDialog&gt;</span></span></span><br><span class="line"></span><br><span class="line">MainWindow::<span class="built_in">MainWindow</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QMainWindow</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">connect</span>(ui-&gt;actionNew, &amp;QAction::triggered, [=]()&#123;</span><br><span class="line">        <span class="comment">//创建对话框</span></span><br><span class="line">        QDialog * dlg = <span class="keyword">new</span> <span class="built_in">QDialog</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置对话框大小</span></span><br><span class="line">        dlg-&gt;<span class="built_in">resize</span>(<span class="number">200</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//弹出对话框</span></span><br><span class="line">        dlg-&gt;<span class="built_in">show</span>();</span><br><span class="line"></span><br><span class="line">        dlg-&gt;<span class="built_in">setAttribute</span>(Qt::WA_DeleteOnClose);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MainWindow::~<span class="built_in">MainWindow</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="消息对话框"><a href="#消息对话框" class="headerlink" title="消息对话框"></a>消息对话框</h2><p>消息对话框是一种模态对话框，用于显示信息、询问问题等。</p><p>使用消息对话框需要先调用其头文件。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMessageBox&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="错误对话框"><a href="#错误对话框" class="headerlink" title="错误对话框"></a>错误对话框</h3><p>消息对话框中几种基础对话框都是静态的，因此可以创建对象调用，也可以直接在类上调用。</p><p>错误对话框用于提示一些错误信息。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QMessageBox::<span class="built_in">critical</span>(<span class="keyword">this</span>, <span class="string">&quot;critical&quot;</span>, <span class="string">&quot;错误&quot;</span>);</span><br></pre></td></tr></table></figure><p>第一个参数指定了父亲，第二个参数是对话框的标题，第三个参数是显示的信息。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_mainwindow.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDialog&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMessageBox&gt;</span></span></span><br><span class="line"></span><br><span class="line">MainWindow::<span class="built_in">MainWindow</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QMainWindow</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">connect</span>(ui-&gt;actionNew, &amp;QAction::triggered, [=]()&#123;</span><br><span class="line">        QMessageBox::<span class="built_in">critical</span>(<span class="keyword">this</span>, <span class="string">&quot;critical&quot;</span>, <span class="string">&quot;错误&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MainWindow::~<span class="built_in">MainWindow</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/Qt/%E9%94%99%E8%AF%AF%E6%8F%90%E7%A4%BA.jpg" alt="错误提示"></p><h3 id="信息对话框"><a href="#信息对话框" class="headerlink" title="信息对话框"></a>信息对话框</h3><p>信息对话框用于提示一些重要信息。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QMessageBox::<span class="built_in">information</span>(<span class="keyword">this</span>, <span class="string">&quot;info&quot;</span>, <span class="string">&quot;信息&quot;</span>);</span><br></pre></td></tr></table></figure><p>第一个参数指定了父亲，第二个参数是对话框的标题，第三个参数是显示的信息。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_mainwindow.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDialog&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMessageBox&gt;</span></span></span><br><span class="line"></span><br><span class="line">MainWindow::<span class="built_in">MainWindow</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QMainWindow</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">connect</span>(ui-&gt;actionNew, &amp;QAction::triggered, [=]()&#123;</span><br><span class="line">        QMessageBox::<span class="built_in">information</span>(<span class="keyword">this</span>, <span class="string">&quot;info&quot;</span>, <span class="string">&quot;信息&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MainWindow::~<span class="built_in">MainWindow</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/Qt/%E4%BF%A1%E6%81%AF%E6%8F%90%E7%A4%BA.jpg" alt="信息提示"></p><h3 id="提问对话框"><a href="#提问对话框" class="headerlink" title="提问对话框"></a>提问对话框</h3><p>提问对话框用于让用户选择。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QMessageBox::<span class="built_in">question</span>(<span class="keyword">this</span>, <span class="string">&quot;ques&quot;</span>, <span class="string">&quot;提问&quot;</span>);</span><br></pre></td></tr></table></figure><p>第一个参数指定了父亲，第二个参数是对话框的标题，第三个参数是显示的信息。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_mainwindow.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDialog&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMessageBox&gt;</span></span></span><br><span class="line"></span><br><span class="line">MainWindow::<span class="built_in">MainWindow</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QMainWindow</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">connect</span>(ui-&gt;actionNew, &amp;QAction::triggered, [=]()&#123;</span><br><span class="line">        QMessageBox::<span class="built_in">question</span>(<span class="keyword">this</span>, <span class="string">&quot;ques&quot;</span>, <span class="string">&quot;提问&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MainWindow::~<span class="built_in">MainWindow</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/Qt/%E6%8F%90%E9%97%AE%E6%8F%90%E7%A4%BA.jpg" alt="提问提示"></p><h3 id="警告对话框"><a href="#警告对话框" class="headerlink" title="警告对话框"></a>警告对话框</h3><p>警告对话框用于让警告一些信息。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QMessageBox::<span class="built_in">warning</span>(<span class="keyword">this</span>, <span class="string">&quot;warning&quot;</span>, <span class="string">&quot;警告&quot;</span>);</span><br></pre></td></tr></table></figure><p>第一个参数指定了父亲，第二个参数是对话框的标题，第三个参数是显示的信息。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_mainwindow.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDialog&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMessageBox&gt;</span></span></span><br><span class="line"></span><br><span class="line">MainWindow::<span class="built_in">MainWindow</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QMainWindow</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">connect</span>(ui-&gt;actionNew, &amp;QAction::triggered, [=]()&#123;</span><br><span class="line">        QMessageBox::<span class="built_in">warning</span>(<span class="keyword">this</span>, <span class="string">&quot;warning&quot;</span>, <span class="string">&quot;警告&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MainWindow::~<span class="built_in">MainWindow</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/Qt/%E8%AD%A6%E5%91%8A%E6%8F%90%E7%A4%BA.jpg" alt="警告提示"></p><h2 id="对话框参数"><a href="#对话框参数" class="headerlink" title="对话框参数"></a>对话框参数</h2><p>消息对话框一共有五个参数。参数1是父亲，参数2是标题，参数3是提示内容，参数4是关联按键类型，参数5是默认关联回车的按键。</p><p>例如，制作一个提问提示窗口，询问用户是否保存，默认关联取消。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QMessageBox::<span class="built_in">question</span>(<span class="keyword">this</span>, <span class="string">&quot;ques&quot;</span>, <span class="string">&quot;是否保存&quot;</span>, QMessageBox::Save | QMessageBox::Cancel, QMessageBox::Cancel);</span><br></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_mainwindow.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDialog&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMessageBox&gt;</span></span></span><br><span class="line"></span><br><span class="line">MainWindow::<span class="built_in">MainWindow</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QMainWindow</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">connect</span>(ui-&gt;actionNew, &amp;QAction::triggered, [=]()&#123;</span><br><span class="line">        QMessageBox::<span class="built_in">question</span>(<span class="keyword">this</span>, <span class="string">&quot;ques&quot;</span>, <span class="string">&quot;是否保存&quot;</span>, QMessageBox::Save | QMessageBox::Cancel, QMessageBox::Cancel);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MainWindow::~<span class="built_in">MainWindow</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/Qt/%E5%AF%B9%E8%AF%9D%E6%A1%86%E5%8F%82%E6%95%B0%E7%A4%BA%E4%BE%8B.jpg" alt="对话框参数示例"></p><p>当用户点击相应的按钮时，会产生一个<code>int</code>类型的返回值，用于判断用户点的是哪一个按钮。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_mainwindow.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDialog&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMessageBox&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line"></span><br><span class="line">MainWindow::<span class="built_in">MainWindow</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QMainWindow</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">connect</span>(ui-&gt;actionNew, &amp;QAction::triggered, [=]()&#123;</span><br><span class="line">        <span class="type">int</span> re = QMessageBox::<span class="built_in">question</span>(<span class="keyword">this</span>, <span class="string">&quot;ques&quot;</span>, <span class="string">&quot;是否保存&quot;</span>, QMessageBox::Save | QMessageBox::Cancel, QMessageBox::Cancel);</span><br><span class="line">        <span class="keyword">if</span>(re == QMessageBox::Save)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;Save&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;Cancel&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MainWindow::~<span class="built_in">MainWindow</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="标准对话框"><a href="#标准对话框" class="headerlink" title="标准对话框"></a>标准对话框</h2><p>所谓标准对话框，是<code>Qt</code>内置的一系列对话框，用于简化开发。事实上，有很多对话框都是通用的，比如打开文件、设置颜色、打印设置等。这些对话框在所有程序中几乎相同，因此没有必要在每一个程序中都自己实现这么一个对话框。</p><p><code>Qt</code>的内置对话框大致分为以下几类：</p><table><thead><tr><th align="center">对话框</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><code>QColorDialog</code></td><td align="center">选择颜色</td></tr><tr><td align="center"><code>QFileDialog</code></td><td align="center">选择文件或者目录</td></tr><tr><td align="center"><code>QFontDialog</code></td><td align="center">选择字体</td></tr><tr><td align="center"><code>QInputDialog</code></td><td align="center">允许用户输入一个值，并将其值返回</td></tr><tr><td align="center"><code>QMessageBox</code></td><td align="center">模态对话框，用于显示信息、询问问题等</td></tr><tr><td align="center"><code>QPageSetupDialog</code></td><td align="center">为打印机提供纸张相关的选项</td></tr><tr><td align="center"><code>QPrintDialog</code></td><td align="center">打印机配置</td></tr><tr><td align="center"><code>QPrintPreviewDialog</code></td><td align="center">打印预览</td></tr><tr><td align="center"><code>QProgressDialog</code></td><td align="center">显示操作过程</td></tr></tbody></table><h1 id="按钮组"><a href="#按钮组" class="headerlink" title="按钮组"></a>按钮组</h1><table><thead><tr><th align="center">按钮名称</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><code>Push Button</code></td><td align="center">常用按钮</td></tr><tr><td align="center"><code>Tool Button</code></td><td align="center">工具按钮，用于显示图片。如果图片想要显示文字，修改风格<code>toolButtonStyle</code>，凸起风格是<code>autoRaise</code></td></tr><tr><td align="center"><code>Radio Button</code></td><td align="center">单选按钮，设置默认使用<code>ui-&gt;Btn-&gt;setChecked(true);</code></td></tr><tr><td align="center"><code>Check Box</code></td><td align="center">多选按钮，监听状态。0未选中，1半选，2选中</td></tr></tbody></table><h1 id="Item-Widgets控件"><a href="#Item-Widgets控件" class="headerlink" title="Item Widgets控件"></a>Item Widgets控件</h1><h2 id="List-Widget控件"><a href="#List-Widget控件" class="headerlink" title="List Widget控件"></a>List Widget控件</h2><h3 id="添加列表"><a href="#添加列表" class="headerlink" title="添加列表"></a>添加列表</h3><p><code>Lish Widget</code>是一种列表控件，它的每一行都是<code>QListWidgetItem</code>类型，因此添加时需要先声明一个变量，将其添加到控件中即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_widget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    QListWidgetItem * item = <span class="keyword">new</span> <span class="built_in">QListWidgetItem</span>(<span class="string">&quot;锄禾日当午&quot;</span>);</span><br><span class="line">    <span class="comment">//将一行诗放入到控件中</span></span><br><span class="line">    ui-&gt;listWidget-&gt;<span class="built_in">addItem</span>(item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Widget::~<span class="built_in">Widget</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/Qt/%E6%B7%BB%E5%8A%A0%E5%88%97%E8%A1%A8.jpg" alt="添加列表"></p><h3 id="设置对齐格式"><a href="#设置对齐格式" class="headerlink" title="设置对齐格式"></a>设置对齐格式</h3><p>使用<code>setTextAlignment</code>方法可以设置对应格式，里面填入的参数是对应的枚举值，具体可以查看帮助文档，例如想要设置为水平居中就可以写：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_widget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    QListWidgetItem * item = <span class="keyword">new</span> <span class="built_in">QListWidgetItem</span>(<span class="string">&quot;锄禾日当午&quot;</span>);</span><br><span class="line">    <span class="comment">//将一行诗放入到控件中</span></span><br><span class="line">    ui-&gt;listWidget-&gt;<span class="built_in">addItem</span>(item);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//水平居中</span></span><br><span class="line">    item-&gt;<span class="built_in">setTextAlignment</span>((Qt::AlignHCenter));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Widget::~<span class="built_in">Widget</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/Qt/%E8%AE%BE%E7%BD%AE%E5%AF%B9%E9%BD%90%E6%A0%BC%E5%BC%8F.jpg" alt="设置对齐格式"></p><h3 id="添加多个列表"><a href="#添加多个列表" class="headerlink" title="添加多个列表"></a>添加多个列表</h3><p>使用<code>QStringList</code>创建的列表可以将多个字符串一起放入，调用<code>addItems</code>即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_widget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    QStringList list;</span><br><span class="line">    list &lt;&lt; <span class="string">&quot;锄禾日当午&quot;</span> &lt;&lt; <span class="string">&quot;汗滴禾下土&quot;</span> &lt;&lt; <span class="string">&quot;谁知盘中餐&quot;</span> &lt;&lt; <span class="string">&quot;粒粒皆辛苦&quot;</span>;</span><br><span class="line">    ui-&gt;listWidget-&gt;<span class="built_in">addItems</span>(list);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Widget::~<span class="built_in">Widget</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/Qt/%E8%AE%BE%E7%BD%AE%E5%A4%9A%E4%B8%AA%E5%88%97%E8%A1%A8.jpg" alt="设置多个列表"></p><h2 id="Tree-Widget控件"><a href="#Tree-Widget控件" class="headerlink" title="Tree Widget控件"></a>Tree Widget控件</h2><h3 id="设置水平头"><a href="#设置水平头" class="headerlink" title="设置水平头"></a>设置水平头</h3><p>树控件可以制作出一个树形结构，水平头指的是每一级的标签。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ui-&gt;treeWidget-&gt;<span class="built_in">setHeaderLabels</span>(<span class="built_in">QStringList</span>() &lt;&lt; <span class="string">&quot;英雄&quot;</span> &lt;&lt; <span class="string">&quot;英雄介绍&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="顶层节点"><a href="#顶层节点" class="headerlink" title="顶层节点"></a>顶层节点</h3><p>顶层节点可以理解为树的根，即最顶层的分支。需要使用<code>QTreeWidgetItem</code>类型，声明对应数量的指针，用于设置顶层节点。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">QTreeWidgetItem * powerItem = <span class="keyword">new</span> <span class="built_in">QTreeWidgetItem</span>(<span class="built_in">QStringList</span>() &lt;&lt; <span class="string">&quot;力量&quot;</span>);</span><br><span class="line">QTreeWidgetItem * speedItem = <span class="keyword">new</span> <span class="built_in">QTreeWidgetItem</span>(<span class="built_in">QStringList</span>() &lt;&lt; <span class="string">&quot;速度&quot;</span>);</span><br><span class="line">QTreeWidgetItem * intelligenceItem = <span class="keyword">new</span> <span class="built_in">QTreeWidgetItem</span>(<span class="built_in">QStringList</span>() &lt;&lt; <span class="string">&quot;智力&quot;</span>);</span><br></pre></td></tr></table></figure><p>需要在<code>ui</code>界面中添加顶层节点，可以使用<code>addTopLevelItem</code>或<code>addTopLevelItem</code>来实现。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ui-&gt;treeWidget-&gt;<span class="built_in">addTopLevelItem</span>(powerItem);</span><br><span class="line">ui-&gt;treeWidget-&gt;<span class="built_in">addTopLevelItem</span>(speedItem);</span><br><span class="line">ui-&gt;treeWidget-&gt;<span class="built_in">addTopLevelItem</span>(intelligenceItem);</span><br><span class="line"><span class="comment">// ui-&gt;treeWidget-&gt;addTopLevelItems(QList&lt;QTreeWidgetItem *&gt;() &lt;&lt;powerItem &lt;&lt; speedItem &lt;&lt; intelligenceItem);</span></span><br></pre></td></tr></table></figure><h3 id="追加子节点"><a href="#追加子节点" class="headerlink" title="追加子节点"></a>追加子节点</h3><p>子节点的类型与顶层节点一样，使用<code>addChild</code>进行添加。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">QTreeWidgetItem * heroP1 = <span class="keyword">new</span> <span class="built_in">QTreeWidgetItem</span>(<span class="built_in">QStringList</span>() &lt;&lt; <span class="string">&quot;刚被猪&quot;</span> &lt;&lt; <span class="string">&quot;前排坦克，能在吸收伤害的同时造成可观的范围输出&quot;</span>);</span><br><span class="line">QTreeWidgetItem * heroP2 = <span class="keyword">new</span> <span class="built_in">QTreeWidgetItem</span>(<span class="built_in">QStringList</span>() &lt;&lt; <span class="string">&quot;船长&quot;</span> &lt;&lt; <span class="string">&quot;前排坦克，能肉能输出能控场的全能英雄&quot;</span>);</span><br><span class="line">QTreeWidgetItem * heroS1 = <span class="keyword">new</span> <span class="built_in">QTreeWidgetItem</span>(<span class="built_in">QStringList</span>() &lt;&lt; <span class="string">&quot;月骑&quot;</span> &lt;&lt; <span class="string">&quot;中排物理输出，可以使用分裂利刃攻击多个目标&quot;</span>);</span><br><span class="line">QTreeWidgetItem * heroS2 = <span class="keyword">new</span> <span class="built_in">QTreeWidgetItem</span>(<span class="built_in">QStringList</span>() &lt;&lt; <span class="string">&quot;小鱼人&quot;</span> &lt;&lt; <span class="string">&quot;前排战士，擅长偷取敌人的属性来增强自身战力&quot;</span>);</span><br><span class="line">QTreeWidgetItem * heroI1 = <span class="keyword">new</span> <span class="built_in">QTreeWidgetItem</span>(<span class="built_in">QStringList</span>() &lt;&lt; <span class="string">&quot;死灵法师&quot;</span> &lt;&lt; <span class="string">&quot;前排法师坦克，魔法抗性较高，拥有治疗技能&quot;</span>);</span><br><span class="line">QTreeWidgetItem * heroI2 = <span class="keyword">new</span> <span class="built_in">QTreeWidgetItem</span>(<span class="built_in">QStringList</span>() &lt;&lt; <span class="string">&quot;巫医&quot;</span> &lt;&lt; <span class="string">&quot;后排辅助法师，可以使用奇特的巫术诅咒敌人与治疗队友&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">powerItem-&gt;<span class="built_in">addChild</span>(heroP1);</span><br><span class="line">powerItem-&gt;<span class="built_in">addChild</span>(heroP2);</span><br><span class="line">speedItem-&gt;<span class="built_in">addChild</span>(heroS1);</span><br><span class="line">speedItem-&gt;<span class="built_in">addChild</span>(heroS2);</span><br><span class="line">intelligenceItem-&gt;<span class="built_in">addChild</span>(heroI1);</span><br><span class="line">intelligenceItem-&gt;<span class="built_in">addChild</span>(heroI2);</span><br></pre></td></tr></table></figure><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_widget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置水平头</span></span><br><span class="line">    ui-&gt;treeWidget-&gt;<span class="built_in">setHeaderLabels</span>(<span class="built_in">QStringList</span>() &lt;&lt; <span class="string">&quot;英雄&quot;</span> &lt;&lt; <span class="string">&quot;英雄介绍&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置顶层节点</span></span><br><span class="line">    QTreeWidgetItem * powerItem = <span class="keyword">new</span> <span class="built_in">QTreeWidgetItem</span>(<span class="built_in">QStringList</span>() &lt;&lt; <span class="string">&quot;力量&quot;</span>);</span><br><span class="line">    QTreeWidgetItem * speedItem = <span class="keyword">new</span> <span class="built_in">QTreeWidgetItem</span>(<span class="built_in">QStringList</span>() &lt;&lt; <span class="string">&quot;速度&quot;</span>);</span><br><span class="line">    QTreeWidgetItem * intelligenceItem = <span class="keyword">new</span> <span class="built_in">QTreeWidgetItem</span>(<span class="built_in">QStringList</span>() &lt;&lt; <span class="string">&quot;智力&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加载顶层节点</span></span><br><span class="line">    ui-&gt;treeWidget-&gt;<span class="built_in">addTopLevelItem</span>(powerItem);</span><br><span class="line">    ui-&gt;treeWidget-&gt;<span class="built_in">addTopLevelItem</span>(speedItem);</span><br><span class="line">    ui-&gt;treeWidget-&gt;<span class="built_in">addTopLevelItem</span>(intelligenceItem);</span><br><span class="line">    <span class="comment">// ui-&gt;treeWidget-&gt;addTopLevelItems(QList&lt;QTreeWidgetItem *&gt;() &lt;&lt;powerItem &lt;&lt; speedItem &lt;&lt; intelligenceItem);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//追加子节点</span></span><br><span class="line">    QTreeWidgetItem * heroP1 = <span class="keyword">new</span> <span class="built_in">QTreeWidgetItem</span>(<span class="built_in">QStringList</span>() &lt;&lt; <span class="string">&quot;刚被猪&quot;</span> &lt;&lt; <span class="string">&quot;前排坦克，能在吸收伤害的同时造成可观的范围输出&quot;</span>);</span><br><span class="line">    QTreeWidgetItem * heroP2 = <span class="keyword">new</span> <span class="built_in">QTreeWidgetItem</span>(<span class="built_in">QStringList</span>() &lt;&lt; <span class="string">&quot;船长&quot;</span> &lt;&lt; <span class="string">&quot;前排坦克，能肉能输出能控场的全能英雄&quot;</span>);</span><br><span class="line">    QTreeWidgetItem * heroS1 = <span class="keyword">new</span> <span class="built_in">QTreeWidgetItem</span>(<span class="built_in">QStringList</span>() &lt;&lt; <span class="string">&quot;月骑&quot;</span> &lt;&lt; <span class="string">&quot;中排物理输出，可以使用分裂利刃攻击多个目标&quot;</span>);</span><br><span class="line">    QTreeWidgetItem * heroS2 = <span class="keyword">new</span> <span class="built_in">QTreeWidgetItem</span>(<span class="built_in">QStringList</span>() &lt;&lt; <span class="string">&quot;小鱼人&quot;</span> &lt;&lt; <span class="string">&quot;前排战士，擅长偷取敌人的属性来增强自身战力&quot;</span>);</span><br><span class="line">    QTreeWidgetItem * heroI1 = <span class="keyword">new</span> <span class="built_in">QTreeWidgetItem</span>(<span class="built_in">QStringList</span>() &lt;&lt; <span class="string">&quot;死灵法师&quot;</span> &lt;&lt; <span class="string">&quot;前排法师坦克，魔法抗性较高，拥有治疗技能&quot;</span>);</span><br><span class="line">    QTreeWidgetItem * heroI2 = <span class="keyword">new</span> <span class="built_in">QTreeWidgetItem</span>(<span class="built_in">QStringList</span>() &lt;&lt; <span class="string">&quot;巫医&quot;</span> &lt;&lt; <span class="string">&quot;后排辅助法师，可以使用奇特的巫术诅咒敌人与治疗队友&quot;</span>);</span><br><span class="line"></span><br><span class="line">    powerItem-&gt;<span class="built_in">addChild</span>(heroP1);</span><br><span class="line">    powerItem-&gt;<span class="built_in">addChild</span>(heroP2);</span><br><span class="line">    speedItem-&gt;<span class="built_in">addChild</span>(heroS1);</span><br><span class="line">    speedItem-&gt;<span class="built_in">addChild</span>(heroS2);</span><br><span class="line">    intelligenceItem-&gt;<span class="built_in">addChild</span>(heroI1);</span><br><span class="line">    intelligenceItem-&gt;<span class="built_in">addChild</span>(heroI2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Widget::~<span class="built_in">Widget</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/Qt/%E6%A0%91%E6%8E%A7%E4%BB%B6.jpg" alt="树控件"></p><h2 id="Table-Widget控件"><a href="#Table-Widget控件" class="headerlink" title="Table Widget控件"></a>Table Widget控件</h2><h3 id="设置列数"><a href="#设置列数" class="headerlink" title="设置列数"></a>设置列数</h3><p><code>Table Widget</code>是一个表格，在使用之前需要先设置一下列数，通过<code>SetColumnCount</code>方法去设置。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ui-&gt;tableWidget-&gt;<span class="built_in">setColumnCount</span>(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><h3 id="设置水平表头"><a href="#设置水平表头" class="headerlink" title="设置水平表头"></a>设置水平表头</h3><p>水平表头指的是每一列的标题，通过<code>setHorizontalHeaderLabels</code>来设置。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ui-&gt;tableWidget-&gt;<span class="built_in">setHorizontalHeaderLabels</span>(<span class="built_in">QStringList</span>() &lt;&lt; <span class="string">&quot;姓名&quot;</span> &lt;&lt; <span class="string">&quot;性别&quot;</span> &lt;&lt; <span class="string">&quot;年龄&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="设置行数"><a href="#设置行数" class="headerlink" title="设置行数"></a>设置行数</h3><p>通过<code>setRowCount</code>设置一共有几行数据。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ui-&gt;tableWidget-&gt;<span class="built_in">setRowCount</span>(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><h3 id="设置正文"><a href="#设置正文" class="headerlink" title="设置正文"></a>设置正文</h3><p>正文类似于一个二维数组，利用<code>setItem</code>方法去设置，前两个参数分别表示行和列，第三个参数表示填入的数据。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">QStringList nameList;</span><br><span class="line">nameList &lt;&lt; <span class="string">&quot;比格沃斯&quot;</span> &lt;&lt; <span class="string">&quot;Areskey&quot;</span> &lt;&lt; <span class="string">&quot;ytm&quot;</span>;</span><br><span class="line">QList&lt;QString&gt; sexList;</span><br><span class="line">sexList &lt;&lt; <span class="string">&quot;男&quot;</span> &lt;&lt;<span class="string">&quot;女&quot;</span> &lt;&lt; <span class="string">&quot;男&quot;</span>;</span><br><span class="line">QStringList ageList;</span><br><span class="line">ageList &lt;&lt; <span class="string">&quot;22&quot;</span> &lt;&lt; <span class="string">&quot;20&quot;</span> &lt;&lt;<span class="string">&quot;21&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> col = <span class="number">0</span>;</span><br><span class="line">    ui-&gt;tableWidget-&gt;<span class="built_in">setItem</span>(i, col++, <span class="keyword">new</span> <span class="built_in">QTableWidgetItem</span>(nameList[i]));</span><br><span class="line">    ui-&gt;tableWidget-&gt;<span class="built_in">setItem</span>(i, col++, <span class="keyword">new</span> <span class="built_in">QTableWidgetItem</span>(sexList.<span class="built_in">at</span>(i)));</span><br><span class="line">    ui-&gt;tableWidget-&gt;<span class="built_in">setItem</span>(i, col++, <span class="keyword">new</span> <span class="built_in">QTableWidgetItem</span>(ageList[i]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完整代码-1"><a href="#完整代码-1" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_widget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置列数</span></span><br><span class="line">    ui-&gt;tableWidget-&gt;<span class="built_in">setColumnCount</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置水平表头</span></span><br><span class="line">    ui-&gt;tableWidget-&gt;<span class="built_in">setHorizontalHeaderLabels</span>(<span class="built_in">QStringList</span>() &lt;&lt; <span class="string">&quot;姓名&quot;</span> &lt;&lt; <span class="string">&quot;性别&quot;</span> &lt;&lt; <span class="string">&quot;年龄&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置行数</span></span><br><span class="line">    ui-&gt;tableWidget-&gt;<span class="built_in">setRowCount</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置正文</span></span><br><span class="line">    QStringList nameList;</span><br><span class="line">    nameList &lt;&lt; <span class="string">&quot;比格沃斯&quot;</span> &lt;&lt; <span class="string">&quot;Areskey&quot;</span> &lt;&lt; <span class="string">&quot;ytm&quot;</span>;</span><br><span class="line"></span><br><span class="line">    QList&lt;QString&gt; sexList;</span><br><span class="line">    sexList &lt;&lt; <span class="string">&quot;男&quot;</span> &lt;&lt;<span class="string">&quot;女&quot;</span> &lt;&lt; <span class="string">&quot;男&quot;</span>;</span><br><span class="line"></span><br><span class="line">    QStringList ageList;</span><br><span class="line">    ageList &lt;&lt; <span class="string">&quot;22&quot;</span> &lt;&lt; <span class="string">&quot;20&quot;</span> &lt;&lt;<span class="string">&quot;21&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> col = <span class="number">0</span>;</span><br><span class="line">        ui-&gt;tableWidget-&gt;<span class="built_in">setItem</span>(i, col++, <span class="keyword">new</span> <span class="built_in">QTableWidgetItem</span>(nameList[i]));</span><br><span class="line">        ui-&gt;tableWidget-&gt;<span class="built_in">setItem</span>(i, col++, <span class="keyword">new</span> <span class="built_in">QTableWidgetItem</span>(sexList.<span class="built_in">at</span>(i)));</span><br><span class="line">        ui-&gt;tableWidget-&gt;<span class="built_in">setItem</span>(i, col++, <span class="keyword">new</span> <span class="built_in">QTableWidgetItem</span>(ageList[i]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Widget::~<span class="built_in">Widget</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/Qt/%E8%A1%A8%E6%A0%BC%E6%8E%A7%E4%BB%B6.jpg" alt="表格控件"></p><h2 id="其它控件"><a href="#其它控件" class="headerlink" title="其它控件"></a>其它控件</h2><h3 id="栈控件"><a href="#栈控件" class="headerlink" title="栈控件"></a>栈控件</h3><p>可以添加多个页面进行切换，通过编号进行索引。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ui-&gt;satckedWidget-&gt;<span class="built_in">setCurrentIndex</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><h3 id="下拉框"><a href="#下拉框" class="headerlink" title="下拉框"></a>下拉框</h3><p>可以制作一个下拉框，添加元素通过<code>addItem</code>方法。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ui-&gt;comboBox-&gt;<span class="built_in">additem</span>(<span class="string">&quot;奔驰&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="显示图片"><a href="#显示图片" class="headerlink" title="显示图片"></a>显示图片</h3><p><code>QLabel</code>可以显示图片，使用<code>setPixmap</code>方法进行设置。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ui-&gt;lbl_Image-&gt;<span class="built_in">setPixmap</span>(<span class="built_in">QPixmap</span>(<span class="string">&quot;:/butterfly.png&quot;</span>));</span><br></pre></td></tr></table></figure><h3 id="显示动图"><a href="#显示动图" class="headerlink" title="显示动图"></a>显示动图</h3><p>动图需要保证<code>gif</code>格式，同样使用<code>QLabel</code>实现。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">QMovie * movie = <span class="keyword">new</span> <span class="built_in">QMovie</span>(<span class="string">&quot;:/mario.gif&quot;</span>);</span><br><span class="line">ui-&gt;lbl_movie-&gt;<span class="built_in">setMovie</span>(movie);</span><br></pre></td></tr></table></figure><p>动图还需要设置播放，使用<code>start</code>方法。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">movie-&gt;<span class="built_in">start</span>();</span><br></pre></td></tr></table></figure><h1 id="自定义控件封装"><a href="#自定义控件封装" class="headerlink" title="自定义控件封装"></a>自定义控件封装</h1><h2 id="创建设计器界面类"><a href="#创建设计器界面类" class="headerlink" title="创建设计器界面类"></a>创建设计器界面类</h2><p>在添加文件中的<code>Qt</code>下，有一个设计器界面类，里面有多个模板，可以选择一个进行创建。</p><p>创建好后，会出现一个新的<code>ui</code>界面，可以在这里设计自定义的控件。</p><p>如果想要使用自定义的控件，可以在主<code>ui</code>中添加一个<code>Widget</code>窗口，右键提升为。输入提升的类名称，即创建的自定义控件的名字，添加为全局包含，即可提升为对应的控件。</p><h2 id="控件组合"><a href="#控件组合" class="headerlink" title="控件组合"></a>控件组合</h2><p>现在设计一个自定义的控件，通过将<code>Spin Box</code>和<code>Horizontal Slider</code>组合，可以制作一个拖动滑动条进行数值调整的功能。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;smallwidget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_smallwidget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">SmallWidget::<span class="built_in">SmallWidget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::SmallWidget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">void</span>(QSpinBox:: * spSignal)(<span class="type">int</span>) = &amp;QSpinBox::valueChanged;</span><br><span class="line">    <span class="built_in">void</span>(QSlider:: * slSingal)(<span class="type">int</span>) = &amp;QSlider::valueChanged;</span><br><span class="line">    <span class="built_in">connect</span>(ui-&gt;spinBox, spSignal, ui-&gt;horizontalSlider, &amp;QSlider::setValue);</span><br><span class="line">    <span class="built_in">connect</span>(ui-&gt;horizontalSlider, slSingal, ui-&gt;spinBox, &amp;QSpinBox::setValue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SmallWidget::~<span class="built_in">SmallWidget</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/Qt/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6.jpg" alt="自定义控件"></p><h1 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h1><h2 id="进入和离开"><a href="#进入和离开" class="headerlink" title="进入和离开"></a>进入和离开</h2><p>可以设置一些鼠标上的事件，例如制作一个标签，当鼠标放在上面时输出“进入”，离开时输出“离开”。</p><p>自定义标签的头文件为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MYLABEL_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MYLABEL_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QLabel&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyLabel</span> : <span class="keyword">public</span> QLabel</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">MyLabel</span><span class="params">(QWidget *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//鼠标进入事件</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">enterEvent</span><span class="params">(QEnterEvent *event)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//鼠标离开事件</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">leaveEvent</span><span class="params">(QEvent *)</span></span>;</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// MYLABEL_H</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>自定义标签的源文件为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mylabel.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line"></span><br><span class="line">MyLabel::<span class="built_in">MyLabel</span>(QWidget *parent)</span><br><span class="line">    : QLabel&#123;parent&#125;</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//鼠标进入事件</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyLabel::enterEvent</span><span class="params">(QEnterEvent *event)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;Enter&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//鼠标离开事件</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyLabel::leaveEvent</span><span class="params">(QEvent *)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;Leave&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/Qt/%E9%BC%A0%E6%A0%87%E8%BF%9B%E5%85%A5%E5%92%8C%E7%A6%BB%E5%BC%80%E4%BA%8B%E4%BB%B6.jpg" alt="鼠标进入和离开事件"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Enter</span><br><span class="line">Leave</span><br></pre></td></tr></table></figure><h2 id="点击、释放和移动"><a href="#点击、释放和移动" class="headerlink" title="点击、释放和移动"></a>点击、释放和移动</h2><p>针对点击、释放和移动也有着对应的事件，并且这些事件可以进行重写。</p><p>自定义标签的头文件为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MYLABEL_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MYLABEL_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QLabel&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMouseEvent&gt;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyLabel</span> : <span class="keyword">public</span> QLabel</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">MyLabel</span><span class="params">(QWidget *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//鼠标按下</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">mousePressEvent</span><span class="params">(QMouseEvent *ev)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//鼠标释放</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">mouseReleaseEvent</span><span class="params">(QMouseEvent *ev)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//鼠标移动</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">mouseMoveEvent</span><span class="params">(QMouseEvent *ev)</span></span>;</span><br><span class="line">signals:</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// MYLABEL_H</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>自定义标签的源文件为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mylabel.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line"></span><br><span class="line">MyLabel::<span class="built_in">MyLabel</span>(QWidget *parent)</span><br><span class="line">    : QLabel&#123;parent&#125;</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//鼠标按下</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyLabel::mousePressEvent</span><span class="params">(QMouseEvent *ev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QString str = <span class="built_in">QString</span>(<span class="string">&quot;Press x = %1, y = %2&quot;</span>).<span class="built_in">arg</span>(ev-&gt;<span class="built_in">x</span>()).<span class="built_in">arg</span>((ev-&gt;<span class="built_in">y</span>()));</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; str.<span class="built_in">toUtf8</span>().<span class="built_in">data</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//鼠标释放</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyLabel::mouseReleaseEvent</span><span class="params">(QMouseEvent *ev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QString str = <span class="built_in">QString</span>(<span class="string">&quot;Release x = %1, y = %2&quot;</span>).<span class="built_in">arg</span>(ev-&gt;<span class="built_in">x</span>()).<span class="built_in">arg</span>((ev-&gt;<span class="built_in">y</span>()));</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; str.<span class="built_in">toUtf8</span>().<span class="built_in">data</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//鼠标移动</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyLabel::mouseMoveEvent</span><span class="params">(QMouseEvent *ev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QString str = <span class="built_in">QString</span>(<span class="string">&quot;Move x = %1, y = %2&quot;</span>).<span class="built_in">arg</span>(ev-&gt;<span class="built_in">x</span>()).<span class="built_in">arg</span>((ev-&gt;<span class="built_in">y</span>()));</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; str.<span class="built_in">toUtf8</span>().<span class="built_in">data</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Press x = 29, y = 21</span><br><span class="line">Move x = 28, y = 21</span><br><span class="line">Move x = 27, y = 21</span><br><span class="line">Move x = 27, y = 21</span><br><span class="line">Move x = 26, y = 21</span><br><span class="line">Move x = 25, y = 21</span><br><span class="line">Move x = 25, y = 21</span><br><span class="line">Move x = 24, y = 21</span><br><span class="line">Move x = 24, y = 20</span><br><span class="line">Release x = 24, y = 20</span><br></pre></td></tr></table></figure><p>在标签上按下鼠标的时候会输出坐标，滑动也会实时显示坐标，松开也同理。</p><p>还可以使用<code>globalX</code>和<code>globalY</code>来获取相对于屏幕的坐标位置。</p><h2 id="读取按键"><a href="#读取按键" class="headerlink" title="读取按键"></a>读取按键</h2><p>鼠标事件中可以通过<code>button</code>访问摁下的是哪一个键，<code>LeftButton</code>代表鼠标左键，<code>RightButton</code>代表鼠标右键，<code>MiddleButton</code>代表鼠标中键。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mylabel.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line"></span><br><span class="line">MyLabel::<span class="built_in">MyLabel</span>(QWidget *parent)</span><br><span class="line">    : QLabel&#123;parent&#125;</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//鼠标按下</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyLabel::mousePressEvent</span><span class="params">(QMouseEvent *ev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ev-&gt;<span class="built_in">button</span>() == Qt::LeftButton)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;Left Press&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ev-&gt;<span class="built_in">button</span>() == Qt::RightButton)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;Right Press&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ev-&gt;<span class="built_in">button</span>() == Qt::MiddleButton)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;Middle Press&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//鼠标释放</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyLabel::mouseReleaseEvent</span><span class="params">(QMouseEvent *ev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ev-&gt;<span class="built_in">button</span>() == Qt::LeftButton)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;Left Release&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ev-&gt;<span class="built_in">button</span>() == Qt::RightButton)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;Right Release&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ev-&gt;<span class="built_in">button</span>() == Qt::MiddleButton)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;Middle Release&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//鼠标移动</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyLabel::mouseMoveEvent</span><span class="params">(QMouseEvent *ev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ev-&gt;<span class="built_in">button</span>() == Qt::LeftButton)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;Left Move&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ev-&gt;<span class="built_in">button</span>() == Qt::RightButton)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;Right Move&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ev-&gt;<span class="built_in">button</span>() == Qt::MiddleButton)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;Middle Move&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Left Press</span><br><span class="line">Left Release</span><br><span class="line">Left Press</span><br><span class="line">Left Release</span><br></pre></td></tr></table></figure><p>可以发现，上述代码中，如果按住移动鼠标并不会触发相应的输出。这是因为按下和释放都是瞬间的动作，移动是一个持续的过程，并且在移动过程中可以更换按键，导致无法识别。为了解决这一问题，可以使用<code>buttons</code>，可以检测所有的按键，通过位运算的<code>&amp;</code>操作符来判断是否使用了对应的按键。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mylabel.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line"></span><br><span class="line">MyLabel::<span class="built_in">MyLabel</span>(QWidget *parent)</span><br><span class="line">    : QLabel&#123;parent&#125;</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//鼠标按下</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyLabel::mousePressEvent</span><span class="params">(QMouseEvent *ev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ev-&gt;<span class="built_in">button</span>() == Qt::LeftButton)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;Left Press&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ev-&gt;<span class="built_in">button</span>() == Qt::RightButton)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;Right Press&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ev-&gt;<span class="built_in">button</span>() == Qt::MiddleButton)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;Middle Press&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//鼠标释放</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyLabel::mouseReleaseEvent</span><span class="params">(QMouseEvent *ev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ev-&gt;<span class="built_in">button</span>() == Qt::LeftButton)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;Left Release&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ev-&gt;<span class="built_in">button</span>() == Qt::RightButton)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;Right Release&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ev-&gt;<span class="built_in">button</span>() == Qt::MiddleButton)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;Middle Release&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//鼠标移动</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyLabel::mouseMoveEvent</span><span class="params">(QMouseEvent *ev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ev-&gt;<span class="built_in">buttons</span>() &amp; Qt::LeftButton)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;Left Move&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ev-&gt;<span class="built_in">buttons</span>() &amp; Qt::RightButton)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;Right Move&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ev-&gt;<span class="built_in">buttons</span>() &amp; Qt::MiddleButton)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;Middle Move&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Left Press</span><br><span class="line">Left Move</span><br><span class="line">Left Move</span><br><span class="line">Left Move</span><br><span class="line">Left Release</span><br><span class="line">Right Press</span><br><span class="line">Right Move</span><br><span class="line">Right Move</span><br><span class="line">Right Release</span><br><span class="line">Middle Press</span><br><span class="line">Middle Move</span><br><span class="line">Middle Move</span><br><span class="line">Middle Move</span><br><span class="line">Middle Release</span><br></pre></td></tr></table></figure><h2 id="鼠标追踪"><a href="#鼠标追踪" class="headerlink" title="鼠标追踪"></a>鼠标追踪</h2><p>现在的移动检测只有鼠标摁住才有效果，可以打开鼠标追踪，使用<code>setMouseTracking</code>即可，将值设置为<code>true</code>，这样就实现了移动检测。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setMouseTracking</span>(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><h1 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h1><h2 id="基本方法"><a href="#基本方法" class="headerlink" title="基本方法"></a>基本方法</h2><p>定时器可以用来进行计时，对应的事件是<code>timerEvent(QTimerEvent *)</code>，可以对这个方法进行重写。</p><p>例如现在创建一个标签，内容是每隔一秒数字加一。</p><p><code>Widget</code>的头文件为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> WIDGET_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WIDGET_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QWidget&gt;</span></span></span><br><span class="line"></span><br><span class="line">QT_BEGIN_NAMESPACE</span><br><span class="line"><span class="keyword">namespace</span> Ui &#123;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Widget</span>;</span><br><span class="line">&#125;</span><br><span class="line">QT_END_NAMESPACE</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Widget</span> : <span class="keyword">public</span> QWidget</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Widget</span>(QWidget *parent = <span class="literal">nullptr</span>);</span><br><span class="line">    ~<span class="built_in">Widget</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定时器事件</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">timerEvent</span><span class="params">(QTimerEvent *)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Ui::Widget *ui;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// WIDGET_H</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>Widget</code>的源文件为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_widget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//启动定时器</span></span><br><span class="line">    <span class="built_in">startTimer</span>(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Widget::~<span class="built_in">Widget</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定时器事件</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::timerEvent</span><span class="params">(QTimerEvent *)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> number = <span class="number">0</span>;</span><br><span class="line">    ui-&gt;timeLabel-&gt;<span class="built_in">setText</span>(QString::<span class="built_in">number</span>(number++));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>启动计时器需要使用<code>startTimer()</code>方法，里面的参数是时间间隔，单位是毫秒。这样每过一个间隔时间都会调用一次定时器事件，为了防止每次调用都更新<code>number</code>值，可以将其设置为静态变量。</p><h2 id="多个定时器"><a href="#多个定时器" class="headerlink" title="多个定时器"></a>多个定时器</h2><p>如果一个界面中有多个时间需求，例如一个标签每秒走一次，另一个标签每两秒走一次，就可以使用多个定时器。这里需要引入<code>ev</code>事件，内部有一个<code>timerId</code>的成员函数，可以用于区分不同的定时器。</p><p><code>Widget</code>的头文件为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> WIDGET_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WIDGET_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QWidget&gt;</span></span></span><br><span class="line"></span><br><span class="line">QT_BEGIN_NAMESPACE</span><br><span class="line"><span class="keyword">namespace</span> Ui &#123;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Widget</span>;</span><br><span class="line">&#125;</span><br><span class="line">QT_END_NAMESPACE</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Widget</span> : <span class="keyword">public</span> QWidget</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Widget</span>(QWidget *parent = <span class="literal">nullptr</span>);</span><br><span class="line">    ~<span class="built_in">Widget</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定时器事件</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">timerEvent</span><span class="params">(QTimerEvent * ev)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Ui::Widget *ui;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> id1;</span><br><span class="line">    <span class="type">int</span> id2;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// WIDGET_H</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>Widget</code>的源文件为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_widget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//启动定时器</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;id1 = <span class="built_in">startTimer</span>(<span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">this</span>-&gt;id2 = <span class="built_in">startTimer</span>(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">    ui-&gt;timeLabel_1-&gt;<span class="built_in">setText</span>(QString::<span class="built_in">number</span>(<span class="number">0</span>));</span><br><span class="line">    ui-&gt;timeLabel_2-&gt;<span class="built_in">setText</span>(QString::<span class="built_in">number</span>(<span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Widget::~<span class="built_in">Widget</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定时器事件</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::timerEvent</span><span class="params">(QTimerEvent * ev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> number1 = <span class="number">1</span>;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> number2 = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(ev-&gt;<span class="built_in">timerId</span>() == <span class="keyword">this</span>-&gt;id1)</span><br><span class="line">    &#123;</span><br><span class="line">        ui-&gt;timeLabel_1-&gt;<span class="built_in">setText</span>(QString::<span class="built_in">number</span>(number1++));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ev-&gt;<span class="built_in">timerId</span>() == <span class="keyword">this</span>-&gt;id2)</span><br><span class="line">    &#123;</span><br><span class="line">        ui-&gt;timeLabel_2-&gt;<span class="built_in">setText</span>(QString::<span class="built_in">number</span>(number2++));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/Qt/%E5%A4%9A%E5%AE%9A%E6%97%B6%E5%99%A8.jpg" alt="多定时器"></p><h2 id="QTimer类"><a href="#QTimer类" class="headerlink" title="QTimer类"></a>QTimer类</h2><p>计时器有一个对应的类，需要引入<code>QTimer</code>类。通过<code>start</code>方法设定对应的时间间隔，使用信号与槽进行连接。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_widget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QTimer&gt;</span></span></span><br><span class="line"></span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//启动定时器</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;id1 = <span class="built_in">startTimer</span>(<span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">this</span>-&gt;id2 = <span class="built_in">startTimer</span>(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">    ui-&gt;timeLabel_1-&gt;<span class="built_in">setText</span>(QString::<span class="built_in">number</span>(<span class="number">0</span>));</span><br><span class="line">    ui-&gt;timeLabel_2-&gt;<span class="built_in">setText</span>(QString::<span class="built_in">number</span>(<span class="number">0</span>));</span><br><span class="line">    ui-&gt;timeLabel_3-&gt;<span class="built_in">setText</span>(QString::<span class="built_in">number</span>(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    QTimer * timer = <span class="keyword">new</span> <span class="built_in">QTimer</span>();</span><br><span class="line">    timer-&gt;<span class="built_in">start</span>(<span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">connect</span>(timer, &amp;QTimer::timeout, [=]()&#123;</span><br><span class="line">        <span class="type">static</span> <span class="type">int</span> number = <span class="number">1</span>;</span><br><span class="line">        ui-&gt;timeLabel_3-&gt;<span class="built_in">setText</span>(QString::<span class="built_in">number</span>(number++));</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Widget::~<span class="built_in">Widget</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定时器事件</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::timerEvent</span><span class="params">(QTimerEvent * ev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> number1 = <span class="number">1</span>;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> number2 = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(ev-&gt;<span class="built_in">timerId</span>() == <span class="keyword">this</span>-&gt;id1)</span><br><span class="line">    &#123;</span><br><span class="line">        ui-&gt;timeLabel_1-&gt;<span class="built_in">setText</span>(QString::<span class="built_in">number</span>(number1++));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ev-&gt;<span class="built_in">timerId</span>() == <span class="keyword">this</span>-&gt;id2)</span><br><span class="line">    &#123;</span><br><span class="line">        ui-&gt;timeLabel_2-&gt;<span class="built_in">setText</span>(QString::<span class="built_in">number</span>(number2++));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/Qt/QTimer%E7%B1%BB.jpg" alt="QTimer类"></p><p>推荐使用<code>QTimer</code>类别，可以使用<code>stop</code>方法来随时暂停。</p><h2 id="事件拦截"><a href="#事件拦截" class="headerlink" title="事件拦截"></a>事件拦截</h2><p>在<code>Qt</code>中存在一个事件分发器，用来专门处理事件。这个分发器起到一层过滤的作用，其函数名是<code>bool event(QEvent* v)</code>，返回值是布尔类型，如果返回的是真，代表用户要处理这个事件，不向下分发事件。如果返回值是假，则向下分发事件直到成功处理这个事件。一般情况下，事件都不会去进行手动处理。</p><p>如果遇到需要进行手动处理的情况，可以重写<code>event</code>方法，然后将返回值设置为<code>true</code>，如果存在不需要处理的情况则需要返回其父类的<code>event</code>，让它进行处理。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mylabel.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line"></span><br><span class="line">MyLabel::<span class="built_in">MyLabel</span>(QWidget *parent)</span><br><span class="line">    : QLabel&#123;parent&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//setMouseTracking(true);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//鼠标按下</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyLabel::mousePressEvent</span><span class="params">(QMouseEvent *ev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ev-&gt;<span class="built_in">button</span>() == Qt::LeftButton)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;Left Press&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ev-&gt;<span class="built_in">button</span>() == Qt::RightButton)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;Right Press&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ev-&gt;<span class="built_in">button</span>() == Qt::MiddleButton)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;Middle Press&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//鼠标释放</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyLabel::mouseReleaseEvent</span><span class="params">(QMouseEvent *ev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ev-&gt;<span class="built_in">button</span>() == Qt::LeftButton)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;Left Release&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ev-&gt;<span class="built_in">button</span>() == Qt::RightButton)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;Right Release&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ev-&gt;<span class="built_in">button</span>() == Qt::MiddleButton)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;Middle Release&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//鼠标移动</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyLabel::mouseMoveEvent</span><span class="params">(QMouseEvent *ev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;Move&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//事件拦截</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">MyLabel::event</span><span class="params">(QEvent *e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(e-&gt;<span class="built_in">type</span>() == QEvent::MouseButtonPress)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;Event!!!&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> QLabel::<span class="built_in">event</span>(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Event!!!</span><br><span class="line">Left Release</span><br></pre></td></tr></table></figure><p>这种情况下，左键单击事件会被拦截，除了这一事件外的事件会交给父类去进行处理。</p><p>此时还存在一个问题，<code>QEvent</code>是一个总的事件类，如果想要用子类的参数则无法调用，例如无法调用鼠标相关事件中的坐标函数。为了解决这一问题，可以使用静态类型转换的方式，例如想要将<code>QEvent</code>类型转换为<code>QMouseEvent</code>类型，则可以写下面这段代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QMouseEvent * ev = <span class="built_in">static_cast</span>&lt;QMouseEvent *&gt;(e);</span><br></pre></td></tr></table></figure><h1 id="绘图"><a href="#绘图" class="headerlink" title="绘图"></a>绘图</h1><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><p>绘图事件可以在窗口中进行绘画，需要重写绘图事件<code>void paintEvent()</code>。</p><p>使用时需要先声明画家对象并指定绘图设备，使用<code>QPainter painter(this)</code>即可。</p><p>具体操作如下所示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_widget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPainter&gt;</span>  <span class="comment">//画家类</span></span></span><br><span class="line"></span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重写绘画事件</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::paintEvent</span><span class="params">(QPaintEvent *)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//实例化画家对象 this指定的是绘图设备</span></span><br><span class="line">    <span class="function">QPainter <span class="title">painter</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置画笔</span></span><br><span class="line">    <span class="function">QPen <span class="title">pen</span><span class="params">(QColor(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>))</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置画笔宽度</span></span><br><span class="line">    pen.<span class="built_in">setWidth</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置画笔风格</span></span><br><span class="line">    pen.<span class="built_in">setStyle</span>(Qt::DotLine);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//让画家使用这个笔</span></span><br><span class="line">    painter.<span class="built_in">setPen</span>(pen);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置画刷</span></span><br><span class="line">    <span class="function">QBrush <span class="title">brush</span><span class="params">(Qt::cyan)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置画刷风格</span></span><br><span class="line">    brush.<span class="built_in">setStyle</span>(Qt::Dense7Pattern);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//让画家使用画刷</span></span><br><span class="line">    painter.<span class="built_in">setBrush</span>(brush);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//画线</span></span><br><span class="line">    painter.<span class="built_in">drawLine</span>(<span class="built_in">QPoint</span>(<span class="number">0</span>, <span class="number">0</span>), <span class="built_in">QPoint</span>(<span class="number">100</span>, <span class="number">100</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//画圆 椭圆</span></span><br><span class="line">    painter.<span class="built_in">drawEllipse</span>(<span class="built_in">QPoint</span>(<span class="number">100</span>, <span class="number">100</span>), <span class="number">100</span>, <span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//画矩形</span></span><br><span class="line">    painter.<span class="built_in">drawRect</span>(<span class="built_in">QRect</span>(<span class="number">20</span>, <span class="number">20</span>, <span class="number">50</span>, <span class="number">50</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//画文字</span></span><br><span class="line">    painter.<span class="built_in">drawText</span>(<span class="built_in">QRect</span>(<span class="number">10</span>, <span class="number">200</span>, <span class="number">100</span>, <span class="number">50</span>), <span class="string">&quot;好耶&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Widget::~<span class="built_in">Widget</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/Qt/%E7%BB%98%E5%9B%BE.jpg" alt="绘图"></p><h2 id="高级设置"><a href="#高级设置" class="headerlink" title="高级设置"></a>高级设置</h2><h3 id="抗锯齿"><a href="#抗锯齿" class="headerlink" title="抗锯齿"></a>抗锯齿</h3><p>直接画出来的图像会比较粗糙，可以手动为其添加抗锯齿能力。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_widget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPainter&gt;</span>  <span class="comment">//画家类</span></span></span><br><span class="line"></span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重写绘画事件</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::paintEvent</span><span class="params">(QPaintEvent *)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QPainter <span class="title">painter</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line">    painter.<span class="built_in">drawEllipse</span>(<span class="built_in">QPoint</span>(<span class="number">100</span>, <span class="number">100</span>), <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">    <span class="comment">//设置抗锯齿能力</span></span><br><span class="line">    painter.<span class="built_in">setRenderHint</span>(QPainter::Antialiasing);</span><br><span class="line">    painter.<span class="built_in">drawEllipse</span>(<span class="built_in">QPoint</span>(<span class="number">300</span>, <span class="number">100</span>), <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Widget::~<span class="built_in">Widget</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/Qt/%E6%8A%97%E9%94%AF%E9%BD%BF.jpg" alt="抗锯齿"></p><p>添加抗锯齿能力会让图像更加精细，但同样会降低运算速度。</p><h3 id="移动和保存"><a href="#移动和保存" class="headerlink" title="移动和保存"></a>移动和保存</h3><p>可以通过<code>translate</code>方法移动画家的位置，有两个参数，分别代表横坐标和纵坐标的移动距离。还可以使用<code>save</code>和<code>restore</code>来保存和还原画家的信息。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_widget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPainter&gt;</span>  <span class="comment">//画家类</span></span></span><br><span class="line"></span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重写绘画事件</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::paintEvent</span><span class="params">(QPaintEvent *)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QPainter <span class="title">painter</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line">    painter.<span class="built_in">drawRect</span>(<span class="built_in">QRect</span>(<span class="number">20</span>, <span class="number">20</span>, <span class="number">50</span>, <span class="number">50</span>));</span><br><span class="line">    <span class="comment">//移动画家</span></span><br><span class="line">    painter.<span class="built_in">translate</span>(<span class="number">100</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//保存画家状态</span></span><br><span class="line">    painter.<span class="built_in">save</span>();</span><br><span class="line">    painter.<span class="built_in">drawRect</span>(<span class="built_in">QRect</span>(<span class="number">20</span>, <span class="number">20</span>, <span class="number">50</span>, <span class="number">50</span>));</span><br><span class="line">    <span class="comment">//移动画家</span></span><br><span class="line">    painter.<span class="built_in">translate</span>(<span class="number">100</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//还原画家状态</span></span><br><span class="line">    painter.<span class="built_in">restore</span>();</span><br><span class="line">    painter.<span class="built_in">drawRect</span>(<span class="built_in">QRect</span>(<span class="number">20</span>, <span class="number">20</span>, <span class="number">50</span>, <span class="number">50</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Widget::~<span class="built_in">Widget</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/Qt/%E7%A7%BB%E5%8A%A8%E5%92%8C%E4%BF%9D%E5%AD%98.jpg" alt="移动和保存"></p><h2 id="调用绘图事件"><a href="#调用绘图事件" class="headerlink" title="调用绘图事件"></a>调用绘图事件</h2><p>绘图也可以绘制资源文件中有的图片，如果想要重新调用绘图事件可以使用<code>update</code>方法进行调用。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_widget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPainter&gt;</span>  <span class="comment">//画家类</span></span></span><br><span class="line"></span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">connect</span>(ui-&gt;pushButton, &amp;QPushButton::clicked, [=]()&#123;</span><br><span class="line">        <span class="built_in">update</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重写绘画事件</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::paintEvent</span><span class="params">(QPaintEvent *)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QPainter <span class="title">painter</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line">    painter.<span class="built_in">drawPixmap</span>(<span class="keyword">this</span>-&gt;posX, <span class="number">0</span>, <span class="built_in">QPixmap</span>(<span class="string">&quot;:/avatar.jpg&quot;</span>));</span><br><span class="line">    <span class="keyword">this</span>-&gt;posX += <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Widget::~<span class="built_in">Widget</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/Qt/%E8%B0%83%E7%94%A8%E7%BB%98%E5%9B%BE%E4%BA%8B%E4%BB%B6.jpg" alt="调用绘图事件"></p><h2 id="绘图设备"><a href="#绘图设备" class="headerlink" title="绘图设备"></a>绘图设备</h2><p>绘图设备是指继承<code>QPaintDevice</code>的子类。<code>Qt</code>一共提供了四个这样的类，分别是<code>Qpixmap</code>、<code>QBitmap</code>、<code>QImage</code>和<code>QPicture</code>。其中：</p><ul><li><code>Pixmap</code>专门为图像在屏幕上的显示做了优化。</li><li><code>QBitmap</code>是<code>QPixmap</code>的一个子类，它的色深限定为1，可以使用<code>QPixmap</code>的<code>isQBitmap()</code>函数来确定这个<code>QPixmap</code>是不是一个<code>QBitmap</code>。</li><li><code>QImage</code>专门为图像的像素级访问做了优化。</li><li><code>QPicture</code>则可以记录和重现<code>QPainter</code>的各条命令。</li></ul><h3 id="Pixmap"><a href="#Pixmap" class="headerlink" title="Pixmap"></a>Pixmap</h3><p>使用<code>Pixmap</code>可以直接创建一个绘图设备，让<code>Painter</code>在上面进行绘画，保存在相应的路径下。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_widget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPixmap&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPainter&gt;</span></span></span><br><span class="line"></span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Pixmap绘图设备 专门为平台做了显示的优化</span></span><br><span class="line">    <span class="function">QPixmap <span class="title">pix</span><span class="params">(<span class="number">300</span>, <span class="number">300</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//填充颜色</span></span><br><span class="line">    pix.<span class="built_in">fill</span>(Qt::white);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明画家</span></span><br><span class="line">    <span class="function">QPainter <span class="title">painter</span><span class="params">(&amp;pix)</span></span>;</span><br><span class="line">    painter.<span class="built_in">setPen</span>(<span class="built_in">QPen</span>(Qt::green));</span><br><span class="line">    painter.<span class="built_in">drawEllipse</span>(<span class="built_in">QPoint</span>(<span class="number">150</span>, <span class="number">150</span>), <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存</span></span><br><span class="line">    pix.<span class="built_in">save</span>((<span class="string">&quot;D:\\Code\\Qt\\Workspace\\pix.png&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Widget::~<span class="built_in">Widget</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/Qt/pix.png" alt="pix"></p><h3 id="QImage"><a href="#QImage" class="headerlink" title="QImage"></a>QImage</h3><p>相对于<code>Pixmap</code>而言，<code>QImage</code>多了一个格式参数，可以设定绘图设备的一些格式，最常用的格式是<code>QImage::Format_RGB32</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_widget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QImage&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPainter&gt;</span></span></span><br><span class="line"></span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//QImage绘图设备 可以对像素进行访问</span></span><br><span class="line">    <span class="function">QImage <span class="title">img</span><span class="params">(<span class="number">300</span>, <span class="number">300</span>, QImage::Format_RGB32)</span></span>;</span><br><span class="line">    img.<span class="built_in">fill</span>(Qt::white);</span><br><span class="line"></span><br><span class="line">    <span class="function">QPainter <span class="title">painter</span><span class="params">(&amp;img)</span></span>;</span><br><span class="line">    painter.<span class="built_in">setPen</span>(<span class="built_in">QPen</span>(Qt::blue));</span><br><span class="line">    painter.<span class="built_in">drawEllipse</span>(<span class="built_in">QPoint</span>(<span class="number">150</span>, <span class="number">150</span>), <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    img.<span class="built_in">save</span>(<span class="string">&quot;D:\\Code\\Qt\\Workspace\\image.png&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Widget::~<span class="built_in">Widget</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/Qt/image.png" alt="image"></p><p>除了可以绘制图片外，还可以修改像素点。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_widget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QImage&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPainter&gt;</span></span></span><br><span class="line"></span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Widget::~<span class="built_in">Widget</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘图事件</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::paintEvent</span><span class="params">(QPaintEvent *)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QPainter <span class="title">painter</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//利用QImage对像素进行修改</span></span><br><span class="line">    QImage img;</span><br><span class="line">    img.<span class="built_in">load</span>(<span class="string">&quot;:/avatar.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改像素点</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">50</span>; i &lt; <span class="number">100</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">50</span>; j &lt; <span class="number">100</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            QRgb value = <span class="built_in">qRgb</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            img.<span class="built_in">setPixel</span>(i, j ,value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    painter.<span class="built_in">drawImage</span>(<span class="number">0</span>, <span class="number">0</span>, img);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/Qt/QImage.jpg" alt="QImage"></p><h3 id="QPicture"><a href="#QPicture" class="headerlink" title="QPicture"></a>QPicture</h3><p><code>QPicture</code>可以自定义一种类型的文件对绘图命令进行保存然后重现。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_widget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPicture&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPainter&gt;</span></span></span><br><span class="line"></span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//QPicture 绘图设备 可以记录和重现绘图指令</span></span><br><span class="line">    QPicture pic;</span><br><span class="line">    QPainter painter;</span><br><span class="line">    painter.<span class="built_in">begin</span>(&amp;pic);  <span class="comment">//开始往pic上画画</span></span><br><span class="line">    painter.<span class="built_in">drawEllipse</span>(<span class="built_in">QPoint</span>(<span class="number">150</span>, <span class="number">150</span>), <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">    painter.<span class="built_in">end</span>();  <span class="comment">//结束画画</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存到磁盘</span></span><br><span class="line">    pic.<span class="built_in">save</span>(<span class="string">&quot;D:\\Code\\Qt\\Workspace\\pic.bigglesworth&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Widget::~<span class="built_in">Widget</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘图事件</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::paintEvent</span><span class="params">(QPaintEvent *)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QPainter <span class="title">painter</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line">    <span class="comment">//重现QPicture的绘图指令</span></span><br><span class="line">    QPicture pic;</span><br><span class="line">    pic.<span class="built_in">load</span>(<span class="string">&quot;D:\\Code\\Qt\\Workspace\\pic.bigglesworth&quot;</span>);</span><br><span class="line">    painter.<span class="built_in">drawPicture</span>(<span class="number">0</span>, <span class="number">0</span>, pic);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/Qt/QPicture.jpg" alt="QPicture"></p><h1 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h1><h2 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h2><p>文件相关的操作需要使用<code>QFile</code>头文件，现在设计一个窗口，可以选择文本文件进行读取。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_widget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QFileDialog&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QFile&gt;</span></span></span><br><span class="line"></span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//点击选取按钮，弹出文件对话框</span></span><br><span class="line">    <span class="built_in">connect</span>(ui-&gt;pushButton, &amp;QPushButton::clicked, [=]()&#123;</span><br><span class="line">        QString path = QFileDialog::<span class="built_in">getOpenFileName</span>(<span class="keyword">this</span>, <span class="string">&quot;打开文件&quot;</span>, <span class="string">&quot;D:\\OneDrive\\Desktop&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将路径放入到lineEdit中</span></span><br><span class="line">        ui-&gt;lineEdit-&gt;<span class="built_in">setText</span>(path);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取内容 放入到textEdit中</span></span><br><span class="line">        QFile <span class="built_in">file</span>(path);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置打开方式</span></span><br><span class="line">        file.<span class="built_in">open</span>(QIODevice::ReadOnly);</span><br><span class="line">        QByteArray array = file.<span class="built_in">readAll</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将读取到的数据放入textEdit中</span></span><br><span class="line">        ui-&gt;textEdit-&gt;<span class="built_in">setText</span>(array);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Widget::~<span class="built_in">Widget</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/Qt/%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96.jpg" alt="文件读取"></p><p>不仅可以读取整个文件，还可以使用<code>readLine</code>按行进行读取，通过<code>atEnd</code>判断是否读完。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_widget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QFileDialog&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QFile&gt;</span></span></span><br><span class="line"></span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//点击选取按钮，弹出文件对话框</span></span><br><span class="line">    <span class="built_in">connect</span>(ui-&gt;pushButton, &amp;QPushButton::clicked, [=]()&#123;</span><br><span class="line">        QString path = QFileDialog::<span class="built_in">getOpenFileName</span>(<span class="keyword">this</span>, <span class="string">&quot;打开文件&quot;</span>, <span class="string">&quot;D:\\OneDrive\\Desktop&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将路径放入到lineEdit中</span></span><br><span class="line">        ui-&gt;lineEdit-&gt;<span class="built_in">setText</span>(path);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取内容 放入到textEdit中</span></span><br><span class="line">        QFile <span class="built_in">file</span>(path);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置打开方式</span></span><br><span class="line">        file.<span class="built_in">open</span>(QIODevice::ReadOnly);</span><br><span class="line">        QByteArray array;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!file.<span class="built_in">atEnd</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            array += file.<span class="built_in">readLine</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ui-&gt;textEdit-&gt;<span class="built_in">setText</span>(array);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Widget::~<span class="built_in">Widget</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/Qt/%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96.jpg" alt="文件读取"></p><p>使用完文件后，需要使用<code>close</code>函数进行关闭。</p><h2 id="追加写入"><a href="#追加写入" class="headerlink" title="追加写入"></a>追加写入</h2><p>使用<code>Append</code>的打开方式可以对其进行追加写入。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_widget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QFileDialog&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QFile&gt;</span></span></span><br><span class="line"></span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//点击选取按钮，弹出文件对话框</span></span><br><span class="line">    <span class="built_in">connect</span>(ui-&gt;pushButton, &amp;QPushButton::clicked, [=]()&#123;</span><br><span class="line">        QString path = QFileDialog::<span class="built_in">getOpenFileName</span>(<span class="keyword">this</span>, <span class="string">&quot;打开文件&quot;</span>, <span class="string">&quot;D:\\OneDrive\\Desktop&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将路径放入到lineEdit中</span></span><br><span class="line">        ui-&gt;lineEdit-&gt;<span class="built_in">setText</span>(path);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取内容 放入到textEdit中</span></span><br><span class="line">        QFile <span class="built_in">file</span>(path);</span><br><span class="line"></span><br><span class="line">        file.<span class="built_in">open</span>(QIODevice::Append);  <span class="comment">//用追加方式进行写</span></span><br><span class="line">        file.<span class="built_in">write</span>(<span class="string">&quot;好坏耶！！！！&quot;</span>);</span><br><span class="line">        file.<span class="built_in">close</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Widget::~<span class="built_in">Widget</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="文件信息"><a href="#文件信息" class="headerlink" title="文件信息"></a>文件信息</h2><p>文件除了存储的信息外还有非常多的其余信息，例如创建时间，字数等等，可以通过<code>QFileInfo</code>文件信息类进行读取。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_widget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QFileDialog&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QFile&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QFileInfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line"></span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//点击选取按钮，弹出文件对话框</span></span><br><span class="line">    <span class="built_in">connect</span>(ui-&gt;pushButton, &amp;QPushButton::clicked, [=]()&#123;</span><br><span class="line">        QString path = QFileDialog::<span class="built_in">getOpenFileName</span>(<span class="keyword">this</span>, <span class="string">&quot;打开文件&quot;</span>, <span class="string">&quot;D:\\OneDrive\\Desktop&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将路径放入到lineEdit中</span></span><br><span class="line">        ui-&gt;lineEdit-&gt;<span class="built_in">setText</span>(path);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取内容 放入到textEdit中</span></span><br><span class="line">        QFile <span class="built_in">file</span>(path);</span><br><span class="line">        QFileInfo <span class="built_in">info</span>(path);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;Size:&quot;</span> &lt;&lt; info.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot;Suffix:&quot;</span> &lt;&lt; info.<span class="built_in">suffix</span>() &lt;&lt; <span class="string">&quot;File Name:&quot;</span> &lt;&lt; info.<span class="built_in">fileName</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        file.<span class="built_in">close</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Widget::~<span class="built_in">Widget</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Size: 59 Suffix: &quot;txt&quot; File Name: &quot;好耶.txt&quot;</span><br></pre></td></tr></table></figure><p>还可以用这种方式显示创建日期和修改日期。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_widget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QFileDialog&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QFile&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QFileInfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDateTime&gt;</span></span></span><br><span class="line"></span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//点击选取按钮，弹出文件对话框</span></span><br><span class="line">    <span class="built_in">connect</span>(ui-&gt;pushButton, &amp;QPushButton::clicked, [=]()&#123;</span><br><span class="line">        QString path = QFileDialog::<span class="built_in">getOpenFileName</span>(<span class="keyword">this</span>, <span class="string">&quot;打开文件&quot;</span>, <span class="string">&quot;D:\\OneDrive\\Desktop&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将路径放入到lineEdit中</span></span><br><span class="line">        ui-&gt;lineEdit-&gt;<span class="built_in">setText</span>(path);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取内容 放入到textEdit中</span></span><br><span class="line">        QFile <span class="built_in">file</span>(path);</span><br><span class="line">        QFileInfo <span class="built_in">info</span>(path);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;Birth Time:&quot;</span> &lt;&lt; info.<span class="built_in">birthTime</span>().<span class="built_in">toString</span>(<span class="string">&quot;yyyy/MM/dd hh:mm:ss&quot;</span>);</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;Last Modified:&quot;</span> &lt;&lt; info.<span class="built_in">lastModified</span>().<span class="built_in">toString</span>(<span class="string">&quot;yyyy/MM/dd hh:mm:ss&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        file.<span class="built_in">close</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Widget::~<span class="built_in">Widget</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Birth Time: &quot;2024/06/29 19:08:15&quot;</span><br><span class="line">Last Modified: &quot;2024/06/29 23:00:54&quot;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> C++ </tag>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#</title>
      <link href="/archives/38ea7f4b.html"/>
      <url>/archives/38ea7f4b.html</url>
      
        <content type="html"><![CDATA[<hr><h1 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h1><p>编写代码首先要创建一个工程文件，我这里使用的是<code>Visual Studio 2022</code>。</p><p><img src="/img/posts/C_sharp/%E5%88%9B%E5%BB%BA%E5%B7%A5%E7%A8%8B.jpg" alt="创建工程"></p><p>如图所示，安装好<code>C#</code>环境后，选择<code>WPF 应用(.NET Frameword)</code>，点击下一步，选择相应的文件目录，创建即可。</p><p><img src="/img/posts/C_sharp/%E5%B7%A5%E7%A8%8B%E6%96%87%E4%BB%B6.jpg" alt="工程文件"></p><p>通过以上操作，就可以得到一个工程文件。</p><p>界面中间的白色窗体，就是我们运行程序之后得到的窗体，可以摁<code>F5</code>来运行。</p><p><img src="/img/posts/C_sharp/%E8%BF%90%E8%A1%8C%E7%AA%97%E4%BD%93.jpg" alt="运行窗体"></p><p>对于这个工程文件，可以右键中间的白框，找到属性一栏，可以更改它的一些基本信息，例如下面这种，可以更改一下它的背景颜色。</p><p><img src="/img/posts/C_sharp/%E6%9B%B4%E6%94%B9%E8%83%8C%E6%99%AF%E9%A2%9C%E8%89%B2.jpg" alt="更改背景颜色"></p><p><code>C#</code>提供了许多的空间可以去使用，可以在视图中找到工具箱，或者通过快捷键<code>Ctrl+Alt+X</code>来快速打开工具箱。</p><p>通过拖拽的方式添加一个<code>TextBox</code>控件用于放置文本内容，添加一个<code>Button</code>控件作为按钮，通过可视化操作更改它们的属性值（也可以通过修改相应的代码）。</p><p><img src="/img/posts/C_sharp/%E6%8E%A7%E4%BB%B6%E8%AE%BE%E7%BD%AE.jpg" alt="控件设置"></p><p>上图中，红色区域可以直接修改相应空间的属性值，黄色区域可以通过代码的方式进行修改，橙色框圈出来的按钮可以为相应的空间添加事件。</p><p><img src="/img/posts/C_sharp/%E6%B7%BB%E5%8A%A0%E4%BA%8B%E4%BB%B6.jpg" alt="添加事件"></p><p>通过双击<code>Click</code>后面的文本框可以为该按钮添加点击事件，会直接进入到代码编写的页面。</p><p><img src="/img/posts/C_sharp/%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81.jpg" alt="点击事件自动生成代码"></p><p><code>Visual Studio</code>会自动生成相应的代码。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Windows;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Controls;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Data;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Documents;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Input;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Media;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Media.Imaging;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Navigation;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Shapes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">WpfApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> MainWindow.xaml 的交互逻辑</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">MainWindow</span> : <span class="title">Window</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MainWindow</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button_Click</span>(<span class="params"><span class="built_in">object</span> sender, RoutedEventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.textBox1.Text = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在第$30$行添加了一行代码，其作用是将当前<code>textBox1</code>控件中的<code>Text</code>设置为<code>Hello World!</code>，这样就实现了点击按钮在文本框中生成<code>Hello World!</code>的功能了。</p><p><img src="/img/posts/C_sharp/%E5%8D%95%E6%9C%BA%E4%BA%8B%E4%BB%B6%E6%95%88%E6%9E%9C.jpg" alt="单击事件效果"></p><h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World!"></a>Hello World!</h1><h2 id="Console"><a href="#Console" class="headerlink" title="Console"></a>Console</h2><p>首先，创建一个控制台应用，注意后缀有<code>(.NET Framework)</code>，找到合适的位置保存，点击创建即可。</p><p><img src="/img/posts/C_sharp/%E5%88%9B%E5%BB%BA%E6%8E%A7%E5%88%B6%E5%8F%B0%E5%BA%94%E7%94%A8.jpg" alt="创建控制台应用"></p><p>进入之后，内部会有一个默认的代码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>C#</code>的全称是<code>C sharp</code>，因此其源码文件默认使用<code>cs</code>作为扩展名。</p><p>我们通过在第$13$行写输出<code>Hello World!</code>的代码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure><p>上述代码中的<code>Console</code>指的是控制台，<code>WriteLine</code>的作用是打印字符串。需要注意的是，如果直接运行或者使用<code>F5</code>运行，会导致控制台一闪而过，这个时候需要使用<code>Ctrl+F5</code>来运行，可以出现我们想要的结果。</p><h2 id="Windows-Forms"><a href="#Windows-Forms" class="headerlink" title="Windows Forms"></a>Windows Forms</h2><p>首先，创建一个<code>Windows</code>窗体应用，注意后缀有<code>(.NET Framework)</code>，找到合适的位置保存，点击创建即可。</p><p><img src="/img/posts/C_sharp/%E5%88%9B%E5%BB%BAWindows%E7%AA%97%E4%BD%93%E5%BA%94%E7%94%A8.jpg" alt="创建Windows窗体应用"></p><p>进入之后，左上角会有一个白色的窗体，我们可以通过拖拽空间的方式设计界面，这部分内容与之前的内容基本完全一致，也是在工具箱中选择，并设置相应的属性。</p><p><img src="/img/posts/C_sharp/Windows%E7%AA%97%E4%BD%93%E8%AE%BE%E8%AE%A1.jpg" alt="Windows窗体设计"></p><p>接着，设计按钮的点击事件，和之前一样，选中按钮后，找一个闪电样式的图标，在<code>Click</code>后面的文本框中进行双击，可以跳转到相应的代码页面，然后编写相应的代码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.ComponentModel;</span><br><span class="line"><span class="keyword">using</span> System.Data;</span><br><span class="line"><span class="keyword">using</span> System.Drawing;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">WindowsFormsApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form1</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Form1</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">buttonSayHello_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            textBoxShowHello.Text = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>点击按钮后会更改文本框中的属性值（文本框和按钮的名字已更改）。</p><p><img src="/img/posts/C_sharp/Windows%E7%AA%97%E4%BD%93%E6%95%88%E6%9E%9C.jpg" alt="Windows窗体效果"></p><p>该技术是一项比较老且比较过时的技术，现在的更新换代版本叫做<code>WPF(Windows Presentation Foundation)</code>，也就是我们最开始使用的那个例子。这两种技术在窗体上没有什么不同，对于<code>WPF</code>而言，下面多出了一些看起来像是<code>HTML</code>的代码，这种代码叫做<code>XML</code>代码，这样可以让设计师直接使用类似于前端的方式直接对界面进行设计，可以不用像之前一样进行拖拽，能够让设计师直接加入到开发团队中。</p><h1 id="类与名称空间"><a href="#类与名称空间" class="headerlink" title="类与名称空间"></a>类与名称空间</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>类（<code>class</code>）构成程序的主体；名称空间（<code>namespace</code>）以树型结构组织类（和其他类型），例如<code>Button</code>和<code>Path</code>类。</p><p>我们先回到之前写的<code>Hello World!</code>的代码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这段代码中，一共有两个类，分别是<code>Program</code>和<code>Console</code>，其中<code>Program</code>这个类是我们自己写的，它代表了我们的程序。对于<code>C#</code>而言，它是一门完全面向对象的语言，用这种语言编程的时候，程序本身也是一个类。<code>Console</code>是自带的一个类，后面的<code>WriteLine</code>是这个类中的一个方法，作用是将内容输出到控制台中。和<code>C</code>语言一样，<code>Main</code>和主函数很像，是程序的入口，不同点在于它也需要包含在这个<code>Program</code>类中。</p><p>第$7$行中的代码表示，我们的这段代码放在了一个叫做<code>ConsoleApp</code>的名称空间中，这个名称空间默认会跟我们创建的工程文件的名字保持一致。使用名称空间可以让我们自己写的类用相应的名称空间组织起来，当别人想用里面的类的时候，可以非常方便地从名称空间中把这个类找出来。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br></pre></td></tr></table></figure><p>创建项目时，会自动生成这五个名称空间，里面包含了最常用的名称空间，就不需要我们再进行调用了。例如第一个名称空间中，就包含了<code>Console</code>类，如果删掉它就无法直接调用<code>Console</code>了。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">            System.Console.WriteLine(<span class="string">&quot;Good morning!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>虽然不能直接调用，但是可以通过声明相应的名称空间来调用相关的类和对应的方法，这种方法会增加一些代码量，每次调用的时候都得声明相应的名称空间。为了防止这些麻烦，一般来讲都会在最开始进行声明。不过有一种情况比较特殊，对于不同的名称空间，可能包含类名相同的类，如果直接调用的话，编译器就没法区分这个类属于哪个名称空间，所以只能通过在前面加上想要调用的类的名称空间。</p><h2 id="类库的引用"><a href="#类库的引用" class="headerlink" title="类库的引用"></a>类库的引用</h2><p>类和名称空间放在一个叫做类库的东西里，类库是我们这个类和名称空间的物理基础，不同技术类型的项目会默认引用不同的类库，如果没有类库的话，即使知道这个名称空间中的类也没有办法使用。</p><p>类库的引用一共有两种方式，一种是<code>DLL</code>引用，又称为黑盒引用，没有它的源代码，然后直接进行引用；另一种是项目引用，又称为白盒引用，有源代码。</p><h3 id="黑盒引用"><a href="#黑盒引用" class="headerlink" title="黑盒引用"></a>黑盒引用</h3><p>首先我们来看一下黑盒引用的方式，也就是直接引用相应的<code>DLL</code>。</p><p>我们可以直接添加自带的引用，可以右键右侧框中的引用，然后添加引用。</p><p><img src="/img/posts/C_sharp/%E6%B7%BB%E5%8A%A0%E5%BC%95%E7%94%A8.jpg" alt="添加引用"></p><p>通过在程序集的框架中可以搜索想要使用的配件，例如我们如果希望让我们的程序显示窗口，那么就可以导入<code>System.Windows.Forms</code>这样一个框架。</p><p><img src="/img/posts/C_sharp/%E6%B7%BB%E5%8A%A0%E7%AA%97%E5%8F%A3%E6%98%BE%E7%A4%BA%E9%85%8D%E4%BB%B6.jpg" alt="添加窗口显示配件"></p><p>如果想要知道这个框架中具体有哪些功能，那么就可以去查找相应的<code>MSDN</code>文档。使用的时候，首先需要在代码中调用相应的名称空间，然后才能够正常使用。通过查找相应的方法，可以编写我们想要的代码，例如下面这段代码就可以生成一个窗口。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Form form = <span class="keyword">new</span> Form();</span><br><span class="line">            form.ShowDialog();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="/img/posts/C_sharp/%E7%AA%97%E5%8F%A3%E6%98%BE%E7%A4%BA.jpg" alt="窗口显示"></p><p>如果你引用的类库是一个上层的类库的话，即该类库中还含有一些下层的类库，这就会导致其依赖关系非常复杂，在引用该上层类库的时候，也需要引用相应的下层类库。但是如果你引用的类库版本不匹配或者有着各种各样的问题，这就会导致非常难排除这些错误，从而使得程序无法运行。这种时候只有<code>DLL</code>，没有源代码，几乎可以说是“蒙着眼睛引用类库”，这对于很多大型项目而言是非常危险的。</p><p>为了解决上述问题，有一种叫做<code>NuGet</code>的技术，相当于把相应的类库封装成了一个包，可以直接一键进行导入，大大提高了效率和安全性。可以直接右键引用，然后选择管理<code>NuGet</code>程序包，就可以进行在线安装了。</p><h3 id="白盒引用"><a href="#白盒引用" class="headerlink" title="白盒引用"></a>白盒引用</h3><p>对于白盒引用，我们可以创建属于自己的库，即建立自己的类库项目。</p><p>首先，创建一个<code>Windows</code>窗体应用，注意后缀有<code>(.NET Framework)</code>，找到合适的位置保存，点击创建即可。</p><p><img src="/img/posts/C_sharp/%E5%88%9B%E5%BB%BA%E7%B1%BB%E5%BA%93.jpg" alt="创建类库"></p><p>我们可以写一个进行运算的类库：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Tools</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Calculator</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">double</span> <span class="title">Add</span>(<span class="params"><span class="built_in">double</span> a,<span class="built_in">double</span> b</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> a + b;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">double</span> <span class="title">Sub</span>(<span class="params"><span class="built_in">double</span> a,<span class="built_in">double</span> b</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> a - b;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">double</span> <span class="title">Mul</span>(<span class="params"><span class="built_in">double</span> a,<span class="built_in">double</span> b</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> a * b;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">double</span> <span class="title">Div</span>(<span class="params"><span class="built_in">double</span> a,<span class="built_in">double</span> b</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (b == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">double</span>.PositiveInfinity;  <span class="comment">//返回正无穷大</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> a / b;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在我们的项目中引用这个类库，然后就可以调用相应的成员函数了。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> Tools;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">double</span> result = Calculator.Div(<span class="number">5</span>, <span class="number">0</span>);</span><br><span class="line">            Console.WriteLine(result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">∞</span><br></pre></td></tr></table></figure><h2 id="依赖关系"><a href="#依赖关系" class="headerlink" title="依赖关系"></a>依赖关系</h2><p>通过前文我们可以发现，类或对象之间的耦合关系都属于依赖关系，优秀的程序追求“高内聚，低耦合”，简单来说就是把同一类的东西都严格放在一起，程序与程序之间的依赖关系比较低。在我们设计的时候，会涉及到许许多多的类，可以使用<code>UML</code>（通用建模语言）类图，可以使用图的方式将程序中的一会关系表达得非常清楚。</p><p><img src="/img/posts/C_sharp/%E8%BE%93%E5%87%BA%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%B1%BB%E5%9B%BE.jpg" alt="输出程序的类图"></p><p>上图中就是我们只有一个输出的程序所对应的类图。</p><h1 id="类、对象、类成员"><a href="#类、对象、类成员" class="headerlink" title="类、对象、类成员"></a>类、对象、类成员</h1><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>类<code>(class)</code>是现实世界事物的模型，是对现实世界事物进行抽象所得到的结果。其中事物包括“物质”（实体）与“运动”（逻辑），建模是一个去伪存真、由表及里的过程。</p><p>例如在现实世界中存在着战斗机和飞行员，这两个都是物质，可以将它们的属性抽象出来。飞行员驾驶着战斗机，也就代表着飞行员依赖着战斗机。</p><p>去伪存真指的是，即使现实中该事物有着某种属性或者功能，但是我们在程序中用不上，那我们就可以将其去除，保留下来的就是我们程序真正用的到的东西。</p><p>由表及里指的是，对于一个类，我们只对外界开放相应的接口，内部的运作过程是封装起来的。</p><h2 id="类与对象的关系"><a href="#类与对象的关系" class="headerlink" title="类与对象的关系"></a>类与对象的关系</h2><h3 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h3><p>对象也叫实例，是类经过“实例化”后得到的内存中的实体。</p><p>对象和实例是一回事，“飞机”和“一架飞机”的区别在于前者是一种概念，后者是一个真实存在的东西，能够具体执行概念中的各种行为，拥有概念中的相应属性。同时，有些类是不能进行实例化的，例如“数学”，这只是一种概念，我们不能说“一个数学”，无法实例化出来一个具体的对象。</p><p>从本质上来讲，“对象”和“实例”是一回事，但是一般我们在讨论现实世界中的类的时候会说“对象”，在讨论程序世界中的类时会说“实例”。两种说法语境不同用不同的表达方式，但是指代的是同一个概念。不需要特别关注这个概念，二者并不太大区别，常常混用。</p><h3 id="实例化"><a href="#实例化" class="headerlink" title="实例化"></a>实例化</h3><p>在<code>C#</code>语言中使用<code>new</code>操作符来创建类的实例。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            (<span class="keyword">new</span> Form()).ShowDialog();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="/img/posts/C_sharp/%E7%AA%97%E5%8F%A3%E6%98%BE%E7%A4%BA.jpg" alt="窗口显示"></p><p>通过使用<code>new</code>操作符来实例化了一个<code>Form</code>对象，也就是表单对象，后面的括号可以对其进行初始化，后面会具体讲到。为了验证该对象是否成功被实例化，调用<code>ShowDialog()</code>方法来进行验证。</p><h3 id="引用变量"><a href="#引用变量" class="headerlink" title="引用变量"></a>引用变量</h3><p>如果使用上述的方式进行实例化，每次只能对对象执行一次操作。如果我们想先要改变表单的标题再进行输出的话，使用上面的方法是远远不够的，因此就引入了引用的概念。</p><p>引用可以声明一个引用变量，让实例化的对象赋值给该变量，然后对该变量进行操作就可以了。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Form myForm;</span><br><span class="line">            myForm = <span class="keyword">new</span> Form();</span><br><span class="line">            myForm.Text = <span class="string">&quot;好耶！&quot;</span>;</span><br><span class="line">            myForm.ShowDialog();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="/img/posts/C_sharp/%E5%BC%95%E7%94%A8%E5%8F%98%E9%87%8F%E5%AE%9E%E4%BE%8B%E5%8C%96%E5%AF%B9%E8%B1%A1.jpg" alt="引用变量实例化对象"></p><p>通过这种方法，直接对引用变量进行操作，实现了给表单改名之后输出结果。</p><p>这里有一个比较形象的比喻：引用变量相当于孩子，实例相当于气球。如果只是单纯实例化的话，气球就飞走了，也可以把气球给孩子，让他牵着气球。总的来说，气球不一定有孩子牵着，多个孩子可以使用各自的绳子牵着同一个气球，也都可以通过一根绳子牵着气球。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Form myForm1, myForm2;</span><br><span class="line">            myForm1 = <span class="keyword">new</span> Form();</span><br><span class="line">            myForm2 = myForm1;</span><br><span class="line">            myForm1.Text = <span class="string">&quot;好耶！&quot;</span>;</span><br><span class="line">            myForm2.Text = <span class="string">&quot;坏耶！&quot;</span>;</span><br><span class="line">            myForm1.ShowDialog();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="/img/posts/C_sharp/%E5%A4%9A%E5%BC%95%E7%94%A8%E5%8F%98%E9%87%8F%E6%8C%87%E5%90%91%E5%90%8C%E4%B8%80%E5%AE%9E%E4%BE%8B.jpg" alt="多引用变量指向同一实例"></p><p>在这个例子中，一共有两个引用变量。第一个引用变量进行了实例化，并赋值给第二个引用变量，通过操作第二个引用变量也可以更改第一个引用变量的属性。这说明了，在<code>C#</code>中，可以实现多个引用变量指向同一对象，也就是前文所说的“多个孩子可以使用各自的绳子牵着同一个气球”。</p><h2 id="类的三大成员"><a href="#类的三大成员" class="headerlink" title="类的三大成员"></a>类的三大成员</h2><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>属性（<code>Property</code>）用于存储数据，组合起来表示类或对象当前状态，可以根据一个对象的属性判断出它处于什么状态。</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>方法（<code>Method</code>）由<code>C</code>语言中的函数（<code>function</code>）进化而来，表示类或对象“能做什么”。</p><p>在实际工作中，基本上$90%$的时间是在与方法打交道，因为它是“真正做事”、“构成逻辑”的成员。</p><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><p>事件（<code>Event</code>）是类或对象通知其它类或对象的机制，为<code>C#</code>所特有的（<code>Java</code>通过其它办法来实现这个机制）。</p><h3 id="特殊类或对象"><a href="#特殊类或对象" class="headerlink" title="特殊类或对象"></a>特殊类或对象</h3><p>在<code>C#</code>中存在着一些特殊的类或对象，它们在成员方面上的侧重点不同：</p><ul><li>模型类或对象重在属性，如<code>Entity Framework</code>。</li><li>工具类或对象重在方法，如<code>Math</code>，<code>Console</code>。</li><li>通知类或对象重在事件，如各种<code>Timer</code>。</li></ul><h2 id="静态成员与实例成员"><a href="#静态成员与实例成员" class="headerlink" title="静态成员与实例成员"></a>静态成员与实例成员</h2><p>静态（<code>Static</code>）成员在语义上表示它是“类的成员”，例如对于人类而言，有总数、平均身高、平均体重等属性，这些均为静态成员。</p><p>实例（非静态）成员在语义表示它是“对象的成员”，例如对于每个人而言，有身高、体重、年龄等属性，这些均为实例成员。</p><p>绑定（<code>Binding</code>）指的是编译器把一个成员与类或对象关联起来，分为早绑定和晚绑定，与<code>C++</code>中的多态概念相类似。</p><h1 id="基本元素"><a href="#基本元素" class="headerlink" title="基本元素"></a>基本元素</h1><p>基本元素有很多种，其中包括关键字（<code>Keyword</code>）、操作符（<code>Operator</code>）、标识符（<code>Identifier</code>）、标点符号、文本（字面值）、注释与空白，除了最后一种注释与空白以外，前面所有的元素也被称之为标记（<code>Token</code>）。</p><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><p>标识符的基本命名规则和其他的语言基本一致，可以用字母、下划线、数字的组合进行命名，同时数字不能作为标识符的开始。</p><p>对于<code>C#</code>而言，允许使用<code>@</code>字符作为前缀以使关键字能够用作标识符。<code>C#</code>也允许使用中文进行命名，只要符合<code>Unicode</code>标准的字符均可以使用，但是实际开发中尽量不要使用这种命名方式。</p><p>为了增强程序的可读性，我们一般会对变量名进行大小写规范的约束，下面介绍两种<code>C#</code>常用的命名规则。</p><h3 id="驼峰法"><a href="#驼峰法" class="headerlink" title="驼峰法"></a>驼峰法</h3><p>驼峰法指的是在命名时，如果需要使用多个单词进行组合，第一个单词的首字母小写，其余单词的首字母大写。这种命名方法的变量很像是一只低着头的骆驼，大写字母相当于是驼峰，因此被称为驼峰法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">myVariable</span><br><span class="line">myName</span><br><span class="line">catAge</span><br></pre></td></tr></table></figure><p>上述名称均属于驼峰法的命名规则，该方法一般用于对变量名的命名。</p><h3 id="Pascal法"><a href="#Pascal法" class="headerlink" title="Pascal法"></a><code>Pascal</code>法</h3><p><code>Pascal</code>法指的是每一个单词的首字母均大写，与<code>Pascal</code>中的命名规则很相似，因此被称为<code>Pascal</code>法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MyVariable</span><br><span class="line">MyName</span><br><span class="line">CatAge</span><br></pre></td></tr></table></figure><p>上述名称均属于<code>Pascal</code>法的命名规则，该方法一般用于对方法名、类名、命名空间等名字的命名。</p><h2 id="文本（字面值）"><a href="#文本（字面值）" class="headerlink" title="文本（字面值）"></a>文本（字面值）</h2><h3 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h3><p>整数一共有两种类型，分别是<code>int</code>和<code>long</code>，二者都可以用于表示整数。它们之间的区别在于<code>int</code>类型使用$32$位<code>bit</code>位来进行表示，而<code>long</code>类型使用$64$位<code>bit</code>位来进行表示。需要注意的是，对于<code>long</code>类型，需要在后面加一个<code>l</code>或者<code>L</code>。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> x = <span class="number">2</span>;</span><br><span class="line">            <span class="built_in">long</span> y = <span class="number">3l</span>;</span><br><span class="line">            <span class="built_in">long</span> z = <span class="number">4L</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="实数"><a href="#实数" class="headerlink" title="实数"></a>实数</h3><p>实数指的是小数，如果想要表示小数需要使用<code>float</code>和<code>double</code>。二者的区别在于前者使用<code>32</code>位<code>bit</code>位来进行表示，后者使用$64$位<code>bit</code>位来进行表示，<code>float</code>是单精度，<code>double</code>是双精度。在<code>C#</code>中，小数默认为双精度，所以在声明<code>float</code>类型时，需要在后面添加<code>f</code>或者<code>F</code>。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">float</span> x = <span class="number">3.0f</span>;</span><br><span class="line">            <span class="built_in">float</span> y = <span class="number">4.0F</span>;</span><br><span class="line">            <span class="built_in">double</span> z = <span class="number">5.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="字符和字符串"><a href="#字符和字符串" class="headerlink" title="字符和字符串"></a>字符和字符串</h3><p>字符只能由单个字符组成，使用<code>char</code>来表示，使用英文的单引号；字符串可以由任意个字符组成（也可以没有字符，我们将其称之为空串），使用<code>string</code>来表示，使用英文的双引号。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">char</span> c = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="built_in">string</span> str = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="布尔"><a href="#布尔" class="headerlink" title="布尔"></a>布尔</h3><p>布尔使用<code>bool</code>来声明变量，只有两种值，分别为<code>true</code>和<code>false</code>。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">bool</span> a = <span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">bool</span> b = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="空（null）"><a href="#空（null）" class="headerlink" title="空（null）"></a>空（<code>null</code>）</h3><p>空值表示为<code>null</code>，表示空的意思，可以赋值给别的变量。</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>注释有两种方式，一种是单行注释，一种是多行注释。前者使用<code>//</code>，后者使用<code>/**/</code>，被注释的内容不会被编译和执行。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//这是一个单行注释</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">/*这是</span></span><br><span class="line"><span class="comment">            一个</span></span><br><span class="line"><span class="comment">            多行</span></span><br><span class="line"><span class="comment">            注释*/</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="类型、变量和方法"><a href="#类型、变量和方法" class="headerlink" title="类型、变量和方法"></a>类型、变量和方法</h1><h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><p>类型（<code>Type</code>）又称为数据类型（<code>Data Type</code>），在<code>C#</code>中，数据是有自己的类型的。</p><p>我们可以使用<code>var</code>来声明一个变量，令其存储数据，使用<code>GetType()</code>获取当前数据是什么类型的，调用<code>Name</code>属性可以显示相应的值。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> x = <span class="number">3</span>;</span><br><span class="line">            Console.WriteLine(x.GetType().Name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Int32</span><br></pre></td></tr></table></figure><p>这说明将$3$赋值给<code>x</code>之后，其数据类型变为了$32$位的整数了。</p><p>一般来讲，不会使用<code>var</code>来定义，会使用明确的定义方式来进行数据的定义，例如直接<code>int x = 3;</code>。</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量是存放数据的地方。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> x = <span class="number">3</span>;</span><br><span class="line">            Console.WriteLine(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><p>这个例子中，<code>int</code>是变量类型，需要与后面的数据相匹配，<code>x</code>是变量，然后将$3$赋值给<code>x</code>。</p><h2 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h2><p>方法也被称为函数，是处理数据的逻辑，又称为“算法”。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Calculator c = <span class="keyword">new</span> Calculator();</span><br><span class="line">            <span class="built_in">int</span> result = c.Add(<span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line">            Console.WriteLine(result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Calculator</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">Add</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> result = a + b;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">8</span><br></pre></td></tr></table></figure><p>上述代码中定义了一个<code>Calculator</code>类，该类中有一个<code>Add</code>方法，与<code>C/C++</code>中的函数是一个原理。该方法的返回值是<code>int</code>类型，因为最后要返回一个整数类型的值，该方法还有两个参数，调用时需要进行传递。需要注意一点，为了能够在类外调用该方法，需要将其声明为<code>public</code>，否则是无法访问的，访问时需要先实例化，才可以进行调用。</p><h1 id="类型-1"><a href="#类型-1" class="headerlink" title="类型"></a>类型</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>类型又称数据类型（<code>Data Type</code>），指的是数据在内存中存储时的“星号”，小内存容纳大尺寸数据会丢失精确度、发生错误，大内存容纳小尺寸数据会导致浪费，编程语言的数据类型与数据的数据类型不完全相同。</p><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>数据类型可以说明存储此类型变量所需的内存空间大小，还有此类型的值可表示的最大、最小值范围。</p><p>对于不同的整数数据类型，其相关信息如下所示：</p><table><thead><tr><th align="center">类型</th><th align="center">范围</th><th align="center">所占位数</th></tr></thead><tbody><tr><td align="center"><code>sbyte</code></td><td align="center">$-128\sim127$</td><td align="center">$8$</td></tr><tr><td align="center"><code>byte</code></td><td align="center">$0\sim255$</td><td align="center">$8$</td></tr><tr><td align="center"><code>char</code></td><td align="center">$U+0000\sim U+ffff$</td><td align="center">$16$</td></tr><tr><td align="center"><code>short</code></td><td align="center">$-32768\sim32767$</td><td align="center">$16$</td></tr><tr><td align="center"><code>ushort</code></td><td align="center">$0\sim65535$</td><td align="center">$16$</td></tr><tr><td align="center"><code>int</code></td><td align="center">$-2147483648\sim2147483647$</td><td align="center">$32$</td></tr><tr><td align="center"><code>uint</code></td><td align="center">$0\sim4294967295$</td><td align="center">$32$</td></tr><tr><td align="center"><code>long</code></td><td align="center">$-9223372036854775808\sim9223372036854775807$</td><td align="center">$64$</td></tr><tr><td align="center"><code>ulong</code></td><td align="center">$0\sim18446744073709551615$</td><td align="center">$64$</td></tr></tbody></table><p>还有相应的浮点数数据类型，其相关信息如下所示：</p><table><thead><tr><th align="center">类型</th><th align="center">范围</th><th align="center">精度</th><th align="center">所占位数</th></tr></thead><tbody><tr><td align="center"><code>float</code></td><td align="center">$\pm1.5e-45\sim\pm3.4e38$</td><td align="center">$7$位小数</td><td align="center">$32$</td></tr><tr><td align="center"><code>double</code></td><td align="center">$\pm5.0e-324\sim\pm1.7e308$</td><td align="center">$15-16$位小数</td><td align="center">$64$</td></tr></tbody></table><h1 id="变量-1"><a href="#变量-1" class="headerlink" title="变量"></a>变量</h1><h2 id="基本概念-2"><a href="#基本概念-2" class="headerlink" title="基本概念"></a>基本概念</h2><p>表面上看，变量的用途是存储数据。实际上，变量表示了存储位置，并且每个变量都有一个类型，以决定什么样的值能够存入变量。</p><p>变量一共有七种，分别是：静态变量，实例变量（成员变量，字段），数组元素，值参数，引用参数，输出形参，局部变量。</p><p>狭义的变量指局部变量，因为其它种类的变量都有自己的预定名称。简单来讲，局部变量就是方法体（函数体）里声明的变量。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Student student = <span class="keyword">new</span> Student();</span><br><span class="line">            <span class="built_in">int</span> x = <span class="number">1</span>, y = <span class="number">2</span>, z;</span><br><span class="line">            Console.WriteLine(student.Func(x, <span class="keyword">ref</span> y, <span class="keyword">out</span> z));</span><br><span class="line">            <span class="built_in">int</span>[] array = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">3</span>];</span><br><span class="line">            array[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">            Console.WriteLine(array[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> account;  <span class="comment">//学生数量</span></span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">string</span> name;  <span class="comment">//学生姓名</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">Func</span>(<span class="params"><span class="built_in">int</span> a, <span class="keyword">ref</span> <span class="built_in">int</span> b, <span class="keyword">out</span> <span class="built_in">int</span> c</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                c = <span class="number">314</span>;</span><br><span class="line">                b++;</span><br><span class="line">                <span class="keyword">return</span> a + b;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>上述代码中，<code>Student</code>类中的<code>account</code>是静态变量，<code>name</code>是实例变量。$16$行中定义了一个<code>array</code>数组，下一行中对其进数组元素进行赋值，要注意数组是从$0$开始计数的。$25$行的函数中，分别定义了值参数，引用参数和输出形参。对于这段代码而言，<code>x</code>，<code>y</code>，<code>z</code>等均为局部变量。</p><p>在使用变量之前，需要对其进行声明，使用有效的修饰符组合类型，并在后面写一下变量名即可。</p><p>总的来说，变量是以变量名所对应的内存地址为起点，以其数据类型所要求的存储空间为长度的一块内存区域。</p><h2 id="变量的默认值"><a href="#变量的默认值" class="headerlink" title="变量的默认值"></a>变量的默认值</h2><p>开辟在堆区的变量默认值全部为$0$，对于局部变量而言，是不会有默认值的，因此需要显示赋值，否则无法通过编译。</p><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>常量的值不能发生改变，可以通过下述方式进行定义。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">const</span> <span class="built_in">int</span> x = <span class="number">100</span>;</span><br><span class="line">            Console.WriteLine(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">100</span><br></pre></td></tr></table></figure><h2 id="装箱和拆箱"><a href="#装箱和拆箱" class="headerlink" title="装箱和拆箱"></a>装箱和拆箱</h2><p>装箱和拆箱使用的频率很低，因为它会造成性能损失。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> x = <span class="number">100</span>;</span><br><span class="line">            <span class="comment">//装箱</span></span><br><span class="line">            <span class="built_in">object</span> y = x;</span><br><span class="line">            Console.WriteLine(y);</span><br><span class="line">            <span class="comment">//拆箱</span></span><br><span class="line">            <span class="built_in">int</span> z = (<span class="built_in">int</span>)y;</span><br><span class="line">            Console.WriteLine(z);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">100</span><br><span class="line">100</span><br></pre></td></tr></table></figure><p>装箱指的是将一个值变量封装成一个实例，开辟到堆区，<code>object</code>会存储堆区该变量的地址。拆箱时需要对其进行类型转化，以此来获取相应的值。很显然，装箱和拆箱会造成性能损失，因此现在使用的次数越来越少了。</p><h1 id="方法-2"><a href="#方法-2" class="headerlink" title="方法"></a>方法</h1><h2 id="基本概念-3"><a href="#基本概念-3" class="headerlink" title="基本概念"></a>基本概念</h2><p>方法（<code>method</code>）的前身是<code>C/C++</code>语言的函数（<code>function</code>）。在<code>C#</code>语言中，函数不可能独立于类（或结构体）之外，只有作为类（结构体）的成员时才被称为方法。在<code>C++</code>中没有该限制，函数可以独立存在，称之为“全局函数”。</p><p>下面编写一个程序，包含一个计算器类，该类中有三个方法，分别计算圆的面积，圆柱的体积，圆锥的体积。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Calculator calculator = <span class="keyword">new</span> Calculator();</span><br><span class="line">            Console.WriteLine(calculator.GetCircleArea(<span class="number">10</span>));</span><br><span class="line">            Console.WriteLine(calculator.GetCylinderVolume(<span class="number">10</span>, <span class="number">2</span>));</span><br><span class="line">            Console.WriteLine(calculator.GetConeVolume(<span class="number">10</span>, <span class="number">2</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">class</span> <span class="title">Calculator</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">GetCircleArea</span>(<span class="params"><span class="built_in">double</span> radius</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> Math.PI * radius * radius;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">GetCylinderVolume</span>(<span class="params"><span class="built_in">double</span> radius, <span class="built_in">double</span> h</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> GetCircleArea(radius) * h;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">GetConeVolume</span>(<span class="params"><span class="built_in">double</span> radius, <span class="built_in">double</span> h</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> GetCylinderVolume(radius, h) / <span class="number">3</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">314.159265358979</span><br><span class="line">628.318530717959</span><br><span class="line">209.43951023932</span><br></pre></td></tr></table></figure><p>上述代码中，对算法进行了分解，采用自顶向下，逐步求精的方法，实现了目标需求。</p><p>上面的三个方法均为实例方法，需要使用实例去对其调用，与对象绑定。如果在前面添加<code>static</code>关键字，将会变为静态方法，静态方法与类绑定，需要使用类名去调用 。</p><p>调用方法需要考虑两个参数，一个是”实际参数”（<code>Argument</code>），简称”实参”；另一个是“形式参数”（<code>Parameter</code>），简称“形参”。</p><p>前者可以理解为调用方法时的真实条件，后者只是一个形式上的条件，调用方法时<code>argument</code>列表要与parameter`列表相匹配，程序会将实参的值传递给形参。</p><h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h2><p>构造器（<code>constructor</code>）是类型的成员之一，狭义的构造器指的是“实例构造器”（<code>instance constructor</code>）。简单来说，构造器和<code>C++</code>中的构造函数是一样的，也存在有参构造，无参构造和带默认参数的构造。具体案例如下所示：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Student student1 = <span class="keyword">new</span> Student();</span><br><span class="line">            Console.WriteLine(student1.ID);</span><br><span class="line">            Console.WriteLine(student1.Name);</span><br><span class="line">            Student student2 = <span class="keyword">new</span> Student(<span class="number">5</span>);</span><br><span class="line">            Console.WriteLine(student2.ID);</span><br><span class="line">            Console.WriteLine(student2.Name);</span><br><span class="line">            Student student3 = <span class="keyword">new</span> Student(<span class="number">100</span>,<span class="string">&quot;haoye&quot;</span>);</span><br><span class="line">            Console.WriteLine(student3.ID);</span><br><span class="line">            Console.WriteLine(student3.Name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//无参构造器</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">Student</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>.ID = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">this</span>.Name = <span class="string">&quot;No name&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//有参构造器</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">Student</span>(<span class="params"><span class="built_in">int</span> ID, <span class="built_in">string</span> Name=<span class="string">&quot;Unnamed&quot;</span></span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>.ID = ID;</span><br><span class="line">                <span class="keyword">this</span>.Name = Name;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">int</span> ID;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">string</span> Name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">No name</span><br><span class="line">5</span><br><span class="line">Unnamed</span><br><span class="line">100</span><br><span class="line">haoye</span><br></pre></td></tr></table></figure><p>上述代码中的<code>this</code>指代的是当前对象，可以区分相应的参数和该实例中的成员。</p><h2 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h2><p>方法的重载和<code>C/C++</code>中的函数重载基本一样，同名函数可以根据参数的类型和数量进行区分，从而实现调用不同的函数。</p><p>方法签名（<code>method signature</code>）由方法的名称。类型形参的个数和它的每一个形参（按从左到右的顺序）的类型和种类（值、引用或输出）组成。<strong>方法前面不包含返回类型。</strong></p><p>实例构造函数前面由它的每一个形参（按从左到右的顺序）的类型和种类（值、引用或输出）组成。</p><p>重载决策（到底调用哪一个重载）：用于在给定了参数列表和一组候选函数成员的情况下，选择一个最佳函数成员来实施调用。</p><h1 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h1><h2 id="操作符概览"><a href="#操作符概览" class="headerlink" title="操作符概览"></a>操作符概览</h2><p>操作符（<code>Operator</code>）也译为“运算符”。</p><p>操作符是用来操作数据的，被操作符操作的数据称为操作数（<code>Operand</code>）。</p><table><thead><tr><th align="center">类别</th><th align="center">运算符</th></tr></thead><tbody><tr><td align="center">基本</td><td align="center">x.y f(x) a[x] x++ x– new typeof default checked unchecked delegate sizeof -&gt;</td></tr><tr><td align="center">一元</td><td align="center">+ - ! ~ ++x (T)x await &amp;x *x</td></tr><tr><td align="center">乘法</td><td align="center">* / %</td></tr><tr><td align="center">加减</td><td align="center">+ -</td></tr><tr><td align="center">移位</td><td align="center">&lt;&lt; &gt;&gt;</td></tr><tr><td align="center">关系和类型检测</td><td align="center">&lt; &gt; &lt;= &gt;= is as</td></tr><tr><td align="center">相等</td><td align="center">== !=</td></tr><tr><td align="center">逻辑“与”</td><td align="center">&amp;</td></tr><tr><td align="center">逻辑<code>XOR</code></td><td align="center">^</td></tr><tr><td align="center">逻辑<code>OR</code></td><td align="center">|</td></tr><tr><td align="center">条件<code>AND</code></td><td align="center">&amp;&amp;</td></tr><tr><td align="center">条件<code>OR</code></td><td align="center">||</td></tr><tr><td align="center"><code>null</code>合并</td><td align="center">??</td></tr><tr><td align="center">条件</td><td align="center">?:</td></tr><tr><td align="center">赋值和<code>lambda</code>表达式</td><td align="center">= *= /= %= += -= &lt;&lt;= &gt;&gt;= &amp;= ^= |= =&gt;</td></tr></tbody></table><p>上述操作符的运算优先级从下向上依次递增。</p><h2 id="优先级与运算顺序"><a href="#优先级与运算顺序" class="headerlink" title="优先级与运算顺序"></a>优先级与运算顺序</h2><p>可以使用圆括号提高被括起来表达式的优先级，且圆括号可以嵌套。不像数学里有方括号和花括号，在<code>C#</code>语言里<code>[]</code>和<code>&#123;&#125;</code>有专门的用途。</p><p>除了带有赋值功能的操作符，同优先级操作符都是由左向右进行运算，带有赋值功能的操作符的运算顺序是由右向左。与数学运算不同，计算机语言的同优先级运算没有“结合律”。</p><h2 id="基本操作符"><a href="#基本操作符" class="headerlink" title="基本操作符"></a>基本操作符</h2><h3 id="点操作符"><a href="#点操作符" class="headerlink" title="点操作符"></a>点操作符</h3><p>该操作符可以调用相应的成员，可以看一下下面这段代码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello Wordld!</span><br></pre></td></tr></table></figure><p>这段代码中，就使用了点操作符调用了<code>Console</code>类下的<code>WriteLine</code>成员函数。</p><h3 id="方法调用操作符"><a href="#方法调用操作符" class="headerlink" title="方法调用操作符"></a>方法调用操作符</h3><p>在进行方法调用时，需要使用相应的操作符。</p><p>还是用上面这个代码举例，<code>WriteLine</code>就是调用输出一行内容的方法，括号中的内容是调用方法时传输的参数。</p><h3 id="数组操作符"><a href="#数组操作符" class="headerlink" title="数组操作符"></a>数组操作符</h3><p>数组是<code>C#</code>中很重要的一个部分，创建数组的代码如下所示：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span>[] array1 = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">10</span>];  <span class="comment">//创建一个10个元素的数组</span></span><br><span class="line">            <span class="built_in">int</span>[] array2 = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">3</span>] &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;;  <span class="comment">//创建一个3个元素的数组</span></span><br><span class="line">            <span class="built_in">int</span>[] array3 = <span class="keyword">new</span> <span class="built_in">int</span>[] &#123; <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span> &#125;;  <span class="comment">//创建一个3个元素的数组</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面这三种方法均可以创建数组，$13$行的方式可以直接创建一个大小为$10$的整型数组，内部的值默认为$0$。$14$行创建了一个$3$个元素的数组，其初始值和后面花括号中的值一样。下一行没有显示说明一共有多少个元素，那么会自动开辟一块与花括号中元素数量一样的空间，初始值也是花括号中的值。</p><p>要注意的是，$14$行的方式方括号的值必须和花括号中的元素数量保持一致，否则会报错，其效果和下一行中的方法差不多，因此该方法很少被使用。数组下标是从$0$开始索引的，最大下标是$length-1$。</p><h3 id="自加加、自减减操作符"><a href="#自加加、自减减操作符" class="headerlink" title="自加加、自减减操作符"></a>自加加、自减减操作符</h3><p>这两个操作符等价于<code>x += 1;</code>和<code>x -= 1;</code>，可以实现变量的加一和减一。</p><p>当操作符在变量后面时，会先执行语句，后进行相应的操作；如果操作符在变量前面时，会先进行自加加和自减减操作，再执行整个语句。</p><h3 id="new操作符"><a href="#new操作符" class="headerlink" title="new操作符"></a>new操作符</h3><p><code>new</code>操作符可以帮助我们在内存中创建一个类型的实例，并立刻调用该实例的实例构造器。</p><p>这里先介绍一个新的关键字<code>var</code>，<code>C#</code>是一个强数据类型的语言，一般来讲，我们可以直接显示声明变量的类型。对于<code>var</code>关键字而言，其作用与<code>C/C++</code>中的<code>auto</code>相类似，可以自动识别给它赋值的数据的类型，但是该变量的类型不能再发生改变了。同时，使用这种隐式类型化的方法必须在定义时就对其进行初始化。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Form myForm = <span class="keyword">new</span> Form();</span><br><span class="line">            myForm.Text = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">            myForm.ShowDialog();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="/img/posts/C_sharp/%E7%AA%97%E4%BD%93%E6%95%88%E6%9E%9C.jpg" alt="窗体效果"></p><p>使用这种方式可以直接实例化一个对象出来，还可以直接对其成员属性进行赋值操作。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Form myForm = <span class="keyword">new</span> Form() &#123; Text = <span class="string">&quot;Hello World!&quot;</span> &#125;;</span><br><span class="line">            myForm.ShowDialog();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="/img/posts/C_sharp/%E7%AA%97%E4%BD%93%E6%95%88%E6%9E%9C.jpg" alt="窗体效果"></p><p>可以直接在实例化后使用一个花括号初始化其成员属性。</p><p><code>new</code>操作符还可以不使用任何数据类型，直接使用花括号初始化，这种被称之为匿名类型，可以使用<code>var</code>类型的变量进行接收。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> test = <span class="keyword">new</span> &#123; Name = <span class="string">&quot;好耶！&quot;</span>, Age = <span class="number">18</span> &#125;;</span><br><span class="line">            Console.WriteLine(test.Name);</span><br><span class="line">            Console.WriteLine(test.Age);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">好耶！</span><br><span class="line">18</span><br></pre></td></tr></table></figure><p>上述代码中，使用<code>var</code>来接收了<code>new</code>操作符实例化的对象，并且可以正常输出其属性值。</p><h2 id="一元操作符"><a href="#一元操作符" class="headerlink" title="一元操作符"></a>一元操作符</h2><h3 id="指针操作符"><a href="#指针操作符" class="headerlink" title="指针操作符"></a>指针操作符</h3><p>在<code>C#</code>中是存在指针的，使用方法和<code>C/C++</code>类似，但是需要允许使用不安全的代码。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">unsafe</span></span><br><span class="line">            &#123;</span><br><span class="line">                Student student;</span><br><span class="line">                Student* pStudent = &amp;student;</span><br><span class="line">                pStudent-&gt;Id = <span class="number">10</span>;</span><br><span class="line">                pStudent-&gt;Name = <span class="string">&quot;Test&quot;</span>;</span><br><span class="line">                Console.WriteLine((*pStudent).Name);</span><br><span class="line">                Console.WriteLine((*pStudent).Id);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">struct</span> Student</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">int</span> Id;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">string</span> Name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Test</span><br><span class="line">10</span><br></pre></td></tr></table></figure><p>上述代码中创建了一个结构体，由于指针属于不安全的代码，因此需要用<code>unsafe</code>进行声明。定义一个指针用于指向<code>Student</code>类型的变量，会用到相应的指针操作符。</p><p>在第$19$行和第$20$行代码处，由于<code>*</code>操作符优先级低于<code>.</code>操作符，因此需要加上括号，来提高其优先级。</p><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>先看一个简单的类型转换代码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> str1 = Console.ReadLine();</span><br><span class="line">            <span class="built_in">string</span> str2 = Console.ReadLine();</span><br><span class="line">            <span class="built_in">int</span> x = Convert.ToInt32(str1);</span><br><span class="line">            <span class="built_in">int</span> y = Convert.ToInt32(str2);</span><br><span class="line">            Console.WriteLine(x + y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">3</span><br><span class="line">5</span><br></pre></td></tr></table></figure><p>这段代码实现了输入两个数字然后进行加法运算，如果不进行类型转换的话，将会变为字符串拼接。为了能够实现我们的需求，需要将输入的数据转换为合适的数据类型，再进行运算。</p><p>转换一共有三种，分别是隐式（<code>implicit</code>）类型转换，显式（<code>explicit</code>）类型转换和自定义类型转换操作符。</p><h4 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a>隐式类型转换</h4><p>这种转换方式一般会在不丢失精度的转换、子类向父类的转换、装箱这些情况时触发。</p><p>在<code>int</code>类型转换为<code>long</code>类型的时候，由于<code>int</code>类型是$4$个字节，<code>long</code>类型是$8$个字节，二者都是用于存储整数的，因此在该转换过程，会触发一次隐式转换。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> x = <span class="built_in">int</span>.MaxValue;</span><br><span class="line">            <span class="built_in">long</span> y = x;</span><br><span class="line">            Console.WriteLine(y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2147483647</span><br></pre></td></tr></table></figure><p><img src="/img/posts/C_sharp/%E9%9A%90%E5%BC%8F%E6%95%B0%E5%80%BC%E8%BD%AC%E6%8D%A2.jpg" alt="隐式数值转换"></p><p>上述的这些转换全都是不损失精度的隐式数值转换。</p><p>除此之外，当子类转换为父类的时候也是隐式类型转换：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Teacher t = <span class="keyword">new</span> Teacher();</span><br><span class="line">            t.Eat();</span><br><span class="line">            t.Think();</span><br><span class="line">            t.Teach();</span><br><span class="line">            Human h = t;</span><br><span class="line">            h.Eat();</span><br><span class="line">            h.Think();</span><br><span class="line">            Animal a = h;</span><br><span class="line">            a.Eat();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">class</span> <span class="title">Animal</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Eat</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Eating...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">class</span> <span class="title">Human</span> : <span class="title">Animal</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Think</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Thinking...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">class</span> <span class="title">Teacher</span> : <span class="title">Human</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Teach</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Teaching...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Eating...</span><br><span class="line">Thinking...</span><br><span class="line">Teaching...</span><br><span class="line">Eating...</span><br><span class="line">Thinking...</span><br><span class="line">Eating...</span><br></pre></td></tr></table></figure><h4 id="显式类型转换"><a href="#显式类型转换" class="headerlink" title="显式类型转换"></a>显式类型转换</h4><p>显式类型转换是有可能丢失精度（甚至发生错误）的转换，在拆箱，使用<code>Convert</code>类，<code>ToString</code>方法与各数据类型的<code>Parse/TryParse</code>方法时均为显式类型转换。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.CodeDom;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="built_in">ushort</span>.MaxValue);</span><br><span class="line">            <span class="built_in">uint</span> x = <span class="number">65536</span>;</span><br><span class="line">            <span class="built_in">ushort</span> y = (<span class="built_in">ushort</span>)x;</span><br><span class="line">            Console.WriteLine(y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">65535</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p>这段代码中，我们可以发现<code>ushort</code>能够存储的最大值是$65535$，如果我们把值为$65536$的变量赋值给一个<code>ushort</code>类型的变量的话，会造成报错，因此我们可以采用显式类型转换的方法，但是这会造成数据存储不下，不能正确的显示。</p><p><img src="/img/posts/C_sharp/%E6%98%BE%E5%BC%8F%E6%95%B0%E5%80%BC%E8%BD%AC%E6%8D%A2.jpg" alt="显式数值转换"></p><p>上面这个图片中，包含了部分显式类型转换，而有些数据类型不能单纯通过该方式转换，这种情况可以借助<code>Convert</code>类和<code>ToString</code>方法来实现。</p><h4 id="自定义类型转换"><a href="#自定义类型转换" class="headerlink" title="自定义类型转换"></a>自定义类型转换</h4><p>对于一些自己定义的类型，是没有办法通过上述方式对其进行类型转换的，对此可以自定义类型转换。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.CodeDom;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Centigrade c1 = <span class="keyword">new</span> Centigrade();</span><br><span class="line">            c1.<span class="keyword">value</span> = <span class="number">100</span>;</span><br><span class="line">            Kelvin k1 = <span class="keyword">new</span> Kelvin();</span><br><span class="line">            k1 = (Kelvin)c1;</span><br><span class="line">            Console.WriteLine(k1.<span class="keyword">value</span>);</span><br><span class="line">            Kelvin k2 = <span class="keyword">new</span> Kelvin();</span><br><span class="line">            k2.<span class="keyword">value</span> = <span class="number">100</span>;</span><br><span class="line">            Centigrade c2 = <span class="keyword">new</span> Centigrade();</span><br><span class="line">            c2 = (Centigrade)k2;</span><br><span class="line">            Console.WriteLine(c2.<span class="keyword">value</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">class</span> <span class="title">Centigrade</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">double</span> <span class="keyword">value</span>;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">explicit</span> <span class="keyword">operator</span> <span class="title">Centigrade</span>(<span class="params">Kelvin k</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                Centigrade c = <span class="keyword">new</span> Centigrade();</span><br><span class="line">                c.<span class="keyword">value</span> = k.<span class="keyword">value</span> - <span class="number">274.15</span>;</span><br><span class="line">                <span class="keyword">return</span> c;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">class</span> <span class="title">Kelvin</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">double</span> <span class="keyword">value</span>;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">explicit</span> <span class="keyword">operator</span> <span class="title">Kelvin</span>(<span class="params">Centigrade c</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                Kelvin k = <span class="keyword">new</span> Kelvin();</span><br><span class="line">                k.<span class="keyword">value</span> = c.<span class="keyword">value</span> + <span class="number">274.15</span>;</span><br><span class="line">                <span class="keyword">return</span> k;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">374.15</span><br><span class="line">-174.15</span><br></pre></td></tr></table></figure><p>上述代码实现了两个类，分别用于存储摄氏度和开氏度，类的内部写了两个自定义类型转换的函数，用于二者的转换。</p><p>同时，也可以声明为隐式类型转换，只需要将转换方式改变即可：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.CodeDom;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Centigrade c1 = <span class="keyword">new</span> Centigrade();</span><br><span class="line">            c1.<span class="keyword">value</span> = <span class="number">100</span>;</span><br><span class="line">            Kelvin k1 = <span class="keyword">new</span> Kelvin();</span><br><span class="line">            k1 = c1;</span><br><span class="line">            Console.WriteLine(k1.<span class="keyword">value</span>);</span><br><span class="line">            Kelvin k2 = <span class="keyword">new</span> Kelvin();</span><br><span class="line">            k2.<span class="keyword">value</span> = <span class="number">100</span>;</span><br><span class="line">            Centigrade c2 = <span class="keyword">new</span> Centigrade();</span><br><span class="line">            c2 = k2;</span><br><span class="line">            Console.WriteLine(c2.<span class="keyword">value</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">class</span> <span class="title">Centigrade</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">double</span> <span class="keyword">value</span>;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">implicit</span> <span class="keyword">operator</span> <span class="title">Centigrade</span>(<span class="params">Kelvin k</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                Centigrade c = <span class="keyword">new</span> Centigrade();</span><br><span class="line">                c.<span class="keyword">value</span> = k.<span class="keyword">value</span> - <span class="number">274.15</span>;</span><br><span class="line">                <span class="keyword">return</span> c;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">class</span> <span class="title">Kelvin</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">double</span> <span class="keyword">value</span>;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">implicit</span> <span class="keyword">operator</span> <span class="title">Kelvin</span>(<span class="params">Centigrade c</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                Kelvin k = <span class="keyword">new</span> Kelvin();</span><br><span class="line">                k.<span class="keyword">value</span> = c.<span class="keyword">value</span> + <span class="number">274.15</span>;</span><br><span class="line">                <span class="keyword">return</span> k;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">374.15</span><br><span class="line">-174.15</span><br></pre></td></tr></table></figure><h2 id="乘法和加法操作符"><a href="#乘法和加法操作符" class="headerlink" title="乘法和加法操作符"></a>乘法和加法操作符</h2><p>乘法和加法操作符统称为算术运算操作符，这些操作符与数学运算中基本类似，但是有几点需要注意一下。首先算术运算符与其操作的数据类型是相关的，操作不同的数据类型时，其行为也不一样；第二点是<code>C#</code>中有一个<code>%</code>操作符，用于取余数，该操作符在数学中是没有的；第三点是在使用算术操作符时需要注意“数值提升”。</p><p>在整数乘法中，如果使用<code>checked</code>且积超出结果类型的范围，则会引发<code>System.OverflowException</code>错误；如果使用<code>unchecked</code>，则不报告溢出并且结果类型范围外的任何有效高序位都被放弃。</p><h2 id="移位操作符"><a href="#移位操作符" class="headerlink" title="移位操作符"></a>移位操作符</h2><p>移位操作符有两，分别是<code>&lt;&lt;</code>和<code>&gt;&gt;</code>，二者的作用分别是对二进制串进行左移和右移操作。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.CodeDom;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> x = <span class="number">5</span>;</span><br><span class="line">            Console.WriteLine(x &lt;&lt; <span class="number">1</span>);</span><br><span class="line">            Console.WriteLine(x &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">2</span><br></pre></td></tr></table></figure><p>每向左移动一位，其实就相当于乘以$2$，向右移动一位就相当于是除以$2$。</p><p>如果当前操作的是一个正数，右移补进来的是$0$，如果是负数，右移补进来的是$1$。</p><h1 id="语句详解"><a href="#语句详解" class="headerlink" title="语句详解"></a>语句详解</h1><h2 id="声明语句"><a href="#声明语句" class="headerlink" title="声明语句"></a>声明语句</h2><h3 id="局部变量声明"><a href="#局部变量声明" class="headerlink" title="局部变量声明"></a>局部变量声明</h3><p>局部变量在声明时可以声明一个或多个局部变量。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.CodeDom;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> x = <span class="number">5</span>;</span><br><span class="line">            <span class="built_in">int</span> y;</span><br><span class="line">            y = <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上述的两种定义方式虽然都可以实现变量的声明和赋值，但其本质上是不一样的。</p><p><code>x</code>的声明是调用了其初始化器；<code>y</code>的声明是先声明了一个变量<code>y</code>，再对其进行赋值操作。</p><h3 id="局部常量声明"><a href="#局部常量声明" class="headerlink" title="局部常量声明"></a>局部常量声明</h3><p>局部常量无法在后续改变其值，并且在初始定义时，需要赋初始值，否则无法通过编译器的编译。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.CodeDom;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">            </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">const</span> <span class="built_in">double</span> PI = <span class="number">3.1415926</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="块语句"><a href="#块语句" class="headerlink" title="块语句"></a>块语句</h2><p><code>block</code>用于在只允许使用单个语句的上下文中编写多条语句。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">block:</span><br><span class="line">&#123;</span><br><span class="line">    statement-list</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>块语句被看做完整的一条语句，因此后面不需要使用分号。</p><h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><p><code>if</code>语句根据布尔表达式的值选择要执行的雨具。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>-statement:</span><br><span class="line"><span class="keyword">if</span>(boolean-expression) embedded-<span class="function">statement</span></span><br><span class="line"><span class="function"><span class="title">if</span>(<span class="params">boolean-expression</span>) embedded-statement <span class="keyword">else</span> embedded-statement</span></span><br></pre></td></tr></table></figure><p><code>else</code>部分与语法允许的、词法上最接近的上一个<code>if</code>语句相关联。</p><p>现在写一个成绩评定的案例：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.CodeDom;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> score = <span class="number">55</span>;</span><br><span class="line">            <span class="keyword">if</span> (score &gt;= <span class="number">0</span> &amp;&amp; score &lt;= <span class="number">100</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (score &gt;= <span class="number">60</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;Pass&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;Failed&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Input Error!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h2><p><code>switch</code>语句选择一个要执行的语句列表，此列表具有一个相关联的<code>switch</code>标签，它对应于<code>switch</code>表达式的值。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>-statement:</span><br><span class="line"><span class="keyword">switch</span>(expression) <span class="keyword">switch</span>-block</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>-block:</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span>-sections</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>-sections:</span><br><span class="line"><span class="keyword">switch</span>-section</span><br><span class="line"><span class="keyword">switch</span>-sections <span class="keyword">switch</span>-section</span><br><span class="line">        </span><br><span class="line"><span class="keyword">switch</span>-section:</span><br><span class="line">swicth-labels statement-list</span><br><span class="line">        </span><br><span class="line"><span class="keyword">switch</span>-labels:</span><br><span class="line"><span class="keyword">switch</span>-label</span><br><span class="line"><span class="keyword">switch</span>-labels <span class="keyword">switch</span>-label</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>-label:</span><br><span class="line"><span class="keyword">case</span> constant-expression:</span><br><span class="line"><span class="literal">default</span>:</span><br></pre></td></tr></table></figure><p><code>switch-statement</code>包含关键字<code>switch</code>，后面带括号的表达式（称为<code>switch</code>表达式），然后是一个<code>switch-block</code>。<code>switch-block</code>包含零个或多个括在大括号内的<code>switch-section</code>。每个<code>switch section</code>包含一个或多个<code>switch-labels</code>，后接一个<code>statement-list</code>。</p><p><code>switch</code>语句的主导类型（<code>governing type</code>）由<code>switch</code>表达式确定。</p><p>如果<code>switch</code>表达式的类型为<code>sbyte</code>、<code>byte</code>、<code>short</code>、<code>ushort</code>、<code>int</code>、<code>uint</code>、<code>long</code>、<code>ulong</code>、<code>bool</code>、<code>char</code>、<code>string</code>或<code>enum-type</code>，或者是对应于以上某种类型的可以为<code>null</code>的类型，则该类型就是<code>switch</code>语句的主导类型。</p><p>使用<code>switch</code>语句实现分数评级功能：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.CodeDom;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> score = <span class="number">55</span>;</span><br><span class="line">            <span class="keyword">switch</span> (score / <span class="number">10</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">                    <span class="keyword">if</span> (score == <span class="number">100</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">goto</span> <span class="keyword">case</span> <span class="number">8</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">goto</span> <span class="literal">default</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;D&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="literal">default</span>:</span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;Error!&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C</span><br></pre></td></tr></table></figure><h2 id="try语句"><a href="#try语句" class="headerlink" title="try语句"></a>try语句</h2><p><code>try</code>语句提供一种机制，用于捕捉在块的执行期间发生的各种异常。此外，<code>try</code>语句还能让您指定一个代码块，并保证当控制离开<code>tyr</code>语句时，总是先执行该代码。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>-statement:</span><br><span class="line"><span class="keyword">try</span> block <span class="keyword">catch</span>-clauses</span><br><span class="line"><span class="keyword">try</span> block <span class="keyword">finally</span>-clause</span><br><span class="line"><span class="keyword">try</span> block <span class="keyword">catch</span>-clauses <span class="keyword">finally</span>-clause</span><br><span class="line"></span><br><span class="line"><span class="keyword">catch</span>-clauses:</span><br><span class="line">specific-<span class="keyword">catch</span>-clauses general-<span class="keyword">catch</span>-clause_opt</span><br><span class="line">specific-<span class="keyword">catch</span>-clauses_opt general-<span class="keyword">catch</span>-clause</span><br><span class="line">        </span><br><span class="line">specific-<span class="keyword">catch</span>-clauses:</span><br><span class="line">specific-<span class="keyword">catch</span>-clause</span><br><span class="line">specific-<span class="keyword">catch</span>-clauses specific-<span class="keyword">catch</span>-clause</span><br><span class="line">        </span><br><span class="line">specific-<span class="keyword">catch</span>-clause:</span><br><span class="line"><span class="keyword">catch</span>(<span class="keyword">class</span>-<span class="title">tvpe</span> <span class="title">identifier_opt</span> ) <span class="title">block</span></span><br><span class="line">        </span><br><span class="line"><span class="title">general</span>-<span class="title">catch</span>-<span class="title">clause</span>:</span><br><span class="line"><span class="title">catch</span> <span class="title">block</span></span><br><span class="line"><span class="title">finally</span>-<span class="title">clause</span>:</span><br><span class="line"><span class="title">fina1ly</span> <span class="title">block</span></span><br></pre></td></tr></table></figure><p>有三种可能的<code>try</code>语句形式：</p><ul><li>一个<code>try</code>块后接一个或多个<code>catch</code>块。</li><li>一个<code>try</code>块后接一个<code>finally</code>块。</li><li>一个<code>try</code>块后接一个或多个<code>catch</code>块，后面再跟一个<code>finally</code>块。</li></ul><h2 id="迭代语句"><a href="#迭代语句" class="headerlink" title="迭代语句"></a>迭代语句</h2><p>迭代语句重复执行嵌入语句。</p><h3 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a>while语句</h3><p><code>while</code>语句按不同条件执行一个嵌入语句零次或多次。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>-statement:</span><br><span class="line"><span class="keyword">while</span>(boolean-expression) embedded-statement;</span><br></pre></td></tr></table></figure><p><code>while</code>语句按如下规则执行：</p><ul><li>计算<code>boolean-expression</code>。</li><li>如果布尔表达式为真，控制将转到嵌入语句。当（如果）控制到达嵌入语句的结束点（可能是通过执行一个<code>continue</code>语句）时，控制将转到<code>while</code>语句的结束点。</li><li>如果布尔表达式为假，控制将转到<code>while</code>语句的结束点。</li></ul><p>现在做一个小游戏，用户每次输入两个数字，如果二者之和为一百，将会加一分，反正会游戏结束并公布当前得分。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.CodeDom;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Xml.Schema;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> score = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">bool</span> canContinue = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">while</span> (canContinue)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Please input first number:&quot;</span>);</span><br><span class="line">                <span class="built_in">string</span> str1 = Console.ReadLine();</span><br><span class="line">                <span class="built_in">int</span> x = <span class="built_in">int</span>.Parse(str1);</span><br><span class="line"></span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Please input second number:&quot;</span>);</span><br><span class="line">                <span class="built_in">string</span> str2 = Console.ReadLine();</span><br><span class="line">                <span class="built_in">int</span> y = <span class="built_in">int</span>.Parse(str2);</span><br><span class="line"></span><br><span class="line">                <span class="built_in">int</span> sum = x + y;</span><br><span class="line">                <span class="keyword">if</span> (sum == <span class="number">100</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    score++;</span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;Correct!&#123;0&#125;+&#123;1&#125;=&#123;2&#125;&quot;</span>, x, y, sum);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    canContinue = <span class="literal">false</span>;</span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;Error!&#123;0&#125;+&#123;1&#125;=&#123;2&#125;&quot;</span>, x, y, sum);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Your score is &#123;0&#125;.&quot;</span>, score);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;GAME OVER!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Please input first number:</span><br><span class="line">99</span><br><span class="line">Please input second number:</span><br><span class="line">1</span><br><span class="line">Correct!99+1=100</span><br><span class="line">Please input first number:</span><br><span class="line">50</span><br><span class="line">Please input second number:</span><br><span class="line">50</span><br><span class="line">Correct!50+50=100</span><br><span class="line">Please input first number:</span><br><span class="line">1</span><br><span class="line">Please input second number:</span><br><span class="line">1</span><br><span class="line">Error!1+1=2</span><br><span class="line">Your score is 2.</span><br><span class="line">GAME OVER!</span><br></pre></td></tr></table></figure><h3 id="do语句"><a href="#do语句" class="headerlink" title="do语句"></a>do语句</h3><p><code>do</code>语句按不同条件执行一个嵌入语句一次或多次。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>-statement:</span><br><span class="line"><span class="keyword">do</span> embedded-<span class="function">statement <span class="title">while</span> (<span class="params">boolean-expression</span>)</span>;</span><br></pre></td></tr></table></figure><p><code>do</code>语句按如下规则执行：</p><ul><li>控制转到嵌入语句。</li><li>当（如果）控制到达嵌入语句的结束点（可能是由于执行了一个<code>continue</code>语句）时，计算<code>boolean-expression</code>。如果布尔表达式为真，控制将转到<code>do</code>语句的起点。否则，控制转到<code>do</code>语句的结束点。</li></ul><p>我们使用<code>do</code>语句完成上述的小游戏：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.CodeDom;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Xml.Schema;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> score = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">do</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Please input first number:&quot;</span>);</span><br><span class="line">                <span class="built_in">string</span> str1 = Console.ReadLine();</span><br><span class="line">                <span class="built_in">int</span> x = <span class="built_in">int</span>.Parse(str1);</span><br><span class="line"></span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Please input second number:&quot;</span>);</span><br><span class="line">                <span class="built_in">string</span> str2 = Console.ReadLine();</span><br><span class="line">                <span class="built_in">int</span> y = <span class="built_in">int</span>.Parse(str2);</span><br><span class="line"></span><br><span class="line">                sum = x + y;</span><br><span class="line">                <span class="keyword">if</span> (sum == <span class="number">100</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    score++;</span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;Correct!&#123;0&#125;+&#123;1&#125;=&#123;2&#125;&quot;</span>, x, y, sum);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;Error!&#123;0&#125;+&#123;1&#125;=&#123;2&#125;&quot;</span>, x, y, sum);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">while</span> (sum == <span class="number">100</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Your score is &#123;0&#125;.&quot;</span>, score);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;GAME OVER!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Please input first number:</span><br><span class="line">99</span><br><span class="line">Please input second number:</span><br><span class="line">1</span><br><span class="line">Correct!99+1=100</span><br><span class="line">Please input first number:</span><br><span class="line">50</span><br><span class="line">Please input second number:</span><br><span class="line">50</span><br><span class="line">Correct!50+50=100</span><br><span class="line">Please input first number:</span><br><span class="line">1</span><br><span class="line">Please input second number:</span><br><span class="line">1</span><br><span class="line">Error!1+1=2</span><br><span class="line">Your score is 2.</span><br><span class="line">GAME OVER!</span><br></pre></td></tr></table></figure><h3 id="跳转语句"><a href="#跳转语句" class="headerlink" title="跳转语句"></a>跳转语句</h3><p><code>continue</code>语句会放弃当前这次循环，立刻开始一次新的循环。</p><p><code>break</code>语句会直接结束这个循环。</p><p>在上面的小游戏中，如果输入有问题的话，程序会直接崩溃。为了避免崩溃，我们可以使用<code>try</code>语句来进行判断，同时需要引入<code>continue</code>。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.CodeDom;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Xml.Schema;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> score = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">int</span> sum = <span class="number">100</span>;</span><br><span class="line">            <span class="keyword">do</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Please input first number:&quot;</span>);</span><br><span class="line">                <span class="built_in">string</span> str1 = Console.ReadLine();</span><br><span class="line">                <span class="built_in">int</span> x = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">try</span></span><br><span class="line">                &#123;</span><br><span class="line">                    x = <span class="built_in">int</span>.Parse(str1);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span></span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;First number has problem! Restart.&quot;</span>);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Please input second number:&quot;</span>);</span><br><span class="line">                <span class="built_in">string</span> str2 = Console.ReadLine();</span><br><span class="line">                <span class="built_in">int</span> y = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">try</span></span><br><span class="line">                &#123;</span><br><span class="line">                    y = <span class="built_in">int</span>.Parse(str2);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span></span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;Second number has problem! Restart.&quot;</span>);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                sum = x + y;</span><br><span class="line">                <span class="keyword">if</span> (sum == <span class="number">100</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    score++;</span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;Correct!&#123;0&#125;+&#123;1&#125;=&#123;2&#125;&quot;</span>, x, y, sum);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;Error!&#123;0&#125;+&#123;1&#125;=&#123;2&#125;&quot;</span>, x, y, sum);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">while</span> (sum == <span class="number">100</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Your score is &#123;0&#125;.&quot;</span>, score);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;GAME OVER!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Please input first number:</span><br><span class="line">abc</span><br><span class="line">First number has problem! Restart.</span><br><span class="line">Please input first number:</span><br><span class="line">123</span><br><span class="line">Please input second number:</span><br><span class="line">999999999999999999999</span><br><span class="line">Second number has problem! Restart.</span><br><span class="line">Please input first number:</span><br><span class="line">5</span><br><span class="line">Please input second number:</span><br><span class="line">95</span><br><span class="line">Correct!5+95=100</span><br><span class="line">Please input first number:</span><br><span class="line">10</span><br><span class="line">Please input second number:</span><br><span class="line">90</span><br><span class="line">Correct!10+90=100</span><br><span class="line">Please input first number:</span><br><span class="line">100</span><br><span class="line">Please input second number:</span><br><span class="line">0</span><br><span class="line">Correct!100+0=100</span><br><span class="line">Please input first number:</span><br><span class="line">1</span><br><span class="line">Please input second number:</span><br><span class="line">1</span><br><span class="line">Error!1+1=2</span><br><span class="line">Your score is 3.</span><br><span class="line">GAME OVER!</span><br></pre></td></tr></table></figure><p>现在我们想要增加一个新的功能，当用户输入<code>End</code>的时候，可以立刻结束游戏。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.CodeDom;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Xml.Schema;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> score = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">int</span> sum = <span class="number">100</span>;</span><br><span class="line">            <span class="keyword">do</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Please input first number:&quot;</span>);</span><br><span class="line">                <span class="built_in">string</span> str1 = Console.ReadLine();</span><br><span class="line">                <span class="keyword">if</span> (str1.ToLower() == <span class="string">&quot;end&quot;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">int</span> x = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">try</span></span><br><span class="line">                &#123;</span><br><span class="line">                    x = <span class="built_in">int</span>.Parse(str1);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span></span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;First number has problem! Restart.&quot;</span>);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Please input second number:&quot;</span>);</span><br><span class="line">                <span class="built_in">string</span> str2 = Console.ReadLine();</span><br><span class="line">                <span class="keyword">if</span> (str2.ToLower() == <span class="string">&quot;end&quot;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">int</span> y = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">try</span></span><br><span class="line">                &#123;</span><br><span class="line">                    y = <span class="built_in">int</span>.Parse(str2);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span></span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;Second number has problem! Restart.&quot;</span>);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                sum = x + y;</span><br><span class="line">                <span class="keyword">if</span> (sum == <span class="number">100</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    score++;</span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;Correct!&#123;0&#125;+&#123;1&#125;=&#123;2&#125;&quot;</span>, x, y, sum);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;Error!&#123;0&#125;+&#123;1&#125;=&#123;2&#125;&quot;</span>, x, y, sum);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">while</span> (sum == <span class="number">100</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Your score is &#123;0&#125;.&quot;</span>, score);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;GAME OVER!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Please input first number:</span><br><span class="line">5</span><br><span class="line">Please input second number:</span><br><span class="line">95</span><br><span class="line">Correct!5+95=100</span><br><span class="line">Please input first number:</span><br><span class="line">a</span><br><span class="line">First number has problem! Restart.</span><br><span class="line">Please input first number:</span><br><span class="line">end</span><br><span class="line">Your score is 1.</span><br><span class="line">GAME OVER!</span><br></pre></td></tr></table></figure><p>上述代码中，使用了<code>ToLower</code>方法实现了字符串转换为小写，可以适用于所有形式的<code>End</code>。</p><h3 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h3><p><code>for</code>语句计算一个初始化表达式序列，然后当某个条件为真时，重复执行相关的嵌入语句并计算一个迭代表达式序列。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.CodeDom;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Xml.Schema;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br><span class="line">Hello World!</span><br><span class="line">Hello World!</span><br><span class="line">Hello World!</span><br><span class="line">Hello World!</span><br><span class="line">Hello World!</span><br><span class="line">Hello World!</span><br><span class="line">Hello World!</span><br><span class="line">Hello World!</span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure><p>上述代码使用<code>for</code>循环输出了打印了十次<code>Hello World!</code>。</p><h3 id="foreach语句"><a href="#foreach语句" class="headerlink" title="foreach语句"></a>foreach语句</h3><p><code>foreach</code>语句用于枚举一个集合的元素，并对该集合中的每个元素执行一次相关的嵌入语句。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.CodeDom;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Xml.Schema;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span>[] intArray = <span class="keyword">new</span> <span class="built_in">int</span>[] &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span> &#125;;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> i <span class="keyword">in</span> intArray)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td></tr></table></figure><h1 id="字段"><a href="#字段" class="headerlink" title="字段"></a>字段</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>字段（<code>filed</code>）是一种表示与对象或类型（类与结构体）关联的变量。</p><p>字段是类型的成员，旧称“成员变量”。</p><p>与对象关联的字段也被称作“实例字段”。</p><p>与类型关联的字段称为“静态字段”，由<code>static</code>修饰。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.CodeDom;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Xml.Schema;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Student stu1 = <span class="keyword">new</span> Student();</span><br><span class="line">            stu1.Age = <span class="number">18</span>;</span><br><span class="line">            stu1.Score = <span class="number">90</span>;</span><br><span class="line"></span><br><span class="line">            Student stu2 = <span class="keyword">new</span> Student();</span><br><span class="line">            stu2.Age = <span class="number">20</span>;</span><br><span class="line">            stu2.Score = <span class="number">85</span>;</span><br><span class="line"></span><br><span class="line">            Student.ReportAmount();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">int</span> Age;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">int</span> Score;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> AverageAge;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> AverageScore;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> Amount;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">Student</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                Student.Amount++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ReportAmount</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(Student.Amount);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><p>上述代码创建了一个学生类，每实例化出来一个对象，都会让学生总数增加一个，该变量使用<code>static</code>进行声明。</p><p>同时也可以改写成下述代码获取其他的参数。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.CodeDom;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Xml.Schema;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            List&lt;Student&gt; stuList = <span class="keyword">new</span> List&lt;Student&gt;();</span><br><span class="line">            <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                Student student = <span class="keyword">new</span> Student();</span><br><span class="line">                student.Age = <span class="number">25</span>;</span><br><span class="line">                student.Score = i;</span><br><span class="line">                stuList.Add(student);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">int</span> totalAge = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">int</span> totalScore = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">foreach</span>(<span class="keyword">var</span> student <span class="keyword">in</span> stuList)</span><br><span class="line">            &#123;</span><br><span class="line">                totalAge += student.Age;</span><br><span class="line">                totalScore += student.Score;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Student.AverageAge = totalAge / Student.Amount;</span><br><span class="line">            Student.AverageScore = totalScore / Student.Amount;</span><br><span class="line"></span><br><span class="line">            Student.ReportAmount();</span><br><span class="line">            Student.ReportAverageAge();</span><br><span class="line">            Student.ReportAverageScore();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">int</span> Age;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">int</span> Score;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> AverageAge;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> AverageScore;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> Amount;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">Student</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                Student.Amount++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ReportAmount</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(Student.Amount);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ReportAverageAge</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(Student.AverageAge);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ReportAverageScore</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(Student.AverageScore);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">100</span><br><span class="line">25</span><br><span class="line">49</span><br></pre></td></tr></table></figure><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>字段声明带有分号，但它不是语句。</p><p>字段的名字一定是名词。</p><p>在声明字段时，可以直接对其初始化，这与在构造函数中的初始化效果一致。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.CodeDom;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Xml.Schema;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">            Console.WriteLine(stu.Age);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">int</span> Age = <span class="number">18</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">18</span><br></pre></td></tr></table></figure><p>上述代码在声明字段时就对其进行赋值了，这样实例化出来的所有对象的年龄均为$18$。</p><p>类中也可以声明静态构造函数，这样的函数只会在程序最开始执行一次：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.CodeDom;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Xml.Schema;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">            Console.WriteLine(stu.Age);</span><br><span class="line">            Console.WriteLine(Student.Amount);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">int</span> Age = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> Amount;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">static</span> <span class="title">Student</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                Student.Amount = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">18</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>在声明字段时，可以使用<code>readonly</code>修饰符，该修饰符时只读修饰符。对于只读字段而言，只有一次赋值机会，即构造函数中进行赋值操作。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.CodeDom;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Xml.Schema;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Student stu = <span class="keyword">new</span> Student(<span class="number">314</span>);</span><br><span class="line">            Console.WriteLine(stu.ID);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="built_in">int</span> ID;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">Student</span>(<span class="params"><span class="built_in">int</span> ID</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>.ID = ID;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">314</span><br></pre></td></tr></table></figure><h2 id="初始值"><a href="#初始值" class="headerlink" title="初始值"></a>初始值</h2><p>无显式初始化时，字段获得其类型的默认值，所以字段“永远都不会未被初始化”。</p><p>实例字段初始化的时机是对象创建时。</p><p>静态字段初始化的时机是类型被加载（<code>load</code>）时。</p><h1 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h1><h2 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h2><p>属性（<code>property</code>）是一种用于访问对象或类型的特征的成员，特征反映了状态。</p><p>属性是字段的自然扩展。</p><p>从命名上看，<code>filed</code>更偏向于实例对象在内存中的布局，<code>property</code>更偏向于反映现实世界对象的特征。</p><p>对外而言，可以暴露数据，数据可以是存储在字段里的，也可以是动态计算出来的。</p><p>对内而言，可以保护字段不被非法值“污染”。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.CodeDom;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Xml.Schema;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                Student stu1 = <span class="keyword">new</span> Student();</span><br><span class="line">                stu1.SetAge(<span class="number">20</span>);</span><br><span class="line">                Console.WriteLine(stu1.GetAge());</span><br><span class="line"></span><br><span class="line">                Student stu2 = <span class="keyword">new</span> Student();</span><br><span class="line">                stu2.SetAge(<span class="number">314</span>);</span><br><span class="line">                Console.WriteLine(stu2.GetAge());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(ex.Message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="built_in">int</span> age;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">GetAge</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetAge</span>(<span class="params"><span class="built_in">int</span> age</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (age &gt;= <span class="number">0</span> &amp;&amp; age &lt;= <span class="number">120</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">this</span>.age = age;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;Age value has error!&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">20</span><br><span class="line">Age value has error!</span><br></pre></td></tr></table></figure><p>通过将字段声明为私有类型的方法，可以有效避免数据被污染，在设置值的时候可以对其进行检查。</p><p>为了降低变成复杂性，推出了<code>get</code>和<code>set</code>，可以快速获取和设置属性值。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.CodeDom;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Xml.Schema;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                Student stu1 = <span class="keyword">new</span> Student();</span><br><span class="line">                stu1.Age = <span class="number">20</span>;</span><br><span class="line">                Console.WriteLine(stu1.Age);</span><br><span class="line"></span><br><span class="line">                Student stu2 = <span class="keyword">new</span> Student();</span><br><span class="line">                stu2.Age = <span class="number">314</span>;</span><br><span class="line">                Console.WriteLine(stu2.Age);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(ex.Message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="built_in">int</span> age;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">int</span> Age</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">get</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">set</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">value</span> &gt;= <span class="number">0</span> &amp;&amp; <span class="keyword">value</span> &lt;= <span class="number">120</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">this</span>.age = <span class="keyword">value</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;Age value has error!&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">20</span><br><span class="line">Age value has error!</span><br></pre></td></tr></table></figure><h2 id="声明-1"><a href="#声明-1" class="headerlink" title="声明"></a>声明</h2><p>属性的声明可以使用完整的声明，也可以使用简略的声明。</p><p>上面使用的方式是完整声明，具有很强的鲁棒性。</p><p>对于简略的声明，其代码非常简洁：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.CodeDom;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Xml.Schema;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                Student stu1 = <span class="keyword">new</span> Student();</span><br><span class="line">                stu1.Age = <span class="number">20</span>;</span><br><span class="line">                Console.WriteLine(stu1.Age);</span><br><span class="line"></span><br><span class="line">                Student stu2 = <span class="keyword">new</span> Student();</span><br><span class="line">                stu2.Age = <span class="number">314</span>;</span><br><span class="line">                Console.WriteLine(stu2.Age);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(ex.Message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">20</span><br><span class="line">314</span><br></pre></td></tr></table></figure><p>这种方法一般用于传递值，不能对属性起到很好的保护作用。</p><h1 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h1><h2 id="值参数"><a href="#值参数" class="headerlink" title="值参数"></a>值参数</h2><p>值参数是我们平时用的最多的参数种类，声明时不带修饰符的形参是值参数。一个值形参对应于一个局部变量，只是它的初始值来自该方法调用所提供的相应实参。</p><p>当形参是值形参时，方法调用中的对应实参必须是表达式，并且它的类型可以隐式转换为形参的类型。</p><p>允许方法将新值赋给值参数。这样的赋值只影响由该值形参表示的局部存储位置，而不会影响在方法调用时由调用方给出的实参。</p><h3 id="值类型"><a href="#值类型" class="headerlink" title="值类型"></a>值类型</h3><p>值参数相当于创建了一个变量的副本，对值参数的操作永远不会影响到变量的值。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.CodeDom;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Xml.Schema;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> x = <span class="number">0</span>;</span><br><span class="line">            AddOne(x);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Main value:&#123;0&#125;&quot;</span>, x);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">AddOne</span>(<span class="params"><span class="built_in">int</span> x</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            x++;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;AddOne value:&#123;0&#125;&quot;</span>, x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AddOne value:1</span><br><span class="line">Main value:0</span><br></pre></td></tr></table></figure><p>在上述结果中，将参数进行传入，即使方法中的参数值发生了改变，也不会影响传入的值。</p><h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><p>当使用值参数传递一个引用类型的变量时，之操作对象，不创建新对象。</p><p>所传递的对象还是那个对象，但对象里的值（字段/属性已经改变）。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.CodeDom;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Xml.Schema;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Student stu = <span class="keyword">new</span> Student() &#123; Name = <span class="string">&quot;Tom&quot;</span> &#125;;</span><br><span class="line">            Student.UpdateObject(stu);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Student:&#123;0&#125;&quot;</span>, stu.Name);</span><br><span class="line">            Student.CreateObject(stu);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Student:&#123;0&#125;&quot;</span>, stu.Name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">UpdateObject</span>(<span class="params">Student stu</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                stu.Name = <span class="string">&quot;Bob&quot;</span>;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Update:&#123;0&#125;&quot;</span>, stu.Name);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">CreateObject</span>(<span class="params">Student stu</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                stu = <span class="keyword">new</span> Student() &#123; Name = <span class="string">&quot;Alice&quot;</span> &#125;;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Create:&#123;0&#125;&quot;</span>, stu.Name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Update:Bob</span><br><span class="line">Student:Bob</span><br><span class="line">Create:Alice</span><br><span class="line">Student:Bob</span><br></pre></td></tr></table></figure><p>上述例子中，如果更改了对象的属性值，会造成初始变量的变化。但是如果用值参数指向了一个新的参数，并不会对传入的值参数造成任何影响。</p><h2 id="引用参数"><a href="#引用参数" class="headerlink" title="引用参数"></a>引用参数</h2><p>引用形参是用<code>ref</code>修饰符声明的形参。与值形参不同，引用形参并不创建新的存储位置。相反，引用形参表示的存储位置恰是在方法调用中作为实参给出的那个变量所表示的存储位置。</p><p>当形参为引用形参时，方法调用中的对应实参必须由关键字<code>ref</code>并后接一个与形参类型想用的<code>variable-reference</code>组成。变量在可以作为引用形参传递之前，必须先明确赋值。</p><p>在方法内部，引用形参始终被认为是明确赋值的。</p><h3 id="值类型-1"><a href="#值类型-1" class="headerlink" title="值类型"></a>值类型</h3><p>引用参数并不创建变量的副本，使用<code>ref</code>修饰符显式指出——此方法的副作用是改变实际参数的值。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.CodeDom;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Xml.Schema;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> x = <span class="number">0</span>;</span><br><span class="line">            AddOne(<span class="keyword">ref</span> x);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Main value:&#123;0&#125;&quot;</span>, x);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">AddOne</span>(<span class="params"><span class="keyword">ref</span> <span class="built_in">int</span> x</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            x++;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;AddOne value:&#123;0&#125;&quot;</span>, x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="引用类型-1"><a href="#引用类型-1" class="headerlink" title="引用类型"></a>引用类型</h3><p>当使用引用参数处理引用类型的变量时，创建对象也会对引用参数产生相应的影响。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.CodeDom;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Xml.Schema;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Student stu = <span class="keyword">new</span> Student() &#123; Name = <span class="string">&quot;Tom&quot;</span> &#125;;</span><br><span class="line">            Student.UpdateObject(<span class="keyword">ref</span> stu);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Student:&#123;0&#125;&quot;</span>, stu.Name);</span><br><span class="line">            Student.CreateObject(<span class="keyword">ref</span> stu);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Student:&#123;0&#125;&quot;</span>, stu.Name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">UpdateObject</span>(<span class="params"><span class="keyword">ref</span> Student stu</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                stu.Name = <span class="string">&quot;Bob&quot;</span>;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Update:&#123;0&#125;&quot;</span>, stu.Name);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">CreateObject</span>(<span class="params"><span class="keyword">ref</span> Student stu</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                stu = <span class="keyword">new</span> Student() &#123; Name = <span class="string">&quot;Alice&quot;</span> &#125;;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Create:&#123;0&#125;&quot;</span>, stu.Name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Update:Bob</span><br><span class="line">Student:Bob</span><br><span class="line">Create:Alice</span><br><span class="line">Student:Alice</span><br></pre></td></tr></table></figure><h2 id="输出参数"><a href="#输出参数" class="headerlink" title="输出参数"></a>输出参数</h2><p>使用<code>out</code>修饰符声明的形参是输出形参。类似于引用形参，输出形参不创建新的存储位置。相反，输出形参表示的存储位置恰是在该方法调用中作为实参给出的那个变量所表示的存储位置。</p><p>当形参为输出形参时，方法调用中的相应实参必须由关键字<code>out</code>并后接一个与形参类型相同的<code>variable-reference</code>组成。变量在可以作为输出形参传递之前不一定需要明确赋值，但是在将变量作为输出形参传递的调用之后，该变量被认为是明确赋值的。</p><p>在方法内部，与局部变量相同，输出形参最初被认为是未赋值的，因而必须在使用它的值之前明确赋值。</p><p>在方法返回之前，该方法的每个输出形参都必须明确赋值。</p><h3 id="值类型-2"><a href="#值类型-2" class="headerlink" title="值类型"></a>值类型</h3><p>在处理值类型的变量时，输出参数并不创建变量的副本。</p><p>方法体内必须要有对输出变量的赋值的操作。</p><p>使用<code>out</code>修饰符显式指出——此方法的副作用是通过参数向外输出值。</p><p>从语义上来讲——<code>ref</code>是为了“改变”，<code>out</code>是为了“输出”。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">double</span> x = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">bool</span> b1 = DoubleParser.TryParse(<span class="string">&quot;314&quot;</span>, <span class="keyword">out</span> x);</span><br><span class="line">            <span class="keyword">if</span> (b1 == <span class="literal">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(x);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Error!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">bool</span> b2 = DoubleParser.TryParse(<span class="string">&quot;Abc&quot;</span>, <span class="keyword">out</span> x);</span><br><span class="line">            <span class="keyword">if</span> (b2 == <span class="literal">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(x);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Error!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">class</span> <span class="title">DoubleParser</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">TryParse</span>(<span class="params"><span class="built_in">string</span> input, <span class="keyword">out</span> <span class="built_in">double</span> result</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">try</span></span><br><span class="line">                &#123;</span><br><span class="line">                    result = <span class="built_in">double</span>.Parse(input);</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span></span><br><span class="line">                &#123;</span><br><span class="line">                    result = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">314</span><br><span class="line">Error!</span><br></pre></td></tr></table></figure><p>上述例子中写了一个用于判断转换值是否能合法转换的代码，由于返回值被是否能够正常转换的布尔类型值所占用，因此需要使用一个输出参数获取转换之后的值。</p><h3 id="引用类型-2"><a href="#引用类型-2" class="headerlink" title="引用类型"></a>引用类型</h3><p>引用类型的输出参数与上述没有什么太大区别，可以看一下下面的例子：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Student stu;</span><br><span class="line">            <span class="built_in">bool</span> b = Create(<span class="string">&quot;Biggleswroth&quot;</span>, <span class="number">18</span>, <span class="keyword">out</span> stu);</span><br><span class="line">            <span class="keyword">if</span> (b == <span class="literal">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Name:&#123;0&#125;    Age:&#123;1&#125;&quot;</span>, stu.Name, stu.Age);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Error!&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">Create</span>(<span class="params"><span class="built_in">string</span> stuName, <span class="built_in">int</span> stuAge, <span class="keyword">out</span> Student stu</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            stu = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (stuName == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (stuAge &lt; <span class="number">0</span> || stuAge &gt; <span class="number">80</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            stu = <span class="keyword">new</span> Student();</span><br><span class="line">            stu.Name = stuName;</span><br><span class="line">            stu.Age = stuAge;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Name:Biggleswroth    Age:18</span><br></pre></td></tr></table></figure><h2 id="数组参数"><a href="#数组参数" class="headerlink" title="数组参数"></a>数组参数</h2><p>必须是形参列表中的最后一个，由<code>params</code>修饰。例如<code>String.Format</code>方法和<code>String.Split</code>方法。</p><p>现在需要实现一个数组中的所有元素加和后返回，如果直接使用数组进行传递的话，代码如下所示：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span>[] myIntArray = <span class="keyword">new</span> <span class="built_in">int</span>[] &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span> &#125;;</span><br><span class="line">            <span class="built_in">int</span> result = CalculateSum(myIntArray);</span><br><span class="line">            Console.WriteLine(result);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="built_in">int</span> <span class="title">CalculateSum</span>(<span class="params"><span class="built_in">int</span>[] intArray</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> i <span class="keyword">in</span> intArray)</span><br><span class="line">            &#123;</span><br><span class="line">                sum += i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> sum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">28</span><br></pre></td></tr></table></figure><p>除此之外，还可以使用数组参数进行传递，如下所示：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> result = CalculateSum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>);</span><br><span class="line">            Console.WriteLine(result);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="built_in">int</span> <span class="title">CalculateSum</span>(<span class="params"><span class="keyword">params</span> <span class="built_in">int</span>[] intArray</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> i <span class="keyword">in</span> intArray)</span><br><span class="line">            &#123;</span><br><span class="line">                sum += i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> sum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">28</span><br></pre></td></tr></table></figure><p>使用这种方式可以不用提前声明一个数组，编译器会直接将输入的数据编写成一个数组进行相应的操作。</p><h2 id="具名参数"><a href="#具名参数" class="headerlink" title="具名参数"></a>具名参数</h2><p>具名参数可以让参数的位置不再受约束。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            PrintInfo(age: <span class="number">18</span>, name: <span class="string">&quot;Bigglesworth&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">PrintInfo</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">int</span> age</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Name:&#123;0&#125;&quot;</span>, name);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Age:&#123;0&#125;&quot;</span>, age);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Name:Bigglesworth</span><br><span class="line">Age:18</span><br></pre></td></tr></table></figure><p>使用具名参数可以很好的提高代码的可读性，同时调用时不需要再严格按照原有的顺序，使得代码编写更加灵活。</p><h2 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h2><p>参数因为具有默认值而变得“可选”，但是在实际使用中不推荐使用可选参数。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            PrintInfo(age: <span class="number">25</span>);</span><br><span class="line">            PrintInfo(age: <span class="number">18</span>, name: <span class="string">&quot;Bigglesworth&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">PrintInfo</span>(<span class="params"><span class="built_in">string</span> name = <span class="string">&quot;Bigglesworth&quot;</span>, <span class="built_in">int</span> age = <span class="number">18</span></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Name:&#123;0&#125;&quot;</span>, name);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Age:&#123;0&#125;&quot;</span>, age);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Name:Bigglesworth</span><br><span class="line">Age:25</span><br><span class="line">Name:Bigglesworth</span><br><span class="line">Age:18</span><br></pre></td></tr></table></figure><p>可以在参数处为其添加默认值，这样传入参数时就可以不对其进行设置，程序运行时会直接将提前写好的默认值作为参数来使用。</p><h2 id="扩展方法（this参数）"><a href="#扩展方法（this参数）" class="headerlink" title="扩展方法（this参数）"></a>扩展方法（this参数）</h2><p>方法必须是公有、静态的，即被<code>public static</code>所修饰。</p><p>必须是形参列表中的第一个由<code>this</code>修饰。</p><p>必须由一个静态类（一般类名为<code>SomeTypeExtension</code>）来统一收纳对<code>SomeType</code>类型的扩展方法。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">double</span> x = <span class="number">3.14159265358</span>;</span><br><span class="line">            <span class="built_in">double</span> y = x.Round(<span class="number">4</span>);</span><br><span class="line">            Console.WriteLine(y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">DoubleExtension</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">double</span> <span class="title">Round</span>(<span class="params"><span class="keyword">this</span> <span class="built_in">double</span> input, <span class="built_in">int</span> digits</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">double</span> result = Math.Round(input, digits);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3.1416</span><br></pre></td></tr></table></figure><p>简单来说，使用扩展方法可以为目标数据类型“追加”新的方法。</p><h1 id="委托"><a href="#委托" class="headerlink" title="委托"></a>委托</h1><h2 id="基本概念-4"><a href="#基本概念-4" class="headerlink" title="基本概念"></a>基本概念</h2><p>委托（<code>delegate</code>）是函数指针的“升级版”。</p><p>变量（数据）是以某个地址为起点的一段内存中所存储的值。</p><p>函数（算法）是以某个地址为起点的一段内存中所存储的一组机器语言指令。</p><p>对函数（方法）的调用分为直接调用和间接调用，直接调用是通过函数名来调用函数，<code>CPU</code>通过函数名直接获得函数所在地址并开始执行；间接调用是通过函数指针来调用函数，<code>CPU</code>通过读取函数指针存储的值获得函数所在地址并开始执行。</p><h2 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h2><p>使用<code>Action</code>可以实现类似于函数指针的效果，例如下面这段程序：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Calculator calculator = <span class="keyword">new</span> Calculator();</span><br><span class="line">            Action action = <span class="keyword">new</span> Action(calculator.Report);</span><br><span class="line">            calculator.Report();</span><br><span class="line">            action.Invoke();</span><br><span class="line">            action();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Calculator</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Report</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;I have 3 methods.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">Add</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> result = a + b;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">Sub</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> result = a - b;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">I have 3 methods.</span><br><span class="line">I have 3 methods.</span><br><span class="line">I have 3 methods.</span><br></pre></td></tr></table></figure><p>上述代码通过三种方式分别调用了对应的方法，第一种是使用对象直接进行调用，剩下两种是使用<code>Action</code>实例化的对象进行间接调用。</p><p><code>Action</code>委托只能指向没有返回值的方法，如果想要指向有返回值的方法需要使用<code>Func</code>。</p><h2 id="Func"><a href="#Func" class="headerlink" title="Func"></a>Func</h2><p>为了能够调用<code>Add</code>和<code>Sub</code>，需要使用<code>Func</code>委托进行间接调用：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Calculator calculator = <span class="keyword">new</span> Calculator();</span><br><span class="line">            Func&lt;<span class="built_in">int</span>, <span class="built_in">int</span>, <span class="built_in">int</span>&gt; func1 = <span class="keyword">new</span> Func&lt;<span class="built_in">int</span>, <span class="built_in">int</span>, <span class="built_in">int</span>&gt;(calculator.Add);</span><br><span class="line">            Func&lt;<span class="built_in">int</span>, <span class="built_in">int</span>, <span class="built_in">int</span>&gt; func2 = <span class="keyword">new</span> Func&lt;<span class="built_in">int</span>, <span class="built_in">int</span>, <span class="built_in">int</span>&gt;(calculator.Sub);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">int</span> x = <span class="number">100</span>;</span><br><span class="line">            <span class="built_in">int</span> y = <span class="number">200</span>;</span><br><span class="line">            <span class="built_in">int</span> z = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            z = func1.Invoke(x, y);</span><br><span class="line">            Console.WriteLine(z);</span><br><span class="line">            z = func2.Invoke(x, y);</span><br><span class="line">            Console.WriteLine(z);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Calculator</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Report</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;I have 3 methods.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">Add</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> result = a + b;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">Sub</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> result = a - b;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">300</span><br><span class="line">-100</span><br></pre></td></tr></table></figure><p>在<code>Func&lt;int, int, int&gt; func1 = new Func&lt;int, int, int&gt;(calculator.Add);</code>这句代码中，第一个尖括号中的三个参数分别表示：函数的第一个参数类型，函数的第二个参数类型，函数的返回值类型，后面的尖括号也同理，这样就可以直接进行调用了。</p><h2 id="委托的声明"><a href="#委托的声明" class="headerlink" title="委托的声明"></a>委托的声明</h2><p>委托是一种类（<code>class</code>），类是数据类型所以委托也是一种数据类型。</p><p>它的声明方式与一般的类不同，主要是为了照顾可读性和<code>C/C++</code>传统。</p><p>声明委托时一定要注意委托的位置，避免写错地方结果声明称嵌套类型。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="built_in">double</span> <span class="title">Calc</span>(<span class="params"><span class="built_in">double</span> x, <span class="built_in">double</span> y</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Calculator calculator = <span class="keyword">new</span> Calculator();</span><br><span class="line">            Calc calc1 = <span class="keyword">new</span> Calc(calculator.Add);</span><br><span class="line">            Calc calc2 = <span class="keyword">new</span> Calc(calculator.Sub);</span><br><span class="line">            Calc calc3 = <span class="keyword">new</span> Calc(calculator.Mul);</span><br><span class="line">            Calc calc4 = <span class="keyword">new</span> Calc(calculator.Div);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">double</span> a = <span class="number">100</span>;</span><br><span class="line">            <span class="built_in">double</span> b = <span class="number">200</span>;</span><br><span class="line">            <span class="built_in">double</span> c = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            c = calc1.Invoke(a, b);</span><br><span class="line">            Console.WriteLine(c);</span><br><span class="line">            c = calc2.Invoke(a, b);</span><br><span class="line">            Console.WriteLine(c);</span><br><span class="line">            c = calc3.Invoke(a, b);</span><br><span class="line">            Console.WriteLine(c);</span><br><span class="line">            c = calc4.Invoke(a, b);</span><br><span class="line">            Console.WriteLine(c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Calculator</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">Add</span>(<span class="params"><span class="built_in">double</span> x, <span class="built_in">double</span> y</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> x + y;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">Sub</span>(<span class="params"><span class="built_in">double</span> x, <span class="built_in">double</span> y</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> x - y;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">Mul</span>(<span class="params"><span class="built_in">double</span> x, <span class="built_in">double</span> y</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> x * y;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">Div</span>(<span class="params"><span class="built_in">double</span> x, <span class="built_in">double</span> y</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> x / y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">300</span><br><span class="line">-100</span><br><span class="line">20000</span><br><span class="line">0.5</span><br></pre></td></tr></table></figure><p>委托所封装的方法必须“类型兼容”，即返回值的数据类型一致，参数列表在个数和数据类型上一致（参数名不需要一样）。</p><h2 id="委托的一般使用"><a href="#委托的一般使用" class="headerlink" title="委托的一般使用"></a>委托的一般使用</h2><p>委托可以把一个方法作为参数传给另一个方法。</p><h3 id="模板方法"><a href="#模板方法" class="headerlink" title="模板方法"></a>模板方法</h3><p>模板方法“借用”指定的外部方法来产生结果，相当于“填空题”，常位于代码中部，且委托有返回值。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            ProductFactory productFactory = <span class="keyword">new</span> ProductFactory();</span><br><span class="line">            WrapFactory wrapFactory = <span class="keyword">new</span> WrapFactory();</span><br><span class="line"></span><br><span class="line">            Func&lt;Product&gt; func1 = <span class="keyword">new</span> Func&lt;Product&gt;(productFactory.MakePizza);</span><br><span class="line">            Func&lt;Product&gt; func2 = <span class="keyword">new</span> Func&lt;Product&gt;(productFactory.MakeToyCar);</span><br><span class="line"></span><br><span class="line">            Box box1 = wrapFactory.WrapProduct(func1);</span><br><span class="line">            Box box2 = wrapFactory.WrapProduct(func2);</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(box1.Product.Name);</span><br><span class="line">            Console.WriteLine(box2.Product.Name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Product</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Box</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> Product Product &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">WrapFactory</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Box <span class="title">WrapProduct</span>(<span class="params">Func&lt;Product&gt; getProduct</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Box box = <span class="keyword">new</span> Box();</span><br><span class="line">            Product product = getProduct.Invoke();</span><br><span class="line">            box.Product = product;</span><br><span class="line">            <span class="keyword">return</span> box;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">ProductFactory</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Product <span class="title">MakePizza</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Product product = <span class="keyword">new</span> Product();</span><br><span class="line">            product.Name = <span class="string">&quot;Pizza&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> product;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Product <span class="title">MakeToyCar</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Product product = <span class="keyword">new</span> Product();</span><br><span class="line">            product.Name = <span class="string">&quot;Toy Car&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> product;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Pizza</span><br><span class="line">Toy Car</span><br></pre></td></tr></table></figure><p>上述代码相当于将函数作为参数传递其他函数进行调用，通过改变外面的委托，从而实现不同的调用。</p><h3 id="回调方法"><a href="#回调方法" class="headerlink" title="回调方法"></a>回调方法</h3><p>回调（<code>callback</code>）方法调用指定的外部方法，相当于“流水线”，常位于代码末尾，且委托无返回值。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            ProductFactory productFactory = <span class="keyword">new</span> ProductFactory();</span><br><span class="line">            WrapFactory wrapFactory = <span class="keyword">new</span> WrapFactory();</span><br><span class="line"></span><br><span class="line">            Func&lt;Product&gt; func1 = <span class="keyword">new</span> Func&lt;Product&gt;(productFactory.MakePizza);</span><br><span class="line">            Func&lt;Product&gt; func2 = <span class="keyword">new</span> Func&lt;Product&gt;(productFactory.MakeToyCar);</span><br><span class="line"></span><br><span class="line">            Logger logger = <span class="keyword">new</span> Logger();</span><br><span class="line">            Action&lt;Product&gt; log = <span class="keyword">new</span> Action&lt;Product&gt;(logger.Log);</span><br><span class="line"></span><br><span class="line">            Box box1 = wrapFactory.WrapProduct(func1, log);</span><br><span class="line">            Box box2 = wrapFactory.WrapProduct(func2, log);</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(box1.Product.Name);</span><br><span class="line">            Console.WriteLine(box2.Product.Name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Logger</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Log</span>(<span class="params">Product product</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Product &#x27;&#123;0&#125;&#x27; created at&#123;1&#125;. Price is &#123;2&#125;.&quot;</span>, product.Name, DateTime.UtcNow, product.Price);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Product</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">double</span> Price &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Box</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> Product Product &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">WrapFactory</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Box <span class="title">WrapProduct</span>(<span class="params">Func&lt;Product&gt; getProduct, Action&lt;Product&gt; logCallback</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Box box = <span class="keyword">new</span> Box();</span><br><span class="line">            Product product = getProduct.Invoke();</span><br><span class="line">            <span class="keyword">if</span> (product.Price &gt; <span class="number">50</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                logCallback(product);</span><br><span class="line">            &#125;</span><br><span class="line">            box.Product = product;</span><br><span class="line">            <span class="keyword">return</span> box;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">ProductFactory</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Product <span class="title">MakePizza</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Product product = <span class="keyword">new</span> Product();</span><br><span class="line">            product.Name = <span class="string">&quot;Pizza&quot;</span>;</span><br><span class="line">            product.Price = <span class="number">12</span>;</span><br><span class="line">            <span class="keyword">return</span> product;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Product <span class="title">MakeToyCar</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Product product = <span class="keyword">new</span> Product();</span><br><span class="line">            product.Name = <span class="string">&quot;Toy Car&quot;</span>;</span><br><span class="line">            product.Price = <span class="number">100</span>;</span><br><span class="line">            <span class="keyword">return</span> product;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Product &#x27;Toy Car&#x27; created at2024/2/1 10:56:49. Price is 100.</span><br><span class="line">Pizza</span><br><span class="line">Toy Car</span><br></pre></td></tr></table></figure><p>上述代码相当于写了一个日志，当产品的价格大于$50$时才会触发调用。</p><h2 id="委托注意事项"><a href="#委托注意事项" class="headerlink" title="委托注意事项"></a>委托注意事项</h2><p>委托是一种易使用，难精通且功能强大的东西，一旦被滥用会造成很严重的后果。</p><p>缺点：</p><ol><li>这是一种方法级别的紧耦合，现实工作中要慎之又慎。</li><li>使可读性下降、<code>debug</code>的难度增加。</li><li>把委托回调、异步调用和多线程纠缠在一起，会让代码变得难以阅读和维护。</li><li>委托使用不当有可能造成内存泄漏和程序性能下降。</li></ol><h2 id="委托的高级使用"><a href="#委托的高级使用" class="headerlink" title="委托的高级使用"></a>委托的高级使用</h2><h3 id="多播委托"><a href="#多播委托" class="headerlink" title="多播委托"></a>多播委托</h3><p>多播（<code>multicast</code>）委托指的是用一个委托封装多个方法，且多播委托的执行顺序是按照封装的顺序执行的。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Work work = <span class="keyword">new</span> Work();</span><br><span class="line">            Action action1 = <span class="keyword">new</span> Action(work.DoHomework);</span><br><span class="line">            Action action2 = <span class="keyword">new</span> Action(work.HaveDinner);</span><br><span class="line">            Action action3 = <span class="keyword">new</span> Action(work.Sleep);</span><br><span class="line"></span><br><span class="line">            action1.Invoke();</span><br><span class="line">            action2.Invoke();</span><br><span class="line">            action3.Invoke();</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;__________________&quot;</span>);</span><br><span class="line"></span><br><span class="line">            Action action = action2 + action1 + action3;</span><br><span class="line"></span><br><span class="line">            action.Invoke();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Work</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DoHomework</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;正在做作业……&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">HaveDinner</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;正在吃晚饭……&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Sleep</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;正在睡觉……&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">正在做作业……</span><br><span class="line">正在吃晚饭……</span><br><span class="line">正在睡觉……</span><br><span class="line">__________________</span><br><span class="line">正在吃晚饭……</span><br><span class="line">正在做作业……</span><br><span class="line">正在睡觉……</span><br></pre></td></tr></table></figure><p>可以像上述代码一样，将多个委托放在一起，封装成一个新的委托，这种委托被称为多播委托。</p><h3 id="隐式异步调用"><a href="#隐式异步调用" class="headerlink" title="隐式异步调用"></a>隐式异步调用</h3><p>先来介绍一下同步和异步的概念，同步指的是两件事情先做完第一件再做第二件，异步指的是两个事情同时做。</p><p>每一个运行的程序都是一个进程（<code>process</code>），每个进程可以有一个或者多个线程（<code>thread</code>），同步调用是在同一线程内，异步调用的底层机理是多线程。</p><p>串行、同步、单线程是同一意思。</p><p>并行、异步、多线程是同一意思。</p><p>对于同步调用而言，其代码和运行结果如下所示：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Student student1 = <span class="keyword">new</span> Student() &#123; Name = <span class="string">&quot;甲&quot;</span> &#125;;</span><br><span class="line">            Student student2 = <span class="keyword">new</span> Student() &#123; Name = <span class="string">&quot;乙&quot;</span> &#125;;</span><br><span class="line">            Student student3 = <span class="keyword">new</span> Student() &#123; Name = <span class="string">&quot;丙&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">            Action action1 = <span class="keyword">new</span> Action(student1.Work);</span><br><span class="line">            Action action2 = <span class="keyword">new</span> Action(student2.Work);</span><br><span class="line">            Action action3 = <span class="keyword">new</span> Action(student3.Work);</span><br><span class="line"></span><br><span class="line">            action1.Invoke();</span><br><span class="line">            action2.Invoke();</span><br><span class="line">            action3.Invoke();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Work</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.DoHomework();</span><br><span class="line">            <span class="keyword">this</span>.HaveDinner();</span><br><span class="line">            <span class="keyword">this</span>.Sleep();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DoHomework</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="keyword">this</span>.Name + <span class="string">&quot;正在做作业……&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">HaveDinner</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="keyword">this</span>.Name + <span class="string">&quot;正在吃晚饭……&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Sleep</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="keyword">this</span>.Name + <span class="string">&quot;正在睡觉……&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">甲正在做作业……</span><br><span class="line">甲正在吃晚饭……</span><br><span class="line">甲正在睡觉……</span><br><span class="line">乙正在做作业……</span><br><span class="line">乙正在吃晚饭……</span><br><span class="line">乙正在睡觉……</span><br><span class="line">丙正在做作业……</span><br><span class="line">丙正在吃晚饭……</span><br><span class="line">丙正在睡觉……</span><br></pre></td></tr></table></figure><p>同步调用是按照甲乙丙的顺序依次进行调用的。</p><p>对于异步调用而言，其代码和运行结果如下所示：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Student student1 = <span class="keyword">new</span> Student() &#123; Name = <span class="string">&quot;甲&quot;</span> &#125;;</span><br><span class="line">            Student student2 = <span class="keyword">new</span> Student() &#123; Name = <span class="string">&quot;乙&quot;</span> &#125;;</span><br><span class="line">            Student student3 = <span class="keyword">new</span> Student() &#123; Name = <span class="string">&quot;丙&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">            Action action1 = <span class="keyword">new</span> Action(student1.Work);</span><br><span class="line">            Action action2 = <span class="keyword">new</span> Action(student2.Work);</span><br><span class="line">            Action action3 = <span class="keyword">new</span> Action(student3.Work);</span><br><span class="line"></span><br><span class="line">            action1.BeginInvoke(<span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">            action2.BeginInvoke(<span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">            action3.BeginInvoke(<span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Work</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.DoHomework();</span><br><span class="line">            <span class="keyword">this</span>.HaveDinner();</span><br><span class="line">            <span class="keyword">this</span>.Sleep();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DoHomework</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="keyword">this</span>.Name + <span class="string">&quot;正在做作业……&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">HaveDinner</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="keyword">this</span>.Name + <span class="string">&quot;正在吃晚饭……&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Sleep</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="keyword">this</span>.Name + <span class="string">&quot;正在睡觉……&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">甲正在做作业……</span><br><span class="line">丙正在做作业……</span><br><span class="line">甲正在吃晚饭……</span><br><span class="line">丙正在吃晚饭……</span><br><span class="line">丙正在睡觉……</span><br><span class="line">乙正在做作业……</span><br><span class="line">乙正在吃晚饭……</span><br><span class="line">乙正在睡觉……</span><br><span class="line">甲正在睡觉……</span><br></pre></td></tr></table></figure><p>可以发现，异步调用是三个不同的线程分别进行运算，这也会导致他们访问资源时可能会发生冲突，并且运行顺序也是不一定的。</p><h3 id="显式异步调用"><a href="#显式异步调用" class="headerlink" title="显式异步调用"></a>显式异步调用</h3><p>上述是使用委托进行隐式异步调用，当然，我们可以自己声明线程来进行显示异步调用。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Student student1 = <span class="keyword">new</span> Student() &#123; Name = <span class="string">&quot;甲&quot;</span> &#125;;</span><br><span class="line">            Student student2 = <span class="keyword">new</span> Student() &#123; Name = <span class="string">&quot;乙&quot;</span> &#125;;</span><br><span class="line">            Student student3 = <span class="keyword">new</span> Student() &#123; Name = <span class="string">&quot;丙&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">            Thread thread1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadStart(student1.Work));</span><br><span class="line">            Thread thread2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadStart(student2.Work));</span><br><span class="line">            Thread thread3 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadStart(student3.Work));</span><br><span class="line"></span><br><span class="line">            thread1.Start();</span><br><span class="line">            thread2.Start();</span><br><span class="line">            thread3.Start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Work</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.DoHomework();</span><br><span class="line">            <span class="keyword">this</span>.HaveDinner();</span><br><span class="line">            <span class="keyword">this</span>.Sleep();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DoHomework</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="keyword">this</span>.Name + <span class="string">&quot;正在做作业……&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">HaveDinner</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="keyword">this</span>.Name + <span class="string">&quot;正在吃晚饭……&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Sleep</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="keyword">this</span>.Name + <span class="string">&quot;正在睡觉……&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">甲正在做作业……</span><br><span class="line">乙正在做作业……</span><br><span class="line">乙正在吃晚饭……</span><br><span class="line">甲正在吃晚饭……</span><br><span class="line">乙正在睡觉……</span><br><span class="line">丙正在做作业……</span><br><span class="line">丙正在吃晚饭……</span><br><span class="line">丙正在睡觉……</span><br><span class="line">甲正在睡觉……</span><br></pre></td></tr></table></figure><p>也可以使用<code>task</code>进行异步调用：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Student student1 = <span class="keyword">new</span> Student() &#123; Name = <span class="string">&quot;甲&quot;</span> &#125;;</span><br><span class="line">            Student student2 = <span class="keyword">new</span> Student() &#123; Name = <span class="string">&quot;乙&quot;</span> &#125;;</span><br><span class="line">            Student student3 = <span class="keyword">new</span> Student() &#123; Name = <span class="string">&quot;丙&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">            Task task1 = <span class="keyword">new</span> Task(<span class="keyword">new</span> Action(student1.Work));</span><br><span class="line">            Task task2 = <span class="keyword">new</span> Task(<span class="keyword">new</span> Action(student2.Work));</span><br><span class="line">            Task task3 = <span class="keyword">new</span> Task(<span class="keyword">new</span> Action(student3.Work));</span><br><span class="line"></span><br><span class="line">            task1.Start();</span><br><span class="line">            task2.Start();</span><br><span class="line">            task3.Start();</span><br><span class="line"></span><br><span class="line">            Thread.Sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Work</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.DoHomework();</span><br><span class="line">            <span class="keyword">this</span>.HaveDinner();</span><br><span class="line">            <span class="keyword">this</span>.Sleep();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DoHomework</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="keyword">this</span>.Name + <span class="string">&quot;正在做作业……&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">HaveDinner</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="keyword">this</span>.Name + <span class="string">&quot;正在吃晚饭……&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Sleep</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="keyword">this</span>.Name + <span class="string">&quot;正在睡觉……&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">甲正在做作业……</span><br><span class="line">丙正在做作业……</span><br><span class="line">丙正在吃晚饭……</span><br><span class="line">甲正在吃晚饭……</span><br><span class="line">丙正在睡觉……</span><br><span class="line">乙正在做作业……</span><br><span class="line">乙正在吃晚饭……</span><br><span class="line">乙正在睡觉……</span><br><span class="line">甲正在睡觉……</span><br></pre></td></tr></table></figure><h1 id="事件-1"><a href="#事件-1" class="headerlink" title="事件"></a>事件</h1><h2 id="基本概念-5"><a href="#基本概念-5" class="headerlink" title="基本概念"></a>基本概念</h2><p>事件（<code>Event</code>）简单来说就是能够发生的什么事情，是一种使对象或类具备通知能力的成员。</p><p>事件的功能就是通知加上可选的事件参数（即详细信息）。</p><p>事件和接收事件带来通知的对象就构成了事件模型（<code>event model</code>）。</p><p>“发生到响应”有五个部分，例如“闹铃响了你起床”，“闹铃”是发生事件的对象，“响了”是事件动作，“我”是响应事件的对象，“起床”是响应事件所做的动作，这其中还包含着一个隐含着的“订阅”关系，即我订阅了“闹铃响了”这个事件。</p><p>同时还有五个动作，分别是：</p><ol><li>我有一个事件。</li><li>一个人或者一群人关心我的这个事件。</li><li>我的这个事件发生了。</li><li>关心这个事件的人会被依次通知到。</li><li>被通知到的人根据拿到的事件信息（又称“事件数据”、“事件参数”、“通知”）对事件进行响应（又称“处理事件”）。</li></ol><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>在基本概念中，我们了解到，事件的模型一共有五个组成部分：</p><ol><li>事件的拥有者（<code>event source</code>，对象）。</li><li>事件的成员（<code>event</code>，成员）。</li><li>事件的响应者（<code>event subscriber</code>，对象）。</li><li>事件处理器（<code>event handler</code>，成员）——本质上是一个回调方法。</li><li>事件订阅——把时间处理器与事件关联在一起，本质上是一种以委托类型为基础的”约定“。</li></ol><p>事件不会主动发生，一定是被拥有者的某些逻辑触发之后才能够发生，才能够发挥通知的作用。</p><p>注意：</p><ul><li>事件处理器是方法成员。</li><li>挂接事件处理器的时候，可以使用委托实例，也可以直接使用方法名，这是一个“语法糖”。</li><li>事件处理器对事件的订阅不是随意的，匹配与否由声明事件时所使用的委托类型来检测。</li><li>事件可以同步调用也可以异步调用。</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Timers;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Timer timer = <span class="keyword">new</span> Timer();</span><br><span class="line">            timer.Interval = <span class="number">1000</span>;  <span class="comment">//设置时间间隔为1秒</span></span><br><span class="line">            Boy boy = <span class="keyword">new</span> Boy();</span><br><span class="line">            timer.Elapsed += boy.Action;  <span class="comment">//让boy订阅timer中的Elapsed事件</span></span><br><span class="line">            Girl girl = <span class="keyword">new</span> Girl();</span><br><span class="line">            timer.Elapsed += girl.Action;</span><br><span class="line">            timer.Start();</span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Boy</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">internal</span> <span class="keyword">void</span> <span class="title">Action</span>(<span class="params"><span class="built_in">object</span> sender, ElapsedEventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Jump!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Girl</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">internal</span> <span class="keyword">void</span> <span class="title">Action</span>(<span class="params"><span class="built_in">object</span> sender, ElapsedEventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Sing!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Jump!</span><br><span class="line">Sing!</span><br><span class="line">Jump!</span><br><span class="line">Sing!</span><br><span class="line">Jump!</span><br><span class="line">Sing!</span><br><span class="line">……</span><br></pre></td></tr></table></figure><p>上述这段代码是一个简单的小例子，事件的拥有者是<code>Timer</code>实例化出来的<code>timer</code>，每隔一秒钟都会触发一次事件。同时有两个类，分别订阅了该事件，当事件发生时，会执行相关的操作。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Form form = <span class="keyword">new</span> Form();</span><br><span class="line">            Controller controller = <span class="keyword">new</span> Controller(form);</span><br><span class="line">            form.ShowDialog();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Controller</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> Form form;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Controller</span>(<span class="params">Form form</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (form != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>.form = form;</span><br><span class="line">                <span class="keyword">this</span>.form.Click += <span class="keyword">this</span>.FormClicked;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">FormClicked</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.form.Text = DateTime.Now.ToString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="/img/posts/C_sharp/%E4%BA%8B%E4%BB%B6%E7%AA%97%E4%BD%93.jpg" alt="事件窗体"></p><p>这个例子中，创建了一个类，用于存放<code>Form</code>，并为其增加了一个订阅，每当点击一下窗体，都会将标题文本更新为当前的时间。</p><p>和第一个例子相比，事件处理器中的参数不一样。也就是说，不能拿影响<code>Elapsed</code>事件的事件处理器去相应<code>Click</code>事件，因为遵循的约束不同，所以他们是不通用的。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            MyForm form = <span class="keyword">new</span> MyForm();</span><br><span class="line">            form.Click += form.FormClicked;</span><br><span class="line">            form.ShowDialog();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">MyForm</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">internal</span> <span class="keyword">void</span> <span class="title">FormClicked</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.Text = DateTime.Now.ToString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="/img/posts/C_sharp/%E4%BA%8B%E4%BB%B6%E7%AA%97%E4%BD%93.jpg" alt="事件窗体"></p><p>这个例子和上一个例子的效果是一样的，该例子事件的拥有者同时也是事件的响应者，通过派生了一个类，也就是继承了原本的<code>Form</code>类来实现的。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            MyForm myForm = <span class="keyword">new</span> MyForm();</span><br><span class="line">            myForm.ShowDialog();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">MyForm</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> TextBox textBox;</span><br><span class="line">        <span class="keyword">private</span> Button button;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyForm</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.textBox = <span class="keyword">new</span> TextBox();</span><br><span class="line">            <span class="keyword">this</span>.button = <span class="keyword">new</span> Button();</span><br><span class="line">            <span class="keyword">this</span>.Controls.Add(<span class="keyword">this</span>.button);</span><br><span class="line">            <span class="keyword">this</span>.Controls.Add(<span class="keyword">this</span>.textBox);</span><br><span class="line">            <span class="keyword">this</span>.button.Click += <span class="keyword">this</span>.ButtonClicked;</span><br><span class="line">            <span class="keyword">this</span>.button.Text = <span class="string">&quot;Click Me!&quot;</span>;</span><br><span class="line">            <span class="keyword">this</span>.button.Top = <span class="number">100</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ButtonClicked</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.textBox.Text = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="/img/posts/C_sharp/%E4%BA%8B%E4%BB%B6%E7%82%B9%E5%87%BB%E7%AA%97%E4%BD%93.jpg" alt="事件点击窗体"></p><p>这段代码中，事件的拥有者是时间的响应者中的一个成员，然后该类实例化的对象又订阅了其成员的事件。</p><h2 id="声明-2"><a href="#声明-2" class="headerlink" title="声明"></a>声明</h2><h3 id="完整声明"><a href="#完整声明" class="headerlink" title="完整声明"></a>完整声明</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">            Waiter waiter = <span class="keyword">new</span> Waiter();</span><br><span class="line">            customer.Order += waiter.Action;</span><br><span class="line">            customer.Action();</span><br><span class="line">            customer.PayTheBill();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//传递事件信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OrderEventArgs</span> : <span class="title">EventArgs</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> DishName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Size &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明事件</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">OrderEventHandler</span>(<span class="params">Customer customer, OrderEventArgs e</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Customer</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> OrderEventHandler orderEventHandler;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">event</span> OrderEventHandler Order</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">add</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>.orderEventHandler += <span class="keyword">value</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">remove</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>.orderEventHandler -= <span class="keyword">value</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">double</span> Bill &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PayTheBill</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;I will pay $&#123;0&#125;.&quot;</span>, <span class="keyword">this</span>.Bill);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">WalkIn</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Walk into the restaurant.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SitDown</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Sit down.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Think</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Let me think ...&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.orderEventHandler != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                OrderEventArgs e = <span class="keyword">new</span> OrderEventArgs();</span><br><span class="line">                e.DishName = <span class="string">&quot;可乐鸡翅&quot;</span>;</span><br><span class="line">                e.Size = <span class="string">&quot;large&quot;</span>;</span><br><span class="line">                <span class="keyword">this</span>.orderEventHandler.Invoke(<span class="keyword">this</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Action</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.WalkIn();</span><br><span class="line">            <span class="keyword">this</span>.SitDown();</span><br><span class="line">            <span class="keyword">this</span>.Think();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Waiter</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">internal</span> <span class="keyword">void</span> <span class="title">Action</span>(<span class="params">Customer customer, OrderEventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;I will serve you the dish - &#123;0&#125;.&quot;</span>, e.DishName);</span><br><span class="line">            <span class="built_in">double</span> price = <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">switch</span> (e.Size)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;small&quot;</span>:</span><br><span class="line">                    price = <span class="number">5</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;large&quot;</span>:</span><br><span class="line">                    price = <span class="number">15</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            customer.Bill += price;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Walk into the restaurant.</span><br><span class="line">Sit down.</span><br><span class="line">Let me think ...</span><br><span class="line">I will serve you the dish - 可乐鸡翅.</span><br><span class="line">I will pay $15.</span><br></pre></td></tr></table></figure><p>上述代码实现了一个顾客点单功能，顾客有一些基础的功能，同时也是事件的拥有者。服务员可以订阅顾客，有一个传递信息的信息的类是<code>OrderEventArgs</code>，里面存储了相应的参数，并且全都派生自<code>EventArgs</code>类。</p><h3 id="简略声明"><a href="#简略声明" class="headerlink" title="简略声明"></a>简略声明</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">            Waiter waiter = <span class="keyword">new</span> Waiter();</span><br><span class="line">            customer.Order += waiter.Action;</span><br><span class="line">            customer.Action();</span><br><span class="line">            customer.PayTheBill();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//传递事件信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OrderEventArgs</span> : <span class="title">EventArgs</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> DishName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Size &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明事件</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">OrderEventHandler</span>(<span class="params">Customer customer, OrderEventArgs e</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Customer</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">event</span> OrderEventHandler Order;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">double</span> Bill &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PayTheBill</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;I will pay $&#123;0&#125;.&quot;</span>, <span class="keyword">this</span>.Bill);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">WalkIn</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Walk into the restaurant.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SitDown</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Sit down.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Think</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Let me think ...&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.Order != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                OrderEventArgs e = <span class="keyword">new</span> OrderEventArgs();</span><br><span class="line">                e.DishName = <span class="string">&quot;可乐鸡翅&quot;</span>;</span><br><span class="line">                e.Size = <span class="string">&quot;large&quot;</span>;</span><br><span class="line">                <span class="keyword">this</span>.Order.Invoke(<span class="keyword">this</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Action</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.WalkIn();</span><br><span class="line">            <span class="keyword">this</span>.SitDown();</span><br><span class="line">            <span class="keyword">this</span>.Think();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Waiter</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">internal</span> <span class="keyword">void</span> <span class="title">Action</span>(<span class="params">Customer customer, OrderEventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;I will serve you the dish - &#123;0&#125;.&quot;</span>, e.DishName);</span><br><span class="line">            <span class="built_in">double</span> price = <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">switch</span> (e.Size)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;small&quot;</span>:</span><br><span class="line">                    price = <span class="number">5</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;large&quot;</span>:</span><br><span class="line">                    price = <span class="number">15</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            customer.Bill += price;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Walk into the restaurant.</span><br><span class="line">Sit down.</span><br><span class="line">Let me think ...</span><br><span class="line">I will serve you the dish - 可乐鸡翅.</span><br><span class="line">I will pay $15.</span><br></pre></td></tr></table></figure><p>这两段代码实现的东西是一样的，区别在于这段代码相对来说简写了事件声明的部分。</p><h2 id="命名约定"><a href="#命名约定" class="headerlink" title="命名约定"></a>命名约定</h2><p>用于声明事件的委托，一般命名为<code>FooEventHandler</code>（除非是一个非常通用的事件约束）。</p><p><code>FooEventHandler</code>委托的参数一般有两个:</p><ul><li>第一个是<code>object</code>类型，名字为<code>sender</code>，实际上就是事件的拥有者，事件的<code>source</code>。</li><li>第二个是<code>EventArgs</code>类的派生类，类名一般为<code>FooEventArgs</code>，参数名为<code>e</code>。也就是前面讲过的事件参数。</li><li>虽然没有官方的说法，但我们可以把委托的参数列表看做是事件发生后发送给事件响应者的“事件消息”。</li></ul><p>触发<code>Foo</code>事件的方法一般命名为<code>OnFoo</code>，即“因何引发”、“事出有因”。访问级别为<code>protected</code>，不能为<code>public</code>，不然可能会被别的对象调用。</p><h1 id="类-1"><a href="#类-1" class="headerlink" title="类"></a>类</h1><h2 id="基本概念-6"><a href="#基本概念-6" class="headerlink" title="基本概念"></a>基本概念</h2><p>类是一种数据结构（<code>data structure</code>），同时也是一种数据类型，代表现实世界中的“种类”。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Student student = <span class="keyword">new</span> Student();</span><br><span class="line">            student.ID = <span class="number">1</span>;</span><br><span class="line">            student.Name = <span class="string">&quot;Bigglesworth&quot;</span>;</span><br><span class="line">            student.Report();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> ID &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Report</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;I&#x27;m #<span class="subst">&#123;<span class="keyword">this</span>.ID&#125;</span> student, my name is <span class="subst">&#123;<span class="keyword">this</span>.Name&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ~Student()</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Bye bye! Release the system resources ...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">I&#x27;m #1 student, my name is Bigglesworth</span><br><span class="line">Bye bye! Release the system resources ...</span><br></pre></td></tr></table></figure><h2 id="类声明的位置"><a href="#类声明的位置" class="headerlink" title="类声明的位置"></a>类声明的位置</h2><p>在<code>C#</code>中，类声明的位置一般有三个地方，分别是命名空间里、类中、命名空间外。</p><p>其中，声明在命名空间外是全局类，基本上不会使用。如果声明在类中，那么新声明的这个类就是其子类。</p><h2 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h2><p>一个类可以继承另一个类，被继承的类称为父类，继承的类称为子类。</p><p>所有的类都默认继承<code>Object</code>类。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Type type1 = <span class="keyword">typeof</span>(Bus);</span><br><span class="line">            Type type2 = type1.BaseType;</span><br><span class="line">            Type type3 = type2.BaseType;</span><br><span class="line">            Console.WriteLine(type1.FullName);</span><br><span class="line">            Console.WriteLine(type2.FullName);</span><br><span class="line">            Console.WriteLine(type3.FullName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Vehicle</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Bus</span> : <span class="title">Vehicle</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ConsoleApp.Bus</span><br><span class="line">ConsoleApp.Vehicle</span><br><span class="line">System.Object</span><br></pre></td></tr></table></figure><p>一个子类的实例同样也是其父类的实例，但是父类的实例并不是子类的实例。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Vehicle vehicle = <span class="keyword">new</span> Vehicle();</span><br><span class="line">            Console.WriteLine(vehicle <span class="keyword">is</span> Bus);</span><br><span class="line">            Bus bus = <span class="keyword">new</span> Bus();</span><br><span class="line">            Console.WriteLine(bus <span class="keyword">is</span> Vehicle);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Vehicle</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Bus</span> : <span class="title">Vehicle</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">False</span><br><span class="line">True</span><br></pre></td></tr></table></figure><p>根据这个特性，可以使用一个父类的变量引用一个子类类型的实例。</p><p>如果一个类被<code>sealed</code>关键字修饰，那么这个类就变成了一个封闭类，那么这个类就不能作为基类被继承。</p><p>一个类只能有一个基类，不能同时继承多个基类。</p><p>子类的访问级别不能超过基类的访问级别，可以与父类的访问级别同级或者比他低。</p><h1 id="重写与多态"><a href="#重写与多态" class="headerlink" title="重写与多态"></a>重写与多态</h1><p><code>C#</code>中的这部分内容与<code>C++</code>类似，使用<code>virtual</code>关键字将要重写的方法转换为虚函数，在其子类中使用<code>Override</code>重写父类的虚函数，这种方法可以正确调用相应类中的方法。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Vehicle vehicle = <span class="keyword">new</span> Vehicle();</span><br><span class="line">            Vehicle car = <span class="keyword">new</span> Car();</span><br><span class="line">            vehicle.Run();</span><br><span class="line">            car.Run();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Vehicle</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Run</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;I&#x27;m running!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Car</span> : <span class="title">Vehicle</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Run</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Car is running!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">I&#x27;m running!</span><br><span class="line">Car is running!</span><br></pre></td></tr></table></figure><h1 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h1><p>抽象类与<code>C++</code>中的纯虚函数非常类似。首先需要明确一下抽象方法，抽象方法指的是没有写其内部逻辑，由子类去完成相应的功能。拥有抽象方法的类就被称为抽象类，抽象类使用<code>abstract</code>关键字声明，内部的抽象方法也需要使用该关键字，在进行重写时需要使用<code>override</code>关键字来声明。</p><p>抽象类不能够实例化对象，但是可以引用其子类。抽象类中的方法可以通过多态来实现，内部可以存在具体的实现了的方法。</p><p>如果一个类中全都是抽象方法，那么这个类可以写成接口，使用<code>interface</code>来修饰，其内部成员全部默认为<code>public</code>且只有函数成员。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Vehicle vehicle = <span class="keyword">new</span> Car();</span><br><span class="line">            vehicle.Run();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">interface</span> <span class="title">IVehicle</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Stop</span>()</span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Run</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Vehicle</span> : <span class="title">IVehicle</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Run</span>()</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Stop</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Stopped!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Car</span> : <span class="title">Vehicle</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Run</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Car is running...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Truck</span> : <span class="title">Vehicle</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Run</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Truck is running...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Car is running...</span><br></pre></td></tr></table></figure><p>接口和抽象类都是“软件工程的产物”。</p><p>具体类<code>-&gt;</code>抽象类<code>-&gt;</code>接口：越来越抽象，内部实现的东西越来越少。</p><p>抽象类是未完全实现逻辑的类（可以有字段和非<code>public</code>成员，它们代表了“具体逻辑”）。</p><p>抽象类为复用而生：专门作为基类来使用，也具有解耦功能。</p><p>封装确定的，开放不确定的，推迟到合适的子类中去实现。</p><p>接口是完全为实现逻辑的“类”（“纯虚类”；只有函数成员；成员全部<code>public</code>）。</p><p>接口为解耦而生：“高内聚，低耦合”，方便单元测试。</p><p>接口是一个“协约”，早已为工业生产所熟知（有分工必有协作，有协作必有协约）</p><p>它们都不能实例化，只能用来声明变量、引用具体类（<code>concrete class</code>）的实例。</p><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><p>使用接口实现一个手机的例子，手机持有基础的几个功能。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> user1 = <span class="keyword">new</span> PhoneUser(<span class="keyword">new</span> NokiaPhone());</span><br><span class="line">            user1.UsePhone();</span><br><span class="line">            Console.WriteLine();</span><br><span class="line">            <span class="keyword">var</span> user2 = <span class="keyword">new</span> PhoneUser(<span class="keyword">new</span> EricssonPhone());</span><br><span class="line">            user2.UsePhone();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">PhoneUser</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> IPhone _phone;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">PhoneUser</span>(<span class="params">IPhone phone</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _phone = phone;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">UsePhone</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            _phone.Dail();</span><br><span class="line">            _phone.PickUp();</span><br><span class="line">            _phone.Send();</span><br><span class="line">            _phone.Receive();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">interface</span> <span class="title">IPhone</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Dail</span>()</span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">PickUp</span>()</span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Send</span>()</span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Receive</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">NokiaPhone</span> : <span class="title">IPhone</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Dail</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Nokia calling ...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PickUp</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Hello! This is Bigglesworth!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Receive</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Nokia message ring ...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Send</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Hello!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">EricssonPhone</span> : <span class="title">IPhone</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Dail</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Ericsson calling ...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PickUp</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Hello! This is Bigglesworth!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Receive</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Ericsson message ring ...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Send</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Good morning!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Nokia calling ...</span><br><span class="line">Hello! This is Bigglesworth!</span><br><span class="line">Hello!</span><br><span class="line">Nokia message ring ...</span><br><span class="line"></span><br><span class="line">Ericsson calling ...</span><br><span class="line">Hello! This is Bigglesworth!</span><br><span class="line">Good morning!</span><br><span class="line">Ericsson message ring ...</span><br></pre></td></tr></table></figure><p>接口之间也可以进行继承，且一个接口可以继承多个接口，例如下面这个例子：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Driver driver1 = <span class="keyword">new</span> Driver(<span class="keyword">new</span> Car());</span><br><span class="line">            driver1.Drive();</span><br><span class="line">            Driver driver2 = <span class="keyword">new</span> Driver(<span class="keyword">new</span> Tank());</span><br><span class="line">            driver2.Drive();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Driver</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> IVehicle _vehicle;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Driver</span>(<span class="params">IVehicle vehicle</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _vehicle = vehicle;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Drive</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            _vehicle.Run();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">interface</span> <span class="title">IVehicle</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Run</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Car</span> : <span class="title">IVehicle</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Run</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Car is running ...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Truck</span> : <span class="title">IVehicle</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Run</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Truck is running ...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">interface</span> <span class="title">IWeapon</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Fire</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">interface</span> <span class="title">ITank</span> : <span class="title">IVehicle</span>, <span class="title">IWeapon</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Tank</span> : <span class="title">ITank</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Fire</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Boom!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Run</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Tank is running ...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Car is running ...</span><br><span class="line">Tank is running ...</span><br></pre></td></tr></table></figure><p>可以隔离某些方法，使其只有在被特定类型引用时才可以调用。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> wk = <span class="keyword">new</span> WarmKiller();</span><br><span class="line">            wk.Love();</span><br><span class="line">            IKiller killer = wk;</span><br><span class="line">            killer.Kill();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">interface</span> <span class="title">IGentleman</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Love</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">interface</span> <span class="title">IKiller</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Kill</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">WarmKiller</span> : <span class="title">IGentleman</span>, <span class="title">IKiller</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Love</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;I will Love you for ever ...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">void</span> IKiller.Kill()  <span class="comment">//只有被IKiller类型引用时才能使用该方法</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Let me kill the enemy ...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">I will Love you for ever ...</span><br><span class="line">Let me kill the enemy ...</span><br></pre></td></tr></table></figure><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><h2 id="基本概念-7"><a href="#基本概念-7" class="headerlink" title="基本概念"></a>基本概念</h2><p>泛型（<code>generic</code>）无处不在，为了避免成员膨胀或者类型膨胀，因此有了泛型这一概念。</p><p>举一个例子，现在有一个商店，卖书和苹果两种货物，需要对书和苹果各构造一个类，二者又各自需要一个对应的箱子类，这就造成了类型膨胀，每一个物品都需要有一个类与其对应，会造成很大的麻烦。</p><p>如果把所有的盒子作为属性写在同一个<code>Box</code>类中，又会导致每一组商品和盒子只会使用<code>Box</code>中的一个属性，这就造成了成员膨胀。</p><p>为了解决这一问题，我们可以使用泛型类，其具体方法如下所示：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Apple apple = <span class="keyword">new</span> Apple() &#123; Color = <span class="string">&quot;Red&quot;</span> &#125;;</span><br><span class="line">            Book book = <span class="keyword">new</span> Book() &#123; Name = <span class="string">&quot;New Book&quot;</span> &#125;;</span><br><span class="line">            Box&lt;Apple&gt; box1 = <span class="keyword">new</span> Box&lt;Apple&gt;() &#123; Cargo = apple &#125;;</span><br><span class="line">            Console.WriteLine(box1.Cargo.Color);</span><br><span class="line">            Box&lt;Book&gt; box2 = <span class="keyword">new</span> Box&lt;Book&gt;() &#123; Cargo = book &#125;;</span><br><span class="line">            Console.WriteLine(box2.Cargo.Name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Apple</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Color &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Book</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Box</span>&lt;<span class="title">TCargo</span>&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> TCargo Cargo &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Red</span><br><span class="line">New Book</span><br></pre></td></tr></table></figure><p>在这个例子中使用了泛型类，$29$行用一组尖括号将泛型框了起来，在类中可以直接把它作为一种数据类型来使用。</p><h2 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h2><p>下面介绍一下泛型接口，泛型接口非常常用，如果一个类实现的是泛型接口，那么这个类也是泛型类。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Student1&lt;<span class="built_in">long</span>&gt; student1 = <span class="keyword">new</span> Student1&lt;<span class="built_in">long</span>&gt;();</span><br><span class="line">            student1.Id = <span class="number">1</span>;</span><br><span class="line">            student1.Name = <span class="string">&quot;Bigglesworth&quot;</span>;</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;Id:<span class="subst">&#123;student1.Id&#125;</span> Name:<span class="subst">&#123;student1.Name&#125;</span> Id Type:<span class="subst">&#123;student1.Id.GetType().Name&#125;</span>&quot;</span>);</span><br><span class="line">            Student2 student2 = <span class="keyword">new</span> Student2();</span><br><span class="line">            student2.Id = <span class="number">2</span>;</span><br><span class="line">            student2.Name = <span class="string">&quot;Areskey&quot;</span>;</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;Id:<span class="subst">&#123;student2.Id&#125;</span> Name:<span class="subst">&#123;student2.Name&#125;</span> Id Type:<span class="subst">&#123;student2.Id.GetType().Name&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">interface</span> <span class="title">IUnique</span>&lt;<span class="title">TId</span>&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        TId Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Student1</span>&lt;<span class="title">TId</span>&gt; : <span class="title">IUnique</span>&lt;<span class="title">TId</span>&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> TId Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Student2</span> : <span class="title">IUnique</span>&lt;<span class="title">ulong</span>&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">ulong</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Id:1 Name:Bigglesworth Id Type:Int64</span><br><span class="line">Id:2 Name:Areskey Id Type:UInt64</span><br></pre></td></tr></table></figure><p>在上述例子中，有一个泛型接口，两个类。第一个类是一个泛型类，因为没有指定<code>TId</code>的类型，在第二个类中，就不需要将其声明为泛型类了，因为直接指定了<code>TId</code>为<code>ulong</code>类型。</p><h2 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h2><p>不仅可以在类中使用泛型，在方法中也可以使用泛型来简化代码。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span>[] a1 = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line">            <span class="built_in">int</span>[] a2 = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span> &#125;;</span><br><span class="line">            <span class="built_in">double</span>[] a3 = &#123; <span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>, <span class="number">4.4</span>, <span class="number">5.5</span> &#125;;</span><br><span class="line">            <span class="built_in">double</span>[] a4 = &#123; <span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>, <span class="number">4.4</span>, <span class="number">5.5</span>, <span class="number">6.6</span> &#125;;</span><br><span class="line">            <span class="keyword">var</span> result1 = Zip(a1, a2);</span><br><span class="line">            Console.WriteLine(<span class="built_in">string</span>.Join(<span class="string">&quot;,&quot;</span>, result1));</span><br><span class="line">            <span class="keyword">var</span> result2 = Zip&lt;<span class="built_in">double</span>&gt;(a3, a4);</span><br><span class="line">            Console.WriteLine(<span class="built_in">string</span>.Join(<span class="string">&quot;,&quot;</span>, result2));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> T[] <span class="title">Zip</span>&lt;<span class="title">T</span>&gt;(<span class="params">T[] a, T[] b</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            T[] zipped = <span class="keyword">new</span> T[a.Length + b.Length];</span><br><span class="line">            <span class="built_in">int</span> ai = <span class="number">0</span>, bi = <span class="number">0</span>, zi = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">do</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (ai &lt; a.Length)</span><br><span class="line">                &#123;</span><br><span class="line">                    zipped[zi++] = a[ai++];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (bi &lt; b.Length)</span><br><span class="line">                &#123;</span><br><span class="line">                    zipped[zi++] = b[bi++];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">while</span> (ai &lt; a.Length || bi &lt; b.Length);</span><br><span class="line">            <span class="keyword">return</span> zipped;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1,1,2,2,3,3,4,4,5,5,6</span><br><span class="line">1.1,1.1,2.2,2.2,3.3,3.3,4.4,4.4,5.5,5.5,6.6</span><br></pre></td></tr></table></figure><p>上述例子中，使用了一个泛型方法，<code>C#</code>可以自己推断出相应的类型，因此$16$行中的<code>double</code>是可以省略掉的。</p><h1 id="partial类"><a href="#partial类" class="headerlink" title="partial类"></a>partial类</h1><p><code>partial</code>允许把一个类的代码分成两部分或者多部分，可以以此减少派生类。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Student student = <span class="keyword">new</span> Student();</span><br><span class="line">            student.ID = <span class="number">1</span>;</span><br><span class="line">            student.Name = <span class="string">&quot;Bigglesworth&quot;</span>;</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;ID:<span class="subst">&#123;student.ID&#125;</span> Name:<span class="subst">&#123;student.Name&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> ID;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ID:1 Name:Bigglesworth</span><br></pre></td></tr></table></figure><p>上述例子中，两个类的名字都是<code>Student</code>，但是它们都被声明为了<code>partial</code>类，这样二者都构成了<code>Student</code>类。使用<code>partial</code>可以保证在不同的文件里共同声明的类可以同时存在。</p><h1 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h1><p>枚举类型是认为限定取值范围的整数，枚举与整数值相互对应。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Person person = <span class="keyword">new</span> Person();</span><br><span class="line">            person.Level = Level.Employee;</span><br><span class="line"></span><br><span class="line">            Person boss = <span class="keyword">new</span> Person();</span><br><span class="line">            boss.Level = Level.Boss;</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(boss.Level &gt; person.Level);</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(Level.Employee + <span class="string">&quot;:&quot;</span> + (<span class="built_in">int</span>)Level.Employee);</span><br><span class="line">            Console.WriteLine(Level.Manager + <span class="string">&quot;:&quot;</span> + (<span class="built_in">int</span>)Level.Manager);</span><br><span class="line">            Console.WriteLine(Level.Boss + <span class="string">&quot;:&quot;</span> + (<span class="built_in">int</span>)Level.Boss);</span><br><span class="line">            Console.WriteLine(Level.BigBoss + <span class="string">&quot;:&quot;</span> + (<span class="built_in">int</span>)Level.BigBoss);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">enum</span> Level</span><br><span class="line">    &#123;</span><br><span class="line">        Employee = <span class="number">100</span>,</span><br><span class="line">        Manager,</span><br><span class="line">        Boss = <span class="number">300</span>,</span><br><span class="line">        BigBoss,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> ID &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> Level Level &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">True</span><br><span class="line">Employee:100</span><br><span class="line">Manager:101</span><br><span class="line">Boss:300</span><br><span class="line">BigBoss:301</span><br></pre></td></tr></table></figure><p>枚举类型中的成员可以直接赋值，如果不赋值默认是前一个成员$+1$，因此可以进行大小比较。同时，枚举类型默认的第一个成员值为$0$。</p><h1 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h1><p>结构体是一种值类型，可以进行装箱和拆箱，也可以实现接口，但是不能派生自类或结构体，同时也不能有显示无参构造器。</p><p>结构体与类最大的区别在于结构体是一种值类型数据，类是一种引用类型数据。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Student student1 = <span class="keyword">new</span> Student() &#123; ID = <span class="number">1</span>, Name = <span class="string">&quot;Bigglesworth&quot;</span> &#125;;</span><br><span class="line">            Student student2 = student1;</span><br><span class="line">            student2.ID = <span class="number">2</span>;</span><br><span class="line">            student2.Name = <span class="string">&quot;Areskey&quot;</span>;</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;ID:<span class="subst">&#123;student1.ID&#125;</span> Name:<span class="subst">&#123;student1.Name&#125;</span>&quot;</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;ID:<span class="subst">&#123;student2.ID&#125;</span> Name:<span class="subst">&#123;student2.Name&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">struct</span> Student</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> ID &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ID:1 Name:Bigglesworth</span><br><span class="line">ID:2 Name:Areskey</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 教程 </tag>
            
            <tag> C# </tag>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++</title>
      <link href="/archives/9b3a1cc9.html"/>
      <url>/archives/9b3a1cc9.html</url>
      
        <content type="html"><![CDATA[<hr><h1 id="程序的内存模型"><a href="#程序的内存模型" class="headerlink" title="程序的内存模型"></a>程序的内存模型</h1><h2 id="四个区域"><a href="#四个区域" class="headerlink" title="四个区域"></a>四个区域</h2><p><code>C++</code>程序在执行时，会将内存大方向划分为<strong>四个区域</strong>。</p><ul><li>代码区：存放函数体的二进制代码，也就是你写的代码，但是不包括注释，由操作系统进行管理的。</li><li>全局区：存放全局变量和静态变量以及常量。</li><li>栈区：由编译器自动分配释放，存放函数的参数值、局部变量等等。</li><li>堆区：由程序员分配和释放，若程序员不释放，程序结束时由操作系统回收。</li></ul><p>内存四区的意义：不同区域存放的数据，赋予不同的生命周期，可以方便我们进行编程。</p><h2 id="代码区"><a href="#代码区" class="headerlink" title="代码区"></a>代码区</h2><p>在程序编译后会生成相应的<code>exe</code>可执行程序，这个时候就会产生代码区，其中会存放<code>CPU</code>执行的机器指令。对于这部分区域，它有<strong>共享</strong>和<strong>只读</strong>两个特点。</p><h3 id="共享"><a href="#共享" class="headerlink" title="共享"></a>共享</h3><p>代码区是共享的，共享的目的是对于频繁被执行的程序，只需要在内存中有一份代码即可。例如一个程序可能不止启动一次，每一次启动的时候都不会创建一个新的代码区，而是会全都使用同一份代码，这样可以有效防止资源浪费。</p><h3 id="只读"><a href="#只读" class="headerlink" title="只读"></a>只读</h3><p>代码区是只读的，使其只读的原因是防止程序修改指令。</p><h2 id="全局区"><a href="#全局区" class="headerlink" title="全局区"></a>全局区</h2><p>全局区和代码区一样，是在编译后和执行前就已经存在的了，这片区域存放的是全局变量和静态变量，其中还包含常量区，字符串常量和其他常量也存放在这个地方。</p><p><strong>该区域在程序结束后由操作系统释放。</strong></p><p>所以全局变量和局部变量的存储地址是不一样的，例如如下这段代码，可以看一下他们的值：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局变量</span></span><br><span class="line"><span class="type">int</span> global_a = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> global_b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//局部变量</span></span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">0</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;局部变量a地址：&quot;</span> &lt;&lt; <span class="built_in">int</span>(&amp;a) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;局部变量b地址：&quot;</span> &lt;&lt; <span class="built_in">int</span>(&amp;b) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;全局变量a地址：&quot;</span> &lt;&lt; <span class="built_in">int</span>(&amp;global_a) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;全局变量b地址：&quot;</span> &lt;&lt; <span class="built_in">int</span>(&amp;global_b) &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">局部变量a地址：1821374196</span><br><span class="line">局部变量b地址：1821374228</span><br><span class="line"></span><br><span class="line">全局变量a地址：1686692304</span><br><span class="line">全局变量b地址：1686692308</span><br></pre></td></tr></table></figure><p>通过观察可以看出，局部变量存在一起，全局变量存在一起，他们的存储地址是不一样的，但是各自又存在一起。</p><table><thead><tr><th align="center">全局区</th><th align="center">不在全局区</th></tr></thead><tbody><tr><td align="center">全局变量</td><td align="center">局部变量</td></tr><tr><td align="center">静态变量</td><td align="center">局部常量</td></tr><tr><td align="center">常量</td><td align="center"></td></tr></tbody></table><h2 id="栈区"><a href="#栈区" class="headerlink" title="栈区"></a>栈区</h2><p>由编译器自动分配释放，存放函数的参数值，局部变量等。</p><p>在我们使用函数的时候，不要去返回局部变量的地址，因为栈区开辟的数据由编译器自动释放。</p><h2 id="堆区"><a href="#堆区" class="headerlink" title="堆区"></a>堆区</h2><p>由程序员分配释放，若程序员不释放，程序结束时由操作系统回收。</p><p>在<code>C++</code>中主要利用<code>new</code>在堆区开辟内存。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span>* <span class="title">fun</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span>* p;</span><br><span class="line"><span class="comment">//在堆区开辟数据</span></span><br><span class="line">p = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">100</span>);</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span>* q = <span class="built_in">fun</span>();</span><br><span class="line">cout &lt;&lt; *q &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">100</span><br></pre></td></tr></table></figure><p>在上述代码中，使用<code>new</code>在堆区开辟了一个数据，存放了$100$这个数据，对于堆区的地址，不会在函数结束时自动释放，而是会一直保留，除非程序员主动释放这部分的内存空间。</p><p>使用<code>new</code>在堆区开辟数据，其语法如下所示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> 数据类型</span><br></pre></td></tr></table></figure><p>该返回值为数据所对应的类型的指针。</p><p>如果想要释放这部分空间，需要使用<code>delete</code>来实现，只需要去<code>delete</code>堆区的相应的地址即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span>* <span class="title">fun</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span>* p;</span><br><span class="line"><span class="comment">//在堆区开辟数据</span></span><br><span class="line">p = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">100</span>);</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span>* q = <span class="built_in">fun</span>();</span><br><span class="line">cout &lt;&lt; *q &lt;&lt; endl;</span><br><span class="line"><span class="built_in">delete</span>(q);</span><br><span class="line">cout &lt;&lt; *q &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">100</span><br><span class="line">-572662307</span><br></pre></td></tr></table></figure><p>可以发现，第一次输出的时候能够很好的输出目标值，第二次输出的时候，由于执行了<code>delete</code>操作，所以第二次输出会出现奇怪的值，因为这个时候这部分空间已经被释放掉了，再次访问其实是非法操作。</p><p>同理，也可以使用<code>new</code>来开辟一整个空间，也就是一个数组：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="type">int</span>[<span class="number">10</span>];</span><br></pre></td></tr></table></figure><p>上述代码在堆区创建了一个有$10$个空间的数组。</p><p>可以使用这个方式，开辟一个有$10$个空间的数组，将其值赋值为$100\sim109$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span>* a = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">a[i] = <span class="number">100</span> + i;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">100 101 102 103 104 105 106 107 108 109</span><br></pre></td></tr></table></figure><p>对于这种情况，如果要释放数组的话，需要添加一个中括号来进行释放，具体如下所示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span>* a = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">a[i] = <span class="number">100</span> + i;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="keyword">delete</span>[] a;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">100 101 102 103 104 105 106 107 108 109</span><br><span class="line">-572662307 -572662307 -572662307 -572662307 -572662307 -572662307 -572662307 -572662307 -572662307 -572662307</span><br></pre></td></tr></table></figure><p>可以发现，在释放完之后，输出这部分内容已经变成了非法操作了。</p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><p>引用的作用是给变量起一个别名，其语法如下所示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型 &amp;别名 = 原名</span><br></pre></td></tr></table></figure><p>相当于给一个变量增加了一个新的标签，通过原名和这个标签都可以索引到这个变量。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span>&amp; b = a;</span><br><span class="line">b = <span class="number">100</span>;</span><br><span class="line">cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">100</span><br></pre></td></tr></table></figure><h2 id="引用的注意事项"><a href="#引用的注意事项" class="headerlink" title="引用的注意事项"></a>引用的注意事项</h2><ul><li>引用必须初始化。</li><li>引用在初始化后，不可以改变。</li></ul><p>如果创建引用的时候没有初始化会直接报错。</p><p>引用在初始化之后如果使用类似于<code>b = a</code>（<code>b</code>是引用，<code>a</code>是变量）的操作，会认为是赋值操作，而不是更改引用。</p><h2 id="引用做函数参数"><a href="#引用做函数参数" class="headerlink" title="引用做函数参数"></a>引用做函数参数</h2><p>函数在传递参数时，可以利用引用的技术让形参修饰实参，可以简化指针修改实参的繁琐。</p><p>用引用参数实现交换两个变量的值：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Swap</span><span class="params">(<span class="type">int</span>&amp; a, <span class="type">int</span>&amp; b)</span>  <span class="comment">//引用参数，在该函数中对变量的操作会直接影响实参</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> temp;</span><br><span class="line">temp = a;</span><br><span class="line">a = b;</span><br><span class="line">b = temp;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">3</span>, b = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">Swap</span>(a, b);</span><br><span class="line">cout &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5 3</span><br></pre></td></tr></table></figure><p>通过引用参数产生的效果和按地址传递是一样的，引用的语法相对来说更加清楚简单一些。</p><h2 id="引用做函数返回值"><a href="#引用做函数返回值" class="headerlink" title="引用做函数返回值"></a>引用做函数返回值</h2><p>引用可以直接作为函数的返回值。</p><p>不要返回局部变量的引用，这是因为局部变量是在栈区被定义的，在函数结束时开辟的空间会直接被释放掉。引用其实就是返回其地址，这就会导致这部分的地址被释放掉。</p><p>但是可以返回全局变量或者静态变量一类的存放在全局区的变量的引用，因为这部分变量不会存放在堆区，在函数执行结束后不会直接释放掉。</p><p>现在以创建一个静态变量为例，进行如下操作：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span>&amp; <span class="title">fun</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> &amp;b = <span class="built_in">fun</span>();</span><br><span class="line">cout &lt;&lt; b &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">100</span><br></pre></td></tr></table></figure><p>可以看到，<code>fun</code>函数是一个以引用作为函数返回值的函数，最后返回了<code>a</code>的引用，最后可以成功输出其值。</p><p>如果使用引用做函数返回值，那么这个函数还可以作为左值去进行运算。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span>&amp; <span class="title">fun</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> &amp;b = <span class="built_in">fun</span>();</span><br><span class="line">cout &lt;&lt; b &lt;&lt; endl;</span><br><span class="line"><span class="built_in">fun</span>() = <span class="number">1234</span>;</span><br><span class="line">cout &lt;&lt; b &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">100</span><br><span class="line">1234</span><br></pre></td></tr></table></figure><p>上述代码的原理是，<code>fun</code>函数返回的是<code>a</code>的引用，也就是<code>a</code>所对应的地址。第$15$行的操作相当于让这块地址的值赋值为$1234$。与此同时，<code>b</code>作为引用也指向了这块地址，这也就是为什么可以作为左值去进行修改。</p><h2 id="引用的本质"><a href="#引用的本质" class="headerlink" title="引用的本质"></a>引用的本质</h2><p>引用的本质相当于是在<code>C++</code>内部实现的一个指针常量，但是引用比指更加安全，相当于一个安全的指针，编译器也能对引用做出更多的优化，避免了空指针检查。</p><p>所以引用可以理解为一个指针常量，和普通常量的区别在于普通常量的值是不可变的，引用的关键在于指向的地址是不变的，但是都可以看作常量，这也就是为什么必须进行初始化赋值操作。</p><h2 id="常量引用"><a href="#常量引用" class="headerlink" title="常量引用"></a>常量引用</h2><p>常量引用可以用来修饰形参，从而防止误操作。</p><p>在函数形参列表中，可以加<code>const</code>修饰形参，防止形参改变实参。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//value的值不可被修改</span></span><br><span class="line"><span class="comment">//value = 100;</span></span><br><span class="line">cout &lt;&lt; value &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">fun</span>(a);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10</span><br></pre></td></tr></table></figure><p>在函数中，如果有些值不希望被修改，并且还担心忘记这件事情，就可以将其设置为常量引用，那么就可以看做一个常量，之后便不可再修改了。</p><h1 id="高级函数"><a href="#高级函数" class="headerlink" title="高级函数"></a>高级函数</h1><h2 id="函数默认参数"><a href="#函数默认参数" class="headerlink" title="函数默认参数"></a>函数默认参数</h2><p>在<code>C++</code>中，函数的形参列表中的形参是可以有默认值的，其语法如下所示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">返回值类型 函数名(参数 = 默认值)</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过使用默认参数的方式，即使传递参数的时候没有给默认参数传递值，它也可以用默认的参数来执行函数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fun</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b = <span class="number">20</span>, <span class="type">int</span> c = <span class="number">30</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="built_in">fun</span>(<span class="number">10</span>) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="built_in">fun</span>(<span class="number">10</span>, <span class="number">10</span>) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="built_in">fun</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>) &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">60</span><br><span class="line">50</span><br><span class="line">30</span><br></pre></td></tr></table></figure><p>这个代码定义了一个函数<code>fun</code>，作用是将三个值相加在一起并返回。主函数中调用了三次这个函数，分别传入了不同的参数，可以发现，如果我们自己传入数据，就会用自己的数据，如果没有，那么函数会使用默认值。</p><p>注意事项：</p><ol><li>如果某个位置已经有了默认参数，那么从这个位置往后，从左到右都必须有默认值。</li><li>如果函数声明有默认参数，函数实现就不能有默认参数，因为编译器不知道应该使用哪个作为默认参数。也就是说声明和实现只能有一个默认参数。</li></ol><h2 id="函数占位参数"><a href="#函数占位参数" class="headerlink" title="函数占位参数"></a>函数占位参数</h2><p><code>C++</code>中函数的形参列表里可以有占位参数，用来做占位，调用函数时必须填补该位置。其语法如下所示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">返回值类型 函数名(数据类型)</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数占位需要在传入参数的时候在相同位置传入相同类型的参数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Hello World!&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">fun</span>(<span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br></pre></td></tr></table></figure><p>占位参数也可以有默认参数。</p><p>现阶段函数的占位参数存在意义不大，后面会具体用到该方法。</p><h2 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h2><p>在<code>C++</code>中，使用函数重载的话，函数名可以相同，从而提高复用性。</p><p>函数重载满足条件：</p><ul><li>同一个作用域下。</li><li>函数名称相同。</li><li>函数参数<strong>类型不同</strong>或者<strong>个数不同</strong>或者<strong>顺序不同</strong>。</li></ul><p><strong>注意</strong>：函数的返回值不可以作为函数重载的条件（因为你的编译器不知道该调用哪个函数）。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;fun1:&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; a + b &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(<span class="type">float</span> a, <span class="type">float</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;fun2:&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; a + b &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">float</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;fun3:&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; a + b + c &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(<span class="type">float</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;fun4:&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; a + b + c &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">1</span>, b = <span class="number">2</span>;</span><br><span class="line"><span class="type">float</span> c = <span class="number">3.0</span>, d = <span class="number">4.0</span>;</span><br><span class="line"><span class="built_in">fun</span>(c, a, b);</span><br><span class="line"><span class="built_in">fun</span>(a, b, c);</span><br><span class="line"><span class="built_in">fun</span>(d, d);</span><br><span class="line"><span class="built_in">fun</span>(a, b);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fun4:</span><br><span class="line">6</span><br><span class="line"></span><br><span class="line">fun3:</span><br><span class="line">6</span><br><span class="line"></span><br><span class="line">fun2:</span><br><span class="line">8</span><br><span class="line"></span><br><span class="line">fun1:</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p>可以看出，使用函数重载，即使函数名是相同的，但是传入的参数不同，就可以调用不同的函数，可以提高复用性。</p><p>当引用作为重载的条件时，直接使用引用和使用常量引用会被认为是变量类型不同，可以使用函数重载。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(<span class="type">int</span>&amp; a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;fun1:&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; a &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;fun2:&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; a &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">fun</span>(a);</span><br><span class="line"><span class="built_in">fun</span>(b);</span><br><span class="line"><span class="built_in">fun</span>(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fun1:</span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">fun2:</span><br><span class="line">2</span><br><span class="line"></span><br><span class="line">fun2:</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p>根据上述结果，如果是一个变量的话，会执行直接使用引用的函数，如果是一个常量的话（单纯的数字、字符串等常量也算在内），会执行常量引用的函数。</p><p>还有一个注意事项，如果函数重载碰到了默认参数的情况，需要考虑其二义性。这种情确实可以发生重载，但是会导致无法调用，例如下面这种情况。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b = <span class="number">10</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;fun1:&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; a &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;fun2:&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; a &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//下面这行代码会报错</span></span><br><span class="line"><span class="comment">//fun(100);</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于上述这种情况，就产生了二义性。第二十行的代码两个函数的条件均满足，导致它不知道该调用哪个函数了，因此会报错。</p><h1 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h1><p><code>C++</code>面相对象的三大特性为：封装、继承、多态。</p><p><code>C++</code>认为万事万物皆为对象，对象上有其属性和行为。</p><p>例如</p><p>人可以作为对象，属性有姓名、年龄、身高、体重……，行为有走、跑、跳、吃饭……</p><p>车可以作为对象，属性有轮胎、车灯、空调、窗户……，行为有载人、放音乐……</p><p>具有相同性质的对象，我们可以抽象称为类，人属于人类，车属于车类。</p><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><h3 id="属性和行为作为整体"><a href="#属性和行为作为整体" class="headerlink" title="属性和行为作为整体"></a>属性和行为作为整体</h3><p>封装是<code>C++</code>面向对象三大特性之一。</p><p>封装的意义：</p><ul><li>将属性和行为作为一个整体，表现生活中的事物。</li><li>将属性和行为加以权限控制。</li></ul><p>在设计类的时候，属性和行为写在一起，通过这种方式来表现事物。</p><p>例如可以设计一个圆类，求圆的周长。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="number">3.14</span>;  <span class="comment">//将圆周率设置为常量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>  <span class="comment">//class代表设计一个类，后面紧跟着类名称</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//访问权限</span></span><br><span class="line"><span class="keyword">public</span>:  <span class="comment">//公共权限（后面会具体讲到）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//属性</span></span><br><span class="line"><span class="type">double</span> radius;  <span class="comment">//半径</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//行为</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">perimeter</span><span class="params">()</span>  <span class="comment">//获取圆的周长</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span> * PI * radius;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Circle c;  <span class="comment">//通过圆类 创建具体的圆（对象）</span></span><br><span class="line"></span><br><span class="line">c.radius = <span class="number">10</span>;  <span class="comment">//给圆对象的属性赋值</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;圆的周长为：&quot;</span> &lt;&lt; c.<span class="built_in">perimeter</span>() &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">圆的周长为：62.8</span><br></pre></td></tr></table></figure><p>上述代码通过创建一个类，将属性和行为封装在一起，属性是半径，行为是求周长。通过这种方式，可以创建一个属于这一类的对象，然后对这个对象进行相应的操作。通过一个类创建一个对象的过程叫做<strong>实例化</strong>。</p><p>在类中的函数，也可以为类中包含的属性进行赋值，例如下面这种方式：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="number">3.14</span>;  <span class="comment">//将圆周率设置为常量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>  <span class="comment">//class代表设计一个类，后面紧跟着类名称</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//访问权限</span></span><br><span class="line"><span class="keyword">public</span>:  <span class="comment">//公共权限（后面会具体讲到）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//属性</span></span><br><span class="line"><span class="type">double</span> radius;  <span class="comment">//半径</span></span><br><span class="line"><span class="type">double</span> perimeter;</span><br><span class="line"></span><br><span class="line"><span class="comment">//行为</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">set_perimeter</span><span class="params">()</span>  <span class="comment">//获取圆的周长</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">perimeter = <span class="number">2</span> * PI * radius;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Circle c;  <span class="comment">//通过圆类 创建具体的圆（对象）</span></span><br><span class="line"></span><br><span class="line">c.radius = <span class="number">10</span>;  <span class="comment">//给圆对象的属性赋值</span></span><br><span class="line">c.<span class="built_in">set_perimeter</span>();  <span class="comment">//设置其周长</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;圆的周长为：&quot;</span> &lt;&lt; c.perimeter &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">圆的周长为：62.8</span><br></pre></td></tr></table></figure><p>与第一个例子相类似，不同的是，这次求周长的函数不返回其返回值，而是设计该对象的属性值，使其以后可以更方便地进行调用。</p><p>类中的属性和行为，我们统一称为成员。</p><p>属性也称为成员属性或者成员变量。</p><p>行为也称为成员函数或者成员方法。</p><h3 id="访问权限"><a href="#访问权限" class="headerlink" title="访问权限"></a>访问权限</h3><p>类在设计时，可以把属性和行为放在不同的权限下，加以控制。</p><p>访问权限有三种：</p><ol><li><code>public</code>——公共权限（类内可以访问 类外可以访问）</li><li><code>protected</code>——保护权限（类内可以访问 类外不可以访问，儿子可以访问父亲中的保护内容）</li><li><code>private</code>——私有权限（类内可以访问 类外不可以访问，儿子不可以访问父亲中的私有内容）</li></ol><h3 id="struct和class的区别"><a href="#struct和class的区别" class="headerlink" title="struct和class的区别"></a>struct和class的区别</h3><p>在<code>C++</code>中<code>struct</code>和<code>class</code>唯一的区别就在于默认的访问权限不同。</p><p>区别：</p><ul><li><code>struct</code>默认权限为公共。</li><li><code>class</code>默认权限为私有。</li></ul><p><strong>注：<code>struct</code>中也可以写函数。</strong></p><h3 id="成员属性私有化"><a href="#成员属性私有化" class="headerlink" title="成员属性私有化"></a>成员属性私有化</h3><p>将成员属性设置为私有有两个优点：</p><ol><li>将所有成员属性设置为私有，可以自己控制读写权限。</li><li>对于写权限，我们可以检测数据的有效性。</li></ol><p>将成员属性私有化之后，我们就不可以直接访问了，因此一般会在<code>public</code>中创建一些端口供用户去使用，例如下面这种方法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">set_name</span><span class="params">(string name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m_name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">get_name</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_age</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">set_password</span><span class="params">(string password)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m_password = password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">string m_name;  <span class="comment">//姓名 可读 可写</span></span><br><span class="line"><span class="type">int</span> m_age = <span class="number">18</span>;  <span class="comment">//年龄 可读</span></span><br><span class="line">string m_password;  <span class="comment">//密码 可写</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person a;</span><br><span class="line">a.<span class="built_in">set_name</span>(<span class="string">&quot;比格沃斯&quot;</span>);</span><br><span class="line">cout &lt;&lt; a.<span class="built_in">get_name</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; a.<span class="built_in">get_age</span>() &lt;&lt; endl;</span><br><span class="line">a.<span class="built_in">set_password</span>(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">比格沃斯</span><br><span class="line">18</span><br></pre></td></tr></table></figure><p>在上述结果中可以发现，通过成员属性私有化的方法，可以很好的控制读写权限，并且还可以在读取的时候判断一下用户的输入。</p><p>例如我们对于年龄这一属性，想要判断一下是否在$0\sim 150$岁之间，就可以创建一个设置年龄的端口，判断其年龄所处的范围，如果不在该范围内，返回报错信息。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">set_name</span><span class="params">(string name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m_name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">get_name</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">set_age</span><span class="params">(<span class="type">int</span> age)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (age &gt;= <span class="number">0</span> &amp;&amp; age &lt;= <span class="number">150</span>)</span><br><span class="line">m_age = age;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;非法年龄！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_age</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">set_password</span><span class="params">(string password)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m_password = password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">string m_name;  <span class="comment">//姓名 可读 可写</span></span><br><span class="line"><span class="type">int</span> m_age;  <span class="comment">//年龄 可读 可写</span></span><br><span class="line">string m_password;  <span class="comment">//密码 可写</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person a;</span><br><span class="line">a.<span class="built_in">set_age</span>(<span class="number">18</span>);</span><br><span class="line">cout &lt;&lt; a.<span class="built_in">get_age</span>() &lt;&lt; endl;</span><br><span class="line">a.<span class="built_in">set_age</span>(<span class="number">10086</span>);</span><br><span class="line">cout &lt;&lt; a.<span class="built_in">get_age</span>() &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">18</span><br><span class="line">非法年龄！</span><br><span class="line">18</span><br></pre></td></tr></table></figure><h2 id="对象特征"><a href="#对象特征" class="headerlink" title="对象特征"></a>对象特征</h2><h3 id="对象的初始化和清理"><a href="#对象的初始化和清理" class="headerlink" title="对象的初始化和清理"></a>对象的初始化和清理</h3><p>在我们日常生活中，比如买一台手机，都会在刚使用的时候有一个出厂设置，当我们在某一天不用的时候，也会删除一些自己的信息保证数据安全。</p><p><code>C++</code>中的面向对象来源于生活，每个对象也会有初始设置以及对象销毁前的数据清理设置。</p><h3 id="构造函数和析构函数"><a href="#构造函数和析构函数" class="headerlink" title="构造函数和析构函数"></a>构造函数和析构函数</h3><p>对象的<strong>初始化</strong>和<strong>清理</strong>也是两个非常重要的问题。</p><p>如果一个对象或者变量没有初始状态，对其使用后果也是未知的。</p><p>如果使用完一个对象或变量，没有及时清理，也会造成一定的安全问题。</p><p><code>C++</code>利用了构造函数和析构函数解决上述问题，这两个函数会被编译器自动调用，完成对象初始化和清理工作。</p><p>对象的初始化和清理工作是编译器强制要我们做的事情，如果我们不提供构造函数和析构函数，编译器会提供，但是提供的两个函数是空的。</p><ul><li>构造函数：主要作用在于创建对象时为对象的成员属性赋值，构造函数由编译器自动调用，无需手动调用。</li><li>析构函数：主要作用在于对象销毁前系统自动调用，执行一些清理工作。</li></ul><p>构造函数的语法如下所示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类名()&#123;&#125;</span><br></pre></td></tr></table></figure><ol><li>构造函数，没有返回值也不写<code>void</code>。</li><li>函数名称与类名相同。</li><li>构造函数可以有参数，因此可以发生重载。</li><li>程序在调用对象时会自动调用构造，无需手动调用，而且只会调用一次。</li></ol><p>析构函数的语法如下所示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~类名()&#123;&#125;</span><br></pre></td></tr></table></figure><ol><li>析构函数，没有返回值也不写<code>void</code>。</li><li>函数名称与类名相同，在名称前加上符号<code>~</code>。</li><li>构造函数不可以有参数，因此不可以发生重载。</li><li>程序在对象销毁前会自动调用析构，无需手动调用，而且只会调用一次。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//构造函数</span></span><br><span class="line"><span class="built_in">Person</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person 构造函数调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//析构函数</span></span><br><span class="line">~<span class="built_in">Person</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person 析构函数调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person p;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Hello World!&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Person 构造函数调用</span><br><span class="line">Hello World!</span><br><span class="line">Person 析构函数调用</span><br></pre></td></tr></table></figure><p>上述程序中，创建了一个类，同时在其中创建了一个构造函数和析构函数。</p><p>主函数中实例化一个该类的对象的时候，会调用其构造函数；在程序结束，系统自动回收这部分内存，也就是将该对象销毁掉，会调用其析构函数。</p><p><strong>注：要把这两个函数写在<code>public</code>中。</strong></p><h3 id="构造函数的分类及调用"><a href="#构造函数的分类及调用" class="headerlink" title="构造函数的分类及调用"></a>构造函数的分类及调用</h3><p>两种分类方式：</p><ul><li>按参数分：有参构造和无参构造</li><li>按类型分：普通构造和拷贝构造</li></ul><p>三种调用方式：</p><ul><li>括号法</li><li>显示法</li><li>隐式转换法</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//构造函数</span></span><br><span class="line"><span class="comment">//无参构造</span></span><br><span class="line"><span class="built_in">Person</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person 无参构造函数调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有参构造</span></span><br><span class="line"><span class="built_in">Person</span>(<span class="type">int</span> age)</span><br><span class="line">&#123;</span><br><span class="line">m_age = age;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person 有参构造函数调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//拷贝构造函数</span></span><br><span class="line"><span class="built_in">Person</span>(<span class="type">const</span> Person&amp; p)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person 拷贝构造函数调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">m_age = p.m_age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//析构函数</span></span><br><span class="line">~<span class="built_in">Person</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person 析构函数调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取年龄</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_age</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> m_age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;括号法调用：&quot;</span> &lt;&lt; endl;</span><br><span class="line">Person p1;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p3</span><span class="params">(p2)</span></span>;</span><br><span class="line">cout &lt;&lt; p2.<span class="built_in">get_age</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; p3.<span class="built_in">get_age</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;显示法调用：&quot;</span> &lt;&lt; endl;</span><br><span class="line">Person p1 = <span class="built_in">Person</span>(<span class="number">10</span>);</span><br><span class="line">Person p2 = <span class="built_in">Person</span>(p1);</span><br><span class="line">cout &lt;&lt; p1.<span class="built_in">get_age</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; p2.<span class="built_in">get_age</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun3</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;隐式转换法调用：&quot;</span> &lt;&lt; endl;</span><br><span class="line">Person p1 = <span class="number">10</span>;</span><br><span class="line">Person p2 = p1;</span><br><span class="line">cout &lt;&lt; p1.<span class="built_in">get_age</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; p2.<span class="built_in">get_age</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">fun1</span>();</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="built_in">fun2</span>();</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="built_in">fun3</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">括号法调用：</span><br><span class="line">Person 无参构造函数调用</span><br><span class="line">Person 有参构造函数调用</span><br><span class="line">Person 拷贝构造函数调用</span><br><span class="line">10</span><br><span class="line">10</span><br><span class="line"></span><br><span class="line">Person 析构函数调用</span><br><span class="line">Person 析构函数调用</span><br><span class="line">Person 析构函数调用</span><br><span class="line"></span><br><span class="line">显示法调用：</span><br><span class="line">Person 有参构造函数调用</span><br><span class="line">Person 拷贝构造函数调用</span><br><span class="line">10</span><br><span class="line">10</span><br><span class="line"></span><br><span class="line">Person 析构函数调用</span><br><span class="line">Person 析构函数调用</span><br><span class="line"></span><br><span class="line">隐式转换法调用：</span><br><span class="line">Person 有参构造函数调用</span><br><span class="line">Person 拷贝构造函数调用</span><br><span class="line">10</span><br><span class="line">10</span><br><span class="line"></span><br><span class="line">Person 析构函数调用</span><br><span class="line">Person 析构函数调用</span><br></pre></td></tr></table></figure><p>在上述代码中，创建了一个无参构造函数，一个有参构造函数，一个析构函数和一个拷贝函数。</p><p>拷贝函数可以执行一些拷贝功能，可以将一个该类型的对象传入，之后拷贝给调用该函数的对象。</p><p>该函数不能改变传入进来的对象，因此其参数需要使用常量引用。</p><p>对于括号法，不能直接使用如下方式：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>因为这样会认为你是声明了一个函数，其返回值是<code>Person</code>，并不会调用你的无参构造函数。</p><p>对于显示法，如果直接使用<code>Person(10)</code>也会调用其构造函数，会创建一个临时的匿名对象， 当执行结束后，系统会立即回收掉匿名对象。</p><p>不要利用拷贝构造函数去初始化匿名对象，编译器会认为<code>Person(p)</code>和<code>Person p</code>是一样的，导致它会觉得你是实例化了一个该类的对象。</p><p>对于隐式转换法，相当于对显示法的一个简写。</p><h3 id="拷贝构造函数调用时机"><a href="#拷贝构造函数调用时机" class="headerlink" title="拷贝构造函数调用时机"></a>拷贝构造函数调用时机</h3><p><code>C++</code>中拷贝构造函数调用时机通常有三种情况：</p><ul><li>使用一个已经创建完毕的对象来初始化一个新对象。</li><li>值传递的方式给函数参数传值。</li><li>作为函数返回值</li></ul><p>第一种方式已经在上述讲过了，下面我们具体看一下另一种方式：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;无参构造函数调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Person</span>(<span class="type">int</span> age)</span><br><span class="line">&#123;</span><br><span class="line">m_age = age;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;有参构造函数调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Person</span>(<span class="type">const</span> Person&amp; p)</span><br><span class="line">&#123;</span><br><span class="line">m_age = p.m_age;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;拷贝构造函数调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Person</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;析构函数调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> m_age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(Person p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; p.m_age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Person <span class="title">p</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="built_in">fun</span>(p);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">有参构造函数调用</span><br><span class="line">拷贝构造函数调用</span><br><span class="line">10</span><br><span class="line">析构函数调用</span><br><span class="line">析构函数调用</span><br></pre></td></tr></table></figure><p>上述代码中，函数中传递了一个对象参数。根据输出结果可以发现，一共调用了一次构造函数，一次拷贝构造函数，两个析构函数。所以在对象作为参数进行函数值传递的时候，不会在函数中再次调用构造函数，而是会调用一次构造函数进行值的传递。</p><p>同理，如果我们将该对象作为返回值，也会调用一次拷贝构造函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;无参构造函数调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Person</span>(<span class="type">int</span> age)</span><br><span class="line">&#123;</span><br><span class="line">m_age = age;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;有参构造函数调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Person</span>(<span class="type">const</span> Person&amp; p)</span><br><span class="line">&#123;</span><br><span class="line">m_age = p.m_age;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;拷贝构造函数调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Person</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;析构函数调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> m_age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Person <span class="title">fun</span><span class="params">(Person p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; p.m_age &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Person <span class="title">p</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="built_in">fun</span>(p);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">有参构造函数调用</span><br><span class="line">拷贝构造函数调用</span><br><span class="line">10</span><br><span class="line">拷贝构造函数调用</span><br><span class="line">析构函数调用</span><br><span class="line">析构函数调用</span><br><span class="line">析构函数调用</span><br></pre></td></tr></table></figure><p>输出了两次<code>拷贝构造函数调用</code>，第一次是传递值的时候进行的拷贝构造，第二次是返回值时进行的拷贝构造。</p><h3 id="构造函数调用规则"><a href="#构造函数调用规则" class="headerlink" title="构造函数调用规则"></a>构造函数调用规则</h3><p>默认情况下，<code>C++</code>编译器至少给一个类添加$3$个函数：</p><ol><li>默认构造函数（无参，函数体为空）。</li><li>默认析构函数（无参，函数体为空）。</li><li>默认拷贝构造函数，对属性进行值拷贝。</li></ol><p>构造函数调用规则如下：</p><ul><li>如果用户定义有参构造函数，<code>C++</code>不再提供默认无参构造函数，但是会提供默认拷贝构造函数。</li><li>如果用户定义拷贝构造函数，<code>C++</code>不会再提供其他拷贝构造函数。</li></ul><h3 id="深拷贝与浅拷贝"><a href="#深拷贝与浅拷贝" class="headerlink" title="深拷贝与浅拷贝"></a>深拷贝与浅拷贝</h3><p>浅拷贝指的是简单的赋值拷贝操作，深拷贝指的是在堆区重新申请空间，进行拷贝操作。</p><p>如果在类里面定义了一个指针，并将其指向了一块内存空间。在这种情况下，只使用一个拷贝函数将其进行浅拷贝，这样两个类中的指针都指向了相同的一块地址，都可以对这块地址进行输入输出，例如下面这种情况：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span>* m_age;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Person</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;无参构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Person</span>(<span class="type">int</span> age)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;有参构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">m_age = <span class="keyword">new</span> <span class="built_in">int</span>(age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Person</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Person</span>(<span class="type">const</span> Person&amp; p)</span><br><span class="line">&#123;</span><br><span class="line">m_age = p.m_age;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;拷贝函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(Person p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; *p.m_age &lt;&lt; endl;</span><br><span class="line">*p.m_age += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Person <span class="title">p</span><span class="params">(<span class="number">18</span>)</span></span>;</span><br><span class="line"><span class="built_in">fun</span>(p);</span><br><span class="line">cout &lt;&lt; *p.m_age &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">有参构造函数</span><br><span class="line">拷贝函数</span><br><span class="line">18</span><br><span class="line">析构函数</span><br><span class="line">19</span><br><span class="line">析构函数</span><br></pre></td></tr></table></figure><p>根据上述结果可以发现，对于浅拷贝而言，只是把相应的地址进行了复制，现在两个指针指向的都是同一块地址，因此在$37$行处进行进行加一操作时，会对传入的对象产生影响。</p><p>不仅如此，我们在回收一个对象的时候，一般会回收当时分配的内存，类似于下述这段代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span>* m_age;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Person</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;无参构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Person</span>(<span class="type">int</span> age)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;有参构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">m_age = <span class="keyword">new</span> <span class="built_in">int</span>(age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Person</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">if</span> (m_age != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">delete</span>(m_age);  <span class="comment">//释放这部分空间</span></span><br><span class="line">m_age = <span class="literal">NULL</span>;  <span class="comment">//避免出现野指针</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Person</span>(<span class="type">const</span> Person&amp; p)</span><br><span class="line">&#123;</span><br><span class="line">m_age = p.m_age;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;拷贝函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(Person p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; *p.m_age &lt;&lt; endl;</span><br><span class="line">*p.m_age += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Person <span class="title">p</span><span class="params">(<span class="number">18</span>)</span></span>;</span><br><span class="line"><span class="built_in">fun</span>(p);</span><br><span class="line">cout &lt;&lt; *p.m_age &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行这段代码的时候会产生问题报错，主要原因在于析构函数那里，回收<code>fun</code>函数产生的对象的时候能够正确完成回收操作。但是回收主函数这个对象的时候，由于他们本质上指向的是同一个地址，会导致回收这部分的内存空间将会是一个非法操作。</p><p>为了解决上述问题，我们就需要使用深拷贝的方法。深拷贝相当于创建了一个新的地址，之后将相应的值拷贝过来，可以有效避免上述情况。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span>* m_age;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Person</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;无参构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Person</span>(<span class="type">int</span> age)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;有参构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">m_age = <span class="keyword">new</span> <span class="built_in">int</span>(age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Person</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">if</span> (m_age != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">delete</span>(m_age);  <span class="comment">//释放这部分空间</span></span><br><span class="line">m_age = <span class="literal">NULL</span>;  <span class="comment">//避免出现野指针</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Person</span>(<span class="type">const</span> Person&amp; p)</span><br><span class="line">&#123;</span><br><span class="line">m_age = <span class="keyword">new</span> <span class="built_in">int</span>(*p.m_age);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;拷贝函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(Person p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; *p.m_age &lt;&lt; endl;</span><br><span class="line">*p.m_age += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Person <span class="title">p</span><span class="params">(<span class="number">18</span>)</span></span>;</span><br><span class="line"><span class="built_in">fun</span>(p);</span><br><span class="line">cout &lt;&lt; *p.m_age &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">有参构造函数</span><br><span class="line">拷贝函数</span><br><span class="line">18</span><br><span class="line">析构函数</span><br><span class="line">18</span><br><span class="line">析构函数</span><br></pre></td></tr></table></figure><p>代码的$34$行实现了深拷贝，通过申请一个新的内存空间的方式，不仅在传递函数的时候不会更改传入对象的属性值，同时释放地址的时候也不会产生报错。</p><h3 id="初始化列表"><a href="#初始化列表" class="headerlink" title="初始化列表"></a>初始化列表</h3><p><code>C++</code>提供了初始化列表语法，用来初始化属性，其语法如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">构造函数(): 属性<span class="number">1</span>(值<span class="number">1</span>), 属性<span class="number">2</span>(值<span class="number">2</span>) ... &#123;&#125;</span><br></pre></td></tr></table></figure><p>具体代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c) :<span class="built_in">m_a</span>(a), <span class="built_in">m_b</span>(b), <span class="built_in">m_c</span>(c)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> m_a, m_b, m_c;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Person <span class="title">p</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span></span>;</span><br><span class="line">cout &lt;&lt; p.m_a &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; p.m_b &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; p.m_c &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 2 3</span><br></pre></td></tr></table></figure><p>通过这种方法，可以更加便捷地进行初始化赋值操作。</p><h3 id="类对象作为类成员"><a href="#类对象作为类成员" class="headerlink" title="类对象作为类成员"></a>类对象作为类成员</h3><p><code>C++</code>类中的成员可以是另一个类的对象，我们城改成员为对象成员。</p><p>例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span></span><br><span class="line">&#123;</span><br><span class="line">    A a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>B</code>类中有对象<code>A</code>作为成员，<code>A</code>为对象成员。</p><p>那么当创建<code>B</code>对象时，<code>A</code>与<code>B</code>的构造和析构的顺序是谁先谁后？</p><p>我们可以看一下下面这段代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> :</span><br><span class="line"><span class="built_in">A</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;A的构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">A</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;A的析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">B</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;B的构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">B</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;B的析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">A a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">B b;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A的构造函数</span><br><span class="line">B的构造函数</span><br><span class="line">B的析构函数</span><br><span class="line">A的析构函数</span><br></pre></td></tr></table></figure><p>可以发现，先进行类成员的构造，之后再进行大的对象的构造。可以理解为在生产一个产品的时候，需要先构造它的零件，之后才能构造他的整体。对于析构函数而言，会先析构大的对象，之后才会依次分解其内部的对象。</p><h3 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h3><p>静态成员就是在成员变量和成员函数前加上关键字<code>static</code>，称为静态成员。</p><p>静态成员分为：</p><ul><li>静态成员变量<ul><li>所有对象共享同一份数据</li><li>在编译阶段分配内存</li><li>类内声明，类外初始化</li></ul></li><li>静态成员函数<ul><li>所有对象共享同一个函数</li><li>静态成员函数只能访问静态成员变量</li></ul></li></ul><h4 id="静态成员变量"><a href="#静态成员变量" class="headerlink" title="静态成员变量"></a>静态成员变量</h4><p>先来看一个静态成员变量的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> money;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> Person::money;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person p1;</span><br><span class="line">cout &lt;&lt; p1.money &lt;&lt; endl;</span><br><span class="line">Person p2;</span><br><span class="line">p2.money = <span class="number">100</span>;</span><br><span class="line">cout &lt;&lt; p1.money &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">100</span><br></pre></td></tr></table></figure><p>在上述例子中，我们创建了一个静态成员变量<code>money</code>，那么这个成员变量就是共享的了，但是使用前需要在全局变量的位置声明一下这个是一个成员静态变量（一定要在全局变量的位置进行声明）。在全局变量声明的时候，可以直接对他进行初始化赋值，如果不进行初始化赋值的话，默认值会设置为$0$。</p><p>接下来是主函数，我们实例化了<code>Person</code>的两个对象，可以发现，这两个对象都可以对<code>money</code>进行调用，并且更改其值都会产生相应影响。</p><p>静态成员变量，不属于某个对象上，所有对象都共享同一份数据。我们可以通过对象进行访问该静态成员变量，也可以通过类名进行访问。</p><h4 id="静态成员函数"><a href="#静态成员函数" class="headerlink" title="静态成员函数"></a>静态成员函数</h4><p>接着来看一个静态成员函数的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">fun1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">money = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">fun2</span><span class="params">(Person p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">money += p.increase_money;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> money;</span><br><span class="line"><span class="type">int</span> increase_money;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> Person::money;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person p1;</span><br><span class="line">p1.<span class="built_in">fun1</span>();</span><br><span class="line">cout &lt;&lt; p1.money &lt;&lt; endl;</span><br><span class="line">p1.increase_money = <span class="number">50</span>;</span><br><span class="line">p1.<span class="built_in">fun2</span>(p1);</span><br><span class="line">cout &lt;&lt; p1.money &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">100</span><br><span class="line">150</span><br></pre></td></tr></table></figure><p>上述代码定义了两个静态成员函数，第一个的作用是给<code>money</code>赋值，第二个的作用是给<code>money</code>加上一个值。</p><p>静态成员函数只能对静态成员变量进行操作，但是可以通过传递值的方式来与类成员变量进行数据交换。</p><h2 id="对象模型"><a href="#对象模型" class="headerlink" title="对象模型"></a>对象模型</h2><h3 id="成员的存储"><a href="#成员的存储" class="headerlink" title="成员的存储"></a>成员的存储</h3><p>在<code>C++</code>中，类内的成员变量和成员函数分开存储，只有非静态成员变量才属于类的对象上。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person p;</span><br><span class="line">cout &lt;&lt; <span class="built_in">sizeof</span>(p) &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><p>对于一个空对象而言，其所占的内存空间为$1$。因为<code>C++</code>编译器会给每个空对象也分配了一个字节的空间，这是为了区分空对象占内存的位置。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> m_A;  <span class="comment">//非静态成员变量</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person p;</span><br><span class="line">cout &lt;&lt; <span class="built_in">sizeof</span>(p) &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><p>非空的对象会分配其非静态成员变量所对应的内存空间。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> m_A;  <span class="comment">//非静态成员变量</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> m_B;  <span class="comment">//静态成员变量</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> Person::m_B;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person p;</span><br><span class="line">cout &lt;&lt; <span class="built_in">sizeof</span>(p) &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><p>静态变量不属于对象。</p><h3 id="this指针"><a href="#this指针" class="headerlink" title="this指针"></a>this指针</h3><p>通过上述例子我们知道，在<code>C++</code>中成员变量和成员函数是分开存储的，每一个非静态成员函数只会诞生一份函数实例，也就是说多个同类型的对象会共用同一块代码。</p><p>那么问题是：这一块代码是如何区分哪个对象调用自己的呢？</p><p><code>C++</code>通过提供特殊的对象指针，<code>this</code>指针，解决上述问题。**<code>this</code>指针指向被调用的成员函数所属的对象。**</p><p><code>this</code>指针是隐含每一个非静态成员函数内的一种指针。</p><p><code>this</code>指针不需要定义，直接使用即可。</p><p><code>this</code>指针的用途：</p><ul><li>当形参和成员变量同名时，可使用<code>this</code>指针来区分。</li><li>在类的非静态成员函数中返回对象本身，可使用<code>return *this</code>。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>(<span class="type">int</span> age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Person <span class="title">p</span><span class="params">(<span class="number">18</span>)</span></span>;</span><br><span class="line">cout &lt;&lt; p.age &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">18</span><br></pre></td></tr></table></figure><p>在上述代码中，可以使用<code>this</code>指针指向的是被调用的成员函数。</p><p>下面我们来看另外一种情况：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>(<span class="type">int</span> age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Person&amp; <span class="title">Add_age</span><span class="params">(Person&amp; p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;age += p.age;</span><br><span class="line">p.age += <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">20</span>)</span></span>;</span><br><span class="line">p1.<span class="built_in">Add_age</span>(p2).<span class="built_in">Add_age</span>(p2);</span><br><span class="line">cout &lt;&lt; p1.age &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; p2.age &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">51</span><br><span class="line">22</span><br></pre></td></tr></table></figure><p>第$13$行使用了引用参数，这样可以保证传进来的是本体，而不是经过拷贝函数的一个复制体。同理，这个函数的返回值也需要是相应的对象的地址。在第$27$行的位置上，我们通过链式编程的思想进行调用，可以实现反复调用一个函数。</p><h3 id="空指针访问成员函数"><a href="#空指针访问成员函数" class="headerlink" title="空指针访问成员函数"></a>空指针访问成员函数</h3><p><code>C++</code>中空指针也是可以调用成员函数的，但是也要注意有没有用到<code>this</code>指针。</p><p>如果用到<code>this</code>指针，需要加以判断保证代码的健壮性。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Hello World!&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">set_age</span><span class="params">(<span class="type">int</span> age)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span> == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person* p = <span class="literal">NULL</span>;</span><br><span class="line">p-&gt;<span class="built_in">fun</span>();</span><br><span class="line">p-&gt;<span class="built_in">set_age</span>(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br></pre></td></tr></table></figure><p>空指针也是可以调用相应的成员函数的，但是如果进行赋值操作的话，因为指针为空，会导致其报错，因此可以进行一个空指针的检查，类似于$15$行和$16$行的操作，从而提高代码的健壮性。</p><h3 id="const修饰成员函数"><a href="#const修饰成员函数" class="headerlink" title="const修饰成员函数"></a>const修饰成员函数</h3><p>常函数：</p><ul><li>成员函数后面加<code>const</code>后我们称这个函数为<strong>常函数</strong>。</li><li>常函数内不可以修改成员属性。</li><li>成员属性声明时加关键字<code>mutable</code>后，在常函数中依然可以修改。</li></ul><p>常对象：</p><ul><li>声明对象前加<code>const</code>称该对象为常对象。</li><li>常对象只能调用常函数。</li><li>常对象可以修改有<code>mutable</code>关键字的属性。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">set</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;money = <span class="number">50</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="keyword">mutable</span> <span class="type">int</span> money;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">const</span> Person p;</span><br><span class="line">p.<span class="built_in">set</span>();</span><br><span class="line">cout &lt;&lt; p.money &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">50</span><br></pre></td></tr></table></figure><p>这段代码中可以发现，常变量只能调用常函数，并且常函数内部只能修改有<code>mutable</code>关键字的成员变量。</p><h2 id="友元"><a href="#友元" class="headerlink" title="友元"></a>友元</h2><p>在程序里，有些私有属性，也想让类外特殊的一些函数或者类进行访问，就需要用到友元技术。</p><p>友元的目的就是让一个函数或者类，访问另一个类中私有成员。</p><p>友元的关键字是<code>friend</code>。</p><p>友元的三种实现：</p><ul><li>全局函数做友元</li><li>类做友元</li><li>成员函数做友元</li></ul><h3 id="全局函数友元"><a href="#全局函数友元" class="headerlink" title="全局函数友元"></a>全局函数友元</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Building</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">Good_friend</span><span class="params">(Building&amp; building)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Building</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;SittingRoom = <span class="string">&quot;客厅&quot;</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;BedRoom = <span class="string">&quot;卧室&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">string SittingRoom;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">string BedRoom;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Good_friend</span><span class="params">(Building&amp; building)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;好朋友正在参观：&quot;</span> &lt;&lt; building.SittingRoom &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;好朋友正在参观：&quot;</span> &lt;&lt; building.BedRoom &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Building building;</span><br><span class="line"><span class="built_in">Good_friend</span>(building);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">好朋友正在参观：客厅</span><br><span class="line">好朋友正在参观：卧室</span><br></pre></td></tr></table></figure><p>上述代码，在<code>Building</code>类中，客厅是公共权限，卧室是私有权限。正常来说，全局函数是没有办法对其私有成员属性进行访问的，但是我们可以在类中的任意一个位置声明函数，并且在前面加上<code>friend</code>关键字，这样就可以让全局函数访问其私有成员属性了。</p><h3 id="类友元"><a href="#类友元" class="headerlink" title="类友元"></a>类友元</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Building</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Goodfriend</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Goodfriend</span>();</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">vist</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Building* building;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Building</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">Goodfriend</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Building</span>();</span><br><span class="line"></span><br><span class="line">string SittingRoom;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">string BedRoom;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Building::<span class="built_in">Building</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;SittingRoom = <span class="string">&quot;客厅&quot;</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;BedRoom = <span class="string">&quot;卧室&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Goodfriend::<span class="built_in">Goodfriend</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;building = <span class="keyword">new</span> Building;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Goodfriend::vist</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;好朋友正在参观：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;building-&gt;SittingRoom &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;好朋友正在参观：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;building-&gt;BedRoom &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Goodfriend p;</span><br><span class="line">p.<span class="built_in">vist</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">好朋友正在参观：客厅</span><br><span class="line">好朋友正在参观：卧室</span><br></pre></td></tr></table></figure><p>这段代码，我们在第$6$行的时候声明了一下<code>Building</code>类，但是我们没有定义它的内部情况。这行代码有点类似于函数声明，提前告诉编译器我们有这个类，但是我们还没有写它的内部代码。</p><p>第$8$行是一个<code>Goodfriend</code>的类，它内部有一个构造函数，一个<code>visit</code>函数，这两个函数没有在类内直接定义，只需要在类内声明一下，在外部定义也是完全可以的。</p><p>第$18$行是一个<code>Building</code>的类，并且声明了<code>Goodfiend</code>类是它的友元类，这样可以让<code>Goodfriend</code>所实例化出来的对象也可以访问<code>Building</code>的私有成员属性。</p><p>$31$行和$37$行分别写了<code>Buildintg</code>类和<code>Goodfriend</code>类的构造函数，需要在前面声明一下这个函数属于哪个类，其中<code>Goodfriend</code>的构造函数中初始化了一下其指针，申请了一个<code>Building</code>的内存空间并指向（这个时候会调用<code>Building</code>的构造函数）。</p><p>剩下的部分与前文的代码相类似，在这里就不过多赘述。</p><h3 id="成员函数友元"><a href="#成员函数友元" class="headerlink" title="成员函数友元"></a>成员函数友元</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Building</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Goodfriend</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Goodfriend</span>();</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">vist</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Building* building;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Building</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">Goodfriend::vist</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Building</span>();</span><br><span class="line"></span><br><span class="line">string SittingRoom;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">string BedRoom;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Building::<span class="built_in">Building</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;SittingRoom = <span class="string">&quot;客厅&quot;</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;BedRoom = <span class="string">&quot;卧室&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Goodfriend::<span class="built_in">Goodfriend</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;building = <span class="keyword">new</span> Building;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Goodfriend::vist</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;好朋友正在参观：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;building-&gt;SittingRoom &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;好朋友正在参观：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;building-&gt;BedRoom &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Goodfriend p;</span><br><span class="line">p.<span class="built_in">vist</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">好朋友正在参观：客厅</span><br><span class="line">好朋友正在参观：卧室</span><br></pre></td></tr></table></figure><p>上述代码中和类友元部分的代码基本完全一致，区别在于，类友元是把类作为友元进行声明，而这部分代码是将<code>Goodfriend</code>下面的<code>visit</code>函数声明为友元，只有它可以访问<code>Building</code>中的私有成员。</p><h2 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>对已有的运算符重新进行定义，赋予其另一种功能，以适应不同的数据类型。</p><h3 id="加号运算符重载"><a href="#加号运算符重载" class="headerlink" title="加号运算符重载"></a>加号运算符重载</h3><p>作用：实现两个自定义数据类型相加的运算。</p><p>首先讲一下通过成员函数来实现加号运算符重载：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Student <span class="keyword">operator</span>+(Student s)</span><br><span class="line">&#123;</span><br><span class="line">Student temp;</span><br><span class="line">temp.name = <span class="keyword">this</span>-&gt;name + <span class="string">&quot;+&quot;</span> + s.name;</span><br><span class="line">temp.Chinese = <span class="keyword">this</span>-&gt;Chinese + s.Chinese;</span><br><span class="line">temp.English = <span class="keyword">this</span>-&gt;English + s.English;</span><br><span class="line">temp.Math = <span class="keyword">this</span>-&gt;Math + s.Math;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">string name;</span><br><span class="line"><span class="type">int</span> Math;</span><br><span class="line"><span class="type">int</span> Chinese;</span><br><span class="line"><span class="type">int</span> English;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Student s1, s2;</span><br><span class="line">s1.name = <span class="string">&quot;小明&quot;</span>;</span><br><span class="line">s1.Chinese = <span class="number">80</span>;</span><br><span class="line">s1.English = <span class="number">20</span>;</span><br><span class="line">s1.Math = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">s2.name = <span class="string">&quot;小红&quot;</span>;</span><br><span class="line">s2.Chinese = <span class="number">71</span>;</span><br><span class="line">s2.English = <span class="number">99</span>;</span><br><span class="line">s2.Math = <span class="number">64</span>;</span><br><span class="line"></span><br><span class="line">Student sum;</span><br><span class="line">sum = s1 + s2;</span><br><span class="line">cout &lt;&lt; sum.name &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;语文：&quot;</span> &lt;&lt; sum.Chinese &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;英语：&quot;</span> &lt;&lt; sum.English &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;数学：&quot;</span> &lt;&lt; sum.Math &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">小明+小红</span><br><span class="line">语文：151</span><br><span class="line">英语：119</span><br><span class="line">数学：164</span><br></pre></td></tr></table></figure><p>上述代码重新定义了一个适用于两个<code>Student</code>类型的对象相加的加号运算符，这样就可以用于自定义该对象的加法了。</p><p>接着来看一下全局函数实现加号运算符重载：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">string name;</span><br><span class="line"><span class="type">int</span> Math;</span><br><span class="line"><span class="type">int</span> Chinese;</span><br><span class="line"><span class="type">int</span> English;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Student <span class="keyword">operator</span>+(Student s1, Student s2)</span><br><span class="line">&#123;</span><br><span class="line">Student temp;</span><br><span class="line">temp.name = s1.name + <span class="string">&quot;+&quot;</span> + s2.name;</span><br><span class="line">temp.Chinese = s1.Chinese + s2.Chinese;</span><br><span class="line">temp.English = s1.English + s2.English;</span><br><span class="line">temp.Math = s1.Math + s2.Math;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Student s1, s2;</span><br><span class="line">s1.name = <span class="string">&quot;小明&quot;</span>;</span><br><span class="line">s1.Chinese = <span class="number">80</span>;</span><br><span class="line">s1.English = <span class="number">20</span>;</span><br><span class="line">s1.Math = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">s2.name = <span class="string">&quot;小红&quot;</span>;</span><br><span class="line">s2.Chinese = <span class="number">71</span>;</span><br><span class="line">s2.English = <span class="number">99</span>;</span><br><span class="line">s2.Math = <span class="number">64</span>;</span><br><span class="line"></span><br><span class="line">Student sum;</span><br><span class="line">sum = s1 + s2;</span><br><span class="line">cout &lt;&lt; sum.name &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;语文：&quot;</span> &lt;&lt; sum.Chinese &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;英语：&quot;</span> &lt;&lt; sum.English &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;数学：&quot;</span> &lt;&lt; sum.Math &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码中，通过定义了一个全局函数来实现相应的加法重载运算。</p><h3 id="左移运算符重载"><a href="#左移运算符重载" class="headerlink" title="左移运算符重载"></a>左移运算符重载</h3><p>作用：实现自定义数据类型的输出。</p><p>一般而言，不会利用成员函数重载左移运算符，因为无法实现cout在左侧。</p><p>因此只能利用全局函数重载左移运算符。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">string name;</span><br><span class="line"><span class="type">int</span> Math;</span><br><span class="line"><span class="type">int</span> Chinese;</span><br><span class="line"><span class="type">int</span> English;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Student <span class="keyword">operator</span>+(Student s1, Student s2)</span><br><span class="line">&#123;</span><br><span class="line">Student temp;</span><br><span class="line">temp.name = s1.name + <span class="string">&quot;+&quot;</span> + s2.name;</span><br><span class="line">temp.Chinese = s1.Chinese + s2.Chinese;</span><br><span class="line">temp.English = s1.English + s2.English;</span><br><span class="line">temp.Math = s1.Math + s2.Math;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; cout, Student p)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; p.name &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;语文：&quot;</span> &lt;&lt; p.Chinese &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;英语：&quot;</span> &lt;&lt; p.English &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;数学：&quot;</span> &lt;&lt; p.Math &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> cout;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Student s1, s2;</span><br><span class="line">s1.name = <span class="string">&quot;小明&quot;</span>;</span><br><span class="line">s1.Chinese = <span class="number">80</span>;</span><br><span class="line">s1.English = <span class="number">20</span>;</span><br><span class="line">s1.Math = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">s2.name = <span class="string">&quot;小红&quot;</span>;</span><br><span class="line">s2.Chinese = <span class="number">71</span>;</span><br><span class="line">s2.English = <span class="number">99</span>;</span><br><span class="line">s2.Math = <span class="number">64</span>;</span><br><span class="line"></span><br><span class="line">Student sum;</span><br><span class="line">sum = s1 + s2;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">小明+小红</span><br><span class="line">语文：151</span><br><span class="line">英语：119</span><br><span class="line">数学：164</span><br></pre></td></tr></table></figure><p>在理解这段函数之前，需要先明确一点，<code>cout</code>其实本质上也是一个对象，其类名为<code>ofstream</code>，并且我们不能修改<code>cout</code>关键字，所以我们需要使用引用的方式去传递<code>cout</code>关键字。在这之后，我们就可以正常的使用左移运算符重载了，同时根据前文中链式编程的思想，我们在输出完一个数据的时候，还希望继续输出别的数据，因此需要再返回一个<code>ofstream</code>类型的类。</p><p>一般来讲，我们会把类中的成员属性设置为私有，因此为了方便起见，我们都会直接对左移运算符重载增加一个友元声明，让它作为对应类的友元，这样可以直接访问输出其私有成员属性。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; cout, Student p);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Student</span>(string name, <span class="type">int</span> Math, <span class="type">int</span> Chinese, <span class="type">int</span> English)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;name = name;</span><br><span class="line"><span class="keyword">this</span>-&gt;Math = Math;</span><br><span class="line"><span class="keyword">this</span>-&gt;Chinese = Chinese;</span><br><span class="line"><span class="keyword">this</span>-&gt;English = English;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">string name;</span><br><span class="line"><span class="type">int</span> Math;</span><br><span class="line"><span class="type">int</span> Chinese;</span><br><span class="line"><span class="type">int</span> English;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; cout, Student p)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; p.name &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;语文：&quot;</span> &lt;&lt; p.Chinese &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;英语：&quot;</span> &lt;&lt; p.English &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;数学：&quot;</span> &lt;&lt; p.Math &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> cout;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Student <span class="title">s</span><span class="params">(<span class="string">&quot;小明&quot;</span>, <span class="number">50</span>, <span class="number">60</span>, <span class="number">70</span>)</span></span>;</span><br><span class="line">cout &lt;&lt; s &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">小明</span><br><span class="line">语文：60</span><br><span class="line">英语：70</span><br><span class="line">数学：50</span><br></pre></td></tr></table></figure><p>上述代码中，将左移运算符重载声明为了友元，这样可以直接访问其私有成员属性，成功实现了我们想要的效果。</p><h3 id="递增运算符重载"><a href="#递增运算符重载" class="headerlink" title="递增运算符重载"></a>递增运算符重载</h3><p>作用：通过重载递增运算符，实现自己的整形数据。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyInteger</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; cout, MyInteger a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">MyInteger</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;value = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyInteger&amp; <span class="keyword">operator</span>++()  <span class="comment">//前置++</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;value++;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyInteger <span class="keyword">operator</span>++(<span class="type">int</span>)  <span class="comment">//后置++</span></span><br><span class="line">&#123;</span><br><span class="line">MyInteger temp;</span><br><span class="line">temp = *<span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;value++;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> value;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; cout, MyInteger a)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; a.value;</span><br><span class="line"><span class="keyword">return</span> cout;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MyInteger a;</span><br><span class="line">cout &lt;&lt; ++a &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; a++ &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></table></figure><p>前置<code>++</code>的原理是直接在本身上加一个$1$，然后返回即可。为了实现链式编程，我们可以返回其引用类型，这样可以让它进行多次前置<code>++</code>。</p><p>后置<code>++</code>是先用一个新的临时变量记录一下最开始的值，然后让实际上的变量进行加$1$操作，最后返回的是临时变量的值。要注意我们这个与前置的区别是返回值不是引用类型，因为返回的变量是一个临时的局部变量，函数结束后会将其回收。因此如果使用引用变量并对其使用链式编程的思想，会导致非法操作从而报错。为了和后置递增做一个区分，我们可以在传参的时候传入一个占位参数，否则没有办法进行相应的重载，并且这个参数一定要是整型。</p><p>综上所示，前置<code>++</code>可以实现链式编程，而后置<code>++</code>不可以实现链式编程。</p><h3 id="赋值运算符重载"><a href="#赋值运算符重载" class="headerlink" title="赋值运算符重载"></a>赋值运算符重载</h3><p><code>C++</code>编译器至少给一个类添加$4$个函数：</p><ol><li>默认构造函数（无参，函数体为空）。</li><li>默认析构函数（无参，函数体为空）。</li><li>默认拷贝构造函数，对属性进行值拷贝。</li><li>赋值运算符<code>operator=</code>，对属性进行值拷贝。</li></ol><p>如果类中有属性指向堆，那么做赋值操作时也会出现深浅拷贝问题。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>(<span class="type">int</span> age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;age = <span class="keyword">new</span> <span class="built_in">int</span>(age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Person</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;age != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">delete</span>(<span class="keyword">this</span>-&gt;age);</span><br><span class="line"><span class="keyword">this</span>-&gt;age = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person&amp; <span class="keyword">operator</span>=(Person&amp; p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;age != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">delete</span>(<span class="keyword">this</span>-&gt;age);</span><br><span class="line"><span class="keyword">this</span>-&gt;age = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//深拷贝</span></span><br><span class="line"><span class="keyword">this</span>-&gt;age = <span class="keyword">new</span> <span class="built_in">int</span>(*p.age);</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>* age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">18</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">20</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p3</span><span class="params">(<span class="number">30</span>)</span></span>;</span><br><span class="line">p3 = p2 = p1;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;p1的年龄为：&quot;</span> &lt;&lt; *p1.age &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;p2的年龄为：&quot;</span> &lt;&lt; *p2.age &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;p3的年龄为：&quot;</span> &lt;&lt; *p3.age &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p1的年龄为：18</span><br><span class="line">p2的年龄为：18</span><br><span class="line">p3的年龄为：18</span><br></pre></td></tr></table></figure><p>上述代码中，我们重载了赋值运算符，使其能够正确的赋值开辟在堆区的数据。同时使用该类作为返回值，可以实现相应的链式存储。</p><h3 id="关系运算符重载"><a href="#关系运算符重载" class="headerlink" title="关系运算符重载"></a>关系运算符重载</h3><p>作用：重载关系运算符，可以让两个自定义类型对象进行比较操作。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>(string name, <span class="type">int</span> age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;name = name;</span><br><span class="line"><span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> == (Person p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;name == p.name &amp;&amp; <span class="keyword">this</span>-&gt;age == p.age)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> != (Person p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;name != p.name || <span class="keyword">this</span>-&gt;age != p.age)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">string name;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">&quot;Tom&quot;</span>, <span class="number">18</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">&quot;Tom&quot;</span>, <span class="number">18</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p3</span><span class="params">(<span class="string">&quot;Jerry&quot;</span>, <span class="number">18</span>)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (p1 == p2)</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;两个人是同一个人&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (p1 != p3)</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;两个人不是同一个人&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">两个人是同一个人</span><br><span class="line">两个人不是同一个人</span><br></pre></td></tr></table></figure><p>这段代码通过重载关系运算符，实现了两个自定义对象的运算。</p><h3 id="函数调用运算符重载"><a href="#函数调用运算符重载" class="headerlink" title="函数调用运算符重载"></a>函数调用运算符重载</h3><p>函数调用运算符<code>()</code>也可以重载，由于重载后使用的方式非常像函数的调用，因此成为仿函数。仿函数没有固定的写法，非常灵活。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPrint</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(string s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MyPrint p;</span><br><span class="line"><span class="built_in">p</span>(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line"><span class="built_in">MyPrint</span>()(<span class="string">&quot;好耶！&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br><span class="line">好耶！</span><br></pre></td></tr></table></figure><p>上述代码通过仿函数的方式实现了输出函数，$19$行使用的是匿名对象调用的方式，不创建一个具体的对象，直接对对象中的函数进行调用。</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h3 id="基本语法-1"><a href="#基本语法-1" class="headerlink" title="基本语法"></a>基本语法</h3><p><strong>继承是面向对象三大特性之一</strong></p><p>有些类与类之间存在特殊的关系，例如下图中：</p><p><img src="/img/posts/C++/%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB.jpg" alt="继承关系"></p><p>我们发现，定义这些类时，下级别的成员除了拥有上一级的共性，还有自己的特性。</p><p>这个时候我们就可以考虑利用继承的技术，减少重复的代码。</p><p>继承的语法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> 子类 :继承方式 父类</span><br></pre></td></tr></table></figure><p>子类也称为派生类，父类也称为基类。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EXAM</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">information</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;考试科目为：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;name &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;该科目得分为：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;score &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">string name;  <span class="comment">//存储考试科目名称</span></span><br><span class="line"><span class="type">int</span> score;  <span class="comment">//存储得分</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MATH</span> :<span class="keyword">public</span> EXAM</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">other</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;数学附加题得分：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;add &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> add;  <span class="comment">//存储附加题得分（数学科目特有的附加题）</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ENGLISH</span> :<span class="keyword">public</span> EXAM</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">other</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;英语听力得分：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;aural &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> aural;  <span class="comment">//存储英语听力得分（英语科目特有的听力）</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MATH exam1;</span><br><span class="line">exam1.name = <span class="string">&quot;数学&quot;</span>;</span><br><span class="line">exam1.score = <span class="number">99</span>;</span><br><span class="line">exam1.add = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">ENGLISH exam2;</span><br><span class="line">exam2.name = <span class="string">&quot;英语&quot;</span>;</span><br><span class="line">exam2.score = <span class="number">67</span>;</span><br><span class="line">exam2.aural = <span class="number">25</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">exam1.<span class="built_in">information</span>();</span><br><span class="line">exam1.<span class="built_in">other</span>();</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">exam2.<span class="built_in">information</span>();</span><br><span class="line">exam2.<span class="built_in">other</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">考试科目为：数学</span><br><span class="line">该科目得分为：99</span><br><span class="line">数学附加题得分：10</span><br><span class="line"></span><br><span class="line">考试科目为：英语</span><br><span class="line">该科目得分为：67</span><br><span class="line">英语听力得分：25</span><br></pre></td></tr></table></figure><p>这段代码定义了一个父类，用于存储和输出考试的信息，同时也是考试共有的信息，也就是每一个考试都拥有的基本信息。还有两个子类，分别继承了考试这个父类，两个子类各自有附加题和听力这两个独特的属性，因此需要在两个子类中分别定义一下。</p><h3 id="继承方式"><a href="#继承方式" class="headerlink" title="继承方式"></a>继承方式</h3><p>上一小节中，我们使用的继承方式是<code>public</code>，也就是公有继承，实际上，一共有三种继承方式：</p><ul><li>公有继承 <code>public</code></li><li>保护继承 <code>protected</code></li><li>私有继承 <code>private</code></li></ul><p><img src="/img/posts/C++/%E7%BB%A7%E6%89%BF%E6%96%B9%E5%BC%8F.jpg" alt="继承方式"></p><p>在公有继承中，父类中的公有和保护都可以继承，公有依旧为公有，保护依旧为保护。</p><p>在保护继承中，父类中的公有和保护都可以继承，公有和保护均为保护。</p><p>在私有继承中，父类中的公有和保护都可以继承，公有和保护均为私有。</p><p>同时，所有的继承方式都不可以访问父类中的私有。</p><h3 id="对象模型-1"><a href="#对象模型-1" class="headerlink" title="对象模型"></a>对象模型</h3><p>继承下来的成员属性，有多少是属于子类的，可以看一下下面的代码来验证这件事情：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">test</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="type">int</span> b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> c;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">son</span> :<span class="keyword">public</span> test</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> d;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="built_in">sizeof</span>(son) &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">16</span><br></pre></td></tr></table></figure><p>可见，继承下来的类，会包含父类的所有成员属性，也就是说，父类中的所有非静态成员属性都会被子类继承下去。</p><p>父类中私有成员属性，在继承的时候被编译器给隐藏了，因此是访问不到的，但是确实被继承下去了。</p><h3 id="构造与析构顺序"><a href="#构造与析构顺序" class="headerlink" title="构造与析构顺序"></a>构造与析构顺序</h3><p>子类继承父类后，当创建子类对象，也会调用父类的构造函数。所以，我们需要明确父类和子类的构造和析构顺序是谁先谁后。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Base</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Base构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Base</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Base析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> : <span class="keyword">public</span> Base</span><br><span class="line">    </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Son</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Son构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Son</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Son析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Son test;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Base构造函数</span><br><span class="line">Son构造函数</span><br><span class="line">Son析构函数</span><br><span class="line">Base析构函数</span><br></pre></td></tr></table></figure><p>继承中的构造和析构顺序，应该是先构造父类，再构造子类，析构的顺序与构造的顺序相反。</p><h3 id="同名成员处理方式"><a href="#同名成员处理方式" class="headerlink" title="同名成员处理方式"></a>同名成员处理方式</h3><p>当子类和父类出现同名的成员，需要区别一下二者的访问方式：</p><ul><li>访问子类同名成员 直接访问即可</li><li>访问父类同名成员 需要加作用域</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Base</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;value = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> value;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> : <span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Son</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;value = <span class="number">200</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> value;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Son test;</span><br><span class="line">cout &lt;&lt; test.value &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; test.Base::value &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">200</span><br><span class="line">100</span><br></pre></td></tr></table></figure><p>如果要访问子类中的成员直接调用即可，如果要访问父类中的成员，则需要使用<code>父类::成员</code>的方式进行访问。</p><p>总结一下：</p><ul><li>子类对象可以直接访问到子类中同名成员</li><li>子类对象加作用域可以访问到父类同名成员</li><li>当子类和父类拥有同名的成员函数，子类会隐藏父类中同名的成员函数，加作用域可以访问到父类中同名函数</li></ul><h3 id="同名静态成员处理方式"><a href="#同名静态成员处理方式" class="headerlink" title="同名静态成员处理方式"></a>同名静态成员处理方式</h3><p>静态成员和非静态成员出现同名，处理方式一致：</p><ul><li>访问子类同名成员 直接访问即可</li><li>访问父类同名成员 需要加作用域</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> value;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> : <span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> value;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> Base::value = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> Son::value = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Son test;</span><br><span class="line">cout &lt;&lt; test.value &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; test.Base::value &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">200</span><br><span class="line">100</span><br></pre></td></tr></table></figure><p>需要注意的是，静态成员需要在类内声明，类外定义初始化，否则程序会报错。</p><h3 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h3><p><code>C++</code>允许一个类继承多个类。</p><p>基本语法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> 子类 : 继承方式 父类<span class="number">1</span>, 继承方式 父类<span class="number">2.</span>..</span><br></pre></td></tr></table></figure><p>多继承可能会引发父类中有同名成员出现，需要加作用域区分。</p><p><strong><code>C++</code>实际开发中不建议使用多继承。</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base1</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Base1</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;value = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> value;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base2</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Base2</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;value = <span class="number">200</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> value;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> :<span class="keyword">public</span> Base1, <span class="keyword">public</span> Base2</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Son</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;value = <span class="number">300</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> value;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Son test;</span><br><span class="line">cout &lt;&lt; test.value &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; test.Base1::value &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; test.Base2::value &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">300</span><br><span class="line">100</span><br><span class="line">200</span><br></pre></td></tr></table></figure><p>上述代码的结果与同名成员的处理方式相类似，因此不在这里过多赘述。</p><p>总结一下：如果多继承中父类出现了同名情况，子类使用时要加作用域。</p><h3 id="菱形继承"><a href="#菱形继承" class="headerlink" title="菱形继承"></a>菱形继承</h3><p>菱形继承指的是，两个派生类继承同一个基类，又有某个类同时继承两个派生类，这种继承被称为菱形继承，或者钻石继承。</p><p>例如现在有一个动物类，有一个基本的属性是年龄，他的下面有两个子类，分别是马和驴，这两个子类还有一个共同的派生类叫做骡子。很明显，马和驴都各自有一个从动物类中继承过来的年龄属性，然后骡子类继承这两个类，就会拥有两个年龄属性。但是我们都知道，我们只需要一个年龄属性就够了，当使用骡子的年龄数据的时候，就会产生二义性。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ma</span> :<span class="keyword">virtual</span> <span class="keyword">public</span> Animal</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">lv</span> :<span class="keyword">virtual</span> <span class="keyword">public</span> Animal</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">luozi</span> :<span class="keyword">public</span> ma, <span class="keyword">public</span> lv</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">luozi test;</span><br><span class="line">test.ma::age = <span class="number">6</span>;</span><br><span class="line">test.lv::age = <span class="number">5</span>;</span><br><span class="line">test.age = <span class="number">2</span>;</span><br><span class="line">cout &lt;&lt; test.ma::age &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; test.lv::age &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; test.age &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">2</span><br><span class="line">2</span><br></pre></td></tr></table></figure><p>为了解决上述问题，我们可以使用一个叫做虚继承的东西，即在继承之前，加上关键字<code>virtual</code>，让这个继承变为虚继承，被继承的类也叫做虚基类。使用这种方法，相当于继承下来一个地址，可以保证继承下来的数据只有一份，因此这三种方式都可以指向目标数据。</p><p>菱形继承带来的问题主要是子类继承两份相同的数据，导致资源浪费以及毫无意义，利用虚继承可以解决菱形继承问题。</p><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p><strong>多态是<code>C++</code>面相对象三大特性之一。</strong></p><p>多态分为两类：</p><ul><li>静态多态：函数重载和运算符重载属于静态多态</li><li>动态多态：派生类和虚函数实现运行时多态</li></ul><p>静态多态和静态多态区别：</p><ul><li>静态多态的函数地址早绑定——编译阶段确定函数地址</li><li>动态多态的函数地址晚绑定——运行阶段确定函数地址</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">speak</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;动物在说话&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> :<span class="keyword">public</span> Animal</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">speak</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;猫在说话&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> :<span class="keyword">public</span> Animal</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">speak</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;狗在说话&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">doSpeak</span><span class="params">(Animal&amp; animal)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">animal.<span class="built_in">speak</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Cat cat;</span><br><span class="line"><span class="built_in">doSpeak</span>(cat);</span><br><span class="line"></span><br><span class="line">Dog dog;</span><br><span class="line"><span class="built_in">doSpeak</span>(dog);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">猫在说话</span><br><span class="line">狗在说话</span><br></pre></td></tr></table></figure><p>上述代码中，定义了一个基类，然后有定义了两个子类，他们都有<code>speak</code>函数。对于基类而言，将该函数定义为了虚函数，也就是前面加上了<code>virtual</code>关键字，这样可以实现动态多态，也就是所有继承该基类的子类，调用函数时可以调用自己的同名函数。这里有一个注意点，基类指针可以直接指向子类对象，不需要进行转换。</p><p>动态多态需要有继承关系，并且子类重写父类的虚函数，也就是函数返回值类型，函数名，参数列表完全一致。调用时使用父类的指针或者引用，可以直接执行子类对象。</p><h3 id="多态原理"><a href="#多态原理" class="headerlink" title="多态原理"></a>多态原理</h3><p>在父类中，如果只定义一个普通的函数，那么这个类占用的字节数为$1$（之前的小节中讲过这个问题）。如果我们定义的是虚函数，那么这个类就会占用$4$个字节，这就相当于定义了一个虚函数表指针（<code>vfptr</code>）。虚函数表中记录的是虚函数的地址，一个指针所占的字节数是$4$，所以其占用空间会发生变化。</p><p>如果子类重写父类的虚函数，那么子类中的虚函数表内部会替换成子类的虚函数地址，可以理解为覆盖掉父类的虚函数。当父类的<strong>指针</strong>或者<strong>引用</strong>指向子类对象时，会发生多态。</p><p>使用多态有如下优点：</p><ul><li>代码组织结构清晰</li><li>可读性强</li><li>利于前期和后期的扩展以及维护</li></ul><h3 id="计算器案例"><a href="#计算器案例" class="headerlink" title="计算器案例"></a>计算器案例</h3><p>实现一个计算器，能够执行两个数字的加法、减法、乘法运算。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AbstractCalculator</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">getRusult</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> num1, num2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Add</span> :<span class="keyword">public</span> AbstractCalculator</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getRusult</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;num1 + <span class="keyword">this</span>-&gt;num2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sub</span> :<span class="keyword">public</span> AbstractCalculator</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getRusult</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;num1 - <span class="keyword">this</span>-&gt;num2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mul</span> :<span class="keyword">public</span> AbstractCalculator</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getRusult</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;num1 * <span class="keyword">this</span>-&gt;num2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">AbstractCalculator* calc;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加法</span></span><br><span class="line">calc = <span class="keyword">new</span> Add;</span><br><span class="line">calc-&gt;num1 = <span class="number">5</span>;</span><br><span class="line">calc-&gt;num2 = <span class="number">3</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;加法运算结果：&quot;</span> &lt;&lt; calc-&gt;<span class="built_in">getRusult</span>() &lt;&lt; endl;</span><br><span class="line"><span class="keyword">delete</span> calc;</span><br><span class="line"></span><br><span class="line"><span class="comment">//减法</span></span><br><span class="line">calc = <span class="keyword">new</span> Sub;</span><br><span class="line">calc-&gt;num1 = <span class="number">5</span>;</span><br><span class="line">calc-&gt;num2 = <span class="number">3</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;减法运算结果：&quot;</span> &lt;&lt; calc-&gt;<span class="built_in">getRusult</span>() &lt;&lt; endl;</span><br><span class="line"><span class="keyword">delete</span> calc;</span><br><span class="line"></span><br><span class="line"><span class="comment">//乘法</span></span><br><span class="line">calc = <span class="keyword">new</span> Mul;</span><br><span class="line">calc-&gt;num1 = <span class="number">5</span>;</span><br><span class="line">calc-&gt;num2 = <span class="number">3</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;乘法运算结果：&quot;</span> &lt;&lt; calc-&gt;<span class="built_in">getRusult</span>() &lt;&lt; endl;</span><br><span class="line"><span class="keyword">delete</span> calc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">加法运算结果：8</span><br><span class="line">减法运算结果：2</span><br><span class="line">乘法运算结果：15</span><br></pre></td></tr></table></figure><p>上述代码中，父类中只有一个虚函数和共有的两个数字的定义，这么做可以提高代码的可扩展性。在子类中重写父类的运算函数，通过定义不同类型的子类，来执行相应的运算。</p><p>如果使用传统方式进行代码编写，想要扩展新的功能的话，需要修改源码，但是在真实开发中，提倡开闭原则。</p><p>所谓开闭原则，就是对扩展进行开放，对修改进行关闭。</p><h3 id="纯虚函数和抽象类"><a href="#纯虚函数和抽象类" class="headerlink" title="纯虚函数和抽象类"></a>纯虚函数和抽象类</h3><p>在多态中，通常父类中虚函数的实现是毫无意义的，主要都是调用子类重写的内容。</p><p>因此可以将虚函数改为<strong>纯虚函数。</strong></p><p>纯虚函数语法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">virtual</span> 返回值类型 参数名(参数列表) = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>当类中有了纯虚函数，这个类也称为抽象类。</p><p>抽象类的特点：</p><ul><li>无法实例化对象</li><li>子类必须重写抽象类中的纯虚函数，否则也属于抽象类。</li></ul><p>我们可以使用这种方式优化一下计算器案例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AbstractCalculator</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">getRusult</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> num1, num2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Add</span> :<span class="keyword">public</span> AbstractCalculator</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getRusult</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;num1 + <span class="keyword">this</span>-&gt;num2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sub</span> :<span class="keyword">public</span> AbstractCalculator</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getRusult</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;num1 - <span class="keyword">this</span>-&gt;num2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mul</span> :<span class="keyword">public</span> AbstractCalculator</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getRusult</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;num1 * <span class="keyword">this</span>-&gt;num2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">AbstractCalculator* calc;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加法</span></span><br><span class="line">calc = <span class="keyword">new</span> Add;</span><br><span class="line">calc-&gt;num1 = <span class="number">5</span>;</span><br><span class="line">calc-&gt;num2 = <span class="number">3</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;加法运算结果：&quot;</span> &lt;&lt; calc-&gt;<span class="built_in">getRusult</span>() &lt;&lt; endl;</span><br><span class="line"><span class="keyword">delete</span> calc;</span><br><span class="line"></span><br><span class="line"><span class="comment">//减法</span></span><br><span class="line">calc = <span class="keyword">new</span> Sub;</span><br><span class="line">calc-&gt;num1 = <span class="number">5</span>;</span><br><span class="line">calc-&gt;num2 = <span class="number">3</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;减法运算结果：&quot;</span> &lt;&lt; calc-&gt;<span class="built_in">getRusult</span>() &lt;&lt; endl;</span><br><span class="line"><span class="keyword">delete</span> calc;</span><br><span class="line"></span><br><span class="line"><span class="comment">//乘法</span></span><br><span class="line">calc = <span class="keyword">new</span> Mul;</span><br><span class="line">calc-&gt;num1 = <span class="number">5</span>;</span><br><span class="line">calc-&gt;num2 = <span class="number">3</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;乘法运算结果：&quot;</span> &lt;&lt; calc-&gt;<span class="built_in">getRusult</span>() &lt;&lt; endl;</span><br><span class="line"><span class="keyword">delete</span> calc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">加法运算结果：8</span><br><span class="line">减法运算结果：2</span><br><span class="line">乘法运算结果：15</span><br></pre></td></tr></table></figure><p>在第$8$行定义了一个纯虚函数，因此这个类也是一个抽象类。</p><h3 id="虚析构和纯虚析构"><a href="#虚析构和纯虚析构" class="headerlink" title="虚析构和纯虚析构"></a>虚析构和纯虚析构</h3><p>多态使用时，如果子类中有属性开辟到堆区，那么父类指针在释放时无法调用到子类的析构代码。</p><p>例如下面这个例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Animal</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Animal构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Animal</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Animal析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">speak</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> :<span class="keyword">public</span> Animal</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Cat</span>(string name)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Cat构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">this</span>-&gt;name = <span class="keyword">new</span> <span class="built_in">string</span>(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Cat</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Cat析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;name != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">this</span>-&gt;name;</span><br><span class="line"><span class="keyword">this</span>-&gt;name = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">speak</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; *<span class="keyword">this</span>-&gt;name &lt;&lt; <span class="string">&quot;猫正在说话&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">string* name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Animal* animal = <span class="keyword">new</span> <span class="built_in">Cat</span>(<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">animal-&gt;<span class="built_in">speak</span>();</span><br><span class="line"><span class="keyword">delete</span> animal;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Animal构造函数</span><br><span class="line">Cat构造函数</span><br><span class="line">Tom猫正在说话</span><br><span class="line">Animal析构函数</span><br></pre></td></tr></table></figure><p>上述例子中可以发现，就算是<code>delete</code>了父类对象，也不会去调用子类对象的析构函数，这就会导致内存没有办法直接释放，会造成内存占用。</p><p>解决方式：将父类中的析构函数改为<strong>虚析构</strong>或者<strong>纯虚析构</strong>。</p><p>虚析构和纯虚析构共性：</p><ul><li>可以解决父类指针释放子类对象</li><li>都需要有具体的函数实现</li></ul><p>虚析构和纯虚析构区别：</p><ul><li>如果是纯虚析构，该类属于抽象类，无法实例化对象。</li></ul><p>虚析构语法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">virtual</span> ~类名()&#123;&#125;</span><br></pre></td></tr></table></figure><p>纯虚析构语法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">virtual</span> ~类名() = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>我们先来看一下虚析构的写法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Animal</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Animal构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">virtual</span> ~<span class="built_in">Animal</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Animal虚析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">speak</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> :<span class="keyword">public</span> Animal</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Cat</span>(string name)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Cat构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">this</span>-&gt;name = <span class="keyword">new</span> <span class="built_in">string</span>(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Cat</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Cat析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;name != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">this</span>-&gt;name;</span><br><span class="line"><span class="keyword">this</span>-&gt;name = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">speak</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; *<span class="keyword">this</span>-&gt;name &lt;&lt; <span class="string">&quot;猫正在说话&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">string* name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Animal* animal = <span class="keyword">new</span> <span class="built_in">Cat</span>(<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">animal-&gt;<span class="built_in">speak</span>();</span><br><span class="line"><span class="keyword">delete</span> animal;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Animal构造函数</span><br><span class="line">Cat构造函数</span><br><span class="line">Tom猫正在说话</span><br><span class="line">Cat析构函数</span><br><span class="line">Animal虚析构函数</span><br></pre></td></tr></table></figure><p>上述代码中，只更改了第$14$行，在前面加上了一个<code>virtual</code>关键字。通过这种方法，就会先去执行子类的析构函数，再执行父类的析构函数。</p><p>再来看一下另外一种方法，即纯虚析构：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Animal</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Animal构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">virtual</span> ~<span class="built_in">Animal</span>() = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">speak</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Animal::~<span class="built_in">Animal</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Animal纯虚析构函数调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> :<span class="keyword">public</span> Animal</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Cat</span>(string name)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Cat构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">this</span>-&gt;name = <span class="keyword">new</span> <span class="built_in">string</span>(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Cat</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Cat析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;name != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">this</span>-&gt;name;</span><br><span class="line"><span class="keyword">this</span>-&gt;name = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">speak</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; *<span class="keyword">this</span>-&gt;name &lt;&lt; <span class="string">&quot;猫正在说话&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">string* name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Animal* animal = <span class="keyword">new</span> <span class="built_in">Cat</span>(<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">animal-&gt;<span class="built_in">speak</span>();</span><br><span class="line"><span class="keyword">delete</span> animal;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Animal构造函数</span><br><span class="line">Cat构造函数</span><br><span class="line">Tom猫正在说话</span><br><span class="line">Cat析构函数</span><br><span class="line">Animal纯虚析构函数调用</span><br></pre></td></tr></table></figure><p>纯虚析构与虚析构有一个区别，需要在外部再次定义一下这个函数。因为析构函数是对象在释放后必须执行的部分，所以必须对其进行内部操作的定义。语法强制纯虚析构函数必须有函数实现，有时父类也有一些数据开辟在堆区。</p><p>总结：</p><ol><li>虚析构或纯虚析构就是用来解决通过父类指针释放子类对象</li><li>如果子类中没有堆区数据，可以不写虚析构或纯虚析构</li><li>拥有纯虚析构函数的类也属于抽象类</li></ol><h1 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h1><h2 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h2><p>程序运行时产生的数据都属于临时数据，程序一旦运行结束都会被释放。</p><p>通过<strong>文件可以将数据持久化</strong>。</p><p><code>C++</code>中对文件操作需要包含头文件<code>&lt;fstream&gt;</code></p><p>文件类型分为两种：</p><ol><li><strong>文本文件</strong> 文件以文本的**<code>ASCII</code>码**形式存储在计算机中</li><li><strong>二进制文件</strong> 文件以文本的<strong>二进制</strong>形式存储在计算机中，用户一般不能直接读懂它们</li></ol><p>操作文件的三大类：</p><ol><li><code>ofstream</code>：写操作</li><li><code>ifstream</code>：读操作</li><li><code>fstream</code>：读写操作</li></ol><h2 id="文本文件"><a href="#文本文件" class="headerlink" title="文本文件"></a>文本文件</h2><h3 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h3><p>写文件步骤如下：</p><ol><li>包含头文件 <code>#include &lt;fstream&gt;</code></li><li>创建流对象 <code>ofstream ofs;</code></li><li>打开文件 <code>ofs.open(&quot;文件路径&quot;, 打开方式);</code></li><li>写数据 <code>ofs &lt;&lt; &quot;写入的数据&quot;;</code></li><li>关闭文件 <code>ofs.close();</code></li></ol><p>文件的打开方式：</p><table><thead><tr><th align="center">打开方式</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center"><code>ios::in</code></td><td align="center">为读文件而打开文件</td></tr><tr><td align="center"><code>ios::out</code></td><td align="center">为写文件而打开文件</td></tr><tr><td align="center"><code>ios::ate</code></td><td align="center">初始位置：文件尾</td></tr><tr><td align="center"><code>ios::app</code></td><td align="center">追加方式写文件</td></tr><tr><td align="center"><code>ios::trunc</code></td><td align="center">如果文件存在先删除，再创建</td></tr><tr><td align="center"><code>ios::binary</code></td><td align="center">二进制方式</td></tr></tbody></table><p><strong>注意：</strong>文件打开方式可以配合使用，利用<code>|</code>操作符。</p><p><strong>例如：</strong>用二进制方式写文件<code>ios::binary | ios::out</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ofstream ofs;  <span class="comment">//创建流对象</span></span><br><span class="line">ofs.<span class="built_in">open</span>(<span class="string">&quot;test.txt&quot;</span>, ios::out);  <span class="comment">//指定打开文件和打开方式</span></span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;Hello World!&quot;</span> &lt;&lt; endl;  <span class="comment">//写内容</span></span><br><span class="line">ofs.<span class="built_in">close</span>();  <span class="comment">//关闭文件</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文件中结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br></pre></td></tr></table></figure><p>如果文件没有指定相对路径或者绝对路径，那么会在该程序所在目录创建一个相应的文件。</p><p>总结：</p><ul><li>文件操作必须包含头文件<code>fstream</code></li><li>读文件可以利用<code>ofstream</code>，或者<code>fstream</code>类</li><li>打开文件时需要指定操作文件路径和打开方式</li><li>利用<code>&lt;&lt;</code>可以向文件中写数据</li><li>操作完毕后，要关闭文件</li></ul><h3 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h3><p>读文件与写文件步骤相似，但是读取方式相对较多。</p><p>读文件步骤如下：</p><ol><li>包含头文件 <code>#include &lt;fstream&gt;</code></li><li>创建流对象 <code>ifstream ifs;</code></li><li>打开文件 <code>ifs.open(&quot;文件路径&quot;, 打开方式);</code></li><li>读数据 四种方式读取</li><li>关闭文件 <code>ifs.close();</code></li></ol><p>我们先来看一下文件中准备的数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br><span class="line">My name is Bigglesworth.</span><br></pre></td></tr></table></figure><p>第一种方式：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ifstream ifs;</span><br><span class="line">ifs.<span class="built_in">open</span>(<span class="string">&quot;test.txt&quot;</span>, ios::in);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!ifs.<span class="built_in">is_open</span>())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;文件打开失败！&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> buf[<span class="number">1024</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">while</span> (ifs &gt;&gt; buf)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; buf &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">ifs.<span class="built_in">close</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Hello</span><br><span class="line">World!</span><br><span class="line">My</span><br><span class="line">name</span><br><span class="line">is</span><br><span class="line">Bigglesworth.</span><br></pre></td></tr></table></figure><p>第二种方式：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ifstream ifs;</span><br><span class="line">ifs.<span class="built_in">open</span>(<span class="string">&quot;test.txt&quot;</span>, ios::in);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!ifs.<span class="built_in">is_open</span>())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;文件打开失败！&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> buf[<span class="number">1024</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">while</span> (ifs.<span class="built_in">getline</span>(buf, <span class="built_in">sizeof</span>(buf)))</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; buf &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">ifs.<span class="built_in">close</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br><span class="line">My name is Bigglesworth.</span><br></pre></td></tr></table></figure><p>第三种方式：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ifstream ifs;</span><br><span class="line">ifs.<span class="built_in">open</span>(<span class="string">&quot;test.txt&quot;</span>, ios::in);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!ifs.<span class="built_in">is_open</span>())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;文件打开失败！&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">string buf;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">getline</span>(ifs, buf))</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; buf &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">ifs.<span class="built_in">close</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br><span class="line">My name is Bigglesworth.</span><br></pre></td></tr></table></figure><p>第四种方式：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ifstream ifs;</span><br><span class="line">ifs.<span class="built_in">open</span>(<span class="string">&quot;test.txt&quot;</span>, ios::in);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!ifs.<span class="built_in">is_open</span>())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;文件打开失败！&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> c;</span><br><span class="line"><span class="keyword">while</span> ((c = ifs.<span class="built_in">get</span>()) != EOF)  <span class="comment">//EOF end of line</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; c;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">ifs.<span class="built_in">close</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br><span class="line">My name is Bigglesworth.</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>读文件可以利用<code>ifstream</code>，或者<code>fstream</code>类</li><li>利用<code>is_open</code>函数可以判断文件是否打开成功</li><li><code>close</code>关闭文件</li></ul><h2 id="二进制文件"><a href="#二进制文件" class="headerlink" title="二进制文件"></a>二进制文件</h2><p>以二进制的方式对文件进行读写操作</p><p>打开方式要指定为<code>ios::binary</code></p><h3 id="写文件-1"><a href="#写文件-1" class="headerlink" title="写文件"></a>写文件</h3><p>二进制方式写文件主要利用流对象调用成员函数<code>write</code>。</p><p>函数原型：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ostream&amp; <span class="title">write</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* buffer, <span class="type">int</span> len)</span></span>;</span><br></pre></td></tr></table></figure><p>字符指针<code>buffer</code>指向内存中一段存储空间，<code>len</code>是读写的字节数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">ofstream <span class="title">ofs</span><span class="params">(<span class="string">&quot;data.txt&quot;</span>, ios::out | ios::binary)</span></span>;</span><br><span class="line"><span class="type">int</span> a[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)</span><br><span class="line">a[i - <span class="number">1</span>] = i * i;</span><br><span class="line"></span><br><span class="line">ofs.<span class="built_in">write</span>((<span class="type">const</span> <span class="type">char</span>*)&amp;a, <span class="built_in">sizeof</span>(a));</span><br><span class="line"></span><br><span class="line">ofs.<span class="built_in">close</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过这种方式，可以得到一个二进制文件。</p><h3 id="读文件-1"><a href="#读文件-1" class="headerlink" title="读文件"></a>读文件</h3><p>二进制方式读文件主要利用流对象调用成员函数<code>red</code>。</p><p>函数原型：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">istream&amp; <span class="title">read</span><span class="params">(<span class="type">char</span>* buffer, <span class="type">int</span> len)</span></span>;</span><br></pre></td></tr></table></figure><p>字符指针<code>buffer</code>指向内存中一段存储空间，<code>len</code>是读写的字节数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">ifstream <span class="title">ifs</span><span class="params">(<span class="string">&quot;data.txt&quot;</span>, ios::in | ios::binary)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!ifs.<span class="built_in">is_open</span>())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;文件打开失败！&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">ifs.<span class="built_in">read</span>((<span class="type">char</span>*)&amp;a, <span class="built_in">sizeof</span>(a));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line">ifs.<span class="built_in">close</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 4 9 16 25 36 49 64 81 100</span><br></pre></td></tr></table></figure><p>虽然二进制文件在输出时是乱码，但是读取的时候可以使用二进制方式正常读取。</p><hr>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 教程 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LaTex数学公式</title>
      <link href="/archives/fc50cd32.html"/>
      <url>/archives/fc50cd32.html</url>
      
        <content type="html"><![CDATA[<hr><h1 id="上下标"><a href="#上下标" class="headerlink" title="上下标"></a>上下标</h1><table><thead><tr><th align="center">算式</th><th align="center">Markdown</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">$a_{i}$</td><td align="center"><code>$a_&#123;i&#125;$</code></td><td align="center">下标</td></tr><tr><td align="center">$a^{2}$</td><td align="center"><code>$a^&#123;2&#125;$</code></td><td align="center">上标</td></tr></tbody></table><h1 id="括号"><a href="#括号" class="headerlink" title="括号"></a>括号</h1><h2 id="基础括号"><a href="#基础括号" class="headerlink" title="基础括号"></a>基础括号</h2><table><thead><tr><th align="center">算式</th><th align="center">Markdown</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">$()$</td><td align="center"><code>$()$</code></td><td align="center">小括号</td></tr><tr><td align="center">$[]$</td><td align="center"><code>$[]$</code></td><td align="center">中括号</td></tr><tr><td align="center">$⟨⟩$</td><td align="center"><code>$\lang\rang$</code> 或 <code>$\langle\rangle$</code></td><td align="center">尖括号</td></tr><tr><td align="center">$\lvert\rvert$</td><td align="center"><code>$\lvert\rvert$</code></td><td align="center">绝对值</td></tr><tr><td align="center">$\lVert\rVert$</td><td align="center"><code>$\lVert\rVert$</code></td><td align="center">双竖线</td></tr><tr><td align="center">$\lbrace\rbrace$</td><td align="center"><code>$\lbrace\rbrace$</code>或<code>$\&#123;\&#125;$</code></td><td align="center">花括号</td></tr></tbody></table><h2 id="增大括号"><a href="#增大括号" class="headerlink" title="增大括号"></a>增大括号</h2><table><thead><tr><th align="center">算式</th><th align="center">Markdown</th></tr></thead><tbody><tr><td align="center">$(x)$</td><td align="center"><code>$(x)$</code></td></tr><tr><td align="center">$\big( x \big)$</td><td align="center"><code>$\big( x \big)$</code></td></tr><tr><td align="center">$\Big( x \Big)$</td><td align="center"><code>$\Big( x \Big)$</code></td></tr><tr><td align="center">$\bigg( x \bigg)$</td><td align="center"><code>$\bigg( x \bigg)$</code></td></tr><tr><td align="center">$\Bigg( x \Bigg)$</td><td align="center"><code>$\Bigg( x \Bigg)$</code></td></tr></tbody></table><p><strong>注：其他的括号用法一样。</strong></p><h1 id="分数"><a href="#分数" class="headerlink" title="分数"></a>分数</h1><table><thead><tr><th align="center">算式</th><th align="center">Markdown</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">$\frac{a}{b}$</td><td align="center"><code>$\frac&#123;a&#125;&#123;b&#125;$</code></td><td align="center">分数</td></tr></tbody></table><h1 id="开方"><a href="#开方" class="headerlink" title="开方"></a>开方</h1><table><thead><tr><th align="center">算式</th><th align="center">Markdown</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">$\sqrt[n]{a + b}$</td><td align="center"><code>$\sqrt[n]&#123;a + b&#125;$</code></td><td align="center">开方</td></tr></tbody></table><h1 id="累加-累乘"><a href="#累加-累乘" class="headerlink" title="累加/累乘"></a>累加/累乘</h1><table><thead><tr><th align="center">算式</th><th align="center">Markdown</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">$\sum_{x = 1}^{n}f(x)$</td><td align="center"><code>$\sum_&#123;x = 1&#125;^&#123;n&#125;f(x)$</code></td><td align="center">累加</td></tr><tr><td align="center">$\prod_{x = 1}^{n}f(x)$</td><td align="center"><code>$\prod_&#123;x = 1&#125;^&#123;n&#125;f(x)$</code></td><td align="center">累乘</td></tr></tbody></table><h1 id="三角函数"><a href="#三角函数" class="headerlink" title="三角函数"></a>三角函数</h1><table><thead><tr><th align="center">算式</th><th align="center">Markdown</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">$\sin$</td><td align="center"><code>$\sin$</code></td><td align="center">正弦</td></tr><tr><td align="center">$\cos$</td><td align="center"><code>$\cos$</code></td><td align="center">余弦</td></tr><tr><td align="center">$\tan$</td><td align="center"><code>$\tan$</code></td><td align="center">正切</td></tr><tr><td align="center">$\cot$</td><td align="center"><code>$\cot$</code></td><td align="center">余切</td></tr><tr><td align="center">$\sec$</td><td align="center"><code>$\sec$</code></td><td align="center">正割</td></tr><tr><td align="center">$\csc$</td><td align="center"><code>$\csc$</code></td><td align="center">余割</td></tr><tr><td align="center">$\bot$</td><td align="center"><code>$\bot$</code></td><td align="center">垂直</td></tr><tr><td align="center">$\angle$</td><td align="center"><code>$\angle$</code></td><td align="center">角</td></tr><tr><td align="center">$360^\circ$</td><td align="center"><code>$360^\circ$</code></td><td align="center">度</td></tr></tbody></table><h1 id="二元运算符"><a href="#二元运算符" class="headerlink" title="二元运算符"></a>二元运算符</h1><table><thead><tr><th align="center">算式</th><th align="center">Markdown</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">$\pm$</td><td align="center"><code>$\pm$</code></td><td align="center">正负</td></tr><tr><td align="center">$\mp$</td><td align="center"><code>$\mp$</code></td><td align="center">负正</td></tr><tr><td align="center">$\times$</td><td align="center"><code>$\times$</code></td><td align="center">乘</td></tr><tr><td align="center">$\div$</td><td align="center"><code>$\div$</code></td><td align="center">除</td></tr><tr><td align="center">$\ast$</td><td align="center"><code>$\ast$</code></td><td align="center">星</td></tr><tr><td align="center">$\star$</td><td align="center"><code>$\star$</code></td><td align="center">星星</td></tr><tr><td align="center">$\mid$</td><td align="center"><code>$\mid$</code></td><td align="center">整除</td></tr><tr><td align="center">$\nmid$</td><td align="center"><code>$\nmid$</code></td><td align="center">不整除</td></tr><tr><td align="center">$\circ$</td><td align="center"><code>$\circ$</code></td><td align="center">空心圆圈</td></tr><tr><td align="center">$\bullet$</td><td align="center"><code>$\bullet$</code></td><td align="center">实心圆圈</td></tr><tr><td align="center">$\cdot$</td><td align="center"><code>$\cdot$</code></td><td align="center">点</td></tr><tr><td align="center">$\wr$</td><td align="center"><code>$\wr$</code></td><td align="center">波浪</td></tr><tr><td align="center">$\diamond$</td><td align="center"><code>$\diamond$</code></td><td align="center">菱形</td></tr><tr><td align="center">$\Diamond$</td><td align="center"><code>$\Diamond$</code></td><td align="center">大菱形</td></tr><tr><td align="center">$\triangle$</td><td align="center"><code>$\triangle$</code></td><td align="center">三角形</td></tr><tr><td align="center">$\bigtriangleup$</td><td align="center"><code>$\bigtriangleup$</code></td><td align="center">大正三角</td></tr><tr><td align="center">$\bigtriangledown$</td><td align="center"><code>$\bigtriangledown$</code></td><td align="center">大倒三角</td></tr><tr><td align="center">$\triangleleft$</td><td align="center"><code>$\triangleleft$</code></td><td align="center">子群</td></tr><tr><td align="center">$\triangleright$</td><td align="center"><code>$\triangleright$</code></td><td align="center">子群</td></tr><tr><td align="center">$\unlhd$</td><td align="center"><code>$\unlhd$</code></td><td align="center">正规子群</td></tr><tr><td align="center">$\unrhd$</td><td align="center"><code>$\unrhd$</code></td><td align="center">正规子群</td></tr><tr><td align="center">$\bigcirc$</td><td align="center"><code>$\bigcirc$</code></td><td align="center">大空心圆圈</td></tr><tr><td align="center">$\odot$</td><td align="center"><code>$\odot$</code></td><td align="center">圆心</td></tr><tr><td align="center">$\bigodot$</td><td align="center"><code>$\bigodot$</code></td><td align="center">点积</td></tr><tr><td align="center">$\oslash$</td><td align="center"><code>$\oslash$</code></td><td align="center">圈斜</td></tr><tr><td align="center">$\ominus$</td><td align="center"><code>$\ominus$</code></td><td align="center">圈减</td></tr><tr><td align="center">$\otimes$</td><td align="center"><code>$\otimes$</code></td><td align="center">圈乘</td></tr><tr><td align="center">$\oplus$</td><td align="center"><code>$\oplus$</code></td><td align="center">圈加</td></tr><tr><td align="center">$\bigoplus$</td><td align="center"><code>$\bigoplus$</code></td><td align="center">异或</td></tr><tr><td align="center">$\dagger$</td><td align="center"><code>$\dagger$</code></td><td align="center">短剑</td></tr><tr><td align="center">$\ddagger$</td><td align="center"><code>$\ddagger$</code></td><td align="center">双短剑</td></tr><tr><td align="center">$\amalg$</td><td align="center"><code>$\amalg$</code></td><td align="center">合并</td></tr></tbody></table><h1 id="关系符号"><a href="#关系符号" class="headerlink" title="关系符号"></a>关系符号</h1><table><thead><tr><th align="center">算式</th><th align="center">Markdown</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">$\leq$</td><td align="center"><code>$\leq$</code></td><td align="center">小于等于</td></tr><tr><td align="center">$\geq$</td><td align="center"><code>$\geq$</code></td><td align="center">大于等于</td></tr><tr><td align="center">$\equiv$</td><td align="center"><code>$\equiv$</code></td><td align="center">全等于</td></tr><tr><td align="center">$\models$</td><td align="center"><code>$\models$</code></td><td align="center">模型</td></tr><tr><td align="center">$\prec$</td><td align="center"><code>$\prec$</code></td><td align="center">子群</td></tr><tr><td align="center">$\succ$</td><td align="center"><code>$\succ$</code></td><td align="center">子群</td></tr><tr><td align="center">$\sim$</td><td align="center"><code>$\sim$</code></td><td align="center">颚化符</td></tr><tr><td align="center">$\perp$</td><td align="center"><code>$\perp$</code></td><td align="center">正规子群</td></tr><tr><td align="center">$\preceq$</td><td align="center"><code>$\preceq$</code></td><td align="center">正规子群</td></tr><tr><td align="center">$\simeq$</td><td align="center"><code>$\simeq$</code></td><td align="center">渐近等于</td></tr><tr><td align="center">$\ll$</td><td align="center"><code>$\ll$</code></td><td align="center">远小于</td></tr><tr><td align="center">$\gg$</td><td align="center"><code>$\gg$</code></td><td align="center">远大于</td></tr><tr><td align="center">$\asymp$</td><td align="center"><code>$\asymp$</code></td><td align="center">等价于</td></tr><tr><td align="center">$\parallel$</td><td align="center"><code>$\parallel$</code></td><td align="center">平行于</td></tr><tr><td align="center">$\approx$</td><td align="center"><code>$\approx$</code></td><td align="center">约等于</td></tr><tr><td align="center">$\cong$</td><td align="center"><code>$\cong$</code></td><td align="center">近似等于</td></tr><tr><td align="center">$\neq$</td><td align="center"><code>$\neq$</code></td><td align="center">不等于</td></tr><tr><td align="center">$\doteq$</td><td align="center"><code>$\doteq$</code></td><td align="center">接近极限</td></tr><tr><td align="center">$\propto$</td><td align="center"><code>$\propto$</code></td><td align="center">比例</td></tr><tr><td align="center">$\bowtie$</td><td align="center"><code>$\bowtie$</code></td><td align="center">蝴蝶结</td></tr><tr><td align="center">$\Join$</td><td align="center"><code>$\Join$</code></td><td align="center">蝴蝶结</td></tr><tr><td align="center">$\vdash$</td><td align="center"><code>$\vdash$</code></td><td align="center">右丁字</td></tr><tr><td align="center">$\dashv$</td><td align="center"><code>$\dashv$</code></td><td align="center">左丁字</td></tr></tbody></table><h1 id="极限"><a href="#极限" class="headerlink" title="极限"></a>极限</h1><table><thead><tr><th align="center">算式</th><th align="center">Markdown</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">$\lim$</td><td align="center"><code>$\lim$</code></td><td align="center">极限</td></tr><tr><td align="center">$\rightarrow$</td><td align="center"><code>$\rightarrow$</code></td><td align="center">右箭头</td></tr><tr><td align="center">$\infty$</td><td align="center"><code>$\infty$</code></td><td align="center">无穷</td></tr></tbody></table><h1 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h1><table><thead><tr><th align="center">算式</th><th align="center">Markdown</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">$\vec{a}$</td><td align="center"><code>$\vec&#123;a&#125;$</code></td><td align="center">向量</td></tr></tbody></table><h1 id="箭头"><a href="#箭头" class="headerlink" title="箭头"></a>箭头</h1><table><thead><tr><th align="center">算式</th><th align="center">Markdown</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">$\uparrow$</td><td align="center"><code>$\uparrow$</code></td><td align="center">上箭头</td></tr><tr><td align="center">$\downarrow$</td><td align="center"><code>$\downarrow$</code></td><td align="center">下箭头</td></tr><tr><td align="center">$\updownarrow$</td><td align="center"><code>$\updownarrow$</code></td><td align="center">上下箭头</td></tr><tr><td align="center">$\Uparrow$</td><td align="center"><code>$\Uparrow$</code></td><td align="center">上箭头</td></tr><tr><td align="center">$\Downarrow$</td><td align="center"><code>$\Downarrow$</code></td><td align="center">下箭头</td></tr><tr><td align="center">$\Updownarrow$</td><td align="center"><code>$\Updownarrow$</code></td><td align="center">上下箭头</td></tr><tr><td align="center">$\rightarrow$</td><td align="center"><code>$\rightarrow$</code></td><td align="center">右箭头</td></tr><tr><td align="center">$\leftarrow$</td><td align="center"><code>$\leftarrow$</code></td><td align="center">左箭头</td></tr><tr><td align="center">$\leftrightarrow$</td><td align="center"><code>$\leftrightarrow$</code></td><td align="center">左右箭头</td></tr><tr><td align="center">$\Rightarrow$</td><td align="center"><code>$\Rightarrow$</code></td><td align="center">右箭头</td></tr><tr><td align="center">$\Leftarrow$</td><td align="center"><code>$\Leftarrow$</code></td><td align="center">左箭头</td></tr><tr><td align="center">$\Leftrightarrow$</td><td align="center"><code>$\Leftrightarrow$</code></td><td align="center">左右箭头</td></tr><tr><td align="center">$\longrightarrow$</td><td align="center"><code>$\longrightarrow$</code></td><td align="center">右长箭头</td></tr><tr><td align="center">$\longleftarrow$</td><td align="center"><code>$\longleftarrow$</code></td><td align="center">左长箭头</td></tr><tr><td align="center">$\longleftrightarrow$</td><td align="center"><code>$\longleftrightarrow$</code></td><td align="center">左右长箭头</td></tr><tr><td align="center">$\Longrightarrow$</td><td align="center"><code>$\Longrightarrow$</code></td><td align="center">右长箭头</td></tr><tr><td align="center">$\Longleftarrow$</td><td align="center"><code>$\Longleftarrow$</code></td><td align="center">左长箭头</td></tr><tr><td align="center">$\Longleftrightarrow$</td><td align="center"><code>$\Longleftrightarrow$</code></td><td align="center">左右长箭头</td></tr><tr><td align="center">$\mapsto$</td><td align="center"><code>$\mapsto$</code></td><td align="center">映射箭头</td></tr><tr><td align="center">$\longmapsto$</td><td align="center"><code>$\longmapsto$</code></td><td align="center">映射长箭头</td></tr><tr><td align="center">$\hookleftarrow$</td><td align="center"><code>$\hookleftarrow$</code></td><td align="center">左勾箭头</td></tr><tr><td align="center">$\hookrightarrow$</td><td align="center"><code>$\hookrightarrow$</code></td><td align="center">右勾箭头</td></tr><tr><td align="center">$\rightharpoonup$</td><td align="center"><code>$\rightharpoonup$</code></td><td align="center">右鱼叉上箭头</td></tr><tr><td align="center">$\leftharpoondown$</td><td align="center"><code>$\leftharpoondown$</code></td><td align="center">左鱼叉下箭头</td></tr><tr><td align="center">$\rightleftharpoons$</td><td align="center"><code>$\rightleftharpoons$</code></td><td align="center">左右鱼叉箭头</td></tr><tr><td align="center">$\leftharpoonup$</td><td align="center"><code>$\leftharpoonup$</code></td><td align="center">左鱼叉上箭头</td></tr><tr><td align="center">$\rightharpoondown$</td><td align="center"><code>$\rightharpoondown$</code></td><td align="center">右鱼叉下箭头</td></tr><tr><td align="center">$\leadsto$</td><td align="center"><code>$\leadsto$</code></td><td align="center">波浪箭头</td></tr><tr><td align="center">$\nearrow$</td><td align="center"><code>$\nearrow$</code></td><td align="center">右上箭头</td></tr><tr><td align="center">$\searrow$</td><td align="center"><code>$\searrow$</code></td><td align="center">右下箭头</td></tr><tr><td align="center">$\swarrow$</td><td align="center"><code>$\swarrow$</code></td><td align="center">左下箭头</td></tr><tr><td align="center">$\nwarrow$</td><td align="center"><code>$\nwarrow$</code></td><td align="center">左上箭头</td></tr></tbody></table><h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><table><thead><tr><th align="center">算式</th><th align="center">Markdown</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">$\emptyset$</td><td align="center"><code>$\emptyset$</code></td><td align="center">空集</td></tr><tr><td align="center">$\in$</td><td align="center"><code>$\in$</code></td><td align="center">属于</td></tr><tr><td align="center">$\ni$</td><td align="center"><code>$\ni$</code></td><td align="center">属于</td></tr><tr><td align="center">$\notin$</td><td align="center"><code>$\notin$</code></td><td align="center">不属于</td></tr><tr><td align="center">$\subset$</td><td align="center"><code>$\subset$</code></td><td align="center">子集</td></tr><tr><td align="center">$\supset$</td><td align="center"><code>$\supset$</code></td><td align="center">子集</td></tr><tr><td align="center">$\not\subset$</td><td align="center"><code>$\not\subset$</code></td><td align="center">非子集</td></tr><tr><td align="center">$\subseteq$</td><td align="center"><code>$\subseteq$</code></td><td align="center">真子集</td></tr><tr><td align="center">$\supseteq$</td><td align="center"><code>$\supseteq$</code></td><td align="center">真子集</td></tr><tr><td align="center">$\cup$</td><td align="center"><code>$\cup$</code></td><td align="center">并集</td></tr><tr><td align="center">$\bigcup$</td><td align="center"><code>$\bigcup$</code></td><td align="center">并集</td></tr><tr><td align="center">$\cap$</td><td align="center"><code>$\cap$</code></td><td align="center">交集</td></tr><tr><td align="center">$\bigcap$</td><td align="center"><code>$\bigcap$</code></td><td align="center">交集</td></tr><tr><td align="center">$\uplus$</td><td align="center"><code>$\uplus$</code></td><td align="center">多重集</td></tr><tr><td align="center">$\biguplus$</td><td align="center"><code>$\biguplus$</code></td><td align="center">多重集</td></tr><tr><td align="center">$\sqsubset$</td><td align="center"><code>$\sqsubset$</code></td><td align="center">方形像</td></tr><tr><td align="center">$\sqsupset$</td><td align="center"><code>$\sqsupset$</code></td><td align="center">方形原</td></tr><tr><td align="center">$\sqcap$</td><td align="center"><code>$\sqcap$</code></td><td align="center">方形帽</td></tr><tr><td align="center">$\sqsubseteq$</td><td align="center"><code>$\sqsubseteq$</code></td><td align="center">不方形像或等于</td></tr><tr><td align="center">$\sqsupseteq$</td><td align="center"><code>$\sqsupseteq$</code></td><td align="center">不方形原或等于</td></tr><tr><td align="center">$\vee$</td><td align="center"><code>$\vee$</code></td><td align="center">逻辑或</td></tr><tr><td align="center">$\wedge$</td><td align="center"><code>$\wedge$</code></td><td align="center">逻辑与</td></tr><tr><td align="center">$\setminus$</td><td align="center"><code>$\setminus$</code></td><td align="center">集合中的减法</td></tr></tbody></table><h1 id="微积分"><a href="#微积分" class="headerlink" title="微积分"></a>微积分</h1><table><thead><tr><th align="center">算式</th><th align="center">Markdown</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">$\prime$</td><td align="center"><code>$\prime$</code></td><td align="center">求导</td></tr><tr><td align="center">$\int$</td><td align="center"><code>$\int$</code></td><td align="center">积分</td></tr><tr><td align="center">$\iint$</td><td align="center"><code>$\iint$</code></td><td align="center">双重积分</td></tr><tr><td align="center">$\iiint$</td><td align="center"><code>$\iiint$</code></td><td align="center">三重积分</td></tr><tr><td align="center">$\oint$</td><td align="center"><code>$\oint$</code></td><td align="center">曲线积分</td></tr><tr><td align="center">$\nabla$</td><td align="center"><code>$\nabla$</code></td><td align="center">梯度</td></tr></tbody></table><h1 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h1><table><thead><tr><th align="center">算式</th><th align="center">Markdown</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">$\because$</td><td align="center"><code>$\because$</code></td><td align="center">因为</td></tr><tr><td align="center">$\therefore$</td><td align="center"><code>$\therefore$</code></td><td align="center">所以</td></tr><tr><td align="center">$\forall$</td><td align="center"><code>$\forall$</code></td><td align="center">任意</td></tr><tr><td align="center">$∃$</td><td align="center"><code>$\exist$</code></td><td align="center">存在</td></tr><tr><td align="center">$\vee$</td><td align="center"><code>$\vee$</code></td><td align="center">逻辑或</td></tr><tr><td align="center">$\wedge$</td><td align="center"><code>$\wedge$</code></td><td align="center">逻辑与</td></tr><tr><td align="center">$\bigvee$</td><td align="center"><code>$\bigvee$</code></td><td align="center">逻辑或</td></tr><tr><td align="center">$\bigwedge$</td><td align="center"><code>$\bigwedge$</code></td><td align="center">逻辑与</td></tr></tbody></table><h1 id="上下标符号"><a href="#上下标符号" class="headerlink" title="上下标符号"></a>上下标符号</h1><table><thead><tr><th align="center">算式</th><th align="center">Markdown</th></tr></thead><tbody><tr><td align="center">$\bar{a}$</td><td align="center"><code>$\bar&#123;a&#125;$</code></td></tr><tr><td align="center">$\acute{a}$</td><td align="center"><code>$\acute&#123;a&#125;$</code></td></tr><tr><td align="center">$\breve{a}$</td><td align="center"><code>$\breve&#123;a&#125;$</code></td></tr><tr><td align="center">$\grave{a}$</td><td align="center"><code>$\grave&#123;a&#125;$</code></td></tr><tr><td align="center">$\dot{a}$</td><td align="center"><code>$\dot&#123;a&#125;$</code></td></tr><tr><td align="center">$\ddot{a}$</td><td align="center"><code>$\ddot&#123;a&#125;$</code></td></tr><tr><td align="center">$\hat{a}$</td><td align="center"><code>$\hat&#123;a&#125;$</code></td></tr><tr><td align="center">$\check{a}$</td><td align="center"><code>$\check&#123;a&#125;$</code></td></tr><tr><td align="center">$\breve{a}$</td><td align="center"><code>$\breve&#123;a&#125;$</code></td></tr><tr><td align="center">$\tilde{a}$</td><td align="center"><code>$\tilde&#123;a&#125;$</code></td></tr><tr><td align="center">$\vec{a}$</td><td align="center"><code>$\vec&#123;a&#125;$</code></td></tr><tr><td align="center">$\overline{a + b + c + d}$</td><td align="center"><code>$\overline&#123;a + b + c + d&#125;$</code></td></tr><tr><td align="center">$\underline{a + b + c + d}$</td><td align="center"><code>$\underline&#123;a + b + c + d&#125;$</code></td></tr><tr><td align="center">$\overbrace{a + b + c + d}$</td><td align="center"><code>$\overbrace&#123;a + b + c + d&#125;$</code></td></tr><tr><td align="center">$\underbrace{a + b + c + d}$</td><td align="center"><code>$\underbrace&#123;a + b + c + d&#125;$</code></td></tr><tr><td align="center">$\overbrace{a + \underbrace{b + c}_{1.0} + d}^{2.0}$</td><td align="center"><code>$\overbrace&#123;a + \underbrace&#123;b + c&#125;_&#123;1.0&#125; + d&#125;^&#123;2.0&#125;$</code></td></tr></tbody></table><h1 id="希腊字母"><a href="#希腊字母" class="headerlink" title="希腊字母"></a>希腊字母</h1><table><thead><tr><th align="center">大写</th><th align="center">Markdown</th><th align="center">小写</th><th align="center">Markdown</th></tr></thead><tbody><tr><td align="center">A</td><td align="center"><code>$\Alpha$</code></td><td align="center">$\alpha$</td><td align="center"><code>$\alpha$</code></td></tr><tr><td align="center">B</td><td align="center"><code>$\Beta$</code></td><td align="center">$\beta$</td><td align="center"><code>$\beta$</code></td></tr><tr><td align="center">$\Gamma$</td><td align="center"><code>$\Gamma$</code></td><td align="center">$\gamma$</td><td align="center"><code>$\gamma$</code></td></tr><tr><td align="center">$\Delta$</td><td align="center"><code>$\Delta$</code></td><td align="center">$\delta$</td><td align="center"><code>$\delta$</code></td></tr><tr><td align="center">E</td><td align="center"><code>$\Epsilon$</code></td><td align="center">$\epsilon$</td><td align="center"><code>$\epsilon$</code></td></tr><tr><td align="center"></td><td align="center"></td><td align="center">$\varepsilon$</td><td align="center"><code>$\varepsilon$</code></td></tr><tr><td align="center">Z</td><td align="center"><code>$\Zeta$</code></td><td align="center">$\zeta$</td><td align="center"><code>$\zeta$</code></td></tr><tr><td align="center">H</td><td align="center"><code>$\Eta$</code></td><td align="center">$\eta$</td><td align="center"><code>$\eta$</code></td></tr><tr><td align="center">$\Theta$</td><td align="center"><code>$\Theta$</code></td><td align="center">$\theta$</td><td align="center"><code>$\theta$</code></td></tr><tr><td align="center">I</td><td align="center"><code>$\Iota$</code></td><td align="center">$\iota$</td><td align="center"><code>$\iota$</code></td></tr><tr><td align="center">K</td><td align="center"><code>$\Kappa$</code></td><td align="center">$\kappa$</td><td align="center"><code>$\kappa$</code></td></tr><tr><td align="center">$\Lambda$</td><td align="center"><code>$\Lambda$</code></td><td align="center">$\lambda$</td><td align="center"><code>$\lambda$</code></td></tr><tr><td align="center">M</td><td align="center"><code>$\Mu$</code></td><td align="center">$\mu$</td><td align="center"><code>$\mu$</code></td></tr><tr><td align="center">N</td><td align="center"><code>$\Nu$</code></td><td align="center">$\nu$</td><td align="center"><code>$\nu$</code></td></tr><tr><td align="center">$\Xi$</td><td align="center"><code>$\Xi$</code></td><td align="center">$\xi$</td><td align="center"><code>$\xi$</code></td></tr><tr><td align="center">O</td><td align="center"><code>$\Omicron$</code></td><td align="center">$\omicron$</td><td align="center"><code>$\omicron$</code></td></tr><tr><td align="center">$\Pi$</td><td align="center"><code>$\Pi$</code></td><td align="center">$\pi$</td><td align="center"><code>$\pi$</code></td></tr><tr><td align="center">P</td><td align="center"><code>$\Rho$</code></td><td align="center">$\rho$</td><td align="center"><code>$\rho$</code></td></tr><tr><td align="center">$\Sigma$</td><td align="center"><code>$\Sigma$</code></td><td align="center">$\sigma$</td><td align="center"><code>$\sigma$</code></td></tr><tr><td align="center">T</td><td align="center"><code>$\Tau$</code></td><td align="center">$\tau$</td><td align="center"><code>$\tau$</code></td></tr><tr><td align="center">$\Upsilon$</td><td align="center"><code>$\Upsilon$</code></td><td align="center">$\upsilon$</td><td align="center"><code>$\upsilon$</code></td></tr><tr><td align="center">$\Phi$</td><td align="center"><code>$\Phi$</code></td><td align="center">$\phi$</td><td align="center"><code>$\phi$</code></td></tr><tr><td align="center"></td><td align="center"></td><td align="center">$\varphi$</td><td align="center"><code>$\varphi$</code></td></tr><tr><td align="center">X</td><td align="center"><code>$\Chi$</code></td><td align="center">$\chi$</td><td align="center"><code>$\chi$</code></td></tr><tr><td align="center">$\Psi$</td><td align="center"><code>$\Psi$</code></td><td align="center">$\psi$</td><td align="center"><code>$\psi$</code></td></tr><tr><td align="center">$\Omega$</td><td align="center"><code>$\Omega$</code></td><td align="center">$\omega$</td><td align="center"><code>$\omega$</code></td></tr></tbody></table><h1 id="省略号"><a href="#省略号" class="headerlink" title="省略号"></a>省略号</h1><table><thead><tr><th align="center">算式</th><th align="center">Markdown</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">$\dots$</td><td align="center"><code>$\dots$</code></td><td align="center">横向省略号</td></tr><tr><td align="center">$\ldots$</td><td align="center"><code>$\ldots$</code></td><td align="center">横向省略号</td></tr><tr><td align="center">$\cdots$</td><td align="center"><code>$\cdots$</code></td><td align="center">横向省略号</td></tr><tr><td align="center">$\vdots$</td><td align="center"><code>$\vdots$</code></td><td align="center">纵向省略号</td></tr><tr><td align="center">$\ddots$</td><td align="center"><code>$\ddots$</code></td><td align="center">斜向省略号</td></tr></tbody></table><hr>]]></content>
      
      
      <categories>
          
          <category> LaTex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> 笔记 </tag>
            
            <tag> 教程 </tag>
            
            <tag> LaTex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习</title>
      <link href="/archives/498ab7d9.html"/>
      <url>/archives/498ab7d9.html</url>
      
        <content type="html"><![CDATA[<hr><h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><h2 id="监督学习"><a href="#监督学习" class="headerlink" title="监督学习"></a>监督学习</h2><p>常见的机器学习是<code>x-&gt;y</code>或输入到输出映射的算法，监督学习的关键特征是你给予学习算法示例，包括正确答案。也就是说包括给定的<code>x</code>和正确的标签<code>y</code>，通过学习算法进行学习，最后对于没有标签的<code>x</code>可以做出合理准确的预测或猜测。</p><h2 id="无监督学习"><a href="#无监督学习" class="headerlink" title="无监督学习"></a>无监督学习</h2><p>数据仅有输入<code>x</code>，但没有标签<code>y</code>，算法必须找到数据中的某种结构或某种模式或某些有趣的东西。</p><h2 id="相关符号"><a href="#相关符号" class="headerlink" title="相关符号"></a>相关符号</h2><ul><li>训练集：训练模型的数据集。</li><li>测试集：检验最终选择最优的模型的性能如何。</li><li>f：function的缩写，指模型。</li><li>x：作为输入的特征值。</li><li>y：作为结果的标签，指实际真实值。</li><li>m：训练样本总数。</li><li>(x, y)：一个训练样本。</li><li>($x^i$, $y^i$)：第<code>i</code>个训练样本。</li><li>$\hat{y}$：由<code>x</code>预测的结果，指预测值。</li></ul><h1 id="单变量线性回归"><a href="#单变量线性回归" class="headerlink" title="单变量线性回归"></a>单变量线性回归</h1><h2 id="模型函数"><a href="#模型函数" class="headerlink" title="模型函数"></a>模型函数</h2><p>现假设该模型只有一个特征值输入，则对于该线性回归，函数可以定义为：<br>$$<br>f_{w, b}(x) = wx + b<br>$$<br>该函数基于输入特征<code>x</code>的预测$\hat{y}$，并且取决于<code>w</code>和<code>b</code>的值，上述式子也可以进行简写。</p><p>$$<br>f(x) = wx + b<br>$$<br>显而易见，该函数为单变量线性回归，即只有一个特征值输入的线性回归。</p><p><code>w</code>和<code>b</code>为模型的参数，需要找到一个合适的值，获取一条直线，从而更好的拟合数据。因此我们需要想办法去找到合适的权重。</p><p>得到的模型用于测试，则预测值应该满足该函数：<br>$$<br>\hat{y}^{(i)} = f_{w,b}(x^{(i)}) = wx^{(i)}+b<br>$$<br>需要找到<code>w</code>和<code>b</code>，使其对每组样本$(x^{(i)},y^{(i)})$，$\hat{y}^{(i)}$的值尽可能接近${y}^{(i)}$。</p><h2 id="成本函数"><a href="#成本函数" class="headerlink" title="成本函数"></a>成本函数</h2><p>需要一个公式来计算每次的误差和是多少，该公式被称为成本函数公式，用于评判一个模型的好坏</p><p>首先应该计算每一次预测结果的差值：<br>$$<br>\hat{y}^{(i)}-{y}^{(i)}<br>$$<br>差值有正有负，因此对其进行平方：<br>$$<br>(\hat{y}^{(i)}-{y}^{(i)})^2<br>$$<br>共有<code>m</code>个样本，对这些样本误差求和并取平均值（在代码中下标从0开始）：<br>$$<br>\frac{1}{m}\sum_{i=1}^{m}(\hat{y}^{(i)}-{y}^{(i)})^2<br>$$<br>为了方便后续操作，一般会将该函数除以<code>2</code>，得到成本函数$J(w,b)$。<br>$$<br>J(w,b)=\frac{1}{2m}\sum_{i=1}^{m}(\hat{y}^{(i)}-{y}^{(i)})^2<br>$$</p><table><thead><tr><th align="center">条目</th><th align="center">函数</th></tr></thead><tbody><tr><td align="center">模型</td><td align="center">$f_{w, b}(x) = wx + b$</td></tr><tr><td align="center">参数</td><td align="center">$w,b$</td></tr><tr><td align="center">成本函数</td><td align="center">$J(w,b)=\frac{1}{2m}\sum_{i=1}^{m}(\hat{y}^{(i)}-{y}^{(i)})^2$</td></tr><tr><td align="center">目标</td><td align="center">$minimizi_{w,b}J(w,b)$</td></tr></tbody></table><h2 id="梯度下降"><a href="#梯度下降" class="headerlink" title="梯度下降"></a>梯度下降</h2><h3 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h3><p>梯度下降算法通俗来讲就是你现在在一座山上，然后每次环顾四周，找到你这一圈中下降最快（也就是坡最陡峭）的一条路，然后朝着这个方向稍微走一点。做完这些之后一直重复这个步骤，直到环顾四周后发现都是上升的，而不存在下降的坡。梯度下降的结果会取决于选定的初始值，如果初始值不一样，则会导致最后到达的山谷不一样。</p><p>先来看一下对于w的梯度下降的公式：<br>$$<br>w=w-\alpha\frac{\partial}{\partial{w}}J(w,b)<br>$$<br>在这个式子中，$\alpha$称之为学习率，学习率通常是介于0~1之间的一个小的正数，一般取0.01。可以理解为，学习率是从当前位置环顾四周后，选定好了下降最快的方向，朝这个方向迈的步子的大小。$\alpha$越大，则迈的步子越大，反之，步子越小。</p><p>可以发现，对于该线性回归模型，一共有两个参数，分别是w和b，因此同时对二者使用梯度下降：<br>$$<br>b=b-\alpha\frac{\partial}{\partial{b}}J(w,b)<br>$$<br>值得注意的是，如果先更新w的值，再更新b的值，会导致更新b的时候所用到的w不是原始的w，而是更新后的w。很显然，这是一种错误的做法，我们更希望他们同时更新，因此可以执行下面的操作，从而达到同时更新的效果。<br>$$<br>tmpw=w-\alpha\frac{\partial}{\partial{w}}J(w,b)<br>$$</p><p>$$<br>tmpb=b-\alpha\frac{\partial}{\partial{b}}J(w,b)<br>$$</p><p>$$<br>w=tmpw<br>$$</p><p>$$<br>b=tmpb<br>$$</p><h3 id="偏导"><a href="#偏导" class="headerlink" title="偏导"></a>偏导</h3><p>对于每一个参数的更新，都需要求得在该参数方向上的导数，即该参数的偏导数，之后用上一次迭代的该参数的值减去学习率乘以偏导数的值。</p><p>现在我们定义一个函数如下所示：<br>$$<br>f(x)=x^{2}-4x+6<br>$$<br>很容易知道，该函数的对称轴为直线$x=2$，开口向上，在$(-\infty,2)$上单调递减，在$(-\infty,2)$上单调递增。</p><p>那么上述函数的梯度下降公式为：<br>$$<br>x=x-\alpha\frac{\partial}{\partial{x}}f(x)<br>$$<br>根据梯度下降的步骤，首先应该随机选取一个初始点。</p><p>如果初始点的位置在对称轴左侧，由于该点所在位置为单调递减处，因此该点处的导数一定小于0，根据公式可知，减去一个负数相当于加上一个数字，那么$x$会向右移动，以此类推，最后会移动到对称轴的位置上。</p><p>如果初始点的位置在对称轴右侧，由于该点所在位置为单调递增处，因此该点处的导数一定大于0，根据公式可知，$x$会向左移动，以此类推，最后会移动到对称轴的位置上。</p><p>通过这种方式，可以使得该参数一点一点移动到可以使最终结果尽可能小的位置上，从而该参数的值可以让成本函数更低。</p><p><strong>总而言之，偏导数决定了梯度下降的方向。</strong></p><h3 id="学习率"><a href="#学习率" class="headerlink" title="学习率"></a>学习率</h3><p>对于学习率我们需要选择一个恰到好处的值，不能太大也不能太小，<strong>学习率决定了梯度下降的步长</strong>。</p><p>如果学习率太小，那么每一次参数的变化量都会非常非常小，这就导致如果要找到成本函数最小点，需要迭代很多次，使得运行时间非常长，收敛过慢。</p><p>如果学习率太大，那么每一次参数的变化量都会非常非常大，这就导致很有可能变化速度太快从而冲过了成本函数的最小点，最坏的情况可能发散，离目标位置越来越远。</p><h3 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h3><p>通过上述公式可以知道我们首先需要求得$\frac{\partial}{\partial{w}}J(w,b)$：<br>$$<br>\frac{\partial}{\partial{w}}J(w,b)=\frac{\partial}{\partial{w}}\frac{1}{2m}\sum_{i=1}^{m}(f_{w,b}(x^{(i)})-{y}^{(i)})^2<br>$$</p><p>$$<br>\frac{\partial}{\partial{w}}\frac{1}{2m}\sum_{i=1}^{m}(f_{w,b}(x^{(i)})-{y}^{(i)})^2=\frac{\partial}{\partial{w}}\frac{1}{2m}\sum_{i=1}^{m}(wx^{(i)}+b-{y}^{(i)})^2<br>$$</p><p>$$<br>\frac{\partial}{\partial{w}}\frac{1}{2m}\sum_{i=1}^{m}(wx^{(i)}+b-{y}^{(i)})^2=\frac{1}{2m}\sum_{i=1}^{m}(wx^{(i)}+b-{y}^{(i)})2x^{(i)}<br>$$</p><p>$$<br>\frac{1}{2m}\sum_{i=1}^{m}(wx^{(i)}+b-{y}^{(i)})2x^{(i)}=\frac{1}{m}\sum_{i=1}^{m}(f_{w,b}(x^{(i)})-{y}^{(i)})x^{(i)}<br>$$</p><p>最终我们得到了关于w的偏导数：<br>$$<br>\frac{\partial}{\partial{w}}J(w,b)=\frac{1}{m}\sum_{i=1}^{m}(f_{w,b}(x^{(i)})-{y}^{(i)})x^{(i)}<br>$$<br>同理，我们也可以得到关于b的偏导数：<br>$$<br>\frac{\partial}{\partial{b}}J(w,b)=\frac{1}{m}\sum_{i=1}^{m}(f_{w,b}(x^{(i)})-{y}^{(i)})<br>$$</p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment">#导入数据集</span></span><br><span class="line">x_train = np.array([<span class="number">1.0</span>, <span class="number">2.0</span>])  <span class="comment">#特征值</span></span><br><span class="line">y_train = np.array([<span class="number">300.0</span>, <span class="number">500.0</span>])  <span class="comment">#与之对应的标签</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#训练模型的参数</span></span><br><span class="line">m = <span class="built_in">len</span>(x_train)  <span class="comment">#样本数</span></span><br><span class="line">alpha = <span class="number">0.01</span>  <span class="comment">#学习率</span></span><br><span class="line">iterations = <span class="number">10000</span>  <span class="comment">#迭代次数</span></span><br><span class="line">w = <span class="number">0</span>  <span class="comment">#w初始值</span></span><br><span class="line">b = <span class="number">0</span>  <span class="comment">#b初始值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#计算成本</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compute_cost</span>(<span class="params">x, y, w, b</span>):</span><br><span class="line">    cost = <span class="number">0</span>  <span class="comment">#当前w和b的值所得到的成本函数</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        cost += (w * x[i] + b - y[i]) ** <span class="number">2</span>  <span class="comment">#每一个样本的成本</span></span><br><span class="line">    cost /= <span class="number">2</span> * m  <span class="comment">#求和后除以2m</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> cost  <span class="comment">#返回成本</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#计算偏导</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compute_gradient</span>(<span class="params">x, y, w, b</span>):</span><br><span class="line">    dj_dw = <span class="number">0</span>  <span class="comment">#w的偏导和</span></span><br><span class="line">    dj_db = <span class="number">0</span>  <span class="comment">#b的偏导和</span></span><br><span class="line">     </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        dj_dw += (w * x[i] + b - y[i]) * x[i]  <span class="comment">#w的偏导数</span></span><br><span class="line">        dj_db += (w * x[i] + b - y[i])  <span class="comment">#b的偏导数</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#求和后除以m</span></span><br><span class="line">    dj_dw /= m</span><br><span class="line">    dj_db /= m</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> dj_dw, dj_db</span><br><span class="line"></span><br><span class="line">x = []  <span class="comment">#画图横坐标</span></span><br><span class="line">y = []  <span class="comment">#画图纵坐标</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#迭代过程</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(iterations):</span><br><span class="line">    dj_dw, dj_db = compute_gradient(x_train, y_train, w, b)  <span class="comment">#获取偏导数</span></span><br><span class="line">    <span class="comment">#更新w和b</span></span><br><span class="line">    w -= alpha * dj_dw</span><br><span class="line">    b -= alpha * dj_db</span><br><span class="line">    <span class="keyword">if</span> (i + <span class="number">1</span>) % <span class="number">200</span> == <span class="number">0</span>:</span><br><span class="line">        cost = compute_cost(x_train, y_train, w, b)  <span class="comment">#计算当前成本</span></span><br><span class="line">        x.append(i + <span class="number">1</span>)</span><br><span class="line">        y.append(cost)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;第<span class="subst">&#123;i + <span class="number">1</span>&#125;</span>次迭代\nw:<span class="subst">&#123;w&#125;</span>\nb:<span class="subst">&#123;b&#125;</span>\n成本:<span class="subst">&#123;cost&#125;</span>\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = <span class="string">&#x27;FangSong&#x27;</span>  <span class="comment">#设置中文字体</span></span><br><span class="line">plt.plot(x, y, label = <span class="string">&#x27;成本&#x27;</span>)  <span class="comment">#配置参数</span></span><br><span class="line">plt.title(<span class="string">&quot;成本函数&quot;</span>)</span><br><span class="line">plt.legend()</span><br></pre></td></tr></table></figure><h3 id="C-C"><a href="#C-C" class="headerlink" title="C/C++"></a>C/C++</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">7</span>;  <span class="comment">//最大容量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//导入数据集</span></span><br><span class="line"><span class="type">float</span> x_train[N] = &#123; <span class="number">1.0</span>, <span class="number">2.0</span> &#125;;  <span class="comment">//特征值</span></span><br><span class="line"><span class="type">float</span> y_train[N] = &#123; <span class="number">300.0</span>, <span class="number">500.0</span> &#125;;  <span class="comment">//与之对应的标签</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//训练模型的参数</span></span><br><span class="line"><span class="type">int</span> m = <span class="number">2</span>;  <span class="comment">//样本数</span></span><br><span class="line"><span class="type">float</span> alpha = <span class="number">0.01</span>;  <span class="comment">//学习率</span></span><br><span class="line"><span class="type">int</span> iterations = <span class="number">10000</span>;  <span class="comment">//迭代次数</span></span><br><span class="line"><span class="type">float</span> w = <span class="number">0</span>;  <span class="comment">//w的初始值</span></span><br><span class="line"><span class="type">float</span> b = <span class="number">0</span>;  <span class="comment">//b的初始值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//计算成本</span></span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">compute_cost</span><span class="params">(<span class="type">float</span> w, <span class="type">float</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">float</span> cost = <span class="number">0</span>;  <span class="comment">//当前w和b的值所得到的成本函数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">cost += <span class="built_in">pow</span>((w * x_train[i] + b - y_train[i]), <span class="number">2</span>);  <span class="comment">//每一个样本的成本</span></span><br><span class="line">cost /= <span class="number">2.0</span> * m;  <span class="comment">//求和后除以2m</span></span><br><span class="line"><span class="keyword">return</span> cost;  <span class="comment">//返回成本</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算偏导</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">compute_gradient</span><span class="params">(<span class="type">float</span>&amp; dj_dw, <span class="type">float</span>&amp; dj_db)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">&#123;</span><br><span class="line">dj_dw += (w * x_train[i] + b - y_train[i]) * x_train[i];  <span class="comment">//w的偏导数</span></span><br><span class="line">dj_db += (w * x_train[i] + b - y_train[i]);  <span class="comment">//b的偏导数</span></span><br><span class="line">&#125;</span><br><span class="line">dj_dw /= m;</span><br><span class="line">dj_db /= m;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; iterations; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">float</span> dj_dw = <span class="number">0</span>;  <span class="comment">//w的偏导和</span></span><br><span class="line"><span class="type">float</span> dj_db = <span class="number">0</span>;  <span class="comment">//b的偏导和</span></span><br><span class="line"><span class="built_in">compute_gradient</span>(dj_dw, dj_db);  <span class="comment">//获取偏导数</span></span><br><span class="line"><span class="comment">//更新w和b</span></span><br><span class="line">w -= alpha * dj_dw;</span><br><span class="line">b -= alpha * dj_db;</span><br><span class="line"><span class="keyword">if</span> ((i + <span class="number">1</span>) % <span class="number">200</span> == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">float</span> cost = <span class="built_in">compute_cost</span>(w, b);  <span class="comment">//计算当前成本</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;第%d次迭代\nw：%f\n%b：%f\n成本：%f\n\n&quot;</span>, i + <span class="number">1</span>, w, b, cost);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="多元线性回归"><a href="#多元线性回归" class="headerlink" title="多元线性回归"></a>多元线性回归</h1><h2 id="多维特征"><a href="#多维特征" class="headerlink" title="多维特征"></a>多维特征</h2><p>在上述模型中，只有房间大小这一个特征值。但在实际情况中，会有许多因素影响房子的价格，因此需要引入多维特征这一概念。</p><p>这里将介绍几个相关符号：</p><ul><li>$x_j$：第$j$个特征。</li><li>$n$：特征总数。</li><li>$\vec{x}^{i}$：第$i$个特征向量。</li><li>$x_{j}^{(i)}$：第$i$个特征向量中的第$j$个特征。</li></ul><h2 id="模型函数-1"><a href="#模型函数-1" class="headerlink" title="模型函数"></a>模型函数</h2><p>对于多变量线性回归模型，有多个参数对最终的价格产生影响，因此我们需要将各个参数使用向量来进行存储，故：<br>$$<br>\vec{x}=[x_1,x_2,x_3\dots x_n]<br>$$<br>对于每一个特征，都应该有一个参数$w$与之对应，这些参数也可以组成一个维度为$n$的向量：<br>$$<br>\vec{w}=[w_1,w_2,w_3\dots w_n]<br>$$<br>因此该模型函数为：<br>$$<br>f_{\vec{w},b}(\vec{x})=\vec{w}\cdot\vec{x}+b=w_1x_1+w_2x_2+w_3x_3+\dots+w_nx_n+b<br>$$</p><p>由此可知，多元线性回归模型对应的成本函数为：<br>$$<br>J(\vec{w},b)=\frac{1}{2m}\sum_{i=1}^{m}(\hat{y}^{(i)}-{y}^{(i)})^2<br>$$</p><h2 id="向量化"><a href="#向量化" class="headerlink" title="向量化"></a>向量化</h2><p>很显然，在多元线性回归中，需要进行向量之间的点乘，因此，需要利用<code>NumPy</code>库来创建两个数组，用于存放参数$w$和样本$x$的所有特征。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">w = np.array([<span class="number">1.0</span>, <span class="number">2.5</span>, -<span class="number">3.3</span>])</span><br><span class="line">x = np.array([<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>])</span><br><span class="line">b = <span class="number">4</span></span><br></pre></td></tr></table></figure><p>接着获取特征数量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">len</span>(x)</span><br></pre></td></tr></table></figure><p>我们有三种方法来计算点乘</p><h3 id="直接计算"><a href="#直接计算" class="headerlink" title="直接计算"></a>直接计算</h3><p>这种方法直接列式子进行计算，将所有的参数和对应特征依次相乘再相加，最后加上$b$。<br>$$<br>f_{\vec{w},b}(\vec{x})=w_1x_1+w_2x_2+w_3x_3+b<br>$$<br>相应的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f = w[<span class="number">0</span>] * x[<span class="number">0</span>] + w[<span class="number">1</span>] * x[<span class="number">1</span>] + w[<span class="number">2</span>] * x[<span class="number">2</span>] + b</span><br></pre></td></tr></table></figure><p>很显然，这种方式在面对特征数量很多的情况使用起来非常困难，不推荐使用这种方式。</p><h3 id="循环累加"><a href="#循环累加" class="headerlink" title="循环累加"></a>循环累加</h3><p>这种方法直接利用循环，求得所有的累加值，最后加上$b$。<br>$$<br>f_{\vec{w},b}(\vec{x})=\sum_{i=1}^{n}w_jx_j+b<br>$$<br>相应的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    f += w[i] * x[i]</span><br><span class="line">f += b</span><br></pre></td></tr></table></figure><p>这种方式可以降低代码的冗余，利用循环高效率达成目标。</p><h3 id="使用点乘"><a href="#使用点乘" class="headerlink" title="使用点乘"></a>使用点乘</h3><p><code>Numpy</code>库中自带了关于向量的点乘操作，可以直接进行调用计算点乘，最后加上$b$。<br>$$<br>f_{\vec{w},b}(\vec{x})=\vec{w}\cdot\vec{x}+b<br>$$<br>相应的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="number">0</span></span><br><span class="line">f = np.dot(w, x) + b</span><br></pre></td></tr></table></figure><p>这种方式效率高，代码简洁。因为<code>NumPy</code>能调用并行硬件，所以它的效率比<code>for</code>循环或顺序计算要高得多。</p><h2 id="梯度下降-1"><a href="#梯度下降-1" class="headerlink" title="梯度下降"></a>梯度下降</h2><p>对于多元线性回归模型来说，进行梯度下降相当于对每个参数进行一次单变量线性回归的运算。<br>$$<br>w_1=w_1-\alpha\frac{1}{m}\sum_{i=1}^{m}(f_{\vec{w},b}(\vec{x}^{(i)})-{y}^{(i)})x_1^{(i)}<br>$$</p><p>$$<br>\vdots<br>$$</p><p>$$<br>w_n=w_n-\alpha\frac{1}{m}\sum_{i=1}^{m}(f_{\vec{w},b}(\vec{x}^{(i)})-{y}^{(i)})x_n^{(i)}<br>$$</p><p>$$<br>b=b-\alpha\frac{1}{m}\sum_{i=1}^{m}(f_{\vec{w},b}(\vec{x}^{(i)})-{y}^{(i)})<br>$$</p><h2 id="特征缩放"><a href="#特征缩放" class="headerlink" title="特征缩放"></a>特征缩放</h2><p>如果特征不止一个且取值范围差异较大，会面临一个问题：某一个特征参数改变很少一点，会导致成本函数的值变化得很大，最终导致没有办法快速收敛，使得梯度下降运行非常缓慢。举个实际的例子，如果房子价格由房子大小和厨房的数量所决定，那么很明显厨房的数量并不怎么影响房子的价格，这就导致厨房数量所对应的的参数变化量非常小，而房子大小所对应的参数的变化量非常大。通俗来说，每一次都会改变这两个参数的值，用于寻找最优值，但是对于房子大小，需要乘以一个很大的数字，那么只要其参数变化很少一点，就会对成本函数的值造成很大影响。反之厨房数量所对应的参数并不会造成很大影响，这就使得成本函数的等高线呈现出一种椭圆形的样子，会导致梯度下降的时候使其值反复横跳，没有办法快速收敛。</p><h3 id="最大值特征缩放"><a href="#最大值特征缩放" class="headerlink" title="最大值特征缩放"></a>最大值特征缩放</h3><p>该方法可以保证每一个值都在<code>0~1</code>之间。对于每一个特征，都会有一个取值范围，因此，我们可以令取值范围和该特征的所有特征值都除以取值范围的最大值来完成特征缩放。</p><p>接着用房子的例子，房子的大小取值范围为30$\leq$$x_1$$\leq$200，卧室数量的取值范围为0$\leq$$x_2$$\leq$5，那么使用最大值特征缩放，即：<br>$$<br>x_{1,scaled}=\frac{x_1}{200}<br>$$</p><p>$$<br>x_{2,scaled}=\frac{x_2}{5}<br>$$</p><p>最终房子大小的缩放结果为0.15$\leq$$x_{1,scaled}$$\leq$1，卧室数量的的缩放结果为0$\leq$$x_{2,scaled}$$\leq$1。</p><h3 id="均值归一化"><a href="#均值归一化" class="headerlink" title="均值归一化"></a>均值归一化</h3><p>该方法可以保证每一个值都在<code>-1~1</code>之间。对于每一个特征值和取值范围，均有如下的计算公式：<br>$$<br>x=\frac{x-\mu}{max-min}<br>$$<br>其中<code>x</code>为特征值或者取值范围，$\mu$为该特征的所有特征值的平均值，<code>max</code>和<code>min</code>分别为取值范围的最大值和最小值。</p><p>假设房子的大小的平均值为60，卧室数量的平均值为2.3，使用均值归一化：<br>$$<br>x_1=\frac{x_1-60}{200-30}<br>$$</p><p>$$<br>x_2=\frac{x_2-2.3}{5-0}<br>$$</p><p>最终房子大小的缩放结果为-0.18$\leq$$x_1$$\leq$0.82，卧室数量的缩放结果为-0.46$\leq$$x_2$$\leq$0.54。</p><h3 id="Z-score标准化"><a href="#Z-score标准化" class="headerlink" title="Z-score标准化"></a>Z-score标准化</h3><p>该方法利用标准差来进行计算。对于每一个特征值和取值范围，均有如下的计算公式：<br>$$<br>x=\frac{x-\mu}{\sigma}<br>$$<br>其中<code>x</code>为特征值或者取值范围，$\mu$和$\sigma$分别为该特征的所有特征值的平均值和标准差。</p><p>假设房子的大小的平均值为60，标准差为45，卧室数量的平均值为2.3，标准差为1.4，使用Z-score标准化：<br>$$<br>x_1=\frac{x_1-60}{45}<br>$$</p><p>$$<br>x_2=\frac{x_2-2.3}{1.4}<br>$$</p><p>最终房子大小的缩放结果为-0.67$\leq$$x_1$$\leq$3.1，卧室数量的缩放结果为-1.6$\leq$$x_2$$\leq$1.9。</p><h2 id="特征工程"><a href="#特征工程" class="headerlink" title="特征工程"></a>特征工程</h2><p>所谓特征工程就是利用初始给的特征创造新的更有用的特征。我们回到房子价格的问题上，如果给定了房子的占地长和占地宽，那么很明显，我们会想到两个特征的值相乘，得到面积，面积更能反映出一个房子的价格。根据上述推论，我们可以创造一个新的特征：<br>$$<br>x_3=x_1x_2<br>$$<br>创造新特征的过程被称为特征工程，则最后的模型函数为：<br>$$<br>f_{\vec{w},b}(\vec{x})=w_1x_1+w_2x_2+w_3x_3+b<br>$$</p><h1 id="逻辑回归"><a href="#逻辑回归" class="headerlink" title="逻辑回归"></a>逻辑回归</h1><p>逻辑回归是一种分类，并非一种线性回归模型，它的作用主要是给定输入，然后对输入进行分类，一般分为两类，给定<code>Yes</code>或者<code>No</code>。举个栗子：给定一封邮件，判断是否为垃圾邮件，给定一个肿瘤的信息，判断是否为良性肿瘤……</p><h2 id="Sigmoid函数"><a href="#Sigmoid函数" class="headerlink" title="Sigmoid函数"></a>Sigmoid函数</h2><p>Sigmoid函数是一个在生物学中常见的S型函数，也称为S型生长曲线。在信息科学中，由于其单增以及反函数单增等性质，Sigmoid函数常被用作神经网络的激活函数，将变量映射到0,1之间。</p><p>该函数为：<br>$$<br>g(z)=\frac{1}{1+e^{-z}}\quad 0&lt;g(z)&lt;1<br>$$</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Sigmoid%E5%87%BD%E6%95%B0.png" alt="Sigmoid函数"></p><p>其中z是图像的横轴，e为自然常数。</p><h2 id="逻辑回归模型"><a href="#逻辑回归模型" class="headerlink" title="逻辑回归模型"></a>逻辑回归模型</h2><p>逻辑回归模型可以理解为将特征输入到模型中，然后给出0或者1的结果。</p><p>将前面讲到的线性回归模型和逻辑回归模型组合使用（注：线性回归和逻辑回归本质上是两回事，一个是线性回归，一个是分类），可以先列出线性回归的模型：<br>$$<br>z=\vec{w}\cdot\vec{x}+b<br>$$<br>将这里的z传递给线性回归模型：<br>$$<br>f_{\vec{w},b}(\vec{x})=g(\vec{w}\cdot\vec{x}+b)=\frac{1}{1+e^{-(\vec{w}\cdot\vec{x}+b)}}<br>$$<br>如果现在有一个患者想要预测他的肿瘤是恶性还是良性，使用该模型得到的结果为0.7，即$f_{\vec{w},b}(\vec{x})=0.7$，那么说明这个人有70%的概率是恶性，30%的概率是良性。</p><p>用数学符号表示为：<br>$$<br>f_{\vec{w},b}(\vec{x})=P(y=1|\vec{x};\vec{w},b)=0.7<br>$$<br>该式表明参数<code>w</code>和<code>b</code>是影响计算的参数，在给定输入特征$\vec{x}$的前提下，<code>y=1</code>的概率是0.7。</p><p>由上述可见，一共分为两种情况，这两种情况概率相加应该是1，即：<br>$$<br>P(y=0)+P(y=1)=1<br>$$</p><h2 id="决策边界"><a href="#决策边界" class="headerlink" title="决策边界"></a>决策边界</h2><p>通过对逻辑回归模型的分析，观察图像，我们可以发现，0.5是一个分界点，如果预测结果大于0.5，那么预测值将会为1，反之将会为0。继续推导，我们发现，当预测值为0.5时，z的值应该为0。换言之，当回归模型的值为0时，将会得到一条分界线，用于分隔两种预测情况。</p><p>因此，在计算逻辑回归模型的参数时，就相当于求决策边界对应的曲线的参数。</p><h2 id="成本函数和损失函数"><a href="#成本函数和损失函数" class="headerlink" title="成本函数和损失函数"></a>成本函数和损失函数</h2><p>损失函数指的是对于单个样本而言相差的值，成本函数指的是所有的样本总的相差值。</p><p>在前面线性回归模型中，我们使用的成本函数为：<br>$$<br>J(\vec{w},b)=\frac{1}{2m}\sum_{i=1}^{m}(\hat{y}^{(i)}-{y}^{(i)})^2<br>$$<br>显而易见，这个成本函数很明显不适用于逻辑回归中，因为逻辑回归的值只有0和1，如果使用该成本函数，很难得到一个凸函数，会导致有很多的局部极小值，不能使用梯度下降来找成本函数的最小值，因此不能采用该成本函数。</p><p>对于逻辑回归模型，我们需要采用一种新的损失函数，将其定义为：<br>$$<br>L(f_{\vec{w},b}(\vec{x}^{(i)}),y^{(i)})<br>$$<br>该损失函数是关于$f(x)$和真实标签<code>y</code>的函数。</p><p>让我们先来看一下这个损失函数的定义：<br>$$<br>L(f_{\vec{w},b}(\vec{x}^{(i)}),y^{(i)})=-log(f_{\vec{w},b}(\vec{x}^{(i)}))\quad y^{(i)}=1<br>$$</p><p>$$<br>L(f_{\vec{w},b}(\vec{x}^{(i)}),y^{(i)})=-log(1-f_{\vec{w},b}(\vec{x}^{(i)}))\quad y^{(i)}=0<br>$$</p><p>该代价函数是用最大似然估计的统计原理推导出来的，这种代价函数具有凸函数的优点。</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0.jpg" alt="逻辑回归损失函数"></p><p>如图所示，红色代表真实标签为1，蓝色代表真实标签为0。</p><p>可以发现在真实标签为1时，预测值预测的概率越靠近1，则损失函数的值越小，反之越大；在真实标签为0时，预测值预测的概率越靠近0，则损失函数的值越小，反之越大。通过这种方式，可以使得成本函数变为一个凸函数，用于梯度下降。</p><p>因此，对于逻辑回归，其成本函数为：<br>$$<br>J(\vec{w},b)=\frac{1}{m}\sum_{i=1}^{m}L(f_{\vec{w},b}(\vec{x}^{(i)}),y^{(i)})<br>$$<br>对于上述的损失函数，可以进行简化。很容易发现，标签只能为0或者1，那么可以根据这个性质，将式子写作：<br>$$<br>L(f_{\vec{w},b}(\vec{x}^{(i)}),y^{(i)})=-y^{(i)}log(f_{\vec{w},b}(\vec{x}^{(i)}))-(1-y^{(i)})log(1-f_{\vec{w},b}(\vec{x}^{(i)}))<br>$$<br>因此，成本函数可以变为：<br>$$<br>J(\vec{w},b)=-\frac{1}{m}\sum_{i=1}^{m}[y^{(i)}log(f_{\vec{w},b}(\vec{x}^{(i)}))+(1-y^{(i)})log(1-f_{\vec{w},b}(\vec{x}^{(i)}))]<br>$$</p><h2 id="梯度下降-2"><a href="#梯度下降-2" class="headerlink" title="梯度下降"></a>梯度下降</h2><p>和线性回归一样，逻辑回归进行梯度下降也是相同的思路：<br>$$<br>w_j=w_j-\alpha\frac{\partial}{\partial{w_j}}J(\vec{w},b)<br>$$</p><p>$$<br>b=b-\alpha\frac{\partial}{\partial{b}}J(\vec{w},b)<br>$$</p><p>在上述中我们已经知道：<br>$$<br>f_{\vec{w},b}(\vec{x})=g(\vec{w}\cdot\vec{x}+b)=\frac{1}{1+e^{-(\vec{w}\cdot\vec{x}+b)}}<br>$$<br>因此，将该式子代入，求偏导可得：<br>$$<br>w_j=w_j-\alpha\frac{1}{m}\sum_{i=1}^{m}(f_{\vec{w},b}(\vec{x}^{(i)})-{y}^{(i)})x_j^{(i)}<br>$$</p><p>$$<br>b=b-\alpha\frac{1}{m}\sum_{i=1}^{m}(f_{\vec{w},b}(\vec{x}^{(i)})-{y}^{(i)})<br>$$</p><h1 id="过拟合问题"><a href="#过拟合问题" class="headerlink" title="过拟合问题"></a>过拟合问题</h1><h2 id="三种拟合情况"><a href="#三种拟合情况" class="headerlink" title="三种拟合情况"></a>三种拟合情况</h2><p>让我们先来看一个数据集：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%88%BF%E4%BB%B7%E9%A2%84%E6%B5%8B%E6%95%B0%E6%8D%AE%E9%9B%86.jpg" alt="房价预测数据集"></p><h3 id="欠拟合"><a href="#欠拟合" class="headerlink" title="欠拟合"></a>欠拟合</h3><p>在该数据集中，我们可以发现，这个是房子大小和价格的关系，我们可以使用线性回归来对数据集进行拟合，如图所示：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E4%B8%80%E6%AC%A1%E5%87%BD%E6%95%B0.jpg" alt="一次函数"></p><p>很明显，该算法不能很好地拟合训练数据，用专业术语描述，就是模型对训练数据的拟合不足（欠拟合），另一种术语是算法有高偏差。</p><h3 id="拟合"><a href="#拟合" class="headerlink" title="拟合"></a>拟合</h3><p>为了防止欠拟合，我们可以通过观察发现，这个函数可能是一个二次函数，那么我们可以尝试利用二次函数对这些训练集进行拟合：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E4%BA%8C%E6%AC%A1%E5%87%BD%E6%95%B0.jpg" alt="二次函数"></p><p>这里介绍一个名词：泛化(Generalization)，指的是算法也能适用于没出现在训练集中的样本的能力。</p><h3 id="过拟合"><a href="#过拟合" class="headerlink" title="过拟合"></a>过拟合</h3><p>那如果我们用一个多项式进行数据集的拟合，可以使得代价为0，让所有的点都在我们的模型上：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%A4%9A%E9%A1%B9%E5%BC%8F%E5%87%BD%E6%95%B0.jpg" alt="多项式函数"></p><p>很明显可以发现，虽然所有的数据集都在这条线上，与数据集吻合非常好，但是这个模型不具有泛化到新样本的能力。</p><p>综上所述，机器学习需要找到一个既不欠拟合，又不过拟合的模型、</p><h2 id="解决过拟合"><a href="#解决过拟合" class="headerlink" title="解决过拟合"></a>解决过拟合</h2><h3 id="增加数据集"><a href="#增加数据集" class="headerlink" title="增加数据集"></a>增加数据集</h3><p>如果使用一个多项式来进行数据的拟合，可能会导致过拟合，我们可以增加训练样本来解决该问题，使用这种方法仍然可以使用多项式来对数据进行拟合，也可以得到一个很好的结果。</p><h3 id="使用特征子集"><a href="#使用特征子集" class="headerlink" title="使用特征子集"></a>使用特征子集</h3><p>如果没有那么多数据集，那么可以降低特征的数量，可以使用最小的特征子集来进行操作，即挑选几个影响度最高的特征来进行模型的创建。</p><h3 id="正则化"><a href="#正则化" class="headerlink" title="正则化"></a>正则化</h3><p>正则化是一种比较温和的方式，可以利用正则化来减小参数的大小，正则化是一种非常常用也非常好用的训练算法模型的方法。</p><h2 id="正则化-1"><a href="#正则化-1" class="headerlink" title="正则化"></a>正则化</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>正则化简单来说就是使用一个小的参数去乘以参数<code>w</code>，一般来说我们管这个叫惩罚，越不重要的特征，我们对其惩罚的力度就越大，即乘以的参数就越小，可以有效降低该特征在曲线中的权重，但又不是完全没有影响。</p><p>如果我们有非常多的特征，并且不知道哪个特征影响大，哪个特征影响小，因此我们可以对所有的参数进行惩罚，即对所有的<code>w</code>进行正则化操作。</p><p>用之前的线性回归来举例子，先看一下他的成本函数：<br>$$<br>J(\vec{w},b)=\frac{1}{2m}\sum_{i=1}^{m}(f_{\vec{w},b}(\vec{x}^{(i)})-{y}^{(i)})^2<br>$$<br>在进行正则化之前，我们先引入一个参数$\lambda$，该参数代表惩罚力度，一般是一个很小的值。同时这个值应该除以<code>2m</code>，用于保证与前面的系数一致，在改变样本数量的时候，可以等比的放大缩小。<br>$$<br>J(\vec{w},b)=\frac{1}{2m}\sum_{i=1}^{m}(f_{\vec{w},b}(\vec{x}^{(i)})-{y}^{(i)})^2+\frac{\lambda}{2m}\sum_{j=1}^{n}w_j^2<br>$$<br>其中的<code>n</code>代表特征的数量，对所有的参数<code>w</code>进行正则化。</p><p>不仅可以对<code>w</code>进行正则化，也可以对<code>b</code>进行正则化，但事实上这么做的人很少，因为在实践过程中，正则化<code>b</code>产生的影响非常小，所以我们会更多地去正则化参数<code>w</code>而不是参数<code>b</code>。</p><p>当然，也可以对<code>b</code>进行正则化操作，即：<br>$$<br>J(\vec{w},b)=\frac{1}{2m}\sum_{i=1}^{m}(f_{\vec{w},b}(\vec{x}^{(i)})-{y}^{(i)})^2+\frac{\lambda}{2m}\sum_{j=1}^{n}w_j^2+\frac{\lambda}{2m}b^2<br>$$</p><h3 id="线性回归正则化"><a href="#线性回归正则化" class="headerlink" title="线性回归正则化"></a>线性回归正则化</h3><p>在梯度下降过程中，需要对式子进行求偏导运算，我们现在只对<code>w</code>进行正则化，不对<code>b</code>进行正则化，则梯度下降中公式为：<br>$$<br>w_j=w_j-\alpha\frac{\partial}{\partial{w_j}}J(\vec{w},b)<br>$$<br>其中成本函数应该变更为：<br>$$<br>J(\vec{w},b)=\frac{1}{2m}\sum_{i=1}^{m}(f_{\vec{w},b}(\vec{x}^{(i)})-{y}^{(i)})^2+\frac{\lambda}{2m}\sum_{j=1}^{n}w_j^2<br>$$</p><p>那么现在求偏导的结果应该为：<br>$$<br>\frac{1}{m}\sum_{i=1}^{m}(f_{\vec{w},b}(\vec{x}^{(i)})-{y}^{(i)})x_j^{(i)}+\frac{\lambda}{m}w_j<br>$$<br>因此，正则化后，更新结果应该为：<br>$$<br>w_j=w_j-\alpha[\frac{1}{m}\sum_{i=1}^{m}(f_{\vec{w},b}(\vec{x}^{(i)})-{y}^{(i)})x_j^{(i)}+\frac{\lambda}{m}w_j]<br>$$</p><p>$$<br>b=b-\alpha\frac{1}{m}\sum_{i=1}^{m}(f_{\vec{w},b}(\vec{x}^{(i)})-{y}^{(i)})<br>$$</p><h3 id="逻辑回归正则化"><a href="#逻辑回归正则化" class="headerlink" title="逻辑回归正则化"></a>逻辑回归正则化</h3><p>与线性回归相似，同样只正则化<code>w</code>，那么我们在成本函数中加上相应的正则化值：<br>$$<br>J(\vec{w},b)=-\frac{1}{m}\sum_{i=1}^{m}[y^{(i)}log(f_{\vec{w},b}(\vec{x}^{(i)}))+(1-y^{(i)})log(1-f_{\vec{w},b}(\vec{x}^{(i)}))]+\frac{\lambda}{2m}\sum_{j=1}^{n}w_j^2<br>$$<br>​    那么求偏导后的结果应该为：<br>$$<br>\frac{1}{m}\sum_{i=1}^{m}(f_{\vec{w},b}(\vec{x}^{(i)})-{y}^{(i)})x_j^{(i)}+\frac{\lambda}{m}w_j<br>$$</p><p>$$<br>b=b-\alpha\frac{1}{m}\sum_{i=1}^{m}(f_{\vec{w},b}(\vec{x}^{(i)})-{y}^{(i)})<br>$$</p><h1 id="神经网络"><a href="#神经网络" class="headerlink" title="神经网络"></a>神经网络</h1><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p>神经网络实际上就是来模拟人类大脑的运算过程，将若干个基础信息作为输入，然后中间有多个神经元。神经元与输入进行连接，每个神经元都可以获取到所有的输入，并根据自己的简易数学模型来挑选需要的输入进行运算，得到若干个新的参数，最后通过这几个新的参数来获得我们需要的最终结果。</p><p>我们拿一个实例来说明这件事，如果一件衣服的特征有：成本，运输费，营销，材料质量。根据这些特征，求出这件衣服被认为是十分划算的概率。</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B.jpg" alt="神经网络模型"></p><p>根据上图，最左边是输入的四个特征，被称为<strong>输入层</strong>，中间一共有三个<strong>神经元</strong>，第一个神经元代表可负担程度，通过成本和运费得到，第二个神经元代表品牌效应，由营销所决定，第三个是质量，由成本和材料质量所决定。这一层被称为<strong>隐藏层</strong>，每个参数都是由逻辑回归得到的，得到的新的参数被称之为激活值。最后这三个参数再进行一次逻辑回归，得到最终的结果，即这件衣服被认为是十分划算的概率，得到结果的这一层被称为<strong>输出层</strong>。</p><p>在实际中，我们只需要决定一共需要多少个层，和每一层有多少个神经元。神经网络作为一种很强的学习算法，因此不用具体考虑每一个神经元要干什么。这里有一个名词，有多层的神经网络被称为多层感知器。</p><p>总的来说，神经网络的工作原理就是每一层输入一个数字向量，应用一堆逻辑回归单元，然后计算另一个向量，一层接着一层，直到得到最终的输入层计算。</p><p>第几层的变量应该是在右上角标明，比如，第一层输出的值应该标为$\vec{a}^{[1]}$，第二层逻辑回归模型中的第三个神经元的参数<code>w</code>应该为$\vec{w}_3^{[2]}$，其中，输入层有时候也会被称之为第0层，神经网络的层数的计数方式是所有的隐藏层加上输出层，不包含输入层。</p><p>对于每一层的激活值，有一个通项公式：<br>$$<br>a_j^{[l]}=g(\vec{w}_j^{[l]}\cdot\vec{a}^{[l-1]}+b_j^{[l]})<br>$$<br>该公式中，<code>l</code>是<code>layer</code>的缩写，表示第<code>l</code>层神经网络，每一层的每一个神经元的的激活值的结果都等于该神经元的逻辑回归模型接收上一层的激活值所运算出的结果。<code>j</code>表示的是第<code>j</code>个神经元，<code>g</code>表示的是激活函数<code>Sigmoid</code>，该激活函数在上文中提到过，是一个<code>s</code>型函数。激活函数指的就是可以输出激活值的函数。还有一个注意点，输入的特征值$\vec{x}$（即输入层）在神经网络中也可以被称作$\vec{a}^{[0]}$。</p><h2 id="前向传播"><a href="#前向传播" class="headerlink" title="前向传播"></a>前向传播</h2><p>神经网络的前向传播指的是从左向右依次传播神经元的激活值。</p><p>用手写数字识别来举例，现在我们有一个需求，用来判定一个手写数字是0还是1，那么我们需要构建一个神经网络，如图所示：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%89%8D%E5%90%91%E4%BC%A0%E6%92%AD.jpg" alt="前向传播"></p><p>显然，该神经网络是一层一层向后进行传播的，每一层都会获取前一层的激活值，并根据这一层每一个神经元的逻辑回归，得到该层的激活值。这个操作就是神经网络的前向传播，按照从左到右前进的方向进行计算。</p><h2 id="推理实现"><a href="#推理实现" class="headerlink" title="推理实现"></a>推理实现</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>神经网络的一个显著特点是可以将相同的算法应用于许多不同的应用程序之中，对于不同的应用场景而言，很多时候只是神经网络的参数不同。当我们拥有针对某一场景的参数时，我们便可以在获得输入时准确预测输出结果，这一过程便被称之为神经网络推理。</p><h2 id="烘焙咖啡案例"><a href="#烘焙咖啡案例" class="headerlink" title="烘焙咖啡案例"></a>烘焙咖啡案例</h2><h3 id="案例讲解"><a href="#案例讲解" class="headerlink" title="案例讲解"></a>案例讲解</h3><p>我们现在用一个煮咖啡的例子，在烘焙咖啡豆的时候，一般来讲会有两个参数，一个是烘焙的温度（横轴），一个是烘焙的时间（纵轴）。我们现在需要做的是，训练一个神经网络，让其能够预测在某一特定温度和时间下，这个咖啡豆是否能煮出好咖啡。在下图中，红色的叉代表好咖啡，蓝色的圆圈代表坏咖啡。</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%92%96%E5%95%A1%E7%83%98%E7%84%99.jpg" alt="咖啡烘焙"></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%83%98%E7%84%99%E5%92%96%E5%95%A1%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B.jpg" alt="烘焙咖啡神经网络模型"></p><p>根据前面所学，该模型有一个输入层，一个隐藏层和一个输出层。对于烘焙咖啡这一场景而言，输入层一共有两个参数，分别是温度和时间。</p><p>首先设置一下输入层的参数，我们假设要推理的200度，17分钟情况下烘焙出的咖啡豆是否能煮出好咖啡。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = np.array([[<span class="number">200.0</span>, <span class="number">17.0</span>]])</span><br></pre></td></tr></table></figure><p>接下来创建第一层作为第一个隐藏层，使其含有三个神经元，这意味着该层中的三个隐藏单元用作激活函数，即<code>sigmoid</code>函数。下面这段代码中的<code>Dense</code>代表全连接层，每个神经元都与上一层的所有神经元相连接，这意味着每个神经元都接收来自上一层的所有输入，并产生一个输出。随着对神经网络的学习，会了解其他类型的层。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">layer_1 = Dense(units = <span class="number">3</span>, activation = <span class="string">&quot;sigmoid&quot;</span>)</span><br></pre></td></tr></table></figure><p>现在我们的神经网络的第一个隐藏层已经构建完成了，用一个变量去接收初始值传入后得到的结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a1 = layer_1(x)</span><br></pre></td></tr></table></figure><p>很明显，这个<code>a1</code>将包含三个元素，因为第一层有三个神经元，每个神经元都会产生一个输出结果。</p><p>以上就是第一层的构建，下面将进行第二层也就是输出层的构建。</p><p>第二层只有一个神经元建立方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">layer_2 = Dense(unites = <span class="number">1</span>, activation = <span class="string">&quot;sigmoid&quot;</span>)</span><br></pre></td></tr></table></figure><p>最后，我们可以得到输出层的结果，将用<code>a2</code>来进行存储。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a2 = layer_2(a1)</span><br></pre></td></tr></table></figure><p>这个结果将会是一个概率值，如果想要实现二分类，只需要再写一个判断语句，如果大于等于0.5，那么就是1，反之就是0。</p><h2 id="手写数字识别案例"><a href="#手写数字识别案例" class="headerlink" title="手写数字识别案例"></a>手写数字识别案例</h2><h3 id="案例讲解-1"><a href="#案例讲解-1" class="headerlink" title="案例讲解"></a>案例讲解</h3><p>该案例与上述极其相似，只需要更改隐藏层的层数和每一层神经元的个数即可，在此就不过多赘述了。</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB%E6%A8%A1%E5%9E%8B.jpg" alt="手写数字识别模型"></p><p>上述是手写数字识别的神经网络模型图。</p><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><p>相对于上述代码，只需要更改每一层神经元的个数即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x = np.array([[<span class="number">0.0</span>, ..., <span class="number">245</span>, ..., <span class="number">240</span>, ..., <span class="number">0</span>]])</span><br><span class="line">layer_1 = Dense(units = <span class="number">25</span>, activation = <span class="string">&quot;sigmoid&quot;</span>)</span><br><span class="line">a1 = layer_1(x)</span><br><span class="line">layer_2 = Dense(units = <span class="number">15</span>, activation = <span class="string">&quot;sigmoid&quot;</span>)</span><br><span class="line">a2 = layer_2(a1)</span><br><span class="line">layer_3 = Dense(units = <span class="number">1</span>, activation = <span class="string">&quot;sigmoid&quot;</span>)</span><br><span class="line">a3 = layer_3(a2)</span><br></pre></td></tr></table></figure><h2 id="TensorFlow中的数据形式"><a href="#TensorFlow中的数据形式" class="headerlink" title="TensorFlow中的数据形式"></a>TensorFlow中的数据形式</h2><h3 id="TensorFlow"><a href="#TensorFlow" class="headerlink" title="TensorFlow"></a>TensorFlow</h3><p><code>TensorFlow</code>是一个基于数据流编程的符号数学系统，被广泛应用于各类机器学习算法的编程实现，其前身是谷歌的神经网络算法库<code>DistBelief</code>。</p><p>现如今，<code>NumPy</code>已经成为了线性代数和<code>Python</code>的标准库，但是<code>NumPy</code>和<code>TensorFlow</code>中的数据表示方式存在一些不一致，因此，需要去学习这些约定，这样可以实现正确的代码，并有望在神经网络中运行。</p><h3 id="NumPy中的存储"><a href="#NumPy中的存储" class="headerlink" title="NumPy中的存储"></a>NumPy中的存储</h3><p>在上述咖啡的案例中可以发现，创建矩阵的时候，里面有两个中括号。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = np.array([[<span class="number">200.0</span>, <span class="number">17.0</span>]])</span><br></pre></td></tr></table></figure><p>在我们解决这个问题之前，首先来看两个例子。</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/NumPy%E7%9F%A9%E9%98%B5%E6%A0%BC%E5%BC%8F.jpg" alt="NumPy矩阵格式"></p><p>上图所表示的分别是$2\times3$和$4\times2$的矩阵，如果学过<code>C/C++</code>的话，你会发现这种表示方法和其中的二维数组很像，只不过一个用了花括号，一个用了中括号。在咖啡的例子中，我们可以把它理解成是一个$1\times2$的矩阵，也就是一个只有一行的二维数组。</p><p>同理可知：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = np.array([[<span class="number">200</span>, <span class="number">17</span>]])</span><br></pre></td></tr></table></figure><p>表示的是一个$1\times2$的矩阵。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = np.array([[<span class="number">200</span>], </span><br><span class="line">              [<span class="number">17</span>]])</span><br></pre></td></tr></table></figure><p>表示的是一个$2\times1$的矩阵。</p><p>上述的这两个所表示的都是二维的矩阵。</p><p>在之前学习线性回归存储数据的时候，使用的矩阵只有一个中括号而非两个，这种情况下我们称之为一维向量，可以通过数中括号套了几层来判断是几维矩阵。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = np.array([<span class="number">200</span>, <span class="number">17</span>])</span><br></pre></td></tr></table></figure><p>上述表示的是一个一维向量。</p><h3 id="TensorFlow中的存储"><a href="#TensorFlow中的存储" class="headerlink" title="TensorFlow中的存储"></a>TensorFlow中的存储</h3><p>在之前搭建神经网络的时候，我们写过如下这段代码：</p><p>首先设置一下输入层的参数，我们假设要推理的200度，17分钟情况下烘焙出的咖啡豆是否能煮出好咖啡。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = np.array([[<span class="number">200.0</span>, <span class="number">17.0</span>]])</span><br><span class="line">layer_1 = Dense(units = <span class="number">3</span>, activation = <span class="string">&quot;sigmoid&quot;</span>)</span><br><span class="line">a1 = layer_1(x)</span><br></pre></td></tr></table></figure><p>这里面的$a1$其实是一个$1\times3$的张量，如果输出这个$a1$的话，会显示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf.Tensor([[<span class="number">0.2</span> <span class="number">0.7</span> <span class="number">0.3</span>]], shape=(<span class="number">1</span>, <span class="number">3</span>), dtype=float32)</span><br></pre></td></tr></table></figure><p>在这里，中括号的三个数字代表这一层全连接层的计算结果，数量与这一层的神经元的数量相匹配，得到的是一个$1\times3$的矩阵，<code>float32</code>意味着它是一个32为的小数，<code>Tensor</code>表示的是张量，这种数据类型可以有效地存储和执行矩阵计算。</p><p>从技术上来讲，张量比矩阵更通用一些，在这里可以把张量看作是矩阵的一种方式。</p><p>可以使用一个函数将张量转换为<code>NumPy</code>数组：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a1.numpy()</span><br></pre></td></tr></table></figure><h2 id="搭建神经网络"><a href="#搭建神经网络" class="headerlink" title="搭建神经网络"></a>搭建神经网络</h2><h3 id="烘焙咖啡"><a href="#烘焙咖啡" class="headerlink" title="烘焙咖啡"></a>烘焙咖啡</h3><p>回顾一下之前烘焙咖啡的例子，我们要搭建的模型如下：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%83%98%E7%84%99%E5%92%96%E5%95%A1%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B.jpg" alt="烘焙咖啡神经网络模型"></p><p>现在我们要搭建一个这样的神经网络，并用其进行训练，训练数据如下：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%83%98%E7%84%99%E5%92%96%E5%95%A1%E6%95%B0%E6%8D%AE.jpg" alt="烘焙咖啡数据"></p><p>和之前一样，需要先建立两个层，一个是拥有三个神经元的全连接层，另一个是只有一个神经元的输出层：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">layer_1 = Dense(units = <span class="number">3</span>, activation = <span class="string">&quot;sigmoid&quot;</span>)</span><br><span class="line">layer_2 = Dense(units = <span class="number">1</span>, activation = <span class="string">&quot;sigmoid&quot;</span>)</span><br></pre></td></tr></table></figure><p>我们希望使用这两个层，将它们串在一起形成一个神经网络，可以使用下述代码来实现这一功能：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model = Sequential([layer_1, layer_2])</span><br></pre></td></tr></table></figure><p>这个函数是一种组合函数，可以将多个函数顺序连接起来，实现函数的组合。可以将多个函数视为一个整体，从而获得更高的效率。</p><p>接下来需要进行数据的导入，我们需要创建一个数据集：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = np.array([[<span class="number">200.0</span>, <span class="number">17.0</span>],</span><br><span class="line">              [<span class="number">120.0</span>, <span class="number">5.0</span>],</span><br><span class="line">              [<span class="number">425.0</span>, <span class="number">20.0</span>],</span><br><span class="line">              [<span class="number">212.0</span>, <span class="number">18.0</span>]])</span><br></pre></td></tr></table></figure><p>对于这个数据集，我们有相应的标签，因此需要创建一个标签集与数据集一一对应，表示当前参数下是否可以制作出好的咖啡：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y = np.array([<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>然后我们可以来训练神经网络了，使用之前组合好的函数<code>model</code>，首先对其进行编译，需要使用一些参数调用模型，具体的参数调用在接下来会写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.<span class="built_in">compile</span>(...)</span><br></pre></td></tr></table></figure><p>编译过后，就可以来进行训练了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.fit(x, y)</span><br></pre></td></tr></table></figure><p>该函数告诉张量流采用<code>model</code>所表示的神经网络，使用数据<code>x</code>和<code>y</code>进行训练。</p><p>训练完成后，如果我们要在上面推理新的数据集，只需要调用下述函数即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.predict(x_new)</span><br></pre></td></tr></table></figure><p>其中，<code>x_new</code>为新的数据集，即要进行推理预测的数据集。</p><h3 id="手写数字识别"><a href="#手写数字识别" class="headerlink" title="手写数字识别"></a>手写数字识别</h3><p>在手写数字识别的案例中，我们搭建了一个如下的神经网络：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB%E6%A8%A1%E5%9E%8B.jpg" alt="手写数字识别模型"></p><p>该部分的代码只需要更改神经元的个数和隐藏层的层数即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">layer_1 = Dense(units = <span class="number">25</span>, activation = <span class="string">&quot;sigmoid&quot;</span>)</span><br><span class="line">layer_2 = Dense(units = <span class="number">15</span>, activation = <span class="string">&quot;sigmoid&quot;</span>)</span><br><span class="line">layer_2 = Dense(units = <span class="number">1</span>, activation = <span class="string">&quot;sigmoid&quot;</span>)</span><br><span class="line">model = Sequential([layer_1, layer_2, layer_3])</span><br><span class="line">model.<span class="built_in">compile</span>(...) <span class="comment">#这部分为编译，需要使用一些参数，在后面会具体讲到</span></span><br><span class="line">x = np.array([[<span class="number">0</span>, ..., <span class="number">245</span>, ..., <span class="number">17</span>],</span><br><span class="line">              [<span class="number">0</span>, ..., <span class="number">200</span>, ..., <span class="number">184</span>]])</span><br><span class="line">y = np.array([<span class="number">1</span>, <span class="number">0</span>])</span><br><span class="line">model.fit(x, y)</span><br><span class="line">model.predict(x_new)</span><br></pre></td></tr></table></figure><p>第四行其实是相当于将前三行给整合到一起，因此我们也可以把前四行写成一整句话，前四行代码等价于：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">model = Sequential([</span><br><span class="line">    Dense(units = <span class="number">25</span>, activation = <span class="string">&quot;sigmoid&quot;</span>),</span><br><span class="line">    Dense(units = <span class="number">15</span>, activation = <span class="string">&quot;sigmoid&quot;</span>),</span><br><span class="line">    Dense(units = <span class="number">1</span>, activation = <span class="string">&quot;sigmoid&quot;</span>)])</span><br></pre></td></tr></table></figure><h2 id="单个网络层上的前向传播"><a href="#单个网络层上的前向传播" class="headerlink" title="单个网络层上的前向传播"></a>单个网络层上的前向传播</h2><p>我们接着使用之前的烘焙咖啡的例子，来看一看单个网络层上的神经网络都做了哪些事情。</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%8D%95%E4%B8%AA%E7%BD%91%E7%BB%9C%E5%B1%82%E6%A8%A1%E5%9E%8B.jpg" alt="单个网络层模型"></p><p>在<code>Python</code>中，将使用一维数组来表示所有这些向量和参数，因此只需要使用一个方括号，首先将输入层的数据存储起来：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = np.array([<span class="number">200</span>, <span class="number">17</span>])</span><br></pre></td></tr></table></figure><p>接下来我们要计算第一个神经元的参数，计算公式：<br>$$<br>a_1^{[1]}=g(\vec{w}_1^{[1]}\cdot\vec{x}+b_1^{[1]})<br>$$<br>现在是在进行模拟推理的过程，因此参数都是已经确定好的，只需要直接使用即可，所以现在不需要纠结这些参数是如何确定下来的。而实际上进行神经网络训练的时候，是没有事先确定好的参数的，因此我们需要用有监督学习来计算参数，方便以后的推理过程，在这种情况下，当前步骤的参数是随机初始化的，经过前向传播之后，对比预测结果，再通过反向传播来调整参数。</p><p>$\vec w_1^{[1]}$的两个参数分别为$1$和$2$，$b_1^{[1]}$的参数为$-1$，使用<code>Sigmoid</code>函数作为激活函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">w1_1 = np.array([<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line">b1_1 = np.array([-<span class="number">1</span>])</span><br><span class="line">z1_1 = np.dot(w1_1, x) + b1_1  <span class="comment">#该函数在上文中提到过，可以直接进行点乘操作，效率比循环要高</span></span><br><span class="line">a1_1 = sigmoid(z1_1)</span><br></pre></td></tr></table></figure><p>接下来我们要计算第二个神经元的参数，计算公式：<br>$$<br>a_2^{[1]}=g(\vec{w}_2^{[1]}\cdot\vec{x}+b_2^{[1]})<br>$$<br>$\vec w_2^{[1]}$的两个参数分别为$-3$和$4$，$b_2^{[1]}$的参数为$1$，使用<code>Sigmoid</code>函数作为激活函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">w1_2 = np.array([-<span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">b1_2 = np.array([<span class="number">1</span>])</span><br><span class="line">z1_2 = np.dot(w1_2, x) + b1_2</span><br><span class="line">a1_2 = sigmoid(z1_2)</span><br></pre></td></tr></table></figure><p>接下来我们要计算第三个神经元的参数，计算公式：<br>$$<br>a_3^{[1]}=g(\vec{w}_3^{[1]}\cdot\vec{x}+b_3^{[1]})<br>$$<br>$\vec w_3^{[1]}$的两个参数分别为$5$和$-6$，$b_3^{[1]}$的参数为$2$，使用<code>Sigmoid</code>函数作为激活函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">w1_3 = np.array([<span class="number">5</span>, -<span class="number">6</span>])</span><br><span class="line">b1_3 = np.array([<span class="number">2</span>])</span><br><span class="line">z1_3 = np.dot(w1_3, x) + b1_3</span><br><span class="line">a1_3 = sigmoid(z1_3)</span><br></pre></td></tr></table></figure><p>至此，三个神经元的参数均已计算完成，接下来需要将它们组合为一个新的向量，作为输入输入至下一层：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a1 = np.array([a1_1, a1_2, a1_3])</span><br></pre></td></tr></table></figure><p>在最后，需要计算输出层的结果，计算公式：<br>$$<br>a_1^{[2]}=g(\vec{w}_1^{[2]}\cdot\vec{a}^{[1]}+b_1^{[2]})<br>$$<br>$\vec w_1^{[2]}$的三个参数分别为$-7$，$8$和$2$（在这里需要有三个值才可以和该层输入进行点积操作），$b_1^{[2]}$的参数为$3$，使用<code>Sigmoid</code>函数作为激活函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">w2_1 = np.array([-<span class="number">7</span>, <span class="number">8</span>, <span class="number">2</span>])</span><br><span class="line">b2_1 = np.array([<span class="number">3</span>])</span><br><span class="line">z2_1 = np.dot(w2_1, a1) + b2_1</span><br><span class="line">a2_1 = sigmoid(z2_1)</span><br></pre></td></tr></table></figure><h2 id="前向传播的一般实现"><a href="#前向传播的一般实现" class="headerlink" title="前向传播的一般实现"></a>前向传播的一般实现</h2><h3 id="参数设置"><a href="#参数设置" class="headerlink" title="参数设置"></a>参数设置</h3><p>在上文中讲到了单个网络层上的前向传播，这部分将详细地讲一下如何实现<code>dense</code>函数，即全连接层的内部构造。</p><p>回顾一下单个网络层模型：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%8D%95%E4%B8%AA%E7%BD%91%E7%BB%9C%E5%B1%82%E6%A8%A1%E5%9E%8B.jpg" alt="单个网络层模型"></p><p>首先我们需要准备一下初始参数。在推理的过程中，这些参数是已经计算好的；在训练神经网络的过程中，这些参数是随机初始化的。</p><p>先设置一下$w$的参数：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/w%E5%8F%82%E6%95%B0.jpg" alt="w参数"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">W = np.array([[<span class="number">1</span>, -<span class="number">3</span>, <span class="number">5</span>],</span><br><span class="line">              [<span class="number">2</span>, <span class="number">4</span>, -<span class="number">6</span>]])</span><br></pre></td></tr></table></figure><p>接着设置$b$的参数：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/b%E5%8F%82%E6%95%B0.jpg" alt="b参数"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b = np.array([-<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>])</span><br></pre></td></tr></table></figure><p>最后设置一下该层的输入：<br>$$<br>\vec{a}^{[0]}=\vec{x}<br>$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a_in = np.array([-<span class="number">2</span>, <span class="number">4</span>])</span><br></pre></td></tr></table></figure><h3 id="全连接层函数"><a href="#全连接层函数" class="headerlink" title="全连接层函数"></a>全连接层函数</h3><p>在设置好参数后，需要使用全连接层，也就是<code>dense</code>函数来搭建神经网络，我们先来看一下前文中是如何搭建的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">layer_1 = Dense(units = <span class="number">3</span>, activation = <span class="string">&quot;sigmoid&quot;</span>)</span><br><span class="line">layer_2 = Dense(units = <span class="number">1</span>, activation = <span class="string">&quot;sigmoid&quot;</span>)</span><br></pre></td></tr></table></figure><p>下面将具体讲一下<code>Dense</code>内部到底做了什么：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">dense</span>(<span class="params">a_in, W, b, g</span>):</span><br><span class="line">    units = W.shape[<span class="number">1</span>]  <span class="comment">#获取i + 1维度的长度，在这里表示列数，获取到的值为3</span></span><br><span class="line">    a_out = np.zeros(units)  <span class="comment">#将a设置为与神经元个数相同维数的零矩阵，获取到的是1×3的零矩阵</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(units):  <span class="comment">#j的取值是0到神经元的数量-1，这里为0, 1, 2</span></span><br><span class="line">        w = W[:, j]  <span class="comment">#二维数组切片，获取第j + 1列的元素</span></span><br><span class="line">        z = np.dot(w, a_in) + b[j]  <span class="comment">#计算第j + 1个神经元的z值，np.dot会直接让两个矩阵点乘求和</span></span><br><span class="line">        a_out[j] = g(z)  <span class="comment">#用相应的激活函数处理z，得到第j + 1个神经元的输出结果</span></span><br><span class="line">    <span class="keyword">return</span> a_out  <span class="comment">#返回计算结果</span></span><br></pre></td></tr></table></figure><h3 id="组合函数"><a href="#组合函数" class="headerlink" title="组合函数"></a>组合函数</h3><p>当搭建好每一层神经网络后，需要将它们用组合函数合并在一起，前文中是这样做的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">model = Sequential([</span><br><span class="line">    Dense(units = <span class="number">25</span>, activation = <span class="string">&quot;sigmoid&quot;</span>),</span><br><span class="line">    Dense(units = <span class="number">15</span>, activation = <span class="string">&quot;sigmoid&quot;</span>),</span><br><span class="line">    Dense(units = <span class="number">1</span>, activation = <span class="string">&quot;sigmoid&quot;</span>)])</span><br></pre></td></tr></table></figure><p>下面将具体讲一下<code>Sequential</code>内部到底做了什么：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sequential</span>(<span class="params">x</span>):</span><br><span class="line">    a1 = dense(x. W1, b1)</span><br><span class="line">    a2 = dense(a1, W2, b2)</span><br><span class="line">    a3 = dense(a2, W3, b3)</span><br><span class="line">    a4 = dense(a3, W4, b4)</span><br><span class="line">    f_x = a4</span><br><span class="line">    <span class="keyword">return</span> f_x</span><br></pre></td></tr></table></figure><p><em>注：根据线性代数的符号约定，大写字母一般指代矩阵，小写字母一般指代向量和标量。</em></p><h2 id="矩阵乘法"><a href="#矩阵乘法" class="headerlink" title="矩阵乘法"></a>矩阵乘法</h2><h3 id="矩阵乘法在神经网络中的应用"><a href="#矩阵乘法在神经网络中的应用" class="headerlink" title="矩阵乘法在神经网络中的应用"></a>矩阵乘法在神经网络中的应用</h3><p>为什么神经网络会如此高效？主要是因为计算机可以快速计算矩阵乘法，矩阵乘法在前向传播中有着广泛的应用。首先回顾一下上面的一段代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">dense</span>(<span class="params">a_in, W, b, g</span>):</span><br><span class="line">    units = W.shape[<span class="number">1</span>]  <span class="comment">#获取i + 1维度的长度，在这里表示列数，获取到的值为3</span></span><br><span class="line">    a_out = np.zeros(units)  <span class="comment">#将a设置为与神经元个数相同维数的零矩阵，获取到的是1×3的零矩阵</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(units):  <span class="comment">#j的取值是0到神经元的数量-1，这里为0, 1, 2</span></span><br><span class="line">        w = W[:, j]  <span class="comment">#二维数组切片，获取第j + 1列的元素</span></span><br><span class="line">        z = np.dot(w, a_in) + b[j]  <span class="comment">#计算第j + 1个神经元的z值，np.dot会直接让两个矩阵点乘求和</span></span><br><span class="line">        a_out[j] = g(z)  <span class="comment">#用相应的激活函数处理z，得到第j + 1个神经元的输出结果</span></span><br><span class="line">    <span class="keyword">return</span> a_out  <span class="comment">#返回计算结果</span></span><br></pre></td></tr></table></figure><p>这段代码具体展示了<code>dense</code>函数主要都做了哪些工作，事实上，这部分代码完全符合矩阵乘法的运算方式，因此可以改写成如下这段代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">dense</span>(<span class="params">A_in, W, B</span>):  <span class="comment">#注意A_in，W，B均为二维矩阵</span></span><br><span class="line">    Z = np.matmul(A_in, W) + B  <span class="comment">#矩阵乘法，可以直接对A_in矩阵和W矩阵进行矩阵乘法操作</span></span><br><span class="line">    A_out = g(Z)</span><br><span class="line">    <span class="keyword">return</span> A_out</span><br></pre></td></tr></table></figure><p>矩阵乘法会用第一个矩阵的每一行分别乘第二个矩阵的每一列，如果一个$a\times b$的矩阵和一个$b\times c$的矩阵进行矩阵乘法运算，将会得到一个$a\times c$的矩阵。不难发现，第一段代码的4~6行正好可以表示为如第二段代码中的第2行的矩阵乘法运算。</p><h3 id="矩阵乘法代码"><a href="#矩阵乘法代码" class="headerlink" title="矩阵乘法代码"></a>矩阵乘法代码</h3><p>我们现在来看一下，如何用代码来实现矩阵乘法，我们要计算的矩阵$Z$如下所示：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95.jpg" alt="矩阵乘法"></p><p>首先创建一个$A$矩阵：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A = np.array([[<span class="number">1</span>, -<span class="number">1</span>, <span class="number">0.1</span>],</span><br><span class="line">             [<span class="number">2</span>, -<span class="number">2</span>, <span class="number">0.2</span>]])</span><br></pre></td></tr></table></figure><p>接下来获取该矩阵的转置$AT$，这里有一个函数可以直接获取：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AT = A.T</span><br></pre></td></tr></table></figure><p>r然后创建$W$矩阵：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">W = np.array([[<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>],</span><br><span class="line">              [<span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">0</span>]])</span><br></pre></td></tr></table></figure><p>最后就是计算矩阵乘法了，可以直接使用相应函数来计算：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Z = np.matmul(AT, W)</span><br><span class="line">Z = AT @ W</span><br></pre></td></tr></table></figure><p>这两种方式都可以计算矩阵乘法，一般来讲，使用第一种的情况会更多一点，这样更加直观，便于理解。</p><p>让我们看一下输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[[ 11.   17.   23.    9. ]</span><br><span class="line"> [-11.  -17.  -23.   -9. ]</span><br><span class="line"> [  1.1   1.7   2.3   0.9]]</span><br></pre></td></tr></table></figure><h3 id="模型优化"><a href="#模型优化" class="headerlink" title="模型优化"></a>模型优化</h3><p>经过上述学习，我们可以对最开始的烘焙咖啡案例进行一些优化，代码如下（参数均为提前设置好的，现阶段不需要考虑参数）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">AT = np.array([[<span class="number">200</span>, <span class="number">17</span>]])</span><br><span class="line">W = np.array([[<span class="number">1</span>, -<span class="number">3</span>, <span class="number">5</span>],</span><br><span class="line">              [<span class="number">2</span>, <span class="number">4</span>, -<span class="number">6</span>]])</span><br><span class="line">b = np.array([[-<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>]])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dense</span>(<span class="params">AT, W, b, g</span>):</span><br><span class="line">    z = np.matmul(AT, W) + b</span><br><span class="line">    a_out = g(z)</span><br><span class="line">    <span class="keyword">return</span> a_out</span><br></pre></td></tr></table></figure><h2 id="TensorFlow实现"><a href="#TensorFlow实现" class="headerlink" title="TensorFlow实现"></a>TensorFlow实现</h2><p>在这一部分，将讲一下如何使用<code>TensorFlow</code>实现神经网络的搭建。</p><p>我们这次使用手写数字识别的例子，下图是手写数字识别的模型：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB%E6%A8%A1%E5%9E%8B.jpg" alt="手写数字识别模型"></p><p>第一步是按照顺序将神经网络的这三个层串联起来：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.layers <span class="keyword">import</span> Dense</span><br><span class="line"></span><br><span class="line">model = Sequential([</span><br><span class="line">    Dense(units = <span class="number">25</span>, activation = <span class="string">&quot;sigmoid&quot;</span>),</span><br><span class="line">    Dense(units = <span class="number">15</span>, activation = <span class="string">&quot;sigmoid&quot;</span>),</span><br><span class="line">    Dense(units = <span class="number">1</span>, activation = <span class="string">&quot;sigmoid&quot;</span>)</span><br><span class="line">    ])</span><br></pre></td></tr></table></figure><p>一共有三层：25个神经元的隐藏层，15个神经元的隐藏层，1个神经元的输出层，都是把<code>sigmoid</code>函数作为激活函数。</p><p>第二步是对模型进行编译：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tensorflow.keras.losses <span class="keyword">import</span> BinaryCrossentropy</span><br><span class="line"></span><br><span class="line">model.<span class="built_in">compile</span>(loss = BinaryCrossentropy())</span><br></pre></td></tr></table></figure><p>编译的时候需要指定使用哪一种损失函数，上述的的代码使用的是二元交叉熵损失函数，在后面会具体讲到它到底是什么。</p><p>第三步是将前两步拟合在一起：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.fit(X, Y, epochs = <span class="number">100</span>)</span><br></pre></td></tr></table></figure><p>这个函数的作用是开始训练你的模型，其中<code>X</code>和<code>Y</code>表示的是训练集及其标签，训练的方式和前文讲的到的梯度下降是一个原理，梯度下降需要指定一个终止条件，这里面的$100$表示梯度下降一共执行$100$代。</p><h2 id="逻辑回归的实现"><a href="#逻辑回归的实现" class="headerlink" title="逻辑回归的实现"></a>逻辑回归的实现</h2><p>在之前学习逻辑回归的时候，讲了如何使用梯度下降来实现逻辑回归，我们现在来实现一下这部分的代码。<br>$$<br>f_{\vec{w},b}(\vec{x})=g(\vec{w}\cdot\vec{x}+b)=\frac{1}{1+e^{-(\vec{w}\cdot\vec{x}+b)}}<br>$$<br>上面是求解$f_{\vec{w},b}$的公式，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">z = np.dot(w, x) + b</span><br><span class="line">f_x = <span class="number">1</span> / (<span class="number">1</span> + np.exp(-z))</span><br></pre></td></tr></table></figure><p>然后要实现其损失函数，也就是上述提到的<strong>交叉熵损失函数</strong>：<br>$$<br>L(f_{\vec{w},b}(\vec{x}^{(i)}),y^{(i)})=-y^{(i)}log(f_{\vec{w},b}(\vec{x}^{(i)}))-(1-y^{(i)})log(1-f_{\vec{w},b}(\vec{x}^{(i)}))<br>$$<br>上述公式对应代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">loss = -y * np.log(f_x) - (<span class="number">1</span> - y) * np.log(<span class="number">1</span> - f_x)</span><br></pre></td></tr></table></figure><p>1最后要更新<code>w</code>和<code>b</code>的值，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">w = w - alpha * dj_dw</span><br><span class="line">b = b - alpha * dj_db</span><br></pre></td></tr></table></figure><h2 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h2><p>这部分是对目前学过的两个损失函数做一个小小的总结。</p><h3 id="交叉熵损失函数"><a href="#交叉熵损失函数" class="headerlink" title="交叉熵损失函数"></a>交叉熵损失函数</h3><p>$$<br>L(f_{\vec{w},b}(\vec{x}^{(i)}),y^{(i)})=-y^{(i)}log(f_{\vec{w},b}(\vec{x}^{(i)}))-(1-y^{(i)})log(1-f_{\vec{w},b}(\vec{x}^{(i)}))<br>$$</p><p>该损失函数非常适合用来处理二分类问题，调用方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tensorflow.keras.losses <span class="keyword">import</span> BinaryCrossentropy</span><br><span class="line">model.<span class="built_in">compile</span>(loss = BinaryCrossentropy())</span><br></pre></td></tr></table></figure><h3 id="均方误差损失函数"><a href="#均方误差损失函数" class="headerlink" title="均方误差损失函数"></a>均方误差损失函数</h3><p>$$<br>J(w,b)=\frac{1}{m}\sum_{i=1}^{m}(\hat{y}^{(i)}-{y}^{(i)})^2<br>$$</p><p>该函数非常时候用来处理回归问题，调用方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tensorflow.keras.losses <span class="keyword">import</span> MeanSquaredError</span><br><span class="line">model.<span class="built_in">compile</span>(loss = MeanSquaredError())</span><br></pre></td></tr></table></figure><h2 id="激活函数"><a href="#激活函数" class="headerlink" title="激活函数"></a>激活函数</h2><h3 id="Sigmoid"><a href="#Sigmoid" class="headerlink" title="Sigmoid"></a>Sigmoid</h3><p><code>Sigmoid</code>函数是是一个<code>S</code>型函数，常常作为二分类的激活函数，其图像如下所示：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Sigmoid%E5%87%BD%E6%95%B0.png" alt="Sigmoid函数"></p><p>该激活函数的解析式：<br>$$<br>g(z)=\frac{1}{1+e^{-z}}\quad 0&lt;g(z)&lt;1<br>$$</p><h3 id="Identity"><a href="#Identity" class="headerlink" title="Identity"></a>Identity</h3><p>该激活函数是一个线性激活函数，也可以说是没有使用激活函数，其图像如下所示：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Identity%E5%87%BD%E6%95%B0.jpg" alt="Identity函数"></p><p>该激活函数的解析式：<br>$$<br>g(z)=z<br>$$</p><h3 id="ReLU"><a href="#ReLU" class="headerlink" title="ReLU"></a>ReLU</h3><p>该函数叫做线性整流函数，在<code>y</code>轴左侧一直为$0$，在<code>y</code>轴右侧是一条$45^\circ$的直线，其图像如下所示：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/ReLU%E5%87%BD%E6%95%B0.jpg" alt="ReLU函数"></p><p>该激活函数的解析式：<br>$$<br>g(z)=max(0,z)<br>$$</p><h3 id="激活函数的选择"><a href="#激活函数的选择" class="headerlink" title="激活函数的选择"></a>激活函数的选择</h3><p>激活函数有很多种，选择哪一种主要看我们需要解决的问题。</p><p>如果我们要解决的是二分类问题，那么很显然，<code>Sigmoid</code>函数非常适合作为输出层的激活函数；如果我们要预测股票的价格，对于股票而言，价格变动有正有负，那么使用线性激活函数作为输出层的激活函数是非常合适的；如果要预测的东西只能取非负值，比如房价，那么输出层的激活函数应该选择<code>ReLU</code>，该函数只有非负值，很适合完成这件事情。</p><p>事实证明<code>ReLU</code>激活函数是迄今为止许多从业者训练神经网络的最常见选择，而<code>Sigmoid</code>函数使用的比较少，主要是因为前者的计算速度会更快一些，因为它只需要计算$0$和$z$中的最大值就可以了，而后者需要先取幂，再计算分数等等，效率相对来说比较低。还有一个原因是<code>ReLU</code>函数只有左半部分很平坦，而<code>Sigmoid</code>函数在左下和右上都非常平坦，这会导致在进行梯度下降的时候，会导致在这些平坦的地方下降的非常慢。虽然梯度下降是在处理<code>W</code>和<code>b</code>，并不会直接处理激活函数，但是激活函数是计算的一部分，这就导致成本函数也有很多地方会受到其影响，也会编程平坦的，这就会导致梯度很小，学习速度很慢。</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Sigmoid%E5%92%8CReLU.jpg" alt="Sigmoid和ReLU"></p><p>如果是二分类问题，那么输出层使用<code>Sigmoid</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">activation = <span class="string">&quot;sigmoid&quot;</span></span><br></pre></td></tr></table></figure><p>如果预测值可以取正值或负值，那么输出层使用<code>liner</code>，也就是线性函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">activation = <span class="string">&quot;liner&quot;</span></span><br></pre></td></tr></table></figure><p>如果预测值只能取非负值，那么输出层使用<code>ReLU</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">activation = <span class="string">&quot;relu&quot;</span></span><br></pre></td></tr></table></figure><p>对于隐藏层而言，建议只使用<code>ReLU</code>作为默认的激活函数。</p><p>如果不使用激活函数，或者全部使用线性激活函数，那整个神经网络其实就相当于一个普通的线性回归或者逻辑回归，因为若干个线性多项式组合过之后依旧是一个线性多项式，因此不能单纯使用线性激活函数，而<code>ReLU</code>激活函数虽然简单，但是已经可以做到单纯的线性回归和逻辑回归做不到的事情了。</p><h2 id="多分类问题"><a href="#多分类问题" class="headerlink" title="多分类问题"></a>多分类问题</h2><h3 id="二分类与多分类问题"><a href="#二分类与多分类问题" class="headerlink" title="二分类与多分类问题"></a>二分类与多分类问题</h3><p>之前解决的分类问题都是二分类问题，对于一个初始输入，其结果只有两种可能值。而现实情况中，往往会存在多种情况，比如在进行手写数字识别的时候，一共有十个数字需要进行识别，在这种情况下，只依靠二分类是远远不够的，我们把这类需要进行更加详细分类的问题称之为多分类问题。</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E4%BA%8C%E5%88%86%E7%B1%BB%E9%97%AE%E9%A2%98.jpg" alt="二分类问题"></p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%A4%9A%E5%88%86%E7%B1%BB%E9%97%AE%E9%A2%98.jpg" alt="多分类问题"></p><h3 id="Softmax"><a href="#Softmax" class="headerlink" title="Softmax"></a>Softmax</h3><p>对于二分类而言，使用<code>Sigmoid</code>函数进行逻辑回归，其两种情况的概率如下所示：<br>$$<br>a_1=g(z)=\frac{1}{1+e^{-z}}=P(y=1|\vec{x})<br>$$</p><p>$$<br>a_2=1-a_1=P(y=0|\vec{x})<br>$$</p><p>对于多分类来说（下面用的是一个四分类的例子），一般会使用<code>Softmax</code>函数来进行预测，首先求出每一个分类相应的$z$值：<br>$$<br>z_1=\vec{w_1}\vec{x}+b_1<br>$$</p><p>$$<br>z_2=\vec{w_2}\vec{x}+b_2<br>$$</p><p>$$<br>z_3=\vec{w_3}\vec{x}+b_3<br>$$</p><p>$$<br>z_4=\vec{w_4}\vec{x}+b_4<br>$$</p><p>每一种分类对应的公式如下所示：<br>$$<br>a_1=\frac{e^{z_1}}{e^{z_1}+e^{z_2}+e^{z_3}+e^{z_4}}=P(y=1|\vec{x})<br>$$</p><p>$$<br>a_2=\frac{e^{z_2}}{e^{z_1}+e^{z_2}+e^{z_3}+e^{z_4}}=P(y=2|\vec{x})<br>$$</p><p>$$<br>a_3=\frac{e^{z_3}}{e^{z_1}+e^{z_2}+e^{z_3}+e^{z_4}}=P(y=3|\vec{x})<br>$$</p><p>$$<br>a_4=\frac{e^{z_4}}{e^{z_1}+e^{z_2}+e^{z_3}+e^{z_4}}=P(y=4|\vec{x})<br>$$</p><p>我们将上述两组式子综合一下，可以求得：<br>$$<br>z_j=\vec{w_j}\cdot\vec{x}+b_j(j=1,\dots,N)<br>$$</p><p>$$<br>a_j=\frac{e^{z_j}}{\sum^N_{k=1}e^{z_k}}=P(y=j|\vec{x})<br>$$</p><p>事实证明，如果对于二分类问题使用了<code>Softmax</code>函数来进行回归，那么其计算结果与<code>Sigmoid</code>函数来进行逻辑回归基本相同。</p><h3 id="损失函数-1"><a href="#损失函数-1" class="headerlink" title="损失函数"></a>损失函数</h3><p>让我们回忆一下对于二分类问题的损失函数是怎么定义的：<br>$$<br>loss=-yloga_1-(1-y)log(1-a_1)<br>$$<br>对于多分类问题，采用相似的策略：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Softmax%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0.jpg" alt="Softmax损失函数"></p><h3 id="手写数字识别-1"><a href="#手写数字识别-1" class="headerlink" title="手写数字识别"></a>手写数字识别</h3><p>在前文中讲到的手写数字识别问题是一个简单的二分类问题，但实际上，数字并不只有简单的<code>0</code>和<code>1</code>，一共包含有十个数字，因此，这其实是一个多分类问题。对于前面讲到的解决方案，我们只需要把最后的输出层换成十个神经元组成的输出层就可以了，输出层的激活函数也应该使用<code>softmax</code>函数，隐藏层使用的激活函数为<code>ReLU</code>函数。</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%8D%81%E6%95%B0%E5%AD%97%E6%89%8B%E5%86%99%E8%AF%86%E5%88%AB%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84.jpg" alt="十数字手写识别神经网络结构"></p><p>下面的公式对应的是输出层每一个神经元的计算公式：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%AF%8F%E4%B8%AA%E7%A5%9E%E7%BB%8F%E5%85%83%E8%AE%A1%E7%AE%97%E5%85%AC%E5%BC%8F.jpg" alt="每个神经元计算公式"></p><h3 id="TensorFlow实现-1"><a href="#TensorFlow实现-1" class="headerlink" title="TensorFlow实现"></a>TensorFlow实现</h3><p>首先需要调用相应的函数和库：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras,layers <span class="keyword">import</span> Dense</span><br></pre></td></tr></table></figure><p>接下来需要搭建神经网络的每一层，并将他们组合在一起，前两层使用<code>Relu</code>作为激活函数，输出层采用<code>Softmax</code>作为激活函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">model = Sequential([</span><br><span class="line">    Dense(units = <span class="number">25</span>, activation = <span class="string">&quot;relu&quot;</span>),</span><br><span class="line">    Dense(units = <span class="number">15</span>, activation = <span class="string">&quot;relu&quot;</span>),</span><br><span class="line">    Dense(units = <span class="number">10</span>, activation = <span class="string">&quot;softmax&quot;</span>)])</span><br></pre></td></tr></table></figure><p>然后需要引用相应的损失函数，并利用该损失函数编译模型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tensorflow.keras.losses <span class="keyword">import</span> SparseCategoricalCrossentropy</span><br><span class="line">model.<span class="built_in">compile</span>(loss = SparseCategoricalCrossentropy())</span><br></pre></td></tr></table></figure><p>编译过后需要开始训练模型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.fit(X, Y, epochs = <span class="number">100</span>)</span><br></pre></td></tr></table></figure><p>实际上，这段代码及时有效也并不推荐使用，在后面会有一个更推荐代码来完成这件事情。</p><h3 id="Softmax函数改进"><a href="#Softmax函数改进" class="headerlink" title="Softmax函数改进"></a>Softmax函数改进</h3><p>事实证明，在程序设计中，很多数据都是有精度上限的，举个简单的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x1 = <span class="number">2.0</span> / <span class="number">10000</span></span><br><span class="line">x2 = <span class="number">1</span> + (<span class="number">1</span> / <span class="number">10000</span>) - (<span class="number">1</span> - <span class="number">1</span> / <span class="number">10000</span>)</span><br></pre></td></tr></table></figure><p>在我们计算的时候，会认为<code>x1</code>和<code>x2</code>的值应该是相等的，其结果应该都是<code>0.0002</code>，但是如果实际输出这两个结果值，会发现并不相同，这是因为，浮点数的精度是有限的，导致没有办法很精确地表示出来最终结果。</p><p>下面来看一下之前学过的逻辑回归函数：<br>$$<br>a=g(z)=\frac{1}{1+e^{-z}}<br>$$</p><p>$$<br>loss=-ylog(a)-(1-y)log(1-a)<br>$$</p><p>在上述公式中，引入了一个中间变量。如果我们正常进行计算的话，是不会产生任何问题的，但是实际上，由于使用了中间变量，会导致误差变大（由于变量的精度是有限的），因此我们可以在这个基础上进行一个简单的优化，即不使用中间变量进行损失值的计算。<br>$$<br>loss=-ylog(\frac{1}{1+e^{-z}})-(1-y)log(1-\frac{1}{1+e^{-z}})<br>$$<br>如果使用<code>sigmoid</code>函数来实现十个手写数字识别的问题话，代码应该如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">model = Sequential([</span><br><span class="line">    Dense(units = <span class="number">25</span>, activation = <span class="string">&quot;relu&quot;</span>),</span><br><span class="line">    Dense(units = <span class="number">15</span>, activation = <span class="string">&quot;relu&quot;</span>),</span><br><span class="line">    Dense(units = <span class="number">10</span>, activation = <span class="string">&quot;sigmoid&quot;</span>)])</span><br><span class="line">model.<span class="built_in">compile</span>(loss = BinaryCrossEntropy())</span><br></pre></td></tr></table></figure><p>回到上面的问题，如果在最后一层使用<code>sigmoid</code>函数的话，在用得到的结果用损失值函数进行编译，会导致精度降低。因此，可以将最后一层的逻辑回归<code>sigmoid</code>激活函数与损失函数组合在一起，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">model = Sequential([</span><br><span class="line">    Dense(units = <span class="number">25</span>, activation = <span class="string">&quot;relu&quot;</span>),</span><br><span class="line">    Dense(units = <span class="number">15</span>, activation = <span class="string">&quot;relu&quot;</span>),</span><br><span class="line">    Dense(units = <span class="number">10</span>, activation = <span class="string">&quot;linear&quot;</span>)])</span><br><span class="line">model.<span class="built_in">compile</span>(loss = BinaryCrossEntropy(from_logits = <span class="literal">True</span>))</span><br></pre></td></tr></table></figure><p>通过改变最后一行代码可以解决上述问题，会让误差变得更小一些。当涉及到<code>softmax</code>函数时，数值的舍入误差会变得更加糟糕。需要注意的是，如果我们使用这种方式，那最后一层的激活函数相当于和损失函数组合在一起了，因此在神经网络的最后一层中，需要使用线性激活函数。</p><p>同理，如果要优化<code>softmax</code>函数的话，需要做类似的事情，让我们先来看一下原版代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">model = Sequential([</span><br><span class="line">    Dense(units = <span class="number">25</span>, activation = <span class="string">&quot;relu&quot;</span>),</span><br><span class="line">    Dense(units = <span class="number">15</span>, activation = <span class="string">&quot;relu&quot;</span>),</span><br><span class="line">    Dense(units = <span class="number">10</span>, activation = <span class="string">&quot;softmax&quot;</span>)])</span><br><span class="line">model.<span class="built_in">compile</span>(loss = SparseCategoricalCrossEntropy())</span><br></pre></td></tr></table></figure><p>优化之后的代码如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">model = Sequential([</span><br><span class="line">    Dense(units = <span class="number">25</span>, activation = <span class="string">&quot;relu&quot;</span>),</span><br><span class="line">    Dense(units = <span class="number">15</span>, activation = <span class="string">&quot;relu&quot;</span>),</span><br><span class="line">    Dense(units = <span class="number">10</span>, activation = <span class="string">&quot;linear&quot;</span>)])</span><br><span class="line">model.<span class="built_in">compile</span>(loss = SparseCategoricalCrossEntropy(from_logits = <span class="literal">True</span>))</span><br></pre></td></tr></table></figure><p>这部分改进只是除了增加了精度以外并没有什么变化，但是如果要实现其底层代码的话，也建议采用此种方法。</p><p>最后，再让我们将优化好的这部分代码搭载进去，看一下整体的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建模型</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.layers <span class="keyword">import</span> Dense</span><br><span class="line">model = Sequential([</span><br><span class="line">    Dense(units = <span class="number">25</span>, activation = <span class="string">&quot;relu&quot;</span>),</span><br><span class="line">    Dense(units = <span class="number">15</span>, activation = <span class="string">&quot;relu&quot;</span>),</span><br><span class="line">    Dense(units = <span class="number">10</span>, activation = <span class="string">&quot;linear&quot;</span>)])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置损失函数</span></span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.losses <span class="keyword">import</span> SparseCategoricalCrossEntropy</span><br><span class="line">model.<span class="built_in">compile</span>(..., loss = SparseCategoricalCrossEntropy(from_logits = <span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始训练</span></span><br><span class="line">model.fit(X, Y, epochs = <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行预测</span></span><br><span class="line">logits = model(X)</span><br><span class="line">f_x = tf.nn.softmax(logits)</span><br></pre></td></tr></table></figure><p>需要注意的是，使用这种方法进行预测，最后产生的结果是线性激活函数处理后的结果，也就是相应神经元的$z_i$的值，因此需要再放到<code>softmax</code>函数中处理一下。对于逻辑回归而言，这个操作也是非常必要的。</p><h3 id="多标签分类问题"><a href="#多标签分类问题" class="headerlink" title="多标签分类问题"></a>多标签分类问题</h3><p>多分类问题指的是对于一个东西，可能有多种分类，要求模型识别出相应的东西属于哪一分类，最典型的例子是手写数字识别。</p><p>多标签分类问题与其十分相似，其目的是对于一个东西而言，要在上面识别出不同标签的东西。例如给定一张图片，要求识别上面的汽车、公交车、行人，这种问题是对于单一输入要查找三个不同的标签。</p><p>对于这种问题，可以训练三个神经网络，第一个检测汽车，第二个检测公交车，第三个检测行人：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%A4%9A%E6%A0%87%E7%AD%BE%E5%88%86%E7%B1%BB%E9%97%AE%E9%A2%98%E7%9A%84%E4%B8%89%E4%B8%AA%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C.jpg" alt="多标签分类问题的三个神经网络"></p><p>上述的这种方法并不是很推荐，还有另一种方法也可以做到这一点，那就是训练一个神经网络同时检测汽车、公共汽车和行人这三者，神经网络结构如下所示：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E4%B8%89%E6%A0%87%E7%AD%BE%E5%88%86%E7%B1%BB%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C.jpg" alt="三标签分类神经网络"></p><p>对于这个问题而言，使用<code>Sigmoid</code>函数作为输出层的激活函数是非常合理的，因为输出的三个结果是相互独立的关系，<code>Softmax</code>函数并不适用这个问题，因为这个函数一般解决的是非独立事件，所有输出的结果的概率应该相加为$1$。</p><h2 id="Adam算法"><a href="#Adam算法" class="headerlink" title="Adam算法"></a>Adam算法</h2><p>之前学习过的梯度下降算法，是线性回归和逻辑回归等许多算法以及神经网络早期实现的基础，但事实证明，现在有一些其他优化算法可以最小化成本函数，甚至比梯度下降更好。</p><p>回想一下梯度下降的表达式：<br>$$<br>w_j=w_j-\alpha\frac{\partial}{\partial{w_j}}J(\vec{w},b)<br>$$<br>在传统梯度下降公式中，收敛速度很大程度上取决于学习率。如果下降的时候，每次都朝着同一个相似的方向收敛一小步，那么我们希望学习率稍微变大一点，使其更快收敛；反之，如果下降的时候，每次变化都是一个震荡的形式，那么我们会希望学习率稍微小一些。</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Adam%E7%AE%97%E6%B3%95.jpg" alt="Adam算法"></p><p>左图是学习率较小的情况，右图是学习率较大的情况。</p><p><code>Adam</code>代表<code>Adaptive Moment Estimation</code>，该算法不会设置一个全局的学习率，而是对模型的每个参数使用不同的学习率，有几个参数就会有几个与之对应的学习率。</p><p><code>Adam</code>算法的实现过程有一些复杂，如果以后学习更加高级的深度学习课程，会学习到相关的细节，现阶段，可以用这种方法来实现该算法，需要在编译的时候添加一个新的参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建模型</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.layers <span class="keyword">import</span> Dense</span><br><span class="line">model = Sequential([</span><br><span class="line">    Dense(units = <span class="number">25</span>, activation = <span class="string">&quot;relu&quot;</span>),</span><br><span class="line">    Dense(units = <span class="number">15</span>, activation = <span class="string">&quot;relu&quot;</span>),</span><br><span class="line">    Dense(units = <span class="number">10</span>, activation = <span class="string">&quot;linear&quot;</span>)])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置损失函数</span></span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.losses <span class="keyword">import</span> SparseCategoricalCrossEntropy</span><br><span class="line">model.<span class="built_in">compile</span>(optimizer = tf.keras.optimizers.Adam(learning_rate = 1e - <span class="number">3</span>), loss = SparseCategoricalCrossEntropy(from_logits = <span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始训练</span></span><br><span class="line">model.fit(X, Y, epochs = <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行预测</span></span><br><span class="line">logits = model(X)</span><br><span class="line">f_x = tf.nn.softmax(logits)</span><br></pre></td></tr></table></figure><h2 id="网络类型"><a href="#网络类型" class="headerlink" title="网络类型"></a>网络类型</h2><h3 id="密集层"><a href="#密集层" class="headerlink" title="密集层"></a>密集层</h3><p>密集层是我们一直使用的隐藏层，他的输入是上一层的每个神经元的输出值：<br>$$<br>\vec{a}_1^{[2]}=g(\vec{w}_1^{[2]}\cdot \vec{a}^{[1]}+b_1^{[2]})<br>$$</p><h3 id="卷积层"><a href="#卷积层" class="headerlink" title="卷积层"></a>卷积层</h3><p>用手写数字识别来举例子，对于输入的图像，每一个神经元都获取一部分像素，也就是每个神经元获取到的数据是不一样的，他们只关注自己所负责的那片区域。</p><p>使用这种方法可以加快计算速度，同时卷积层需要更少的训练数据，也不太容易过拟合。</p><p>如果神经网络中有多个卷积层，我们也可以将其称之为卷积神经网络，卷积神经网络会在深度学习中详细介绍。</p><h1 id="导数"><a href="#导数" class="headerlink" title="导数"></a>导数</h1><p>在这一部分，将介绍一下求导数的相关代码。</p><h2 id="sympy"><a href="#sympy" class="headerlink" title="sympy"></a>sympy</h2><p>求导数的时候，可以使用这个库，里面有丰富的处理导数的方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sympy</span><br></pre></td></tr></table></figure><h2 id="symbols"><a href="#symbols" class="headerlink" title="symbols"></a>symbols</h2><p>该方法的作用是确定要以什么符号作为变量。</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">J, w = sympy.symbols(<span class="string">&#x27;J,w&#x27;</span>)</span><br><span class="line">J = w**<span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(J)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">w**2</span><br></pre></td></tr></table></figure><h2 id="diff"><a href="#diff" class="headerlink" title="diff"></a>diff</h2><p>该方法的作用是对函数进行求导。</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dJ_dw = sympy.diff(J, w)</span><br><span class="line"><span class="built_in">print</span>(dJ_dw)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2*w</span><br></pre></td></tr></table></figure><h2 id="subs"><a href="#subs" class="headerlink" title="subs"></a>subs</h2><p>该方法的作用是将值代入函数并求最终结果。</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(dJ_dw.subs([(w, <span class="number">2</span>)]))</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><h2 id="计算图"><a href="#计算图" class="headerlink" title="计算图"></a>计算图</h2><p>计算图不是物理意义上的图像，而是计算机科学中的图，是一组由边连接或由箭头连接的节点。</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E5%9B%BE.jpg" alt="计算图"></p><p>上述计算图是用来计算在$w=2,b=8,x=-2,y=2$时的成本函数，其成本函数为：<br>$$<br>J(w,b)=\frac{1}{2}(a-y)^2<br>$$<br>上面的这种计算方式是从左到右计算的，被叫做前向传播，但是计算导数的时候是从右向左计算的（链式求导法则），因此其被称为反向传播。</p><h1 id="模型评估"><a href="#模型评估" class="headerlink" title="模型评估"></a>模型评估</h1><h2 id="训练集与测试集"><a href="#训练集与测试集" class="headerlink" title="训练集与测试集"></a>训练集与测试集</h2><p>在我们进行模型训练的时候，例如进行线性回归，我们如果设置足够多的参数，一般来讲会更好的拟合训练集，但这往往也会造成过拟合，例如下面这张图：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E8%BF%87%E6%8B%9F%E5%90%88.jpg" alt="过拟合"></p><p>对于该模型，有着太多的曲线，这虽然可以很好的拟合我们的训练数据，但很显然，如果给一个其他数据的话，它并不一定能产生很好的结果。</p><p>为了降低产生这种情况的可能性，我们一般会将数据集拆分成两份：训练集和测试集。一般来讲训练集的数量会较多一些，测试集会较少。例如，如果我有十个数据，我可以将$70%$的数据用作训练集，$30%$的数据用于测试集。</p><p>当我们具体在训练模型的时候，需要用训练集进行训练，在上图中举的例子中，很明显，对于训练集来说，其成本函数非常非常小，甚至趋近于$0$，但是这并不意味着它在测试集上的表现也是同样的。因此，我们不仅需要算一下训练集的成本函数，还需要去计算一下测试集的成本函数，通过测试集的成本函数来评判一下我们的模型是否具有良好的泛化能力。</p><p>使用这种方法可以去评估模型的好坏，我们可以进一步完善这个想法，用这个技术让算法自动选择出一个好的模型。</p><h2 id="模型选择"><a href="#模型选择" class="headerlink" title="模型选择"></a>模型选择</h2><p>在训练线性回归的模型的时候，我们无法确定该使用几次幂的多项式来作为最终模型，因此我们把这些多项式全都列出来，从这里面选择一个最好的模型。</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E5%A4%9A%E9%A1%B9%E5%BC%8F.jpg" alt="线性回归多项式"></p><h3 id="训练集"><a href="#训练集" class="headerlink" title="训练集"></a>训练集</h3><p>上图中列举了十个可能的多项式，我们可以都对他们进行训练，对每一个训练好的模型都求解一下它的成本函数，看看哪个是最低的，最低的那个往往可以更好地拟合我们的数据集。</p><p>但是这种方法有一个弊端，非常容易造成过拟合，因为我们的模型是基于已知的数据集生成的，这样得到的最优模型往往只是在当前训练集的前提下成本函数是最低的，如果用该模型去泛化别的数据，可能效果不是很好。</p><h3 id="训练集-测试集"><a href="#训练集-测试集" class="headerlink" title="训练集+测试集"></a>训练集+测试集</h3><p>为了解决这个问题，我们可以将数据集划分成训练集和测试集，训练的时候使用训练集的数据进行模型训练，等到挑选哪个模型是最优的时候，可以采用测试集计算成本函数，找成本值最低的模型即可。</p><p>对于上述这种方式，可以大幅度降低过拟合的概率，但是这样出来的结果也是会比较乐观的。因为就算是训练和测试采用的不是同一批数据进行操作，最后挑选出来的模型往往会更偏向于测试集的结果，这会使我们评判模型好坏的时候更加乐观。</p><h3 id="训练集-测试集-交叉验证集"><a href="#训练集-测试集-交叉验证集" class="headerlink" title="训练集+测试集+交叉验证集"></a>训练集+测试集+交叉验证集</h3><p>我们这次使用一个新的方式，将原本的数据集分为训练集，测试集和交叉验证集。例如如果数据集一共有十条数据，那么可以将六条分为训练集，两条分为测试集，两条分为交叉验证集。</p><p>如下分别是训练集、交叉验证集、测试集的成本函数计算公式：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E4%B8%89%E7%A7%8D%E5%AD%90%E9%9B%86%E7%9A%84%E6%88%90%E6%9C%AC%E5%87%BD%E6%95%B0.jpg" alt="三种子集的成本函数"></p><p>我们依旧使用训练集来训练多个模型，之后使用交叉验证集来挑选一个成本函数最低的模型，作为我们的最优模型，如果我们要评判模型的好坏，需要用测试集来计算模型的成本函数，将该结果作为模型泛化能力的评判标准，使用这种方式，可以最大程度上保证评判结果的客观性。</p><p>使用这种方法，其实就是由交叉验证集的结果选出来它认为的最好的模型，测试集在这里只起到一个客观评价这个模型泛化能力的作用。</p><h2 id="偏差与方差"><a href="#偏差与方差" class="headerlink" title="偏差与方差"></a>偏差与方差</h2><p>偏差指的是训练出来的模型与训练集的差距程度，方差指的是训练出来的模型与未出现在训练集中的数据的差距程度。</p><p>对于欠拟合而言，偏差和方差都会很高。</p><p>对于过拟合而言，偏差很低，但是方差很高。</p><p>对于一个拟合的非常好的模型而言，其偏差和方差都会很低。</p><p>在我们选择不同最高次数项的函数时，得到的结果也会不一样，他们的大概关系图如下：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%81%8F%E5%B7%AE%E5%92%8C%E6%96%B9%E5%B7%AE%E5%85%B3%E7%B3%BB%E5%9B%BE.jpg" alt="偏差和方差关系图"></p><p>该图像的横坐标是多项式的最高次数，纵坐标代表与成本函数值。</p><p>可以发现对于训练数据，随着次数的升高，其偏差值会越来越小，但这最终会导致过拟合。对于未知的测试数据，随着次数的升高，呈现先下降再升高的趋势。</p><h2 id="正则化的影响"><a href="#正则化的影响" class="headerlink" title="正则化的影响"></a>正则化的影响</h2><p>正则化在前面的部分学习过，在这就不过多赘述了，这里写一下它的公式：<br>$$<br>J(\vec{w},b)=\frac{1}{2m}\sum^m_{i=1}(f_{\vec{w},b}(\vec{x}^{(i)})-y^{(i)})^2+\frac{\lambda}{2m}\sum^n_{j=1}w^2_j<br>$$<br>如果$\lambda$的的值非常大，那么算法就会让这些<code>w</code>参数非常小，最后会使得他们的值都非常接近于<code>0</code>，会导致最后的模型约等于<code>b</code>的值。</p><p>如果$\lambda$的的值非常小，那么就相当于没有进行正则化操作，最终会导致模型过拟合。</p><p>因此，$\lambda$的选择对于模型而言也会起到很大作用，所以我们可以利用之前的思想，对于$\lambda$也进行交叉验证，计算多个$\lambda$值的不同情况，然后选择一个最好的情况。</p><h2 id="评估基准"><a href="#评估基准" class="headerlink" title="评估基准"></a>评估基准</h2><p>对于我们设计出来的模型，并不是必须百分百识别数据才是好的模型，我们一般需要制定一个评估基准，来判定我们这个模型的效果怎么样，如下有三种常用的方法：</p><ol><li>在使用非结构化数据时，例如音频、图像或文本等，人类水平的表现通常是一个很好的基准，我们可以以人类的识别率作为基准。</li><li>如果有一些竞争算法，可能是其他人已经实现的或者是以前实现的，又或者是竞争对手的算法，都可以以他们为基础来建立基准性能水平。</li><li>还可以那句经验来指定基准性能水平，就是希望达到的错误水平是多少，或者希望算法达到的期望性能水平是多少。</li></ol><p>指定好基准后，我们在训练模型后，一共会有三个数据，一个是基准性能水平，一个是训练误差，一个是交叉验证误差。</p><p>如果训练误差与基准性能水平有着较大的差距，说明有一个高偏差问题；如果训练误差和交叉验证误差之间有很大的差距，说明有一个高方差问题。</p><p>建立评估基准是因为并不是所有的情况都可以以<code>0</code>作为基准的，例如在进行语音识别的时候，可能会出现声音嘈杂的情况，这样会导致完全识别几乎是不可能的，因此我们需要指定一个基准来评判我们这个算法是否达标。</p><h2 id="学习曲线"><a href="#学习曲线" class="headerlink" title="学习曲线"></a>学习曲线</h2><h3 id="拟合-1"><a href="#拟合-1" class="headerlink" title="拟合"></a>拟合</h3><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%8B%9F%E5%90%88%E5%AD%A6%E4%B9%A0%E6%9B%B2%E7%BA%BF.jpg" alt="拟合学习曲线"></p><p>对于恰好能够拟合的模型来说，即使用的函数的最高数正好合适，其学习曲线如上图所示。其中横坐标表示的是训练集的样本数量，纵坐标表示的是误差值。对于训练误差而言，随着数据集样本数的增大，会导致其训练误差越来越大；对于交叉验证误差而言，随着数据集样本数的增大，会导致其验证误差越来越小。这是因为前期样本数量非常少，假设只有一个样本，那么训练集可以很好的拟合数据，但是随着样本的不断增多，会越来越难以拟合数据。交叉验证集在前期的时候很难去根据很少的样本预测数据集，所以最开始的时候交叉验证误差会很大，最后逐步降低。随着样本数的不断增加，最后二者的误差会越来越接近。</p><p>总结一下：<strong>训练集越大，模型越难拟合训练集，但泛化能力会增强。</strong></p><h3 id="欠拟合-1"><a href="#欠拟合-1" class="headerlink" title="欠拟合"></a>欠拟合</h3><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%AC%A0%E6%8B%9F%E5%90%88%E5%AD%A6%E4%B9%A0%E6%9B%B2%E7%BA%BF.jpg" alt="欠拟合学习曲线"></p><p>上图是使用了欠拟合的模型，即使用的函数的最高次数较低。其中红色的线是基准性能水平线，是根据人类水平来定义的。对于训练误差而言，在数据很少的时候还是可以较好拟合的，训练误差会比较低。但是随着训练误差的增多，会急剧变高，会使得学习曲线相对于拟合比较好（即第一种）的曲线来讲看起来比较胖，最后会趋于平缓。这种情况下会导致训练误差和交叉验证误差在最后都远远高于基准线。</p><h3 id="过拟合-1"><a href="#过拟合-1" class="headerlink" title="过拟合"></a>过拟合</h3><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E8%BF%87%E6%8B%9F%E5%90%88%E5%AD%A6%E4%B9%A0%E6%9B%B2%E7%BA%BF.jpg" alt="过拟合学习曲线"></p><p>上图是使用了过拟合的模型，即使用的函数的最高次数较高。对于训练误差而言，其增长会十分缓慢；同理，对于交叉验证误差而言，其下降也会非常缓慢，并且二者的差距会很大。但是如果训练样本足够多的话，训练误差也会平稳增大，但是增加得非常缓慢，交叉验证误差也会缓慢下降，最后会与基准线越来越贴合，但是这需要非常多的数据集。</p><p>总而言之，如果学习算法存在高方差，那么获得更多训练数据确实可能有所帮助。</p><h2 id="优化模型的方法"><a href="#优化模型的方法" class="headerlink" title="优化模型的方法"></a>优化模型的方法</h2><p>优化模型的方法主要包括以下几种，他们都在降低训练误差和交叉验证误差上有很好的效果，破折号后面会写出适合解决哪类问题：</p><ul><li>获取更多训练集——高方差问题</li><li>尝试小的特征集——高方差问题</li><li>加入更多特征——高偏差问题</li><li>增加多项式特征（即进行特征工程）——高偏差问题</li><li>尝试降低$\lambda$的值——高偏差问题</li><li>尝试增大$\lambda$的值——高方差问题</li></ul><p>如果你发现你的算法具有高方差，那么解决这个问题的方法主要是增加训练数据或者简化模型，简化模型可以使用更小的特征集，或者增加正则化参数$\lambda$的值。</p><p>如果你的算法具有高偏差，则意味着即使在训练集上也表现不佳，这种情况可以去赋予你的模型更大的灵活性以适应更复杂或更多功能，主要方法是提供额外的特征或添加一些特征工程产生的特征，或者减少正则化参数$\lambda$的值。减少训练集也可以去解决高偏差问题，会让你的模型更好地适应训练集，但这样往往会恶化你的交叉验证误差和算法的性能，所以不要使用这种方法来解决高偏差问题。</p><h2 id="方差与偏差"><a href="#方差与偏差" class="headerlink" title="方差与偏差"></a>方差与偏差</h2><p>在机器学习中，偏差与方差的平衡是一个很重要的课题，因为如果模型太简单，就会有高偏差，太复杂就会有高方差。但是在神经网络中，如果神经网络足够大，那么几乎能很好地适应你的训练集。</p><p>对于神经网络，可以现在训练集上训练算法，然后询问它在训练集上是否表现良好，如果相对于基准水平算法表现不佳，那么就可能遇到了高偏差问题。减少偏差可以使用更大的神经网络，即使用更多的隐藏层，每个隐藏层上设置更多的神经元，之后再次训练神经网络，询问其在训练集上的比较。重复上述过程，直到它在训练集上表现良好。通过这种方式，可以让模型在训练集中达到期望的水平，即基准性能水平。</p><p>在进行完上述步骤后，可以询问算法在交叉验证集上的表现情况，如果表现得不好，这说明其具有高方差。可以增加训练集来重新训练模型，降低方差。</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%96%B9%E5%B7%AE%E4%B8%8E%E5%81%8F%E5%B7%AE%E6%B5%81%E7%A8%8B%E5%9B%BE.jpg" alt="方差与偏差流程图"></p><p>当时这个方法也存在着一定的局限性，训练更大的神经网络会减少偏差，但同时也会增加计算成本。</p><p>事实证明，正则化比较好的大型神经网络和较小的神经网络在方差上的效果差不多好或者更好。</p><p>在代码实现中，可以在搭建神经网络的时候选择相应的$\lambda$值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">layer = Dense(units = <span class="number">25</span>, activation = <span class="string">&quot;relu&quot;</span>, kernel_regularizer = L2(<span class="number">0.01</span>))</span><br></pre></td></tr></table></figure><p>后面这半句代码就是在设定$\lambda$的值，其中<code>L2</code>指的是<code>L2</code>范数。</p><ul><li><code>L0</code>范数是指向量中非零的元素的个数</li><li><code>L1</code>范数是指向量中各个元素绝对值之和</li><li><code>L2</code>范数是指向量各元素平方和然后求平方根</li></ul><h2 id="机器学习开发流程"><a href="#机器学习开发流程" class="headerlink" title="机器学习开发流程"></a>机器学习开发流程</h2><p>首先需要决定系统的总体架构是什么，这一步需要选择机器学习的模型，并决定要使用什么样的数据，同时还要决定各种超参数。接着，根据这些决定，开始训练模型，训练后的模型往往不会达到期望的结果。在下一步，需要去优化我们的算法，例如去查看算法的偏差和方差，还有各种各样的错误分析，根据分析结果来做出决定去优化你的算法模型。一直执行上述过程，进行多次迭代，直到获得想要的性能。</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B.jpg" alt="机器学习开发流程"></p><h2 id="误差分析"><a href="#误差分析" class="headerlink" title="误差分析"></a>误差分析</h2><p>如果你训练了一个分类模型，一共有五百个数据，分类错了一百个，你可以分析这一百个预测错误的样本。首先将这些样本根据主题进行分类，例如用垃圾邮件分类的例子，可能对与拼写错误的垃圾邮件分类效果不好，或者是使用图片嵌入文字的垃圾邮件分类效果不好，又或者是对药物主题的垃圾邮件分类效果不好，等等。根据这些不同类别的情况，分别统计他们的出现次数，然后看哪种情况比较多，之后可以着重解决出现频率比较高的分类错误的情况。</p><p>值得注意的是，可能一个样本会被分类到很多类别之中，每个类别之间并不是互斥的关系，他们完全可以重叠。如果分类错误的样本非常多，我们根本没有那么多时间和精力挨个去查看，面对这种情况，我们可以随机抽取一百个样本，对其进行分类。使用这种方法可以让我们知道问题出在哪里，对接下来怎么做有着重要的指导意义。</p><p>在查明你的算法对于哪种类型的数据效果不好后，可以尝试去添加相应类型的数据去进行训练，从而提升其分类效果。如果你有很多为打标签的数据，那么你可以找效果不好的数据，打上标签后投喂给你的算法模型。</p><p>或者还可以使用数据增强的方法来根据现有的数据去创造新的数据，比如要进行手写数字识别，那么可以把要识别的图像通过旋转、缩放、翻转、增加对比度等方法来创造新的数据集。还可以通过把相应的图片置入一个网格中，然后进行随机扭曲，从而得到更多的数据集，具体如下所示：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%BD%91%E6%A0%BC%E9%9A%8F%E6%9C%BA%E6%89%AD%E6%9B%B2.jpg" alt="网格随机扭曲"></p><p>对于语音识别的项目来说，可以使用原始声音与各种各样场景的噪音混合在一起，合成出一个新的数据。</p><h2 id="迁移学习"><a href="#迁移学习" class="headerlink" title="迁移学习"></a>迁移学习</h2><p>如果你当前想要训练的模型没有足够多的数据，那么可以先训练一个别的模型，训练若干代之后，将其参数调用至你想要训练的模型中。</p><p>比如说你想要训练一个手写数字识别的模型，但是你没有足够多的数据，不过你有一个很大的数据集，其中包括了几万张猫和狗的等一千个种类的图片，那你完全可以先搭建一个识别这些东西的神经网络，如下所示：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C1.jpg" alt="迁移学习神经网络1"></p><p>训练一段时间后，只需要消除输出层，并使用一个适用于手写数字识别的输出层替代它就可以了，前面的参数可以保留，然后再用手写数字识别的训练集在这个基础上进行训练，就可以得到一个效果不错的手写数字识别的算法模型了。</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C2.jpg" alt="迁移学习神经网络2"></p><p>迁移学习的训练可以分为两种方式：第一种是只训练输出层上的参数，别的参数保持不变；第二种是训练所有的参数。</p><p>迁移学习的原理是让解决类似问题的模型先在有着较大数据集的地方进行训练，之后在我们想要训练的数据集上进行训练，得到我们想要的模型。这是因为对于类似的问题，前面的隐藏层在学习的时候已经做好了相应的工作，后期在进行训练的时候，可以更快获得我们想要的模型。这种方法也叫作监督预训练，可以在我们的训练集数量很少的时候也可以得到较好的模型。</p><p>网上也会有许多人上传的预训练好的用于迁移学习的神经网络，可以下载他们上传的训练网络，之后根据自己的数据进一步训练或者微调网络。</p><h2 id="机器学习项目的完整周期"><a href="#机器学习项目的完整周期" class="headerlink" title="机器学习项目的完整周期"></a>机器学习项目的完整周期</h2><p>机器学习项目的第一步是确定项目范围，简单来说就是决定项目是什么以及你想做什么。在这步结束后，必须收集数据，确定训练机器学习系统所需的数据，然后着手获取相应的数据和数据集所对应的标签。完成数据收集后，就可以开始训练模型了，在这个过程中，需要不断去改进模型，对错误进行分析，然后优化数据集以获得更好的算法。在做完上述所有事情之后，如果模型足够好，那么就可以在生产环境中进行部署。在部署一个系统之后，还必须确保继续监控系统的性能并维护系统以防性能变差。如果你发现部署好的模型没有像希望的那样工作，就需要回去训练模型并再次改进它，甚至回去获取更多的数据。</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%AE%8C%E6%95%B4%E5%91%A8%E6%9C%9F.jpg" alt="机器学习项目的完整周期"></p><h2 id="倾斜数据集的误差指标"><a href="#倾斜数据集的误差指标" class="headerlink" title="倾斜数据集的误差指标"></a>倾斜数据集的误差指标</h2><p>对于一个分类算法，如果标签的现实比例差距很大的话，即使正确率高达$99.5%$也不能说这是一个好的模型。</p><p>举个例子，如果有一种病十分罕见，它在同一症状患者中的发病率只占$0.5%$，极端情况下，如果我只输出<code>No</code>的话，虽然正确率为$99.5%$，但很显然，这并不是一个好的算法，甚至还没有一个误判率稍高一些的算法意义大。</p><p>因此面对这种情况，需要一个更好的误差评价指标，可以创建一个$2\times2$的矩阵，如图所示：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%80%BE%E6%96%9C%E6%95%B0%E6%8D%AE%E9%9B%86.jpg" alt="倾斜数据集"></p><p>该矩阵用于处理的二分类问题，其中横坐标是真实标签，纵坐标是预测标签，格子里的数字表示属于这个情况的数据数量，例如左上角的数字表示真实标签是$1$且预测标签是$1$的情况出现过$15$次，以此类推。左上角的格子是真阳性，右上角的格子是假阳性，左下角的格子是假阴性，右下角的格子是真阳性。</p><p><strong>注：真和假表示预测是否正确，阳性和阴性表示预测的值。</strong></p><h3 id="准确率"><a href="#准确率" class="headerlink" title="准确率"></a>准确率</h3><p>准确率指的是在所有正确的样本中，实际正确预测的比例是多少，即预测为真的样本中有多少预测正确，其公式如下所示：<br>$$<br>准确率=\frac{真阳性}{预测阳性}=\frac{真阳性}{真阳性+假阳性}=\frac{15}{15+5}=0.75<br>$$</p><h3 id="召回率"><a href="#召回率" class="headerlink" title="召回率"></a>召回率</h3><p>召回率意味着在真实标签中，有多少是真的被检测出来的，即真实标签中有多少被正确预测，其公式如下所示：<br>$$<br>召回率=\frac{真阳性}{真实阳性}=\frac{真阳性}{真阳性+假阴性}=\frac{15}{15+10}=0.6<br>$$<br>使用这种方法可以有效判断预测是否准确，可以用于评估倾斜数据集的模型性能。</p><p>在实际应用中，需要这两个指标都比较高。前者可以理解为预测的准确度比较高，后者可以理解为遗漏率比较低。</p><h3 id="准确率与召回率的权衡"><a href="#准确率与召回率的权衡" class="headerlink" title="准确率与召回率的权衡"></a>准确率与召回率的权衡</h3><p>一般来说，我们希望准确率和召回率都有着一个非常高的值，但事实上在大多数情况下这并不能兼得，因此，我们需要对其进行一个权衡。</p><p>例如如果我们训练了一个能够预测某些疾病的模型，在之前的学习中，我们一般会把阈值设置为$0.5$，即高于阈值的情况预测为$1$，反之预测为$0$。</p><p>上述的这种方式并不能完全满足现实情况，如果疾病的后果不是那么糟糕，即使没有积极治疗，也不会造成很大影响，但是治疗的话会有着非常高的成本，并且会对人体造成损伤。面对这种情况，我们可以适当把阈值调高一些，例如将阈值设置为$0.7$，这样可以很好地提高模型的准确率，不过也会相应地降低其召回率。</p><p>与上述同理，如果该疾病不处理会造成很大的问题的话，并且成本也没有很高的时候，我们可以适当降低其阈值。例如给阈值降低至$0.3$，这样虽然会降低其准确率，但是也会增加它的召回率，可以尽可能多的排查患有该疾病的人。</p><h3 id="算法选择"><a href="#算法选择" class="headerlink" title="算法选择"></a>算法选择</h3><p>我们在实际应用中，会训练出许多算法来供我们选择，这个时候我们可以看他们的准确率和召回率来进行选择。</p><p>最简单的，我们可以直接求准确率和召回率的平均值，然后挑选最大的那一个，但是这种方法并不合适，很难挑选出好的算法，因为就算是只会打印$1$的算法，平均下来也有$0.5$，因此这种方法很难作为评判标准。</p><p>我们这里引入了一种新的计算方法，在数学中被称为调和平均数，使用这种方法也是类似于求平均值，但是会更加强调较小的值。</p><p>其计算公式如下：<br>$$<br>F_1\ score=\frac{1}{\frac{1}{2}(\frac{1}{P}+\frac{1}{R})}=2\frac{PR}{P+R}<br>$$<br>其中$P$表示的是准确率（<code>Precision</code>），$R$表示的是召回率（<code>Recall</code>）。通过这种方式可以较好地评判出每种算法的优劣，从而选择一个比较好的算法。</p><p>假设现在有三个算法，其分数如下所示：</p><table><thead><tr><th align="center">算法</th><th align="center">准确率</th><th align="center">召回率</th><th align="center">$Average$</th><th align="center">$F_1\ score$</th></tr></thead><tbody><tr><td align="center">算法1</td><td align="center">0.5</td><td align="center">0.4</td><td align="center">0.45</td><td align="center">0.444</td></tr><tr><td align="center">算法2</td><td align="center">0.7</td><td align="center">0.1</td><td align="center">0.4</td><td align="center">0.175</td></tr><tr><td align="center">算法3</td><td align="center">0.02</td><td align="center">1.0</td><td align="center">0.51</td><td align="center">0.0392</td></tr></tbody></table><h1 id="决策树"><a href="#决策树" class="headerlink" title="决策树"></a>决策树</h1><h2 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h2><p>决策树（<code>Decision Tree</code>）是在已知各种情况发生概率的基础上，通过构成决策树来求取净现值的期望值大于等于零的概率，评价项目风险，判断其可行性的决策分析方法，是直观运用概率分析的一种图解法。由于这种决策分支画成图形很像一棵树的枝干，故称决策树。在机器学习中，决策树是一个预测模型，他代表的是对象属性与对象值之间的一种映射关系。</p><h2 id="学习过程"><a href="#学习过程" class="headerlink" title="学习过程"></a>学习过程</h2><p>训练决策树模型其实本质上就是在构建一个决策树，将训练集按照某种方式进行分类，从而将初始的数据集成功分类。</p><h2 id="纯度"><a href="#纯度" class="headerlink" title="纯度"></a>纯度</h2><p>用分类猫的任务作为例子，即使用决策树来进行猫的分类。那么需要将一系列的数据作为输入，之后构建整棵决策树。如果在其中一个节点都是单一类别的猫，那么可以说这个节点是非常纯的；如果都不是猫，也可以说是非常纯的；但是如果介于二者之间，那就需要去量化一下这组例子有多纯。</p><p>因此我们引入了熵的概念，它是衡量一组数据<strong>不纯度</strong>的指标。</p><p>现给定一组样本，其中有三只猫三只狗，具体如下所示：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%BA%AF%E5%BA%A6%E6%95%B0%E6%8D%AE%E9%9B%86.jpg" alt="纯度数据集"></p><p>其中$p_1$表示猫的样本所占的比例，很明显，在上述数据集中：<br>$$<br>p_1=\frac{3}{6}<br>$$<br>同时，我们将使用一个称为熵的函数来测量一组样本的不纯度，它的图像如下所示：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%86%B5%E5%9B%BE%E5%83%8F.jpg" alt="熵图像"></p><p>熵函数常用一个大写的<code>H</code>表示，该函数看起来如上图所示。其中横坐标是要计算熵的目标的所占比例，纵坐标是对应的熵的值。</p><p>对于该数据集，由于$p_1=0.5$，因此其对应的熵值将等于$1$。</p><p>简单来说，信息的混乱度越大，其对应的熵值也就会越大，熵可以理解为是数据集的<strong>不纯度</strong>。</p><p>下面的图中表示的是不同数据集所对应的熵值：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%86%B5%E8%AE%A1%E7%AE%97.jpg" alt="熵计算"></p><p>对于熵值，计算公式如下：<br>$$<br>H(p_1)=-p_1log_2(p_1)-p_0log_2(p_0)<br>$$<br>要注意，这个函数的底数是$2$而不是$e$，这是因为如果取$e$的话，该函数的峰值将不会是一个整数，因此很难去进行解释，取$2$的话，该函数的峰值将会是$1$。</p><p>其中$p_1$是我们要进行分类的目标，$p_0$表示其余目标，因此有如下公式：<br>$$<br>p_0=1-p_1<br>$$<br>值得注意的是，$log_2(0)$的值正常情况下是$-\infty$，但是为了正确的计算熵，我们将$0log_2(0)$的值设置为$0$。</p><h2 id="选择拆分信息增益"><a href="#选择拆分信息增益" class="headerlink" title="选择拆分信息增益"></a>选择拆分信息增益</h2><p>在构建决策树时，我们决定在节点上拆分哪个特征的方式将基于哪种特征选择最能减少熵。在决策树学习中，熵的减少称为信息增益。</p><p>假设我们现在需要构建决策树的其中一个节点，可以根据某种属性进行分类，分别求出如果按照该属性进行分类后的熵值，需要保证熵尽可能减小，选择熵最小的那一种就可以了。</p><p>现在一共有十个动物，其中猫和狗的数量各占一半，现在有如下的三种分类方式：</p><table><thead><tr><th align="center">分类方式</th><th align="center">第一类动物数量</th><th align="center">第一类猫的数量</th><th align="center">第二类动物数量</th><th align="center">第二类猫的数量</th></tr></thead><tbody><tr><td align="center">是否是尖耳朵</td><td align="center">5</td><td align="center">4</td><td align="center">5</td><td align="center">1</td></tr><tr><td align="center">是否是圆脸</td><td align="center">7</td><td align="center">4</td><td align="center">3</td><td align="center">1</td></tr><tr><td align="center">是否有胡须</td><td align="center">4</td><td align="center">3</td><td align="center">6</td><td align="center">2</td></tr></tbody></table><p>根据上一小节纯度的学习，我们可以求出他们各自的熵值分别是多少。</p><table><thead><tr><th align="center">分类方式</th><th align="center">第一类$p_1$</th><th align="center">第一类$H$</th><th align="center">第二类$p_2$</th><th align="center">第二类$H$</th></tr></thead><tbody><tr><td align="center">是否是尖耳朵</td><td align="center">$p_1=\frac{4}{5}=0.8$</td><td align="center">$H(0.8)=0.72$</td><td align="center">$p_1=\frac{1}{5}=0.2$</td><td align="center">$H(0.2)=0.72$</td></tr><tr><td align="center">是否是圆脸</td><td align="center">$p_1=\frac{4}{7}=0.57$</td><td align="center">$H(0.57)=0.99$</td><td align="center">$p_1=\frac{1}{3}=0.33$</td><td align="center">$H(0.33)=0.92$</td></tr><tr><td align="center">是否有胡须</td><td align="center">$p_1=\frac{3}{4}=0.75$</td><td align="center">$H(0.75)=0.81$</td><td align="center">$p_1=\frac{2}{6}=0.33$</td><td align="center">$H(0.33)=0.92$</td></tr></tbody></table><p>我们可以通过加权平均值的计算方式来评估每一种分类方式，权重为这一个分类的样本数占总体样本数的比例。</p><table><thead><tr><th align="center">分类方式</th><th align="center">加权熵</th></tr></thead><tbody><tr><td align="center">是否是尖耳朵</td><td align="center">$\frac{5}{10}H(0.8)+\frac{5}{10}H(0.2)$</td></tr><tr><td align="center">是否是圆脸</td><td align="center">$\frac{7}{10}H(0.57)+\frac{3}{10}H(0.33)$</td></tr><tr><td align="center">是否有胡须</td><td align="center">$\frac{4}{10}H(0.75)+\frac{6}{10}H(0.33)$</td></tr></tbody></table><p>我们也可以在这个基础上计算一下根节点的熵值，然后用根节点的熵值减去计算出来的每个分支的熵值，从而判断一下他们每一个的熵值减少了多少。</p><p>该节点一共有十个样本，其中猫和狗的样本各占一半，也就是说$p_1=\frac{5}{10}=0.5$，其熵值$H(0.5)=1$。</p><table><thead><tr><th align="center">分类方式</th><th align="center">熵减</th></tr></thead><tbody><tr><td align="center">是否是尖耳朵</td><td align="center">$H(0.5)-(\frac{5}{10}H(0.8)+\frac{5}{10}H(0.2))=0.28$</td></tr><tr><td align="center">是否是圆脸</td><td align="center">$H(0.5)-(\frac{7}{10}H(0.57)+\frac{3}{10}H(0.33))=0.03$</td></tr><tr><td align="center">是否有胡须</td><td align="center">$H(0.5)-(\frac{4}{10}H(0.75)+\frac{6}{10}H(0.33))=0.12$</td></tr></tbody></table><p>通过这种方式去拆分，可以很好地训练模型。决定何时不再进一步分裂的停止标准之一可以是判断熵的减少是否太小，如果一直细化，一味地增加树的大小，这样会增加过拟合的风险。因此如果熵的减少太小或者低于阈值，就不需要去理会了。</p><p>让我们来规范一下上述计算相关的符号，其中数据集如下所示：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E4%BF%A1%E6%81%AF%E5%A2%9E%E7%9B%8A%E6%95%B0%E6%8D%AE%E9%9B%86.jpg" alt="信息增益数据集"></p><p>按照是否是尖耳朵进行分类，示意图如下：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E8%80%B3%E6%9C%B5%E5%BD%A2%E7%8A%B6%E5%88%86%E7%B1%BB.jpg" alt="耳朵形状分类"></p><p>在上图中，$p_1^{root}$表示根节点进行分类的目标的占比，$p_1^{left}$和$p_1^{right}$分别表示左右两个分支中进行分类的目标的占比，$w^{left}$和$w^{right}$分别表示左右两个分支中样本占总样本数的比例。</p><p>因此最后的熵减计算公式如下所示：<br>$$<br>熵减=H(p_1^{root})-(w^{left}H(p_1^{left})+w^{right}H(p_1^{right})<br>$$<br>我们在进行分类方式选择的时候，需要去选择熵减尽可能高的那种方式。</p><h2 id="构建决策树全过程"><a href="#构建决策树全过程" class="headerlink" title="构建决策树全过程"></a>构建决策树全过程</h2><p>对于决策树的构建，一般为如下过程：</p><ol><li>从树的根节点处的所有训练示例开始。</li><li>计算所有可能特征的信息增益，并选择要拆分的特征，从而提供最高的信息增益。</li><li>选择要拆分的特征后，将会把数据集拆分为两个子集，并创建树的左右分支，将训练集分别放在左侧或右侧分支，具体取决于该特征的值。</li><li>在树的左分支、右分支等重复拆分过程，直到满足停止条件位置。</li></ol><p>对于停止条件，可以采用下面几种策略（可以只使用一个或者同时使用多个）：</p><ul><li>该节点的熵已经达到零。</li><li>当进一步拆分节点将导致树超过设置的最大深度。</li><li>拆分后的信息增益值小于阈值。</li><li>节点中的样本数量低于阈值。</li></ul><p>在训练完成之后，通过交叉验证的方式来选择模型，比如用这种方式选择最大深度值，在交叉验证集上找出效果最好的参数。</p><h2 id="独热编码"><a href="#独热编码" class="headerlink" title="独热编码"></a>独热编码</h2><p>在上述的例子中，我们的每个特征都采用了两个可能值中的一种。假设有两个以上的离散值特征时，可以使用独热编码来解决此类问题。</p><p>让我们先来看一下下面这个数据集：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%8B%AC%E7%83%AD%E7%BC%96%E7%A0%81%E6%95%B0%E6%8D%AE%E9%9B%86.jpg" alt="独热编码数据集"></p><p>该数据集中，对于耳朵形状这一特征，不再局限于是否是尖耳朵这一种情况了，而是会将其细化为尖耳朵、松软耳朵和椭圆形耳朵这三种。如果按照之前构建决策树的流程，对于这一特征会拆分成三个子集，从而构建出三个子分支。</p><p>为了解决上述问题，我们可以使用<code>one-hot</code>独热编码，将上述的这三种情况依次拆分，变为是否是尖耳朵，是否是松软耳朵，是否是椭圆形耳朵这三个分类。通过这种方式，将一个特征值拆分成了三个独立的特征值，可以保证构建决策树的时候依旧是每个节点只有两个分支。之后使用$1$表示是，$0$表示否，通过二进制的方式就可以表示出是否具有相应的特征了。</p><p>如果一个分类特征可以取$k$个可能的值，那么就可以创建$k$个只能取$0$或$1$的二进制特征来替换它。具体编码如下所示：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%8B%AC%E7%83%AD%E7%BC%96%E7%A0%81.jpg" alt="独热编码"></p><p>不难发现，对于拆分的特征，可以保证每一个都只有一个新的特征取值为$1$，即热特征，因此这种编码得名<code>one-hot encoding</code>。</p><p>独热编码不仅可以用于决策树，同时还可以用于训练神经网络。</p><p>不仅经过拆分的特征可以使用$0$和$1$，其他不需要进行拆分的特征也可以用这种方法进行表示，这样就可以使用$0$和$1$对分类特征进行编码，使其可以作为输入提供给神经网络。</p><h2 id="连续值处理"><a href="#连续值处理" class="headerlink" title="连续值处理"></a>连续值处理</h2><p>在上述案例中，处理的都是一些离散值，但是很明显，在实际应用中不仅仅只有离散值，还会有许多连续值的情况。</p><p>举个例子，现在增加一个新的特征“体重”，一般来讲，猫的平均体重会低于狗的平均体重，因此这个特征还是很有帮助的。现在的数据集如下所示：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E8%BF%9E%E7%BB%AD%E5%80%BC%E6%95%B0%E6%8D%AE%E9%9B%86.jpg" alt="连续值数据集"></p><p>对于这种情况，很明显我们没有办法使用独热编码的策略来进行划分，这里引入一种新的方法去解决该问题。</p><p>现在一共有$k$个样本，也就是对应了$k$个值，那么我们有$k-1$中方式对其进行划分，使他们最终变为两类。</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E8%BF%9E%E7%BB%AD%E5%80%BC%E5%A4%84%E7%90%86.jpg" alt="连续值处理"></p><p>如上图所示，横坐标代表了各个样本的体重，纵坐标表示该体重所对应的是不是猫。使用$k-1$条线对他们进行划分（图中只画出了$3$条用于举例，实际应该是$9$条），然后分别求出每一种划分情况的熵减，选取熵减最大的那个划分方法。对于本例而言，熵减最大的划分方法是选取绿色那条线的划分方式，其熵减为$0.61$，因此我们可以将其根据这种划分方式处理连续值，最后结果依旧是离散值。</p><h2 id="回归树"><a href="#回归树" class="headerlink" title="回归树"></a>回归树</h2><p>回归树和决策树类似，但是回归树是用于预测一个值的，而不是用于像决策树一样的分类任务。同样的，我们先来看一个数据集：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%9B%9E%E5%BD%92%E6%A0%91%E6%95%B0%E6%8D%AE%E9%9B%86.jpg" alt="回归树数据集"></p><p>与之前的数据集类似，不过我们这次并不预测当前样本是不是猫了，而是去预测当前样本的体重是多少。</p><p>我们可以用类似建立决策树的方式，建立之后，对每一个节点求出这些样本的加权平均值体重，将其作为我们的最终预测。具体的决策树如下所示：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%9B%9E%E5%BD%92%E6%A0%91.jpg" alt="回归树"></p><p>和决策树类似，这个的关键也在于节点的划分。对于决策树而言，我们划分的方式取决于每种方式的熵减；对于回归树而言，我们划分的方式取决于每种方式的方差。可以通过计算每一种类别的方差，之后求其加权平均值，再用根节点的方差减去这个值，选取值最大的作为该节点的划分方式。</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%9B%9E%E5%BD%92%E6%A0%91%E8%8A%82%E7%82%B9%E5%88%92%E5%88%86.jpg" alt="回归树节点划分"></p><p>由于这部分内容和决策树的节点划分非常相似，因此在这里就不在此赘述了。</p><h2 id="决策树集成"><a href="#决策树集成" class="headerlink" title="决策树集成"></a>决策树集成</h2><p>单个决策树对于数据中的微小变化高度敏感，为了让它不那么敏感或者说让它更健壮，我们可以构建很多决策树，这称之为树集成。</p><p>事实上，在我们只构建一棵决策树的时候，仅仅改变一个训练样本，就可能会导致算法在根部产生不同的分裂，从而产生一棵完全不同的树，这使得该算法不那么健壮。</p><p>如下图，我们现在有三棵决策树组成的集合，那么每棵树都可能是对猫与非猫分类的一种合理方法：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%A0%91%E9%9B%86%E6%88%90.jpg" alt="树集成"></p><p>现在我们要预测下面这个数据是否是一只猫：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%A0%91%E9%9B%86%E6%88%90%E9%A2%84%E6%B5%8B%E6%95%B0%E6%8D%AE.jpg" alt="树集成预测数据"></p><p>很显然，对于第一棵和第三棵树，都将其预测为了一只猫，第二棵树将其预测为了非猫，因此根据投票情况，最后认为该数据是一只猫。</p><h2 id="随机森林"><a href="#随机森林" class="headerlink" title="随机森林"></a>随机森林</h2><h3 id="有放回抽样"><a href="#有放回抽样" class="headerlink" title="有放回抽样"></a>有放回抽样</h3><p>为了构建出上述那么多的决策树，我们就需要不同的数据集，因此我们可以采用有放回抽样的方式来构造数据集。通过这种方式可以让我们构造出来的新的数据集和初始的数据集有些许的不一样，并且我们可以构造出很多这样的数据集，从而让我们有足够多的数据集来进行决策树集成。</p><h2 id="构造随机森林"><a href="#构造随机森林" class="headerlink" title="构造随机森林"></a>构造随机森林</h2><p>首先我们需要准备第一个大小为$m$的数据集，其中的数据应该互不相同。之后我们将构造$B$个新的数据集。构造方法和上述类似，通过有放回抽样的方式，把数据一个个抽取出来。尽管这会导致我们很有可能抽出相同的数据，但是这并没有关系。我们抽取出来的新的数据集，也应该有$m$个样本，换句话还说，我们进行了$m$次有放回抽样。</p><p>$B$为我们构建出的决策树的数量，也就是随机森林中树的数量，这个$B$我们可以取$100$左右，建议是$64\sim 228$这个范围。事实证明，将$B$设置的很大并不会损害性能，但是超过某个点的时候，最后会得到的收益很低，当把$B$的值设置为远大于$100$的时候，其效果也没有变得非常好。但是如果构造过多的树，会显著降低计算速度，而不会很好的提高整体算法的性能。</p><p>这种构建决策树的方式有时候也被称为<strong>袋装决策树</strong>，指的就是将训练示例放入那个虚拟包中，这也就是为什么用$B$来表示新的数据集的个数的原因，因为它代表的是“包”的意思。</p><p>我们在构造决策树的时候，可以随机选择$K$个特征作为允许被拆分的特征，然后从这$K$个特征中选择具有最高信息增益的特征作为使用分割的特征选择。使用这种技术往往更多的用于具有大量特征的问题，其中可以使得$K=\sqrt n$，$n$代表特征总数，这样会有许多个不同的随机树产生。</p><h2 id="XGBoost"><a href="#XGBoost" class="headerlink" title="XGBoost"></a>XGBoost</h2><p>在我们准备考试的时候，如果某个类型的题掌握的不是很好的话，可以好好练习一下这部分的题目，这样有助于我们最后取得更好的分数。对于随机森林也是一样的，我们如果发现在当前决策树中对于某种示例的分类表现没有那么好，可以提高下次构造数据集时这部分错误分类的数据出现的概率，这样可以使我们的模型更加有针对性的进行训练。</p><p>对于提升多少概率等等这些数学细节非常复杂的问题，<code>XGBoost</code>可以很好地解决，这是一个优化的分布式梯度增强库，旨在实现高效，灵活和便携。同时，它还可以很好地选择默认的分裂标准和何时停止分裂的标准，甚至还内置了正则化以防止过拟合。这个库中的细节实现起来相当复杂，这也就是为什么很多从业者会使用实现<code>XGBoost</code>的开源库。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> xgboost <span class="keyword">import</span> XGBClassifier</span><br><span class="line">model = XGBClassifier()</span><br><span class="line">model.fit(X_train, y_train)</span><br><span class="line">y_pred = model.predict(X_test)</span><br></pre></td></tr></table></figure><p>上述代码是使用<code>XGBoost</code>所需要做的全部工作，可以按照这种方式导入该库，并将模型初始化为<code>XGBoost</code>分类器。</p><p>如果想用<code>XGBoost</code>执行回归任务而不是分类任务，那么可以将代码改成如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> xgboost <span class="keyword">import</span> XGBRegressor</span><br><span class="line">model = XGBRegressor()</span><br><span class="line">model.fit(X_train, y_train)</span><br><span class="line">y_pred = model.predict(X_test)</span><br></pre></td></tr></table></figure><h2 id="何时使用决策树"><a href="#何时使用决策树" class="headerlink" title="何时使用决策树"></a>何时使用决策树</h2><p>决策树和树集成通常适用于表格数据，也称为结构化数据，这意味着如果你的数据集看起来像一个巨大的电子表格，那么决策树就值得考虑。例如房价预测那种所有的数据都是以表格的形式呈现的，最后预测一个离散值或者是一个连续值，那么决策树就是一个很好的选择。</p><p>但是如果是那种非结构化的数据，类似于图像、视频、音频和文本，那就更加适合使用神经网络来进行训练了。</p><p>决策树相对于神经网络而言，有着更快的训练速度，因此可以更有效地提高学习算法的性能。</p><p>相对来说，决策树的可解释性要远远好于神经网络，但是并不能夸大决策树的可解释性，因为如果建立了一个很大的决策树森林，并且每一棵树都有许许多多的节点，那么要查看整个整体来试图弄清楚它在做什么将会变得非常困难，并且可能需要一些单独的可视化技术来作为支撑。</p><h1 id="K-means算法"><a href="#K-means算法" class="headerlink" title="K-means算法"></a>K-means算法</h1><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/K-means%E6%95%B0%E6%8D%AE%E9%9B%86.jpg" alt="K-means数据集"></p><p>如图所示是<code>K-means</code>的数据集，我们需要做的是通过算法将这些点自动地分为两类。</p><p>第一步是随机初始化<code>K</code>个簇质心。在这个示例中，我们随机选择两个聚类中心就可以了，分别用红色十字和蓝色十字来表示簇质心。</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/K-means%E5%88%9D%E5%A7%8B%E8%B4%A8%E5%BF%83.jpg" alt="K-means初始质心"></p><p>下一步，对于所有$m$个训练示例，依次计算它们与所有质心的距离，然后分配给离得更近的那个质心。</p><p>在数学上中，我们计算两点之间的距离通常这么写：<br>$$<br>\lVert x^{i}- \mu_k\rVert<br>$$<br>同时这也被称为<code>L2</code>范数。</p><p>我们需要找到的是最小化它的<code>k</code>值，因此有如下公式：<br>$$<br>min_k\lVert x^{i}- \mu_k\rVert<br>$$<br>当实现这个算法的时候，会发现最小化平方距离实际上会更方便一些，因为最小平方距离的簇质心应该与最小距离的簇质心相同，并且计算量会更小一些，因此我们要找的最小距离的公式如下：<br>$$<br>min_k\lVert x^{i}- \mu_k\rVert ^2<br>$$<br>这步之后，我们将循环所有的质心，更新质心位置为分配给该集群的所有点的平均值。这意味着，我们将查看每一类的所有点，求得他们所在的坐标平均值，之后赋值给质心即可。</p><p>一直重复上述步骤，我们就可以获得<code>K</code>个集群，也就实现了我们需要的聚类操作。</p><p>在实际运行中，可能会出现某个集群一个点都没有被分配到，一般来讲我们会直接删除该集群，但是如果真的非常需要这个集群的话，我们可以重新初始化，希望他在新的一次聚类操作后被分配到几个数据点。</p><h2 id="优化目标"><a href="#优化目标" class="headerlink" title="优化目标"></a>优化目标</h2><p>我们先来介绍一下聚类的几个常用的符号所代表的意义：</p><ul><li>$c^{(i)}$：当前分配给训练示例$x^{(i)}$的集群索引。</li><li>$\mu_k$：指的是集群的质心$k$的位置。</li><li>$\mu_{c^{(i)}}$：指的是示例$x^{(i)}$分配到的集群的质心。</li></ul><p>对于<code>K-means</code>算法，我们有如下的成本函数：<br>$$<br>J(c^{(1)},\dots,c^{(m)},\mu_1,\dots,\mu_k)=\frac{1}{m}\sum^m_{i=1}\lVert x^{(i)}- \mu_{c^{(i)}}\rVert ^2<br>$$<br>简单来说，我们希望周到最小化平方距离的聚类质心的位置，上述公式其实就是在求每一个样本与其分配的集群的质心的距离。</p><p>这个成本函数在有些地方被称之为失真函数。</p><p>对于质心的选择，一般会选择训练示例中的平均值，这样可以使得平方距离最小。</p><p>失真函数一般来讲都会下降或者保持不变，如果它出现了上升的情况，那么说明代码中存在错误，因为失真函数永远都不可能上升。</p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>对于<code>K-means</code>算法而言，随机初始化非常重要。</p><p>首先是对于聚类数量的选择，如果$K&gt;m$，那么这个聚类显然是没有意义的，这样甚至没有办法保证有足够的训练样例来让每个聚类质心至少有一个训练样例。因此我们最基本的要求是满足$K&lt;m$，这样可以保证我们的聚类算法是有意义的。</p><p>在我们选择好了聚类的数量之后，我们就可以使用随机初始化的方式，来给定这几个质心的初始值。例如对于下面这个数据集，我们就可以将其划分为$3$类，也就是随机初始化$3$个质心来进行聚类操作。</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/K-means%E5%88%9D%E5%A7%8B%E5%8C%96%E6%95%B0%E6%8D%AE%E9%9B%86.jpg" alt="K-means初始化数据集"></p><p>我们随机三种情况，经过<code>K-means</code>算法聚类之后，可能产生如下结果：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/K-means%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%89%E7%A7%8D%E6%83%85%E5%86%B5.jpg" alt="K-means初始化三种情况"></p><p>这三种情况明显可以看出最上面的一种比较好，剩下两种可以认为陷入了局部最优解中。为了避免这件情况的发生，我们可以多次选取初始值，之后计算它们各自的成本函数，选取最小的那一种作为最后的聚类结果。</p><p>一般来讲，我们会执行大概$50\sim1000$次左右，用于选择最好情况。如果运算的次数过多，那么计算成本会变得很高很高，那样的话回报往往是递减的。</p><h2 id="聚类数量"><a href="#聚类数量" class="headerlink" title="聚类数量"></a>聚类数量</h2><p>对于聚类问题，$K$的正确值一般都是模棱两可的，没有一个标准的答案。</p><p>我们来看一种叫做“手肘法“的方法，我们可以画一个图，其横坐标是聚类的簇树，纵坐标是相应的簇数对应的成本函数值，如下图所示：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%89%8B%E8%82%98%E6%B3%95.jpg" alt="手肘法"></p><p>一般来讲，前期的时候成本函数的值下降很快，后面下降的速度就非常平缓了。我们可以找到相应的转折点，然后以该点的簇数作为我们的聚类数量。</p><p>但这种方法有时候并不适用，很多时候你的曲线会非常平滑，导致找不到相应的“肘”。比较建议的做法是根据<code>K-means</code>为接下来的项目执行的性能来评估。简单来说，需要看后续要执行的操作，以此来决定要分为多少个簇。</p><p>到底要分成多少类，是一种主观的判断，和具体应用是相关的，没有一种客观的评估方式。</p><h1 id="异常检测算法"><a href="#异常检测算法" class="headerlink" title="异常检测算法"></a>异常检测算法</h1><h2 id="工作原理-1"><a href="#工作原理-1" class="headerlink" title="工作原理"></a>工作原理</h2><p>异常检测算法会查看未标记的正常事件数据集，从而学会检测异常，从而在出现异常事件的时候发出危险信号。</p><p>我们可以先准备许多数据集，进行无监督学习训练。因为异常情况相对来说很少，因此我们可以让模型知道大多数的情况是什么样的，之后我们再用新的数据进行检测的时候，就可以让模型分辨该情况是不是异常情况了。</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%8F%91%E5%8A%A8%E6%9C%BA%E6%95%B0%E6%8D%AE%E9%9B%86.jpg" alt="发动机数据集"></p><p>上图中是一个关于发动机的数据集，其中横坐标是发动机运行时的产热量，纵坐标是发动机运行时的振动频率。</p><p>我们如果拿到一个新的数据集，需要对其进行判断是不是异常情况。</p><p>执行异常检测的最常见方法是使用一种被称为密度估计的技术。</p><p>当得到一个大小为$m$的数据集时，我们要做的第一件事就是为$x$的概率建立一个模型。换句话说，学习算法将尝试找出具有高概率的特征$x_1$和$x_2$的值是什么，以及在数据中出现的可能性较小或概率较低的值是什么。</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%AF%86%E5%BA%A6%E4%BC%B0%E8%AE%A1.jpg" alt="密度估计"></p><p>如上图所示，中间的圈内的密度是最大的，如果一个新的示例出现在中间的圈里，我们可以认为这个是正常情况，外面的几个圈以此类推。</p><p>在实际预测中，如果我们已经训练出来了这个模型，我们可以将新的测试数据$x_{test}$放入这个模型中，它会给我们返回一个当前情况对应的概率$p(x_{test})$。接着我们需要用这个值去和我们的阈值进行比较，也就是如果$p(x_{test})&lt;\epsilon$，那么我们会认为当前情况属于异常情况。</p><h2 id="高斯正态分布"><a href="#高斯正态分布" class="headerlink" title="高斯正态分布"></a>高斯正态分布</h2><p>高斯曲线，是正态分布中的一条标准曲线，其函数图像如下所示：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E9%AB%98%E6%96%AF%E6%AD%A3%E6%80%81%E5%88%86%E5%B8%83%E6%9B%B2%E7%BA%BF.jpg" alt="高斯正态分布曲线"></p><p>该图像的横坐标是随机变量$x$，纵坐标是$x$所对应的概率密度。</p><p>该函数的解析式为：<br>$$<br>p(x)=\frac{1}{\sqrt{2\pi}\sigma}e^{\frac{-(x-\mu)^2}{2\sigma^2}}<br>$$<br>$\mu$代表中心点的横坐标，$\sigma$代表的是标准差。对于任何给定的$\mu$和$\sigma$值，如果将此函数绘制为$x$的函数，则会得到以$\mu$为中心的钟形曲线，并且该钟形曲线的宽度由分母中的$\sigma$决定。</p><p>让我们来看一下不同取值所造成的图像变化。</p><p>$\mu=0,\sigma=1$时的高斯曲线：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E9%AB%98%E6%96%AF%E6%9B%B2%E7%BA%BF1.jpg" alt="高斯曲线1"></p><p>$\mu=0,\sigma=0.5$时的高斯曲线：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E9%AB%98%E6%96%AF%E6%9B%B2%E7%BA%BF2.jpg" alt="高斯曲线2"></p><p>$\mu=0,\sigma=2$时的高斯曲线：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E9%AB%98%E6%96%AF%E6%9B%B2%E7%BA%BF3.jpg" alt="高斯曲线3"></p><p>$\mu=3,\sigma=0.5$时的高斯曲线：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E9%AB%98%E6%96%AF%E6%9B%B2%E7%BA%BF4.jpg" alt="高斯曲线4"></p><p>当我们将该函数应用于异常检测时，需要做的是对于数据集$m$，尝试估计出平均参数$\mu$以及方差参数$\sigma$的最好选择。</p><p>对于$\mu$值的计算， 一般是取所有训练示例的平均值。<br>$$<br>\mu=\frac{1}{m}\sum^m_{i=1}x^{(i)}<br>$$<br>对于$\sigma$的计算，一般是取这些数据之间的标准差。<br>$$<br>\sigma^2=\frac{1}{m}\sum^m_{i=1}(x^{(i)}-\mu)^2<br>$$<br>在计算$\sigma$的很多时候，需要去除以$m-1$而不是$m$，即：<br>$$<br>\sigma^2=\frac{1}{m-1}\sum^m_{i=1}(x^{(i)}-\mu)^2<br>$$<br>通过这种方式可以计算出无偏估计。</p><h2 id="多特征异常检测"><a href="#多特征异常检测" class="headerlink" title="多特征异常检测"></a>多特征异常检测</h2><p>对于上述的高斯正态分布，我们如果只有一个特征需要检测的话，那么直接预测相应的概率密度即可。</p><p>但是面对实际应用场景，预测的东西一般拥有多个特征，因此我们对于每个特征都可以建立一个高斯正态分布，之后将它们的概率结果乘在一起。尽管我们直接将概率相乘在一起的前提是每一个事件都是独立的，但是事实证明，对于异常检测算法而言，即使存在特征并非独立，也可以很好地将其应用于实际工程中。</p><p>综上所述，我们对于一个多特征的预测，其概率密度可以表示为：<br>$$<br>p(\vec{x})=p(x_1;\mu_1,\sigma^2_1)\times p(x_2;\mu_2,\sigma^2_2)\times p(x_3;\mu_3,\sigma^2_3)\times\dots p(x_n;\mu_n,\sigma^2_n)=\prod^n_{j=1}p(x_j;\mu_j,\sigma^2_j)<br>$$<br>当我们拿到一个新的示例的时候，可以对其进行如下预测：<br>$$<br>p(\vec x)=\prod^n_{j=1}p(x_j;\mu_j,\sigma^2_j)=\prod^n_{j=1}\frac{1}{\sqrt{2\pi}\sigma_j}exp(-\frac{(x_j-\mu_j)^2}{2\sigma_j^2})<br>$$<br>进行计算之后，将结果与阈值进行比较，如果该值小于阈值，那么我们就可以认为这个示例是异常的。</p><p>使用相乘而不是相加的方式，主要是因为如果有一个特征出现异常，相乘的方式可以保证最后的结果也变得非常小，对于单个或者少量的特征值异常也非常敏感。</p><h2 id="评估系统"><a href="#评估系统" class="headerlink" title="评估系统"></a>评估系统</h2><p>挡在开发学习算法的时候，选择不同的特征或尝试不同的参数值（例如$\epsilon$），往往会得到不同的结果，我们会选择效果更好的那一种，因此，如果有一个评估学习算法的方法，那就会容易很多。这种方法被称为实数评估，如果能够以某种方式快速改变算法，例如改变一个特征或者改变一个参数，同时有一种计算数字的方法告诉你算法是好是坏，那么用这种方式来更改算法就会变得容易得多。</p><p>尽管异常检测算法是一个无监督学习，也就是使用的数据全都是没有经过标注的。但假设我们有一些有标记的数据，通常包括少量以前观察到的异常，一般使用$y=0$表示正常，$y=1$表示异常。异常检测算法学习的训练集仍然是从$x^{(1)},x^{(2)},\dots,x^{(m)}$的未标记训练集，我们会把这些示例全都视为正常的，因此他们均为$y=0$。</p><p>在实际情况中，会有一些异常的示例进入这个训练集中，但是这个算法通常仍然可以正常工作。为了评估这个算法，如果数据集中存在少量的异常示例，那么可以创建一个交叉验证集：<br>$$<br>(x ^{(1)} _{cv},y^{(1)} _{cv}), \dots ,(x ^{(m _{cv})} _{cv},y ^{(m _{cv})} _{cv})<br>$$<br>同样，有一些示例的测试集：<br>$$<br>(x ^{(1)} _{test},y ^{(1)} _{test}),\dots,(x ^{(m _{test})} _{test},y ^{(m _{test})} _{test})<br>$$<br>其中交叉验证集和测试集都包含一些异常示例。如果有一些示例实际上是异常的，但是意外地标记为了正常，那么这些异常算法仍将正常工作。因为在进行测试的时候，重点是能否将我们已知的异常标记为异常，而不是从大量的正确示例中选择太多标记为异常。</p><p>如果我们只有很少的异常示例，那么可以把他们都放在交叉验证集中，这样可以保证我们训练出来的模型能够很好的完成我们的需求。这种方案的缺点是，在调整算法后，没有一种公平的方法来判断它在未来的实际情况中的效果如何，因为我们没有异常示例放在测试集中。</p><h2 id="异常检测与监督学习"><a href="#异常检测与监督学习" class="headerlink" title="异常检测与监督学习"></a>异常检测与监督学习</h2><p>在上一小节中，我们使用了一些带有标签的样例来评估我们的模型，从而选择一个最好的模型，如果我们使用大量的带有标签的数据集来进行有监督学习，是否也可以训练出来一个模型用于检测异常情况。</p><p>当我们正例数量非常少时，异常检测算法通常是更合适的选择。相反，如果有更多的正面和负面例子，那么使用监督学习的效果会更好一些。</p><p>还有就是在有多个特征的情况下，只要有一个特征出现问题，就被认为可能是异常，解决这类问题的时候异常检测可能更加合适。数据集中的异常可能无法涵盖所有的异常情况，没有出现过的异常与迄今为止看到的任何一种异常示例都不一样，所以这个时候会更加倾向于使用异常检测算法，对于监督学习算法而言这是很难发现的，因为监督学习会尝试找出所有正例情况的一个平均值。</p><p>在面对垃圾邮件识别的问题时，可能会发送大量相似的垃圾邮件，这就导致异常检测算法可能认为这些垃圾邮件不是异常情况，而监督学习就可以很好地将其识别出来。</p><p>简单来说，异常检测是在找与之前见过的常见情况不同的情况，并认为这是异常的，监督学习是在题库中总结做题技巧，之后尽可能使用已经学会的做题方法解决问题。前者是通过反向排除，后者是在进行正向学习。</p><h2 id="特征选择"><a href="#特征选择" class="headerlink" title="特征选择"></a>特征选择</h2><p>在监督学习中，如果没有完全正确的特征，或者如果有一些与问题无关的额外特征，通常结果是没有问题的。但是对于运行的异常检测，或者只从未标记的数据中学习，异常检测算法很难找出需要忽略掉的特征。因此，仔细选择特征对于异常检测算法而言，比监督学习算法更为重要。</p><p>如果想让异常检测算法有着更好的效果，第一件事是保证提供的特征或多或少是满足高斯分布的。</p><p>但实际情况是，我们的数据很难保证是高斯分布的，因此可以绘制数据的图像，然后进行某些变换，从而使其更像是高斯分布。例如我们可以取对数，或者开根号等等方式进行处理，这样能够更好的应用异常检测。<br>$$<br>x=log(x+C)<br>$$<br>举个例子，通过使用上述公式，通过改变$C$的值，可以更好地绘制出相应的高斯曲线，最后每次通过该变换处理输入，我们就可以得到一个拟合得不错的异常检测算法。</p><p>如果出现了一个示例，你认为是异常的，但是程序认为这并非异常，你可以单独把这个示例拿出来，然后分析你为什么觉得这是异常的，看看这个示例是否与别的示例是相似的。做完这些后，你可以尝试引入一个新的区分度较大的特征，然后构建一个相应的高斯分布模型，进行预测，期望能够达到想要的预测效果。</p><p>不仅如此，在面对那种虽然每一项数值都很正常的示例，我们可以将某些特征进行组合。例如检测计算机是否正常运作的异常检测算法，有着<code>CPU</code>负载和网络流量两个参数，尽管两个指标可能都在正常范围内，但是可能有着较高的<code>CPU</code>负载和较低的网络流量，虽然单项数值都很正常，不过这很明显是一个异常的示例。面对这种情况，我们可以求这两个参数的比值，得到一个新的参数，用这个参数用于异常检测，这样就可以检测出某些单项数值均正常，但实际是异常的示例了。</p><h1 id="推荐系统"><a href="#推荐系统" class="headerlink" title="推荐系统"></a>推荐系统</h1><h2 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h2><p>推荐系统在商业中的价值是非常巨大的，它可以预测用户可能会喜欢什么东西。</p><p>假设我们现在有一个电影推荐网站，用户可以对电影进行评级，使用$1$星$\sim$$5$星表示对这部电影的喜爱程度，那我们可以得到如下的这个表格，也就是我们的使用的数据集：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E6%95%B0%E6%8D%AE%E9%9B%86.jpg" alt="推荐系统数据集"></p><p>左侧的一列表示电影名称，右侧表示每个用户对应相应电影的评级，使用<code>?</code>表示的意思是该用户没有看过这部电影，我们可以使用数据来表示出这个表格中的信息。</p><p>我们使用$n_u$表示一共有多少个用户，在这里$n_u=4$；使用$n_m$表示一共有多少部电影，在这里$n_m=5$。</p><p>使用$r(i,j)$来表示第$j$个用户是否对第$i$个电影进行过评级，其中$r(1,1)=1,r(3,1)=0$，表明<code>Alice</code>对第$1$部电影进行过评级，而没有对第$3$部电影进行评级。</p><p>使用$y^{(i,j)}$表示第$j$个用户对第$i$个电影的评分具体是多少，例如$y^{(3,2)}=4$表示的是<code>Bob</code>对第$3$部电影的评级是$4$。</p><h2 id="使用每个特征"><a href="#使用每个特征" class="headerlink" title="使用每个特征"></a>使用每个特征</h2><p>上述数据中只有用户对于电影的评级，很显然，每部电影也有他们本身具有的特征，下面这个数据集相对于之前的数据集多了两个属性，分别是浪漫程度(<code>romance</code>)和动作程度(<code>action</code>)：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E4%BD%BF%E7%94%A8%E6%AF%8F%E4%B8%AA%E7%89%B9%E5%BE%81%E6%95%B0%E6%8D%AE%E9%9B%86.jpg" alt="使用每个特征数据集"></p><p>最后两列的数值分别表示该电影的这两个特征的符合等级，$1$表示完全符合，$0$表示完全不符合。</p><p>因此我们可以得到每部电影的特征向量，例如第一部电影和第三部电影，其特征向量如下所示：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%94%B5%E5%BD%B1%E7%89%B9%E5%BE%81%E5%90%91%E9%87%8F.jpg" alt="电影特征向量"></p><p>对于每个用户而言，我们可以使用一个线性回归来进行训练和分类，其公式如下：<br>$$<br>\vec{w}\cdot x^{(i)}+b<br>$$<br>现在我们要预测<code>Alice</code>对于第三部电影的评分，假设她所对应的参数如下所示：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Alice%E5%8F%82%E6%95%B0.jpg" alt="Alice参数"></p><p>那么我们就可以直接进行运算，也就是：<br>$$<br>\vec{w}^{(1)}\cdot x^{(3)}+b^{(1)}=4.95<br>$$<br>这就表示，<code>Alice</code>会对该部电影的评级在$4.95$左右，每个用户都有一个专属的参数设置，用于对其进行预测。</p><p>对于任何一个用户$j$，预测他对电影$i$的评级的公式如下所示：<br>$$<br>\vec{w}^{(j)}\cdot x^{(i)}+b^{(j)}<br>$$<br>现在的问题在于，我们如何去得到这些参数，一般来讲，都会去使用相应的成本函数，然后训练模型。</p><p>我们再引入两个，第一个参数是$m^{(j)}$，表示用户$j$评价的电影数量；第二个参数是$n$，表示的是特征的总数。</p><p>我们可以根据这些参数和信息得到如下的成本函数：<br>$$<br>min_{\vec {w} ^{(j)}b ^{(j)}}J(\vec w ^{(j)},b ^{(j)})=\frac{1}{2m ^{(j)}} \sum_{i:r(i,j)=1}( \vec {w} ^{(j)}\cdot \vec x ^{(i)}+b ^{(j)}-y ^{(i,j)}) ^2<br>$$<br>很显然，用户没法对所有的电影进行评级，所以我们只去使用那些经过用户评级的电影作为数据集。</p><p>我们在训练模型的时候，希望这个成本函数的值是最小的，这样就可以更好地选择参数$w^{(i)}$和$b^{(j)}$。</p><p>为了防止过拟合，我们可以为这个成本函数添加正则化：<br>$$<br>min_{\vec {w} ^{(j)}b ^{(j)}}J(\vec w ^{(j)},b ^{(j)})=\frac{1}{2m ^{(j)}} \sum_{i:r(i,j)=1}( \vec {w} ^{(j)}\cdot \vec x ^{(i)}+b ^{(j)}-y ^{(i,j)}) ^2 + \frac{ \lambda }{2m ^{(j)}}\sum_{k=1}^{n} ( \vec{w} _ k^{(j)}) ^2<br>$$<br>事实证明，对于推荐系统而言，消除掉$m^{(j)}$其实会更方便，该项只是该表达式中的一个常数。所以，即使把这一项删掉，最终也会得到相同的结果。<br>$$<br>min_{\vec {w} ^{(j)}b ^{(j)}}J(\vec w ^{(j)},b ^{(j)})=\frac{1}{2} \sum_{i:r(i,j)=1}( \vec {w} ^{(j)}\cdot \vec x ^{(i)}+b ^{(j)}-y ^{(i,j)}) ^2 + \frac{ \lambda }{2}\sum_{k=1}^{n} ( \vec{w} _ k^{(j)}) ^2<br>$$<br>得到这个式子后，我们需要将每个人的成本函数加在一起，得到如下的式子：<br>$$<br>J=\frac{1}{2}\sum^{n_u} _ {j=1}\sum_{i:r(i,j)=1}(\vec w^{(j)}\cdot \vec x^{(i)}+b^{(j)}-y^{(i,j)})^2+\frac{\lambda}{2}\sum^{n_u} _ {j=1}\sum^n_{k=1}(\vec w^{(j)}_k)^2<br>$$<br>通过这种方式，我们可以得到一组非常好的参数，用于预测所有用户的电影评级。</p><h2 id="协同过滤算法"><a href="#协同过滤算法" class="headerlink" title="协同过滤算法"></a>协同过滤算法</h2><p>对于我们事先不知道特征值是什么的情况，可以使用协同过滤算法来计算出相应的特征值。</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%8D%8F%E5%90%8C%E8%BF%87%E6%BB%A4%E7%AE%97%E6%B3%95%E6%95%B0%E6%8D%AE%E9%9B%86.jpg" alt="协同过滤算法数据集"></p><p>假设我们已经以某种方式为四个用户学习了参数，其中$\vec w$参数如下所示，$b$参数均为$0$：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%8D%8F%E5%90%8C%E8%BF%87%E6%BB%A4%E7%AE%97%E6%B3%95%E5%8F%82%E6%95%B0.jpg" alt="协同过滤算法参数"></p><p>使用的模型是：<br>$$<br>\vec{w}^{(j)}\cdot x^{(i)}+b^{(j)}<br>$$<br>根据第一部电影的得分情况，我们可以得出：<br>$$<br>\vec{w}^{(1)}\cdot x^{(1)}\approx 5<br>$$</p><p>$$<br>\vec{w}^{(2)}\cdot x^{(1)}\approx 5<br>$$</p><p>$$<br>\vec{w}^{(3)}\cdot x^{(1)}\approx 0<br>$$</p><p>$$<br>\vec{w}^{(4)}\cdot x^{(1)}\approx 0<br>$$</p><p>如果拥有了所有四个用户的参数，那么就可以合理预测出电影的特征向量的值。</p><p>在这个算法中，有多个用户对同一部电影的同一项目进行评分，这是能够猜测这些特征的可能值的原因。</p><p>为了能够更好地训练模型，我们有一个相应的成本函数，该成本函数与上述成本函数非常相似：<br>$$<br>J(x^{(i)})=\frac{1}{2}\sum_{i:r(i,j)=1}(\vec w^{(j)}\cdot \vec x^{(i)}+b^{(j)}-y^{(i,j)})^2+\frac{\lambda}{2}\sum^n_{k=1}(\vec x^{(i)}_k)^2<br>$$<br>我们需要让该成本函数最小，从而预测出相应的特征向量。</p><p>可以求一个总体的成本，让该总成本最小即可：<br>$$<br>\frac{1}{2}\sum^{n_m} _ {i=1}\sum _ {i:r(i,j)=1}(\vec w^{(j)}\cdot \vec x^{(i)}+b^{(j)}-y^{(i,j)})^2+\frac{\lambda}{2}\sum^{n_m} _ {i=1}\sum^n _ {k=1}(\vec x^{(i)} _ k)^2<br>$$<br>通过梯度下降算法，最小化这个成本函数，可以更好地猜测学习好的特征电影。</p><p>所谓协同过滤算法，就是从已有电影特征分类和打分中学到相应的参数，再用学到的参数去学习未知电影的特征分类。</p><p>因此，我们可以将这两个算法合并在一起，得到如下的成本函数：<br>$$<br>J(\vec w,b,\vec x)=\frac{1}{2}\sum _ {i:r(i,j)=1}(\vec w^{(j)}\cdot \vec x^{(i)}+b^{(j)}-y^{(i,j)})^2+\frac{\lambda}{2}\sum^{n_u} _ {j=1}\sum^n _ {k=1}(\vec w^{(j)} _ k)^2+\frac{\lambda}{2}\sum^n _ {k=1}(\vec x^{(i)} _ k)^2<br>$$<br>可以通过梯度下降算法，计算这三个参数，这样可以得到一个较好的值。</p><p>我们得出的平均值成为协同过滤，协同过滤这个名称指的是因为多个用户协同评价同一部电影，让你了解这部电影可能是什么样子，还可以反过来预测用户对某一电影的评价。</p><h2 id="二进制标签"><a href="#二进制标签" class="headerlink" title="二进制标签"></a>二进制标签</h2><p>推荐系统和协同过滤算法的许多重要应用都涉及二进制标签，而不是用户对他们的喜好进行评级，因此，我们只能通过某种方式猜测他们是否喜欢某个东西。</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%A0%87%E7%AD%BE.jpg" alt="二进制标签"></p><p>如图所示，其中使用$0$表示的是用户对该项目不感兴趣，$1$表示的是对其感兴趣，$?$表示用户还没有浏览过该项目。判断用户是否喜欢该项目的方式，可以是看他有没有进行点赞，或者计算他在该项目上停留的时间，亦或者是对该项目的搜索频率等等方式，这些都可以转化为相应的二进制标签。对于用户没有浏览过的项目，也可以推荐给用户，看一看用户是否对该项目产生兴趣。</p><p>在之前的协同过滤算法中，我们使用的损失函数与线性回归模型非常相似，而对于二进制标签而言，更加适合使用逻辑回归的损失函数。<br>$$<br>f_{(\vec w,b,\vec x)}=g(\vec w^{(j)}\cdot \vec x^{(i)}+b^{(j)})<br>$$</p><p>$$<br>L(f_{(\vec w,b,\vec x)}(\vec x),y^{(i,j)})=-y^{(i,j)}log(f_{(\vec w,b,\vec x)}(\vec x))-(1-y^{(i,j)})log(1-f_{(\vec w,b,\vec x)}(\vec x))<br>$$<br>上述公式使我们之前讲到的二元交叉熵成本函数，为了能够更好地适应协同过滤算法，我们可以将该公式写成如下这样，用来计算所有样本的成本函数：<br>$$<br>J(w,b,x)=\sum_{(i,j):r(i,j)=1}L(f_{(\vec w,b,\vec x)}(\vec x),y^{(i,j)})<br>$$</p><h2 id="均值归一化-1"><a href="#均值归一化-1" class="headerlink" title="均值归一化"></a>均值归一化</h2><p>我们接着沿用之前的电影推荐系统的例子，如果此时引入了一个新的用户，那么他对所有电影的评分均是未知的，也就是需要全都使用$?$来表示。</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%9D%87%E5%80%BC%E5%BD%92%E4%B8%80%E5%8C%96%E6%95%B0%E6%8D%AE%E9%9B%86.jpg" alt="均值归一化数据集"></p><p>很明显，如果我们使用$0$来对新用户进行初始化的话是不合适的，因为这样会导致该用户训练出来的参数全部为$0$，因此我们将会使用均值归一化的方式进行初始化赋值。</p><p>首先我们需要把我们的数据集转换为相应的矩阵：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%88%9D%E5%A7%8B%E7%9F%A9%E9%98%B5.jpg" alt="初始矩阵"></p><p>接着我们需要求出每一部电影所对应的评级的平均值，可以得到每部电影平均星级的向量，我们使用$\mu$来表示该向量：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%B9%B3%E5%9D%87%E8%AF%84%E7%BA%A7%E5%90%91%E9%87%8F.jpg" alt="平均评级向量"></p><p>然后我们用初始矩阵的每一位都减去$\mu$矩阵：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%9D%87%E5%80%BC%E7%9F%A9%E9%98%B5.jpg" alt="均值矩阵"></p><p>通过这种方式，每一个用户$j$对于电影$i$的评级预测有如下公式：<br>$$<br>\vec w^{(j)}\cdot \vec x^{(i)}+b^{(j)}+\mu_i<br>$$<br>对于新用户而言，我们也采用该公式，那么他对于每部电影的初始评级应该和$\mu$向量是相同的，这样的效果会比全都设置为$0$要好很多。</p><p>我们在上面所使用的计算均值归一化的方式是行规则规范化，也就是对电影求其均值归一化，那么如果出现了一个电影，没有人对其进行评价，那我们就可以对列进行归一化，使用这种方式预测电影的参数。但事实上，这并不是一种合适的方式，遇到一部新电影的话，应该把收集这部电影的参数作为首要任务。</p><h2 id="寻找相关特征"><a href="#寻找相关特征" class="headerlink" title="寻找相关特征"></a>寻找相关特征</h2><p>在电影推荐网站上，如果用户喜欢看一类电影，那系统就会给他推荐更多这一类的电影。也就是说，需要让推荐系统自动找到用户喜欢的类型，即特征最相近的电影。</p><p>我们可以通过如下公式评估两个电影是否是相似的：<br>$$<br>\sum^n_{l=1}(x^{(k)}_l-x^{(i)}_l)^2<br>$$<br>上述公式中，$k$代表目标电影（也就是用户喜欢的电影）的编号，也就是计算两部电影的所有特征的距离之和，可以简写成下面这个公式：<br>$$<br>\lVert\vec x^{(k)}-\vec x^{(i)}\rVert^2<br>$$<br>通过这种方式，可以找出与用户喜欢的电影相类似的电影，然后推荐给用户。甚至可以对搜索出来的所有电影进行排名，这样就知道用户对每一部电影的大致好感度了。</p><h2 id="协同过滤算法的局限性"><a href="#协同过滤算法的局限性" class="headerlink" title="协同过滤算法的局限性"></a>协同过滤算法的局限性</h2><p>对于协同过滤算法，可以很好的实现推荐系统，但是也存在一定局限性，比如它很难处理冷启动问题。</p><p>例如，现在有一部新电影，很少人对其进行评价，这就导致推荐系统很难将其推荐给别人；或者现在有一位新用户，也很难决定最开始给他推荐什么样的电影。均值归一化可以很好的解决这个问题，但有一种更好的方法是将新电影推荐给经常对很冷门的电影进行评分的用户，这些项目可能会让他们感兴趣。</p><p>协同过滤算法没有办法使用一个自然的方式来使用一些附加信息，例如你的算法可能知道用户的基本信息，还有电影的一些基本信息，但是还有许多的附加信息没有办法加以利用。比如说用户鼠标悬停的时间，使用什么方式看电影，移动端还是电脑端等等，这些信息都属于附加信息，它们很有可能与用户的偏好密切相关。</p><h2 id="基于内容的过滤算法"><a href="#基于内容的过滤算法" class="headerlink" title="基于内容的过滤算法"></a>基于内容的过滤算法</h2><h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><p>协同过滤算法会根据给出相似评级的用户向用户推荐项目，我们有一定数量的用户对某些项目给出了一些评级，算法会计算出如何使用它来向用户推荐新项目。</p><p>相比之下，基于内容的过滤采用不同的方法来决定向用户推荐，该算法会根据用户的特征和物品的特征向用户进行推荐，以找到合适的匹配项。换句话说，它需要每个用户的一些特征，以及每个项目的一些特征，它使用这些特征来尝试决定哪些项目和用户可能彼此匹配。</p><p>我们使用$\vec x^{(j)}_u$表示第$j$个用户的特征，例如年龄，性别，国家等等，这些都可以使用独热编码来存储。</p><p>使用$\vec x^{(i)}_m$表示第$i$部电影的特征，例如年份，电影类型，影评人对电影的评价等等。</p><p>我们根据这两组特征，用于给用户推荐相应的项目。值得注意的是，二者的特征数量可能并不相同，因此可以使用下面这种算法来学习如何匹配用户和相应的电影。</p><p>我们先来看一下协同过滤算法的公式：<br>$$<br>\vec w^{(j)}\cdot \vec x^{(i)}+b^{(j)}<br>$$<br>在基于内容的过滤算法中，参数$b$对结果没有什么影响，因此我们可以把上述公式转换为下面这个公式，能够很好地应用于该算法：<br>$$<br>\vec v^{(j)}_u \cdot \vec v^{(i)}_m<br>$$<br>其中，$\vec v^{(j)}_u$是由$\vec x^{(j)}_u$计算而来的，$\vec v^{(i)}_m$是由$\vec x^{(i)}_m$计算而来的。由于二者要进行点乘运算，因此他们的维度需要保持一致，尽管用户和项目的初始特征的维度并不一致，但我们也需要把他们转化以下，否则将无法进行运算。</p><h3 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h3><p>我们一般使用深度学习的方式来进行训练，首先需要搭建一个神经网络。</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%94%A8%E6%88%B7%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B.jpg" alt="用户网络模型"></p><p>搭建一个神经网络用于处理用户的特征信息，将其转化为我们使用的用户向量。在上述模型中，最后的输出是一个有着$32$个数字的向量（因为之后要进行点乘运算）。</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E9%A1%B9%E7%9B%AE%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B.jpg" alt="项目网络模型"></p><p>接着搭建一个神经网络用于处理项目的特征信息，将其转化为我们使用的项目向量。要注意，我们最后的输出都是有着$32$个数字的向量，这样方便后续进行运算。</p><p>在神经网络的隐藏层中，神经元的数量可能不一致，但是最后输出的向量的维度一定要相同。</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E9%A2%84%E6%B5%8B%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B.jpg" alt="预测神经网络模型"></p><p>上图中是整个架构模型，需要将计算出来的两个向量进行点乘，可以把结果放入<code>sigmoid</code>函数中进行最终预测。</p><p>最后是这个神经网络训练时所使用的成本函数：<br>$$<br>J=\sum_{(i,j):r(i,j)=1}(\vec v^{(j)}_u \cdot \vec v^{(i)}_m-y^{(i.j)})^2<br>$$<br>还可以在后面加上相应的正则化项，可以更好地进行训练。</p><p>我们也可以使用这个模型查找相似的项目，与之前的小节类似，可以使用如下公式：<br>$$<br>\lVert\vec v^{(k)}_m-\vec v^{(i)}_m\rVert^2<br>$$<br>如果我们要查找相似电影，就可以通过这种方式，求出其对应的向量，然后与其他电影的向量进行距离上的计算，距离小的电影就是与要查找的电影相类似的电影。</p><h2 id="大型目录推荐系统"><a href="#大型目录推荐系统" class="headerlink" title="大型目录推荐系统"></a>大型目录推荐系统</h2><p>现如今，一个大型的推荐系统往往有着成千上万，甚至几百万几千万的项目需要进行推荐。</p><p>由于基于内容的过滤算法拼接了两个神经网络，所以当出现一个新的用户的时候，不仅需要训练用户的神经网络参数，同时也需要重新训练项目的神经网络。这就导致，每当有新用户出现的时候，就会产生数亿次的计算，这样会使得算法不可行。</p><p>对于这种发规模的推荐系统，我们将其分为两个步骤，分别是<strong>检索</strong>和<strong>排名</strong>。</p><p>首先在检索步骤生成大量可能的项目作为候选列表，这其中涵盖了许多可能向用户推荐的东西，如果这其中涵盖了许多用户不太可能喜欢的项目，那么在排名步骤中将微调并选择最好的项目推荐给用户。</p><p>例如，对于用户最近观看的$10$部电影中的每一部电影，我们可以找出$10$部最相似的电影，通过使用之前的方法可以快速计算出相关的电影。这将提供一组初始的具有可信度的电影，可以将这些电影推荐给用户。也可以将用户看的最多的类型的电影前几名放入候选列表中，也可以选择用户所在地区的排名高的电影，通过类似的方式，我们就可以得到一个拥有很多电影的候选列表，最后删除掉用户浏览过的不感兴趣的项目。</p><p>接下来是排名步骤，可以对这几百部可能得电影，使用学习模型对它们进行排名。可以把用户的特征向量和电影的特特征向量输入进这个神经网络中，最后预测每部候选电影的评分，并根据评分进行排名，然后将排名高的电影推荐给用户。</p><p>在检索步骤中，检索更多的项目往往会带来更好的性能，但是运算时间也会相应地增加，所以我们需要进行一个权衡。因此可以进行离线实验，来看看检索额外的项目会产生多少更相关的推荐，最后选择一个合适的额外检索数量。</p><p>通过检索步骤和排名步骤，使得今天许多推荐系统能够提供快速和准确的结果。</p><h1 id="PCA算法"><a href="#PCA算法" class="headerlink" title="PCA算法"></a>PCA算法</h1><h2 id="降低特征数量"><a href="#降低特征数量" class="headerlink" title="降低特征数量"></a>降低特征数量</h2><p>当数据集中包含很多特征，很显然，我们没有办法绘制出这么多维度的数据。<code>PCA</code>又称主成分分析是一种能够很好地解决该问题的方法，可以获取具有大量特征的数据，并将特征的数量减少至两三个特征，以便于绘图和可视化。</p><p>对于汽车长度和宽度这两个特征而言，我们将其分别定义为$x_1$和$x_2$，前者表示长度，后者表示宽度。事实上，汽车的宽度一般为了符合道路的行驶要求，所以差距不是很大，而长度的变化就会比较大了，因此我们可以根据数据绘制出如下这张图：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%B1%BD%E8%BD%A6%E9%95%BF%E5%AE%BD%E5%9B%BE%E5%83%8F.jpg" alt="汽车长宽图像"></p><p>上图中，横轴表示汽车的长度，纵轴表示汽车的宽度。很容易发现，汽车的长度变化幅度较大，而宽度基本上没有发生变化。如果想要减少特征的数量，那么对于该数据集，我们就可以只取$x_1$，忽略掉$x_2$。</p><p><code>PCA</code>算法做的不仅仅是舍去用处不大的特征，例如现在我们有汽车的长度和高度两个特征，这两个特征的变化幅度都比较大，我们舍弃哪一个都是不合适的。因此对于这种情况，我们可以创建一个新的轴，它是由汽车的长度和高度两个特征综合出来的新的特征，该轴大致上可以反映出汽车的尺寸，那么我们就可以将这个新轴作为最终选择的特征。</p><p>因此，<code>PCA</code>算法的想法是找到一个或多个新轴，当在新轴上测量数据坐标时，最终仍然会获得有关目标的非常有用的信息。</p><h2 id="工作原理-2"><a href="#工作原理-2" class="headerlink" title="工作原理"></a>工作原理</h2><p><code>PCA</code>算法是一个无监督学习，因此只有数据，但是没有相应的标签。如图所示，是一个拥有$5$个数据的数据集，一共有两个特征，分别为$x_1$和$x_2$。</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/PCA%E6%95%B0%E6%8D%AE%E9%9B%86.jpg" alt="PCA数据集"></p><p>为了保证数据的尺度范围是一致的，因此我们需要对数据集先进行归一化操作，即先进行缩放再减去均值使其变为零均值。</p><p>接下来，我们需要选择或创造一个轴，将所有点投影在这个轴上，希望所有的点都可以相距尽可能地远。在<code>PCA</code>算法中，这个轴成为主成分，在这个轴上，当数据投影在上面时，最终会得到最大可能得方差，可以捕获原始数据集中的更多信息。</p><p>如果我们已经找到了主成分轴，那么我们需要求出它的单位向量，例如现在的主成分轴的函数是$y=x$，那么对于点$(2,3)$，我们可以通过以下方式求出它在该主成分轴上的数据是多少：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E4%B8%BB%E6%88%90%E5%88%86%E8%AE%A1%E7%AE%97.jpg" alt="主成分计算"></p><p>简单来说，就是用它的坐标与主成分轴的$x$和$y$值组成的向量进行点乘，就可以转化为在这个轴上的坐标。</p><p>通过这种方式找到的第一个轴被称作第一主成分。如果要选择第二个轴，那么第二个轴始终与第一个轴的夹角为$90\degree$，也就是与第一个轴相垂直。同理，第三个轴也会与第二个轴有着$90\degree$的夹角。</p><p>如果有$50$个特征，并且相找到$3$个主成分，那么这三个轴将会形成一个三维直角坐标系。</p><h1 id="强化学习"><a href="#强化学习" class="headerlink" title="强化学习"></a>强化学习</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>现在有这样一个任务，有一架遥控直升机，给出直升机的位置来让你决定如何操作直升机。</p><p>在强化学习中，我们将直升机的位置和方向以及速度等成为状态$s$，其任务是找到一个函数，将直升机的状态映射到动作$a$，即通过操作直升机来保持直升机在空中飞行且保持平衡不会坠毁。</p><p>面对这个问题，通常会想到使用监督学习来训练模型，但是每一步动作都很难说明是对还是错，需要整个决策过程才能对其进行评价。</p><p>为了解决这个问题，我们可以采用强化学习的方式。强化学习的关键是一个叫做奖励或者奖励函数的东西，它会告诉直升机什么时候做得好，什么时候做的不好。</p><p>当直升机飞得好的时候，你可以奖励它，每飞好一秒奖励值就加一；当飞得不好的时候，可以给它一个负奖励，或者说当它坠毁的时候，可以给它一个非常大的负奖励，比如$-1000$。通过这种方式，可以激励直升机花更多的时间飞行，并希望永远不会坠毁。</p><h2 id="回报"><a href="#回报" class="headerlink" title="回报"></a>回报</h2><p>强化学习有许多状态，智能体通过采取不同的行动，从而享受到不同的奖励。对于强化学习而言，设置奖励是非常重要的，那么如何知道一组特定的奖励比另一组不同的奖励更好还是更差这一问题就非常值得探讨。</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%81%AB%E6%98%9F%E6%8E%A2%E6%B5%8B%E5%99%A8%E7%A4%BA%E4%BE%8B.jpg" alt="火星探测器示例"></p><p>上图中是一个火星探测器的示例，当探测器到达$1$号位置这个状态后可以得到$100$的奖励，到达$6$号位置这个状态后可以得到$40$的奖励，其中探测器的初始位置是$4$号位置。</p><p>如果探测器要到$1$号位置位置，那么它的回报计算为：<br>$$<br>Return=0+(0.9)\times0+(0.9)^2\times0+(0.9)^3\times100=72.9<br>$$<br>上述算式中，$0.9$表示折扣因子，一般取一个较小于$1$的数字，这样可以保证智能体会尽可能采取更快的速度达到目标状态。简单来说，智能体越早获得奖励的话会导致总回报值越高。</p><p>我们可以总结出一个更加通用的公式：<br>$$<br>Return=R_1 +\gamma R_2 +\gamma^2 R_3+\cdots<br>$$<br>在学多强化学习算法中，折扣因子一般选取非常接近$1$的数字，例如：$0.9$、$0.99$、$0.999$。</p><p>为了降低学习难度，更加便于计算，本示例中奖折扣因子$\gamma$的值设置为$0.5$，这将会严重降低权重，也可以说是降低了未来的奖励，因为每增加一次状态转移，就会导致奖励变为早一步获得的一半，所以前文中的回报值将会变为：<br>$$<br>Return=0+(0.5)\times0+(0.5)^2\times0+(0.5)^3\times100=12.5<br>$$<br>我们现在假设只能向左走，对于不同的初始位置，可以得到如下回报：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%90%91%E5%B7%A6%E8%B5%B0%E5%9B%9E%E6%8A%A5.jpg" alt="向左走回报"></p><p>如果从$5$号位置开始向左走的话，就只能得到$6.25$的回报；在$6$号位置开始向左走的话，由于该位置就是终止状态，所以其回报值时$40$，其余情况以此类推。</p><p>我们再假设只能向右走，对于不同的初始位置，可以得到如下回报：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%90%91%E5%8F%B3%E8%B5%B0%E5%9B%9E%E6%8A%A5.jpg" alt="向右走回报"></p><p>除了上述这两种方式，我们还可以针对不同的初始位置决定走向，从而让最后的综合回报最大化：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%BB%BC%E5%90%88%E5%9B%9E%E6%8A%A5.jpg" alt="综合回报"></p><p>总而言之，强化学习中的回报是系统获得的奖励总和，由折扣因子加权计算得到的结果。</p><h2 id="策略"><a href="#策略" class="headerlink" title="策略"></a>策略</h2><p>策略指的是强化学习中的策略，对于火星探测器的例子，可以选择离哪一个终端奖励更近就往哪边走；也可以选择一直向左走；或者也可以选择一直向右走；亦或者选择朝向获得终端奖励更大的那个方向去走。上面的这四种方法都属于策略，对于这些策略有好有坏，强化学习中提出了一个被称为策略$\pi$的函数，其工作是将任何状态$s$作为输入并将其映射到它希望我们采取的某个动作$a$。而我们的目标是，找到一个策略$\pi$函数，让它告诉你在每个状态下采取什么行动以获得最大化回报。</p><h2 id="关键概念"><a href="#关键概念" class="headerlink" title="关键概念"></a>关键概念</h2><ol><li>状态（<code>states</code>）：当前智能体处于的状态。</li><li>动作集（<code>action</code>）：当前智能体可以选择的行动。</li><li>奖励（<code>rewards</code>）：到每一个状态所能获得的奖励。</li><li>折扣因子（<code>discount factor</code>$\gamma$）：每行动一步所要乘以的折扣系数。</li><li>回报（<code>return</code>）：智能体从某个状态开始出发，所能得到的最终回报值。</li><li>策略（<code>policy</code>$\pi$）：智能体在每一个状态应该选择的动作所依赖的策略函数。</li></ol><p>对于拥有以上形式的强化学习，我们称之为马尔可夫决策过程。<code>MDP</code>或马尔可夫决策过程指的是未来仅取决于当前状态，而不取决于在达到当前状态之前可能发生的任何事情。换句话说，在马尔可夫决策过程中，未来只取决于你现在所处的位置，而不取决于你是如何到达这里的。</p><h2 id="状态-动作价值函数"><a href="#状态-动作价值函数" class="headerlink" title="状态-动作价值函数"></a>状态-动作价值函数</h2><p>状态-动作值函数是一个通常用大写字母<code>Q</code>表示的函数，$Q(s,a)$表示从状态$s$开始，在执行一次操作$a$之后，可以达到最佳状态，在那之后，你采取任何行动都会带来尽可能高的回报。</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%81%AB%E6%98%9F%E6%8E%A2%E6%B5%8B%E5%99%A8%E6%9C%80%E4%BD%B3%E7%AD%96%E7%95%A5.jpg" alt="火星探测器最佳策略"></p><p>上图是火星探测器最佳策略，我们假设初始状态位于第二个格子中，那么可以得出：<br>$$<br>Q(2,\rightarrow)=0+(0.5)\times 0+(0.5)^2\times 0+(0.5)^3\times 100=12.5<br>$$</p><p>$$<br>Q(2,\leftarrow)=0+(0.5)\times 100=50<br>$$</p><p>需要注意的是，状态-动作价值函数是在执行一次$a$操作后， 再根据相应的策略进行执行，计算相应的回报值。</p><p>同理，我们还可以得出下面的回报值：<br>$$<br>Q(4,\leftarrow)=0+(0.5)\times 0+(0.5)^2\times 0+(0.5)^3\times 100=12.5<br>$$</p><p>$$<br>Q(4,\rightarrow)=0+(0.5)\times 0+(0.5)^2\times 40=10<br>$$</p><p>对于$2\sim 5$号格子，我们都可以求出相应的$Q(i,\leftarrow)$和$Q(i,\rightarrow)$，通过这种方式，最终会得到所有的$Q(s,a)$，对于不同的状态和不同的动作，最终到达终端状态。对于两侧的终端状态，无论采取什么行动，都会得到相应的奖励值，所以它们的$Q$值为本身的奖励值。综上所述，我们可以得到下面这张图：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%8A%B6%E6%80%81-%E5%8A%A8%E4%BD%9C%E4%BB%B7%E5%80%BC%E5%87%BD%E6%95%B0.jpg" alt="状态-动作价值函数"></p><p>因为状态-动作价值函数基本都是使用字母$Q$表示，所以这也通常称为$Q$函数。</p><p>首先用状态-动作价值函数求出所有的情况，然后对于每一种状态，根据$Q$值选择较大的那一种策略。也就是说，如果有办法去计算$Q(s,a)$，那么对于每个状态和每个动作，只需要查看不同的结果就可以选择执行哪一种动作了，即$\pi(s)=a$。</p><h2 id="贝尔曼方程"><a href="#贝尔曼方程" class="headerlink" title="贝尔曼方程"></a>贝尔曼方程</h2><p>在强化学习中，有一个关键方程叫做贝尔曼方程，它可以帮助我们计算状态-动作价值函数。</p><p>我们先来解释几个符号：</p><ul><li>$s$：表示当前状态。</li><li>$R(s)$：表示当前状态的奖励。</li><li>$a$：表示当前动作，即在状态$s$中采取动作$a$后，将进入某个新状态。</li><li>$s\prime$：表示从当前状态$s$采取动作$a$后到达的状态。</li><li>$a\prime$：表示在状态$s\prime$中可能采取的操作。</li></ul><p>让我们来看一下贝尔曼方程：<br>$$<br>Q(s,a)=R(s)+\gamma max_{a\prime}Q(s\prime,a\prime)<br>$$<br><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%8A%B6%E6%80%81-%E5%8A%A8%E4%BD%9C%E4%BB%B7%E5%80%BC%E5%87%BD%E6%95%B0.jpg" alt="状态-动作价值函数"></p><p>对于火星探测器的例子，我们可以求出$Q(2,\rightarrow)$的值：<br>$$<br>Q(2,\rightarrow)=R(2)+0.5max_{a\prime}Q(3,a\prime)=0+(0.5)\times25=12.5<br>$$<br>若以状态$4$为例，那么可以求得：<br>$$<br>Q(4,\leftarrow)=R(4)+0.5max_{a\prime}Q(3,a\prime)=0+(0.5)\times25=12.5<br>$$<br>简单来说，贝尔曼方程是一种动态规划方程，将最终的状态作为贝尔曼方程的初始状态，从该状态开始转移，计算出其他状态对应的回报值。</p><h2 id="随机马尔可夫决策过程"><a href="#随机马尔可夫决策过程" class="headerlink" title="随机马尔可夫决策过程"></a>随机马尔可夫决策过程</h2><p>在某些应用程序中，当采取行动时，结果并不总是完全可靠的。例如：对于火星探测器而言，如果向左行驶，可能会出现一点岩石滑坡，然后滑向不同的方向。在实践中，由于各种各样客观性因素影响，智能体可能没有办法总是按照指令去做。</p><p>还是用之前火星探测器来举例子：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%81%AB%E6%98%9F%E6%8E%A2%E6%B5%8B%E5%99%A8%E7%A4%BA%E4%BE%8B.jpg" alt="火星探测器示例"></p><p>当探测器向左走时，大多数时间是能够成功的，但是如果有$10%$的概率意外滑倒并朝相反的方向前进，那么就会与我们之前的计算结果产生不同。</p><p>在随机强化学习问题中，我们感兴趣的不是最大回报，因为那是一个随机数，我们更感兴趣的是最大化折扣奖励综总和的平均值。<br>$$<br>Expected\ Return=Average(R_1+\gamma R_2 + \gamma^2 R_3 + \gamma^3 R_4+\cdots)<br>$$<br>就平均值而言，如果采用当前策略并尝试很多次，那么就会得到许多不同的奖励序列，如果对这些值取平均值，那么就可以得到预期收益。</p><p>这个预期收益也就是我们常说的期望值，因此上述公式也可以写成如下形式：<br>$$<br>Expected\ Return=E[R_1+\gamma R_2 + \gamma^2 R_3 + \gamma^3 R_4+\cdots]<br>$$<br>对于上述的贝尔曼方程，如果要解决随机马尔可夫决策过程，需要对公式进行一些修改：<br>$$<br>Q(s,a)=R(s)+\gamma E[max_{a\prime}Q(s\prime,a\prime)]<br>$$</p><h2 id="连续状态空间"><a href="#连续状态空间" class="headerlink" title="连续状态空间"></a>连续状态空间</h2><p>在火星探测器的例子中，所有的状态都是离散的，但是现实情况中基本都是连续的状态空间。例如对于一辆车，它的状态不止包括一个数字，其状态中可以有多个参数，$x$表示横坐标位置，$y$表示纵坐标位置，$\theta$表示朝向的角度，$\dot{x}$表示横坐标方向上的速度，$\dot{y}$表示纵坐标方向的速度，$\dot{\theta}$表示角度的变化速度。</p><p>我们现在有一个登月器的例子，希望登月器可以平稳的落在我们希望的地方。其参数中，$x$表示横坐标位置，$y$表示高度，$\dot{x}$表示横坐标方向上的速度，$\dot{y}$表示下落速度，$\theta$表示倾斜的角度，$\dot{\theta}$表示角度的变化速度，$l$和$r$分别表示左腿和右腿是否接触到地面，这两个参数只能取$0$或$1$。</p><p>如果登月器成功抵达目标位置，将会得到$100\sim140$的奖励，这取决于与目标位置的相差距离；如果登月器坠毁将得到$-100$的奖励；成功软着陆可以得到$+100$的奖励；左腿和右腿着陆接触到地面可以各得到$+10$的奖励；使用一次主引擎（让登月器升高）得到$-0.3$的奖励；使用一次左或者右引擎将会得到$-0.03$的奖励。</p><p>因此我们需要求得一个策略$a=\pi(s)$，以此找到一个最高的回报，对于该问题，可以将$\gamma$值设置为$0.985$。</p><h2 id="学习状态值函数"><a href="#学习状态值函数" class="headerlink" title="学习状态值函数"></a>学习状态值函数</h2><p>对于登月器的例子，关键思想是训练一个神经网络来计算或近似计算相应的$Q(s,a)$，以此来选择好的动作。</p><p>对于任意一个状态$s$，我们可以计算如下所示的四个$Q$值：<br>$$<br>Q(s,nothing),Q(s,left),Q(s,main),Q(r,right)<br>$$<br>每一次选择动作的时候，只需要选择最大的$Q(s,a)$即可。因此，我们可以搭建一个神经网络模型：</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%99%BB%E6%9C%88%E5%99%A8%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B.jpg" alt="登月器神经网络模型"></p><p>其中输入层一共有$12$个值，前$8$个分别是登月器现在的信息参数，后$4$个值时通过独热编码来编码的动作选择，这$4$个值只有$1$个$1$和$3$个$0$。例如登月器选择什么都不做的话，那么就会编码为$1,0,0,0$；如果选择启动主引擎，那么所对应的编码就是$0,0,1,0$。</p><p>我们将状态和选择的动作作为输入层的输入，神经网络会返回一个对应的价值。当登月器处于任意一个状态时，将该状态的信息和四个动作分别输入，选择返回值最大的那种动作执行即可。</p><p>让我们来看一下完整的算法是什么样子的：</p><ol><li>首先，我们将搭建神经网络模型，然后随机初始化神经网络的所有参数。最初我们不知道$Q(s,a)$的值应该是多少，所以我们可以完全随机生成一个，我们假设这个神经网络是我们对$Q$函数的初始随机猜测。</li><li>重复下述步骤：<ol><li>对登月器采取行动，得到元组$(s,a,R(s),s\prime)$。</li><li>存储最新的$10000$个元组。（这种只存储最近示例的技术在强化学习算法中称为重放缓冲区）</li><li>查看我们保存的这$10000$个最近的元组，并创建一个包含$10000$个示例的训练集。其中$x=(s,a)$，$y=R(s)+\gamma max_{a\prime}Q(s\prime,a\prime)$。</li><li>训练$Q_{new}$，其中$Q_{new}(s,a)\approx y$，现在这个神经网络估计$Q$函数的能力会稍微提升一些。</li><li>将$Q$设置为我们刚刚学习的神经网络。</li></ol></li></ol><h2 id="算法优化"><a href="#算法优化" class="headerlink" title="算法优化"></a>算法优化</h2><h3 id="改进神经网络架构"><a href="#改进神经网络架构" class="headerlink" title="改进神经网络架构"></a>改进神经网络架构</h3><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%99%BB%E6%9C%88%E5%99%A8%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B.jpg" alt="登月器神经网络模型"></p><p>上图是我们在登月器中的网络架构，当我们处于某个状态时，都必须在神经网络中分别进行四次推理来计算对应的四个值，以便选择有着最大$Q$值的动作$a$。</p><p>很明显，这是一个非常低效率的做法，每次要计算一个状态和对应动作都需要推理四次。那么我们可以对上述的模型进行一下修改，输入层变为$8$个值，舍去了四种状态对应的动作，同时将输出层调整为$4$个，分别对应每种动作的$Q$值。</p><p><img src="/img/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%99%BB%E6%9C%88%E5%99%A8%E6%94%B9%E8%BF%9B%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%9E%B6%E6%9E%84.jpg" alt="登月器改进神经网络架构"></p><p>神经网络的工作是同时计算出我们处于状态$s$时所有四种可能动作的$Q$值，事实证明这样会更加有效，可以加快运算速度，更快地选择出最优动作。</p><h3 id="epsilon-贪婪策略"><a href="#epsilon-贪婪策略" class="headerlink" title="$\epsilon$-贪婪策略"></a>$\epsilon$-贪婪策略</h3><p>在登月器的例子中，即使还在学习如何近似计算出$Q(s,a)$，也需要让登月器采取一些行动，在学习过程中采取动作的最常见方法是$\epsilon-greedy$策略。</p><p>在我们处于某个状态时，往往不想随机地采取行动，因为那通常是一个糟糕的行动。对于状态$s$，我们第一种策略是选择$Q(s,a)$值最大的那种动作$a$；还有一种方法是大概率选择$Q(s,a)$值最大的那种动作$a$，小概率选择一个随机的动作$a$。</p><p>对于第二种策略，在我们随机初始化的时候，可能会让某些动作对应的$Q$值非常非常低，导致模型永远不会选择这种动作，它也不知道采用这种方式是否会产生积极影响，默认只会产生消极影响。对于这种情况，我们可以有很小的概率去尝试不同的操作，这样神经网络就可以克服先入为主的概念，即便随机选择可能会带来不好的结果，但是也可能会带来积极影响，让神经网络调整这方面的参数。</p><p>这种随机选择动作的想法有时被称为探索步骤，因为我们要尝试的步骤不一定是最好的想法，但是我们只是在某些情况下尝试一些新的动作，在以前没有那么多经验的情况下探索和了解关于更多行动的信息。</p><p>选择当前已经学习到的最优情况的做法被称之为贪婪，随机进行探索的做法称之为探索，使用$\epsilon$表示。如果我们有$95%$的概率进行贪婪，$5%$的概率进行探索，那么就可以表示为：<br>$$<br>\epsilon-greedy\ polocy\ (\epsilon=0.05)<br>$$<br>为了能够更好地训练模型，我们可以在训练初期选择一个较大的$\epsilon$值，随着训练的进行，逐渐减少该值。通过这种方式，随着时间的推移，选择随机动作的概率也就越来越小，选择已经学习到的动作的概率会越来越大，有助于模型训练。</p><h3 id="小批量梯度下降"><a href="#小批量梯度下降" class="headerlink" title="小批量梯度下降"></a>小批量梯度下降</h3><p>在进行梯度下降的时候，如果我们的数据集很大，那么求相应的导数和平均值时会消耗大量的时间。为了解决这一问题，我们可以将数据集分成若干个小批量的数据集，每次使用其中一个小批量的数据集进行梯度下降，这样可以大大加快计算速度。</p><p>小批量梯度下降会趋向于全局最小值，相对于使用所有数据来进行梯度下降，这种方式虽然也会趋向于全局最小值，但是下降的方向没有前者稳定，不过这种方法的计算成本要低很多，所以对于非常大的数据集而言还是非常实用的。</p><p>在强化学习算法中，模型训练的时候，会在重放缓冲区中存储$10000$个最近的元组，如果使用小批量梯度下降的话，我们不会每次训练都使用所有的元组，而是会使用这些示例的子集进行模型训练。使用该方法会让模型训练的每次迭代变得更加嘈杂，但是运算速度更快，总体上会加速这种强化学习算法。</p><h3 id="软更新"><a href="#软更新" class="headerlink" title="软更新"></a>软更新</h3><p>训练强化学习的最后一个步骤是用新的模型替换掉旧的模型，这会使得模型的变化非常突然，可能新的模型是一个不太好的模型，也可能比之前的模型差一点点，然后就会用一个可能更糟糕的神经网络覆盖掉原本的$Q$函数，而软更新方法有助于防止新的$Q$函数变得更糟。</p><p>神经网络$Q$中有一些参数，例如$W$和$B$，当在训练新的神经网络时，会得到一些参数$W_{new}$和$B_{new}$，对于没有使用软更新的做法，实际上就是在做以下步骤：<br>$$<br>W=W_{new}<br>$$</p><p>$$<br>B=B_{new}<br>$$</p><p>对于软更新，我们所使用的方法是如下公式：<br>$$<br>W=0.01\cdot W_{new}+0.99\cdot W<br>$$</p><p>$$<br>B=0.01\cdot B_{new}+0.99\cdot B<br>$$</p><p>每当我们训练一个新的神经网络参数时，都只会接受一点点新值。对于上述式子中的$0.01$和$0.99$，这些是可以设置的超参数，用于控制变化程度，并且这两个数字相加的结果一定要为$1$。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Python </tag>
            
            <tag> 机器学习 </tag>
            
            <tag> 人工智能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库基础</title>
      <link href="/archives/eb03cdad.html"/>
      <url>/archives/eb03cdad.html</url>
      
        <content type="html"><![CDATA[<hr><h1 id="SQL语言基础"><a href="#SQL语言基础" class="headerlink" title="SQL语言基础"></a>SQL语言基础</h1><h2 id="SQL的概述"><a href="#SQL的概述" class="headerlink" title="SQL的概述"></a>SQL的概述</h2><p><code>SQL</code>全称：<code>Structured Query Language</code>，是结构化查询语言，用于<strong>访问和处理数据库的标准的计算机语言</strong>。</p><h2 id="SQL的特点"><a href="#SQL的特点" class="headerlink" title="SQL的特点"></a>SQL的特点</h2><ul><li>具有综合统一性，不同数据库的支持的<code>SQL</code>稍有不同。</li><li>非过程化语言（不需要关系内部的操作过程）。</li><li>语言简洁，用户容易接受。</li><li>以一种语法结构提供两种使用方式（和其他语言可以混用）。</li></ul><h2 id="语法特点"><a href="#语法特点" class="headerlink" title="语法特点"></a>语法特点</h2><ul><li><code>SQL</code>对关键字的大小写不敏感。</li><li><code>SQL</code>语句可以以单行或者多行书写，以分号结束。</li></ul><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 单行注释，-- 后面一定要加一个空格</span></span><br><span class="line"># 单行注释，# 后面可加可不加空格</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp;  <span class="comment">-- 这里是注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h1 id="数据库系统简介"><a href="#数据库系统简介" class="headerlink" title="数据库系统简介"></a>数据库系统简介</h1><h2 id="SQL和数据库管理系统的关系"><a href="#SQL和数据库管理系统的关系" class="headerlink" title="SQL和数据库管理系统的关系"></a>SQL和数据库管理系统的关系</h2><ul><li><code>SQL</code>是一种用于操作数据库的语言，<code>SQL</code>适用于所有关系型数据库。</li><li><code>MySQL</code>、<code>Oracle</code>、<code>SQLServer</code>是一个数据库软件，这些数据库软件支持标准<code>SQL</code>，也就是通过<code>SQL</code>可以使用这些软件，不过每一个数据库系统会在标准<code>SQL</code>的基础上扩展自己的<code>SQL</code>语法。</li><li>大部分的<code>NoSQL</code>数据库有自己的操作语言，对<code>SQL</code>支持的并不好。</li></ul><h2 id="关系型数据库管理系统组成"><a href="#关系型数据库管理系统组成" class="headerlink" title="关系型数据库管理系统组成"></a>关系型数据库管理系统组成</h2><p>数据库管理系统（<code>DBMS</code>）主要由数据库和表组成，一个系统可以有很多数据库，每个数据库可以有很多表。</p><h1 id="MySQL简介"><a href="#MySQL简介" class="headerlink" title="MySQL简介"></a>MySQL简介</h1><h2 id="MySQL的特点"><a href="#MySQL的特点" class="headerlink" title="MySQL的特点"></a>MySQL的特点</h2><ol><li>MySQL数据库是使用<code>C/C++</code>语言编写的，以保证源码的可移植性。</li><li>支持多个操作系统。</li><li>支持多线程，可以充分利用CPU资源。</li><li>为多种编程语言提供<code>API</code>，包括<code>C</code>语言，<code>Java</code>，<code>PHP</code>，<code>Python</code>语言等。</li><li><code>MySQL</code>优化了算法，有效提高了查询速度。</li><li><code>MySQL</code>开放了源代码且无版权制约，自主性强，使用成本低。</li><li><code>MySQL</code>历史悠久、社区及用户非常活跃，遇到问题，可以很快获取到帮助。</li></ol><h1 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h1><h2 id="DDL解释"><a href="#DDL解释" class="headerlink" title="DDL解释"></a>DDL解释</h2><p><code>DDL</code>(<code>Data Definition Language</code>)，数据定义语言，该语言部分包括以下内容。</p><ul><li>对数据库的常用操作</li><li>对表结构的常用操作</li><li>修改表结构</li></ul><h2 id="对数据库的操作"><a href="#对数据库的操作" class="headerlink" title="对数据库的操作"></a>对数据库的操作</h2><h3 id="查询所有的数据库"><a href="#查询所有的数据库" class="headerlink" title="查询所有的数据库"></a>查询所有的数据库</h3><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> DATABASES;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E6%9F%A5%E8%AF%A2%E6%89%80%E6%9C%89%E6%95%B0%E6%8D%AE%E5%BA%93.jpg" alt="查询所有数据库"></p><h3 id="查询当前数据库"><a href="#查询当前数据库" class="headerlink" title="查询当前数据库"></a>查询当前数据库</h3><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DATABASE();</span><br></pre></td></tr></table></figure><p>例：使用数据库<code>mydb</code>，查询当前所在数据库。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">SELECT</span> DATABASE();</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E6%9F%A5%E8%AF%A2%E5%BD%93%E5%89%8D%E6%95%B0%E6%8D%AE%E5%BA%93.jpg" alt="查询当前数据库"></p><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE [ IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> ] 数据库名字 [ <span class="keyword">DEFAULT</span> CHARSET 字符集 ] [ <span class="keyword">COLLATE</span> 排序规则 ];</span><br></pre></td></tr></table></figure><p><code>if not exists</code>将会判断是否存在该数据库，如果存在，则会取消创建，这个可加可不加，如果不加的话出现重复创建的情况会报错。</p><p>例：创建数据库<code>mydb</code>，并输出所有数据库。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE mydb;</span><br><span class="line"><span class="keyword">SHOW</span> DATABASES;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93.jpg" alt="创建数据库"></p><p>不使用if not exists创建重复数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE mydb;</span><br><span class="line"><span class="keyword">SHOW</span> DATABASES;</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE mydb</span><br><span class="line">&gt; 1007 - Can&#x27;t create database &#x27;mydb&#x27;; database exists</span><br><span class="line">&gt; 时间: 0.002s</span><br></pre></td></tr></table></figure><p>使用if not exists创建重复数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE</span><br><span class="line">IF</span><br><span class="line"><span class="keyword">NOT</span> <span class="keyword">EXISTS</span> mydb;</span><br><span class="line"><span class="keyword">SHOW</span> DATABASES;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93.jpg" alt="使用if not exists创建重复数据库"></p><h3 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h3><p>选择使用哪一个数据库，从而对其进行操作。</p><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USE 数据库名;</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">USE mydb</span><br><span class="line">&gt; OK</span><br><span class="line">&gt; 时间: 0s</span><br></pre></td></tr></table></figure><h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE [ IF <span class="keyword">EXISTS</span> ] 数据库名;</span><br></pre></td></tr></table></figure><p><code>if exists</code>将会判断是否存在该数据库，如果存在，则会删除，不存在则取消执行。这个可加可不加，如果不加的话出现重复删除的情况会报错。</p><p>例：删除数据库<code>mydb</code>，并输出所有数据库。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE mydb;</span><br><span class="line"><span class="keyword">SHOW</span> DATABASES;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E6%9F%A5%E8%AF%A2%E6%89%80%E6%9C%89%E6%95%B0%E6%8D%AE%E5%BA%93.jpg" alt="删除数据库"></p><p>不使用if exists删除不存在数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE mydb;</span><br><span class="line"><span class="keyword">SHOW</span> DATABASES;</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE mydb;</span><br><span class="line">&gt; 1008 - Can&#x27;t drop database &#x27;mydb&#x27;; database doesn&#x27;t exist</span><br><span class="line">&gt; 时间: 0s</span><br></pre></td></tr></table></figure><p>使用if exists删除不存在数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE</span><br><span class="line">IF</span><br><span class="line"><span class="keyword">EXISTS</span> mydb;</span><br><span class="line"><span class="keyword">SHOW</span> DATABASES;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E6%9F%A5%E8%AF%A2%E6%89%80%E6%9C%89%E6%95%B0%E6%8D%AE%E5%BA%93.jpg" alt="使用if exists删除不存在数据库"></p><h4 id="修改数据库编码"><a href="#修改数据库编码" class="headerlink" title="修改数据库编码"></a>修改数据库编码</h4><p>可以用来修改数据库的编码格式。</p><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> DATABASE 数据库名 <span class="type">CHARACTER</span> </span><br><span class="line"><span class="keyword">SET</span> utf8;</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ALTER DATABASE mydb CHARACTER </span><br><span class="line">SET utf8</span><br><span class="line">&gt; OK</span><br><span class="line">&gt; 时间: 0.003s</span><br></pre></td></tr></table></figure><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>数据类型是指在创建表的时候为表中字段指定数据类型，只有数据符合类型要求才能存储起来，使用数据类型的原则是：<strong>够用就行，尽量使用取值范围小的，而不用大的，这样可以节省更多存储空间。</strong></p><h3 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h3><table><thead><tr><th align="center">类型</th><th align="center">大小</th><th align="center">范围（有符号）</th><th align="center">范围（无符号）</th><th align="center">用途</th></tr></thead><tbody><tr><td align="center">TINYINT</td><td align="center">1byte</td><td align="center">(-128, 127)</td><td align="center">(0, 255)</td><td align="center">小整数值</td></tr><tr><td align="center">SMALLINT</td><td align="center">2bytes</td><td align="center">(-32768, 32767)</td><td align="center">(0, 65535)</td><td align="center">大整数值</td></tr><tr><td align="center">MEDIUMINT</td><td align="center">3bytes</td><td align="center">(-8388608, 8388607)</td><td align="center">(0, 16777215)</td><td align="center">大整数值</td></tr><tr><td align="center">INT或INTEGER</td><td align="center">4bytes</td><td align="center">(-2147483648, 2147483647)</td><td align="center">(0, 4294967295)</td><td align="center">大整数值</td></tr><tr><td align="center">BIGINT</td><td align="center">8bytes</td><td align="center">(-9223372036854775808, 9223372036854775807)</td><td align="center">(0, 18446744073709551615)</td><td align="center">极大整数值</td></tr><tr><td align="center">FLOAT</td><td align="center">4bytes</td><td align="center">(-3.402823466E+38, 3.402823466351E+38)</td><td align="center">(1.175494351E-38, 3.402823466E+38)</td><td align="center">单精度浮点数值</td></tr><tr><td align="center">DOUBLE</td><td align="center">8bytes</td><td align="center">(-1.7976931348623157E+308, 1.7976931348623157E+308)</td><td align="center">(2.2251738585072014E-308, 1.7976931348623157E+308)</td><td align="center">双精度浮点数值</td></tr><tr><td align="center">DECIMAL</td><td align="center"></td><td align="center">依赖于M和D的值</td><td align="center">依赖于M和D的值</td><td align="center">小数值</td></tr></tbody></table><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><table><thead><tr><th align="center">类型</th><th align="center">大小</th><th align="center">用途</th></tr></thead><tbody><tr><td align="center">CHAR</td><td align="center">0-255bytes</td><td align="center">定长字符串</td></tr><tr><td align="center">VARCHAR</td><td align="center">0-65535bytes</td><td align="center">变长字符串</td></tr><tr><td align="center">TINYBLOB</td><td align="center">0-255bytes</td><td align="center">不超过255个字符的二进制字符串</td></tr><tr><td align="center">TINYTEXT</td><td align="center">0-255bytes</td><td align="center">短文本字符串</td></tr><tr><td align="center">BLOB</td><td align="center">0-65535bytes</td><td align="center">二进制形式的长文本数据</td></tr><tr><td align="center">TEXT</td><td align="center">0-65535bytes</td><td align="center">长文本数据</td></tr><tr><td align="center">MEDIUMBLOB</td><td align="center">0-16777215bytes</td><td align="center">二进制形式的中等长度文本数据</td></tr><tr><td align="center">MEDIUMTEXT</td><td align="center">0-16777215bytes</td><td align="center">中等长度文本数据</td></tr><tr><td align="center">LONGBLOB</td><td align="center">0-4294967295bytes</td><td align="center">二进制形式的极大文本数据</td></tr><tr><td align="center">LONGTEXT</td><td align="center">0-4294967295bytes</td><td align="center">极大文本数据</td></tr></tbody></table><h3 id="日期类型"><a href="#日期类型" class="headerlink" title="日期类型"></a>日期类型</h3><table><thead><tr><th align="center">类型</th><th align="center">大小(bytes)</th><th align="center">范围</th><th align="center">格式</th><th align="center">用途</th></tr></thead><tbody><tr><td align="center">DATE</td><td align="center">3</td><td align="center">1000-01-01/9999-12-31</td><td align="center">YYYY-MM-DD</td><td align="center">日期值</td></tr><tr><td align="center">TIME</td><td align="center">3</td><td align="center">‘-838:59:59’/‘838:59:59’</td><td align="center">HH:MM:SS</td><td align="center">时间值或持续时间</td></tr><tr><td align="center">YEAR</td><td align="center">1</td><td align="center">1901/2155</td><td align="center">YYYY</td><td align="center">年份值</td></tr><tr><td align="center">DATETIME</td><td align="center">8</td><td align="center">1000-01-01 00:00:00/9999-12-31 23:59:59</td><td align="center">YYYY-MM-DD HH:MM:SS</td><td align="center">混合日期和时间值</td></tr><tr><td align="center">TIMESTAMP</td><td align="center">4</td><td align="center">1970-01-01 00:00:00/2038</td><td align="center">YYYYMMDD HHMMSS</td><td align="center">混合日期和时间值，时间戳</td></tr></tbody></table><h2 id="对表结构的常用操作"><a href="#对表结构的常用操作" class="headerlink" title="对表结构的常用操作"></a>对表结构的常用操作</h2><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [ IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> ] 表名 (</span><br><span class="line">字段名 <span class="number">1</span> 类型 [(宽度)] [约束条件] [ COMMENT <span class="string">&#x27;字段说明&#x27;</span> ],</span><br><span class="line">字段名 <span class="number">2</span> 类型 [(宽度)] [约束条件] [ COMMENT <span class="string">&#x27;字段说明&#x27;</span> ],</span><br><span class="line">字段名 <span class="number">3</span> 类型 [(宽度)] [约束条件] [ COMMENT <span class="string">&#x27;字段说明&#x27;</span> ] </span><br><span class="line">)[ COMMENT 表注释 ];</span><br></pre></td></tr></table></figure><p>创建表是构建一张空表，指定这个表的名字，这个表有几列，每一列叫什么名字，以及每一列存储的数据类型。</p><p>例：在数据库<code>mydb</code>中创建一个学生信息表<code>student</code>，存储学生的基本信息。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span></span><br><span class="line">IF</span><br><span class="line"><span class="keyword">NOT</span> <span class="keyword">EXISTS</span> student (</span><br><span class="line">name <span class="type">VARCHAR</span> ( <span class="number">20</span> ),</span><br><span class="line">age <span class="type">INT</span> ( <span class="number">20</span> ),</span><br><span class="line">birth <span class="type">date</span>,</span><br><span class="line">id <span class="type">VARCHAR</span> ( <span class="number">20</span> ),</span><br><span class="line">address <span class="type">VARCHAR</span> ( <span class="number">20</span> ),</span><br><span class="line">sex <span class="type">VARCHAR</span> ( <span class="number">20</span> ) </span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E5%88%9B%E5%BB%BA%E8%A1%A8.jpg" alt="创建表"></p><h3 id="查看表"><a href="#查看表" class="headerlink" title="查看表"></a>查看表</h3><p>查看当前数据库的所有表名称。</p><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> TABLES;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E6%9F%A5%E7%9C%8B%E8%A1%A8.jpg" alt="查看表"></p><h3 id="查看创建语句"><a href="#查看创建语句" class="headerlink" title="查看创建语句"></a>查看创建语句</h3><p>查看指定表的创建语句。</p><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名;</span><br></pre></td></tr></table></figure><p>例：查看表<code>student</code>的创建语句。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student;</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `student` (</span><br><span class="line">  `name` varchar(20) DEFAULT NULL,</span><br><span class="line">  `age` int DEFAULT NULL,</span><br><span class="line">  `birth` date DEFAULT NULL,</span><br><span class="line">  `id` varchar(20) DEFAULT NULL,</span><br><span class="line">  `address` varchar(20) DEFAULT NULL,</span><br><span class="line">  `sex` varchar(20) DEFAULT NULL</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3</span><br></pre></td></tr></table></figure><h3 id="查看表结构"><a href="#查看表结构" class="headerlink" title="查看表结构"></a>查看表结构</h3><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DESC</span> 表名;</span><br></pre></td></tr></table></figure><p>例：查看表<code>student</code>的结构。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DESC</span> student;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E6%9F%A5%E7%9C%8B%E8%A1%A8%E7%BB%93%E6%9E%84.jpg" alt="查看表结构"></p><h3 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h3><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> 表名;</span><br></pre></td></tr></table></figure><p>例：删除表<code>student</code>的结构。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> student;</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE student</span><br><span class="line">&gt; OK</span><br><span class="line">&gt; 时间: 0.016s</span><br></pre></td></tr></table></figure><h3 id="修改表结构"><a href="#修改表结构" class="headerlink" title="修改表结构"></a>修改表结构</h3><h4 id="添加列"><a href="#添加列" class="headerlink" title="添加列"></a>添加列</h4><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> 字段名 类型 (长度) [ COMMENT 注释 ] [约束];</span><br></pre></td></tr></table></figure><p>例：为<code>student</code>表添加一个新列<code>class</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student <span class="keyword">ADD</span> class <span class="type">VARCHAR</span> ( <span class="number">20</span> );</span><br><span class="line"><span class="keyword">DESC</span> student;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E6%B7%BB%E5%8A%A0%E5%88%97.jpg" alt="添加列"></p><h4 id="修改数据类型"><a href="#修改数据类型" class="headerlink" title="修改数据类型"></a>修改数据类型</h4><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 MODIFY 字段名 新数据类型 (长度);</span><br></pre></td></tr></table></figure><p>例：将<code>student</code>表中的<code>id</code>的数据类型修改为<code>INT</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student MODIFY id <span class="type">INT</span>;</span><br><span class="line"><span class="keyword">DESC</span> student;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E4%BF%AE%E6%94%B9%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.jpg" alt="修改数据类型"></p><h4 id="修改字段名和字段类型"><a href="#修改字段名和字段类型" class="headerlink" title="修改字段名和字段类型"></a>修改字段名和字段类型</h4><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 CHANGE 旧字段名 新字段名 类型 (长度) [ COMMENT 注释 ] [约束];</span><br></pre></td></tr></table></figure><p>例：将<code>student</code>表中的<code>class</code>修改成<code>score</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student CHANGE class score <span class="keyword">DOUBLE</span>;</span><br><span class="line"><span class="keyword">DESC</span> student;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E4%BF%AE%E6%94%B9%E5%88%97.jpg" alt="修改列"></p><h4 id="删除列"><a href="#删除列" class="headerlink" title="删除列"></a>删除列</h4><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> 列名;</span><br></pre></td></tr></table></figure><p>例：删除<code>student</code>表中的<code>score</code>列。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student <span class="keyword">DROP</span> score;</span><br><span class="line"><span class="keyword">DESC</span> student;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E5%88%A0%E9%99%A4%E5%88%97.jpg" alt="删除列"></p><h4 id="修改表名"><a href="#修改表名" class="headerlink" title="修改表名"></a>修改表名</h4><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RENAME <span class="keyword">TABLE</span> 表名 <span class="keyword">TO</span> 新表名</span><br></pre></td></tr></table></figure><p>例：将<code>student</code>表名改为<code>stu</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line">RENAME <span class="keyword">TABLE</span> student <span class="keyword">TO</span> stu;</span><br><span class="line"><span class="keyword">SHOW</span> TABLES;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E4%BF%AE%E6%94%B9%E8%A1%A8%E5%90%8D.jpg" alt="修改表名"></p><h1 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h1><h2 id="DML解释"><a href="#DML解释" class="headerlink" title="DML解释"></a>DML解释</h2><p><code>DML</code>是指数据操作语言，英文全称是<code>Data Manipulation Language</code>，用来对数据库中表的数据记录进行更新。</p><p>关键字：</p><ul><li>插入<code>INSERT</code></li><li>删除<code>DELETE</code></li><li>更新<code>UPDATE</code></li></ul><h2 id="数据插入"><a href="#数据插入" class="headerlink" title="数据插入"></a>数据插入</h2><p>注意点：</p><ul><li>插入数据时，指定的字段顺序需要与值的顺序是一一对应的。</li><li>字符串和日期型数据应该包含在引号中。</li><li>插入的数据大小，应该在字段的规定范围内。</li></ul><h3 id="给指定字段添加数据"><a href="#给指定字段添加数据" class="headerlink" title="给指定字段添加数据"></a>给指定字段添加数据</h3><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 (字段名 <span class="number">1</span>, 字段名 <span class="number">2</span>,...)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(值 <span class="number">1</span>, 值 <span class="number">2</span>,...);</span><br></pre></td></tr></table></figure><p>例：向表<code>stu</code>中添加一条信息。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> stu ( name, age, birth, id, address, sex )</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">( <span class="string">&#x27;Bigglesworth&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;2002-09-05&#x27;</span>, <span class="string">&#x27;203428040119&#x27;</span>, <span class="string">&#x27;大连&#x27;</span>, <span class="string">&#x27;男&#x27;</span> );</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E6%B7%BB%E5%8A%A0%E6%95%B0%E6%8D%AE.jpg" alt="指定字段添加数据"></p><h3 id="给全部字段添加数据"><a href="#给全部字段添加数据" class="headerlink" title="给全部字段添加数据"></a>给全部字段添加数据</h3><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(值 <span class="number">1</span>, 值 <span class="number">2</span>,...);</span><br></pre></td></tr></table></figure><p>例：向表<code>stu</code>中添加一条信息。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> stu</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">( <span class="string">&#x27;Bigglesworth&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;2002-09-05&#x27;</span>, <span class="string">&#x27;203428040119&#x27;</span>, <span class="string">&#x27;大连&#x27;</span>, <span class="string">&#x27;男&#x27;</span> );</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E6%B7%BB%E5%8A%A0%E6%95%B0%E6%8D%AE.jpg" alt="全部字段添加数据"></p><h3 id="批量添加数据"><a href="#批量添加数据" class="headerlink" title="批量添加数据"></a>批量添加数据</h3><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 (字段名 <span class="number">1</span>, 字段名 <span class="number">2</span>,...)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(值 <span class="number">1</span>, 值 <span class="number">2</span>,...),</span><br><span class="line">(值 <span class="number">1</span>, 值 <span class="number">2</span>,...),</span><br><span class="line">(值 <span class="number">1</span>, 值 <span class="number">2</span>,...);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(值 <span class="number">1</span>, 值 <span class="number">2</span>,...),</span><br><span class="line">(值 <span class="number">1</span>, 值 <span class="number">2</span>,...),</span><br><span class="line">(值 <span class="number">1</span>, 值 <span class="number">2</span>,...);</span><br></pre></td></tr></table></figure><p>例：向<code>stu</code>表添加多条数据。</p><p>例：向表<code>stu</code>中添加一条信息。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> stu</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">( <span class="string">&#x27;Bigglesworth&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;2002-09-05&#x27;</span>, <span class="string">&#x27;203428040119&#x27;</span>, <span class="string">&#x27;大连&#x27;</span>, <span class="string">&#x27;男&#x27;</span> ),</span><br><span class="line">( <span class="string">&#x27;Areskey&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;2004-01-23&#x27;</span>, <span class="string">&#x27;213428010102&#x27;</span>, <span class="string">&#x27;朝阳&#x27;</span>, <span class="string">&#x27;女&#x27;</span> );</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E6%89%B9%E9%87%8F%E6%B7%BB%E5%8A%A0%E6%95%B0%E6%8D%AE.jpg" alt="批量添加数据"></p><h2 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h2><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> 表名 </span><br><span class="line"><span class="keyword">SET</span> 字段名 <span class="operator">=</span> 值 <span class="number">1</span>,字段名 <span class="operator">=</span> 值 <span class="number">2</span>,...[ <span class="keyword">WHERE</span> 条件 ];</span><br></pre></td></tr></table></figure><p>注：修改语句的条件可以有，也可以没有，如果没有条件，则会修改整张表的所有数据。</p><p>例：将<code>stu</code>表中<code>id</code>为<code>203428040119</code>的人的姓名更改为<code>比格沃斯</code>，住址更改为<code>旅顺</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">UPDATE</span> stu </span><br><span class="line"><span class="keyword">SET</span> name <span class="operator">=</span> <span class="string">&#x27;比格沃斯&#x27;</span>,</span><br><span class="line">address <span class="operator">=</span> <span class="string">&#x27;旅顺&#x27;</span> </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">id <span class="operator">=</span> <span class="string">&#x27;203428040119&#x27;</span>;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E6%9B%B4%E6%96%B0%E8%A1%A8.jpg" alt="更新表"></p><p>例：将<code>stu</code>表中所有人的<code>age</code>改为<code>19</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">UPDATE</span> stu </span><br><span class="line"><span class="keyword">SET</span> age <span class="operator">=</span> <span class="number">19</span>;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E6%9B%B4%E6%96%B0%E8%A1%A8%E4%B8%AD%E6%89%80%E6%9C%89%E6%95%B0%E6%8D%AE.jpg" alt="更新表中所有数据"></p><h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">表名 [ <span class="keyword">WHERE</span> 条件 ];</span><br></pre></td></tr></table></figure><p>注：<code>DELETE</code>语句的条件可以有，也可以没有，如果没有条件，则会删除整张表的所有数据。<code>DELETE</code>语句不能删除某一个字段的值（可以使用<code>UPDATE</code>）。</p><p>例：将<code>stu</code>表中<code>id</code>为<code>203428040119</code>的人删除。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">DELETE</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">stu </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">id <span class="operator">=</span> <span class="string">&#x27;203428040119&#x27;</span>;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE.jpg" alt="删除数据"></p><p>例：将<code>stu</code>表中的所有数据删除。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">DELETE</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">stu;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E5%88%A0%E9%99%A4%E6%89%80%E6%9C%89%E6%95%B0%E6%8D%AE.jpg" alt="删除所有数据"></p><h1 id="DQL"><a href="#DQL" class="headerlink" title="DQL"></a>DQL</h1><h2 id="DQL解释"><a href="#DQL解释" class="headerlink" title="DQL解释"></a>DQL解释</h2><p><code>DQL</code>英文全称是<code>Data Query Language</code>（数据查询语言），数据查询语言，用来查询数据库中表的记录。</p><p>关键字：</p><ul><li>查询：<code>SELECT</code></li></ul><h2 id="基本查询"><a href="#基本查询" class="headerlink" title="基本查询"></a>基本查询</h2><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">字段列表 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">表名列表 </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">条件列表 </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">分组字段列表 </span><br><span class="line"><span class="keyword">HAVING</span></span><br><span class="line">分组后条件列表 </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">排序字段列表 </span><br><span class="line">LIMIT 分页参数</span><br></pre></td></tr></table></figure><p>首先需要准备一个表用于接下来的数据查询，这里创建了一个员工表<code>emp</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span></span><br><span class="line">IF</span><br><span class="line"><span class="keyword">NOT</span> <span class="keyword">EXISTS</span> emp (</span><br><span class="line">id <span class="type">INT</span> COMMENT <span class="string">&#x27;编号&#x27;</span>,</span><br><span class="line">workno <span class="type">VARCHAR</span> ( <span class="number">20</span> ) COMMENT <span class="string">&#x27;工号&#x27;</span>,</span><br><span class="line">name <span class="type">VARCHAR</span> ( <span class="number">20</span> ) COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">gender <span class="type">VARCHAR</span> ( <span class="number">1</span> ) COMMENT <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">age <span class="type">INT</span> COMMENT <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">address <span class="type">VARCHAR</span> ( <span class="number">20</span> ) COMMENT <span class="string">&#x27;工作地址&#x27;</span>,</span><br><span class="line">entrydate <span class="type">date</span> COMMENT <span class="string">&#x27;入职时间&#x27;</span> </span><br><span class="line">) COMMENT <span class="string">&#x27;员工表&#x27;</span>;</span><br></pre></td></tr></table></figure><p>向该表中导入数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp ( id, workno, name, gender, age, address, entrydate )</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">( <span class="number">1</span>, <span class="string">&#x27;001&#x27;</span>, <span class="string">&#x27;比格沃斯&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;2000-01-01&#x27;</span> ),</span><br><span class="line">( <span class="number">2</span>, <span class="string">&#x27;002&#x27;</span>, <span class="string">&#x27;阿瑞斯&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;2005-09-01&#x27;</span> ),</span><br><span class="line">( <span class="number">3</span>, <span class="string">&#x27;003&#x27;</span>, <span class="string">&#x27;Bigglesworth&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">38</span>, <span class="string">&#x27;上海&#x27;</span>, <span class="string">&#x27;2005-08-01&#x27;</span> ),</span><br><span class="line">( <span class="number">4</span>, <span class="string">&#x27;004&#x27;</span>, <span class="string">&#x27;Areskey&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;2008-12-01&#x27;</span> ),</span><br><span class="line">( <span class="number">5</span>, <span class="string">&#x27;005&#x27;</span>, <span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">16</span>, <span class="string">&#x27;上海&#x27;</span>, <span class="string">&#x27;2007-07-01&#x27;</span> ),</span><br><span class="line">( <span class="number">6</span>, <span class="string">&#x27;006&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">28</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;2006-01-01&#x27;</span> ),</span><br><span class="line">( <span class="number">7</span>, <span class="string">&#x27;007&#x27;</span>, <span class="string">&#x27;王五&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">40</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;2005-05-01&#x27;</span> ),</span><br><span class="line">( <span class="number">8</span>, <span class="string">&#x27;008&#x27;</span>, <span class="string">&#x27;赵六&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">38</span>, <span class="string">&#x27;天津&#x27;</span>, <span class="string">&#x27;2015-05-01&#x27;</span> ),</span><br><span class="line">( <span class="number">9</span>, <span class="string">&#x27;009&#x27;</span>, <span class="string">&#x27;钱七&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">45</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;2010-04-01&#x27;</span> ),</span><br><span class="line">( <span class="number">10</span>, <span class="string">&#x27;010&#x27;</span>, <span class="string">&#x27;孙八&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">53</span>, <span class="string">&#x27;上海&#x27;</span>, <span class="string">&#x27;2011-01-01&#x27;</span> ),</span><br><span class="line">( <span class="number">11</span>, <span class="string">&#x27;011&#x27;</span>, <span class="string">&#x27;周九&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">55</span>, <span class="string">&#x27;江苏&#x27;</span>, <span class="string">&#x27;2015-05-01&#x27;</span> ),</span><br><span class="line">( <span class="number">12</span>, <span class="string">&#x27;012&#x27;</span>, <span class="string">&#x27;王十&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">32</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;2004-02-01&#x27;</span> ),</span><br><span class="line">( <span class="number">13</span>, <span class="string">&#x27;013&#x27;</span>, <span class="string">&#x27;陈一&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">88</span>, <span class="string">&#x27;江苏&#x27;</span>, <span class="string">&#x27;2020-11-01&#x27;</span> ),</span><br><span class="line">( <span class="number">14</span>, <span class="string">&#x27;014&#x27;</span>, <span class="string">&#x27;楚二&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">65</span>, <span class="string">&#x27;西安&#x27;</span>, <span class="string">&#x27;2019-05-01&#x27;</span> ),</span><br><span class="line">( <span class="number">15</span>, <span class="string">&#x27;015&#x27;</span>, <span class="string">&#x27;何零&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">70</span>, <span class="string">&#x27;西安&#x27;</span>, <span class="string">&#x27;2018-04-01&#x27;</span> ),</span><br><span class="line">( <span class="number">16</span>, <span class="string">&#x27;016&#x27;</span>, <span class="string">&#x27;伍六七&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="keyword">NULL</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;2012-06-01&#x27;</span> );</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%87%86%E5%A4%87.jpg" alt="数据准备"></p><h3 id="查询多个字段"><a href="#查询多个字段" class="headerlink" title="查询多个字段"></a>查询多个字段</h3><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">字段 <span class="number">1</span>,</span><br><span class="line">字段 <span class="number">2</span>,</span><br><span class="line">字段 <span class="number">3.</span>..</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">表名;</span><br></pre></td></tr></table></figure><p>例：查询<code>emp</code>表中的字段<code>name</code>，<code>workno</code>，<code>age</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">name,</span><br><span class="line">workno,</span><br><span class="line">age </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">emp;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E6%9F%A5%E8%AF%A2%E5%A4%9A%E4%B8%AA%E5%AD%97%E6%AE%B5.jpg" alt="查询多个字段"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">表名;</span><br></pre></td></tr></table></figure><p>例：查询<code>emp</code>表中的所有字段。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">emp;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E6%9F%A5%E8%AF%A2%E6%89%80%E6%9C%89%E5%AD%97%E6%AE%B5.jpg" alt="查询所有字段"></p><h3 id="设置别名"><a href="#设置别名" class="headerlink" title="设置别名"></a>设置别名</h3><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">字段 <span class="number">1</span> [ <span class="keyword">AS</span> 别名 <span class="number">1</span> ],</span><br><span class="line">字段 <span class="number">2</span> [ <span class="keyword">AS</span> 别名 <span class="number">2</span> ]...</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">表名;</span><br></pre></td></tr></table></figure><p>注：<code>AS</code>可以省略。</p><p>例：查询<code>emp</code>表中的<code>address</code>并取名为<code>工作地址</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">address <span class="keyword">AS</span> <span class="string">&#x27;工作地址&#x27;</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">emp;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E8%AE%BE%E7%BD%AE%E5%88%AB%E5%90%8D.jpg" alt="设置别名"></p><h3 id="去除重复记录"><a href="#去除重复记录" class="headerlink" title="去除重复记录"></a>去除重复记录</h3><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span></span><br><span class="line">字段列表 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">表名;</span><br></pre></td></tr></table></figure><p>例：查询<code>emp</code>表中的<code>address</code>并取名为<code>工作地址</code>，并去除重复。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span></span><br><span class="line">address <span class="keyword">AS</span> <span class="string">&#x27;工作地址&#x27;</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">emp;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E5%8E%BB%E9%99%A4%E9%87%8D%E5%A4%8D%E8%AE%B0%E5%BD%95.jpg" alt="去除重复记录"></p><h2 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h2><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><table><thead><tr><th align="center">比较运算符</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">&gt;</td><td align="center">大于</td></tr><tr><td align="center">&gt;=</td><td align="center">大于等于</td></tr><tr><td align="center">&lt;</td><td align="center">小于</td></tr><tr><td align="center">&lt;=</td><td align="center">小于等于</td></tr><tr><td align="center">=</td><td align="center">等于</td></tr><tr><td align="center">&lt;&gt;或!=</td><td align="center">不等于</td></tr><tr><td align="center">BETWEEN … AND …</td><td align="center">在某个范围之内（含最小、最大值）</td></tr><tr><td align="center">IN(…)</td><td align="center">在in之后的列表中的值，多选一</td></tr><tr><td align="center">LIKE 占位符</td><td align="center">模糊匹配（_匹配单个字符，%匹配任意字符）</td></tr><tr><td align="center">IS NULL</td><td align="center">是NULL</td></tr></tbody></table><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><table><thead><tr><th align="center">逻辑运算符</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">AND 或 &amp;&amp;</td><td align="center">并且（多个条件同时成立）</td></tr><tr><td align="center">OR 或 ||</td><td align="center">或者（多个条件任意一个成立）</td></tr><tr><td align="center">NOT 或 !</td><td align="center">非，不是</td></tr></tbody></table><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">字段列表 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">表名 </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">条件列表;</span><br></pre></td></tr></table></figure><p>例：查询<code>emp</code>表中所有年龄大于等于<code>20</code>且小于<code>30</code>的员工。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">emp </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">age <span class="operator">&gt;=</span> <span class="number">20</span> <span class="keyword">AND</span> age <span class="operator">&lt;</span> <span class="number">30</span>;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E6%9F%A5%E8%AF%A2%E5%91%98%E5%B7%A5%E5%B9%B4%E9%BE%84.jpg" alt="查询员工年龄"></p><p>例：查询<code>emp</code>表中所有年龄为<code>NULL</code>的员工。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">emp </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">age <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E6%9F%A5%E8%AF%A2%E5%B9%B4%E9%BE%84%E7%A9%BA%E5%80%BC.jpg" alt="查询年龄空值"></p><p>例：查询<code>emp</code>表中年龄等于<code>18</code>或<code>20</code>或<code>40</code>的员工信息。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">emp </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">age <span class="keyword">IN</span> ( <span class="number">18</span>, <span class="number">20</span>, <span class="number">40</span> );</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E6%9F%A5%E8%AF%A2%E5%A4%9A%E4%B8%AA%E5%B9%B4%E9%BE%84.jpg" alt="查询多个年龄"></p><p>例：查询<code>emp</code>表中姓名为两个字的员工信息。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">emp </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">NAME <span class="keyword">LIKE</span> <span class="string">&#x27;__&#x27;</span>;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E6%9F%A5%E8%AF%A2%E4%B8%A4%E4%B8%AA%E5%AD%97%E7%9A%84%E5%91%98%E5%B7%A5.jpg" alt="查询两个字的员工"></p><h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>将一列数据作为一个整体，进行纵向计算。</p><h3 id="常见聚合函数"><a href="#常见聚合函数" class="headerlink" title="常见聚合函数"></a>常见聚合函数</h3><table><thead><tr><th align="center">函数</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">count</td><td align="center">统计数量</td></tr><tr><td align="center">max</td><td align="center">最大值</td></tr><tr><td align="center">min</td><td align="center">最小值</td></tr><tr><td align="center">avg</td><td align="center">平均值</td></tr><tr><td align="center">sum</td><td align="center">求和</td></tr></tbody></table><h3 id="聚合函数的使用"><a href="#聚合函数的使用" class="headerlink" title="聚合函数的使用"></a>聚合函数的使用</h3><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">聚合函数 (字段列表) </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">表名;</span><br></pre></td></tr></table></figure><p>注意点：<code>NULL</code>值不参与所有聚合函数运算。</p><h3 id="count函数"><a href="#count函数" class="headerlink" title="count函数"></a>count函数</h3><p>例：统计该企业员工数量。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="built_in">count</span>(<span class="operator">*</span>) </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">emp;</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">16</span><br></pre></td></tr></table></figure><p>例：统计该企业拥有年龄的员工数量。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="built_in">count</span>( age ) </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">emp;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">15</span><br></pre></td></tr></table></figure><h3 id="avg函数"><a href="#avg函数" class="headerlink" title="avg函数"></a>avg函数</h3><p>例：统计该企业员工的平均年龄。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="built_in">avg</span>(<span class="operator">*</span>) </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">emp;</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">41.6000</span><br></pre></td></tr></table></figure><h3 id="max函数"><a href="#max函数" class="headerlink" title="max函数"></a>max函数</h3><p>例：统计该企业员工的最大年龄。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="built_in">max</span>( age ) </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">emp;</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">88</span><br></pre></td></tr></table></figure><h3 id="min函数"><a href="#min函数" class="headerlink" title="min函数"></a>min函数</h3><p>例：统计该企业员工的最大年龄。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="built_in">min</span>( age ) </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">emp;</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">16</span><br></pre></td></tr></table></figure><h3 id="sum函数"><a href="#sum函数" class="headerlink" title="sum函数"></a>sum函数</h3><p>例：统计该企业<code>西安</code>地区员工的最大年龄之和。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="built_in">sum</span>( age ) </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">emp </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">address <span class="operator">=</span> <span class="string">&#x27;西安&#x27;</span></span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">135</span><br></pre></td></tr></table></figure><h2 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h2><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">字段列表 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">表名 [ <span class="keyword">WHERE</span> 条件 ] </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">分组字段名 [ <span class="keyword">HAVING</span> 分组过滤条件 ];</span><br></pre></td></tr></table></figure><p><code>WHERE</code>与<code>HAVING</code>的区别：</p><ul><li>执行时机不同：<code>WHERE</code>是分组之前进行过滤，不满足<code>WHERE</code>条件，不参与分组；而<code>HAVING</code>是分组之后对结果进行过滤。</li><li>判断条件不同：<code>WHERE</code>不能对聚合函数进行判断，而<code>HAVING</code>可以。</li></ul><p>例：根据性别分组，统计男性员工和女性员工的数量。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">gender,</span><br><span class="line"><span class="built_in">count</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">emp </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">gender;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E6%80%A7%E5%88%AB%E5%88%86%E7%BB%84%E6%9F%A5%E8%AF%A2.jpg" alt="性别分组查询"></p><p>例：查询年龄小于<code>45</code>岁的员工，并根据工作地址分组，获取员工数量大于等于<code>3</code>的工作地址。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">address,</span><br><span class="line"><span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">AS</span> address_count </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">emp </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">age <span class="operator">&lt;</span> <span class="number">45</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> address <span class="keyword">HAVING</span> address_count <span class="operator">&gt;=</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E6%9F%A5%E8%AF%A2%E5%8C%BA%E5%9F%9F%E5%91%98%E5%B7%A5%E6%95%B0%E9%87%8F.jpg" alt="查询区域员工数量"></p><p>注意点：</p><ul><li>执行顺序：<code>WHERE</code> &gt; <code>聚合函数</code> &gt; <code>HAVING</code>。</li><li>分组之后，查询的字段一般为聚合函数的分组字段，查询其他字段。</li></ul><h2 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h2><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">字段列表 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">表名 </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">字段 <span class="number">1</span> 排序方式 <span class="number">1</span>,</span><br><span class="line">字段 <span class="number">2</span> 排序方式 <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>排序方式：</p><ul><li><code>ASC</code>：升序（默认值）</li><li><code>DESC</code>：降序</li></ul><p>注：如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序。</p><p>例：根据年龄对公司的员工进行升序排序，年龄相同，再按照入职时间进行降序排序。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">emp </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">age <span class="keyword">ASC</span>,</span><br><span class="line">entrydate <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E6%8E%92%E5%BA%8F%E6%9F%A5%E8%AF%A2.jpg" alt="排序查询"></p><h2 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h2><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">字段列表 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">表名 </span><br><span class="line">LIMIT 起始索引,查询记录数;</span><br></pre></td></tr></table></figure><p>注意点：</p><ul><li>其实索引从<code>0</code>开始，起始索引 = （查询页码 - 1） * 每页显示记录数。</li><li>分页查询是数据库的方言，不同的数据库有不同的实现，<code>MySQL</code>中是<code>LIMIT</code>。</li><li>如果查询的是第一页数据，起始索引可以省略，直接简写为<code>LIMIT 10</code>。</li></ul><p>例：查询第<code>2</code>页员工数据，每页展示`15条数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">emp </span><br><span class="line">LIMIT <span class="number">10</span>, <span class="number">5</span>;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2.jpg" alt="分页查询"></p><h2 id="DQL执行顺序"><a href="#DQL执行顺序" class="headerlink" title="DQL执行顺序"></a>DQL执行顺序</h2><p>编写顺序：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">字段列表 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">表名列表 </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">条件列表 </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">分组字段列表 </span><br><span class="line"><span class="keyword">HAVING</span></span><br><span class="line">分组后条件列表 </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">排序字段列表 </span><br><span class="line">LIMIT 分页参数</span><br></pre></td></tr></table></figure><p>执行顺序：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span></span><br><span class="line">表名列表 </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">条件列表 </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">分组字段列表 </span><br><span class="line"><span class="keyword">HAVING</span></span><br><span class="line">分组后条件列表 </span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">字段列表 </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">排序字段列表 </span><br><span class="line">LIMIT 分页参数</span><br></pre></td></tr></table></figure><h1 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h1><h2 id="DCL解释"><a href="#DCL解释" class="headerlink" title="DCL解释"></a>DCL解释</h2><p><code>DCL</code>英文全称是<code>Data Control Language</code>（数据控制语言），用来管理数据库用户、控制数据库用户、控制数据库的访问权限。</p><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><h3 id="查询用户"><a href="#查询用户" class="headerlink" title="查询用户"></a>查询用户</h3><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">USE mysql;</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line"><span class="keyword">USER</span>;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E6%9F%A5%E8%AF%A2%E7%94%A8%E6%88%B7.jpg" alt="查询用户"></p><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;用户名&#x27;</span> @<span class="string">&#x27;主机名&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;密码&#x27;</span>;</span><br></pre></td></tr></table></figure><p>例：创建用户<code>Bigglesworth</code>，只能够在当前主机<code>localhost</code>访问，密码为<code>123456</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">USE mysql;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;Bigglesworth&#x27;</span> @<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line"><span class="keyword">USER</span>;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7.jpg" alt="创建用户"></p><p>例：创建用户<code>Areskey</code>，只能够在任意主机访问，密码为<code>123456</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">USE mysql;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;Areskey&#x27;</span> @<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line"><span class="keyword">USER</span>;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E5%88%9B%E5%BB%BA%E4%BB%BB%E6%84%8F%E4%B8%BB%E6%9C%BA%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90%E7%94%A8%E6%88%B7.jpg" alt="创建任意主机访问权限用户"></p><h3 id="修改用户密码"><a href="#修改用户密码" class="headerlink" title="修改用户密码"></a>修改用户密码</h3><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;用户名&#x27;</span> @<span class="string">&#x27;主机名&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;新密码&#x27;</span>;</span><br></pre></td></tr></table></figure><p>例：将用户<code>Bigglesworth</code>的密码修改为<code>1234</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">USE mysql;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;Bigglesworth&#x27;</span> @<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;1234&#x27;</span>;</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER &#x27;Bigglesworth&#x27; @&#x27;localhost&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;1234&#x27;</span><br><span class="line">&gt; OK</span><br><span class="line">&gt; 时间: 0.008s</span><br></pre></td></tr></table></figure><h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="string">&#x27;用户名&#x27;</span> @<span class="string">&#x27;主机名&#x27;</span>;</span><br></pre></td></tr></table></figure><p>例：删除<code>Bigglesworth</code>和<code>Areskey</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">USE mysql;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="string">&#x27;Bigglesworth&#x27;</span> @<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="string">&#x27;Areskey&#x27;</span> @<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line"><span class="keyword">USER</span>;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E6%9F%A5%E8%AF%A2%E7%94%A8%E6%88%B7.jpg" alt="删除用户"></p><h2 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h2><h3 id="查询权限"><a href="#查询权限" class="headerlink" title="查询权限"></a>查询权限</h3><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> <span class="string">&#x27;用户名&#x27;</span> @<span class="string">&#x27;主机名&#x27;</span>;</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> USAGE <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> `Areskey`@`<span class="operator">%</span>`</span><br></pre></td></tr></table></figure><h3 id="授予权限"><a href="#授予权限" class="headerlink" title="授予权限"></a>授予权限</h3><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> 权限列表 <span class="keyword">ON</span> 数据库名.表名 <span class="keyword">TO</span> <span class="string">&#x27;用户名&#x27;</span> @<span class="string">&#x27;主机名&#x27;</span>;</span><br></pre></td></tr></table></figure><p>例：给用户<code>Areskey</code>增加<code>mydb</code>数据库的所有权限。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">USE mysql;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> mydb.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;Areskey&#x27;</span> @<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> <span class="string">&#x27;Areskey&#x27;</span> @<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GRANT USAGE ON *.* TO `Areskey`@`%`</span><br><span class="line">GRANT ALL PRIVILEGES ON `mydb`.* TO `Areskey`@`%`</span><br></pre></td></tr></table></figure><h3 id="撤销权限"><a href="#撤销权限" class="headerlink" title="撤销权限"></a>撤销权限</h3><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">REVOKE</span> 权限列表 <span class="keyword">ON</span> 数据库名.表名 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line"><span class="string">&#x27;用户名&#x27;</span> @<span class="string">&#x27;主机名&#x27;</span>;</span><br></pre></td></tr></table></figure><p>例：撤销用户<code>Areskey</code>对<code>mydb</code>的所有权限。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">USE mysql;</span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> mydb.<span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line"><span class="string">&#x27;Areskey&#x27;</span> @<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> <span class="string">&#x27;Areskey&#x27;</span> @<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRANT USAGE ON *.* TO `Areskey`@`%`</span><br></pre></td></tr></table></figure><p>注注意点：</p><ul><li>多个权限之间，使用逗号分隔。</li><li>授权时，数据库名和表名可以使用<code>*</code>进行通配，代表所有。</li></ul><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>是指一段可以直接被另一段程序调用的程序或代码。</p><h2 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h2><h3 id="常见字符串函数"><a href="#常见字符串函数" class="headerlink" title="常见字符串函数"></a>常见字符串函数</h3><table><thead><tr><th align="center">函数</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">CONCAT(S1,S2,…Sn)</td><td align="center">字符串拼接，将S1,S2,…Sn拼接成一个字符串</td></tr><tr><td align="center">LOWER(str)</td><td align="center">将字符串<code>str</code>全部转为小写</td></tr><tr><td align="center">UPPER(str)</td><td align="center">将字符串<code>str</code>全部转为大写</td></tr><tr><td align="center">LPAD(str,n,pad)</td><td align="center">左填充，用字符串<code>pad</code>对<code>str</code>的左边进行填充，达到<code>n</code>个字符串长度</td></tr><tr><td align="center">RPAD(str,n,pad)</td><td align="center">右填充，用字符串<code>pad</code>对<code>str</code>的右边进行填充，达到<code>n</code>个字符串长度</td></tr><tr><td align="center">TRIM(str)</td><td align="center">去掉字符串头部和尾部的空格</td></tr><tr><td align="center">SUBSTRING(str,start,len)</td><td align="center">返回字符串<code>str</code>从<code>start</code>位置起的<code>len</code>个长度的字符串</td></tr></tbody></table><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 函数(参数);</span><br></pre></td></tr></table></figure><h3 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h3><p>例：对<code>Hello</code>和<code>World!</code>进行字符串拼接。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> concat(<span class="string">&#x27;Hello &#x27;</span>, <span class="string">&#x27;World!&#x27;</span>);</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br></pre></td></tr></table></figure><h3 id="变换大写"><a href="#变换大写" class="headerlink" title="变换大写"></a>变换大写</h3><p>例：将<code>Hello World!</code>转换为全大写。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">upper</span>(<span class="string">&#x27;Hello World!&#x27;</span>);</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HELLO WORLD!</span><br></pre></td></tr></table></figure><h3 id="变换小写"><a href="#变换小写" class="headerlink" title="变换小写"></a>变换小写</h3><p>例：将<code>Hello World!</code>转换为全小写。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">lower</span>(<span class="string">&#x27;Hello World!&#x27;</span>);</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello world!</span><br></pre></td></tr></table></figure><h3 id="左填充"><a href="#左填充" class="headerlink" title="左填充"></a>左填充</h3><p>例：对<code>01</code>进行左填充，用<code>-</code>填充为<code>5</code>个字符。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> lpad( <span class="string">&#x27;01&#x27;</span>, <span class="number">5</span>, <span class="string">&#x27;-&#x27;</span> );</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">---01</span><br></pre></td></tr></table></figure><h3 id="右填充"><a href="#右填充" class="headerlink" title="右填充"></a>右填充</h3><p>例：将<code>Hello World!</code>转换为全大写。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> rpad( <span class="string">&#x27;01&#x27;</span>, <span class="number">5</span>, <span class="string">&#x27;-&#x27;</span> );</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">---01</span><br></pre></td></tr></table></figure><h3 id="去除两端空格"><a href="#去除两端空格" class="headerlink" title="去除两端空格"></a>去除两端空格</h3><p>例：将一个字符串两端的空格去除。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">trim</span>(<span class="string">&#x27;  Hello World!  &#x27;</span>);</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br></pre></td></tr></table></figure><h3 id="截取字符串"><a href="#截取字符串" class="headerlink" title="截取字符串"></a>截取字符串</h3><p>注：从<code>1</code>开始索引。</p><p>例：截取<code>Hello World!</code>的<code>World!</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">substring</span>( <span class="string">&#x27;Hello World!&#x27;</span>, <span class="number">7</span>, <span class="number">6</span> );</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">World!</span><br></pre></td></tr></table></figure><h2 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h2><h3 id="常见字符串函数-1"><a href="#常见字符串函数-1" class="headerlink" title="常见字符串函数"></a>常见字符串函数</h3><table><thead><tr><th align="center">函数</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">CEIL(x)</td><td align="center">向上取整</td></tr><tr><td align="center">FLOOR(x)</td><td align="center">向下取整</td></tr><tr><td align="center">MOD(x,y)</td><td align="center">返回<code>x/y</code>的模</td></tr><tr><td align="center">RAND()</td><td align="center">返回0~1内的随机数</td></tr><tr><td align="center">ROUND()</td><td align="center">求参数<code>x</code>的四舍五入值，保留<code>y</code>位小数</td></tr></tbody></table><h3 id="向上取整"><a href="#向上取整" class="headerlink" title="向上取整"></a>向上取整</h3><p>例：对<code>1.1</code>进行向上取整。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">ceil</span>( <span class="number">1.1</span> );</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><h3 id="向下取整"><a href="#向下取整" class="headerlink" title="向下取整"></a>向下取整</h3><p>例：对<code>1.9</code>进行向下取整。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">floor</span>( <span class="number">1.9</span> );</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><h3 id="取模"><a href="#取模" class="headerlink" title="取模"></a>取模</h3><p>例：求<code>5%3</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">mod</span>( <span class="number">5</span>, <span class="number">3</span> );</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><h3 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h3><p>例：获取一个随机数。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> rand();</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0.49200135422125585</span><br></pre></td></tr></table></figure><h3 id="四舍五入"><a href="#四舍五入" class="headerlink" title="四舍五入"></a>四舍五入</h3><p>例：对一个随机生成的随机数进行四舍五入，保留<code>3</code>位小数。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> round( rand(), <span class="number">3</span> );</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0.893</span><br></pre></td></tr></table></figure><h2 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h2><h3 id="常见字符串函数-2"><a href="#常见字符串函数-2" class="headerlink" title="常见字符串函数"></a>常见字符串函数</h3><table><thead><tr><th align="center">函数</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">CURDATE()</td><td align="center">返回当前日期</td></tr><tr><td align="center">CURTIME()</td><td align="center">返回当前时间</td></tr><tr><td align="center">NOW()</td><td align="center">返回当前日期</td></tr><tr><td align="center">YEAR(date)</td><td align="center">获取指定<code>date</code>的年份</td></tr><tr><td align="center">MONTH(date)</td><td align="center">获取指定<code>date</code>的月份</td></tr><tr><td align="center">DAY(date)</td><td align="center">获取指定<code>date</code>的日期</td></tr><tr><td align="center">DATE_ADD(date, INTERVAL expr type)</td><td align="center">返回一个日期/时间值加上一个时间间隔<code>expr</code>后的时间值</td></tr><tr><td align="center">DATEDIFF(date1, date2)</td><td align="center">返回起始时间<code>date1</code>和结束时间<code>date2</code>之间的天数</td></tr></tbody></table><h3 id="返回当前日期"><a href="#返回当前日期" class="headerlink" title="返回当前日期"></a>返回当前日期</h3><p>例：获取当前日期。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> curdate();</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2022-11-16</span><br></pre></td></tr></table></figure><h3 id="返回当前时间"><a href="#返回当前时间" class="headerlink" title="返回当前时间"></a>返回当前时间</h3><p>例：获取当前时间。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> curtime();</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">20:21:37</span><br></pre></td></tr></table></figure><h3 id="返回当前日期和时间"><a href="#返回当前日期和时间" class="headerlink" title="返回当前日期和时间"></a>返回当前日期和时间</h3><p>例：获取当前日期和时间。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> now();</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2022-11-16 20:23:53</span><br></pre></td></tr></table></figure><h3 id="分别返回当前日期"><a href="#分别返回当前日期" class="headerlink" title="分别返回当前日期"></a>分别返回当前日期</h3><p>例：分别获取当前年份，月份和日期。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">YEAR</span>(now()), <span class="keyword">MONTH</span>(now()), <span class="keyword">DAY</span>(now());</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E5%BD%93%E5%89%8D%E6%97%A5%E6%9C%9F.jpg" alt="当前日期"></p><h3 id="叠加日期"><a href="#叠加日期" class="headerlink" title="叠加日期"></a>叠加日期</h3><p>例：在当前的日期上增加<code>70</code>天。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> date_add( now(), <span class="type">INTERVAL</span> <span class="number">70</span> <span class="keyword">DAY</span> );</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2023-01-26 09:07:30</span><br></pre></td></tr></table></figure><h3 id="两个日期差值"><a href="#两个日期差值" class="headerlink" title="两个日期差值"></a>两个日期差值</h3><p>例：计算当前日期和<code>2002-09-05</code>相差的日期。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> datediff ( now(), <span class="string">&#x27;2002-09-05&#x27;</span> );</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7378</span><br></pre></td></tr></table></figure><h2 id="流程函数"><a href="#流程函数" class="headerlink" title="流程函数"></a>流程函数</h2><h3 id="常见流程函数"><a href="#常见流程函数" class="headerlink" title="常见流程函数"></a>常见流程函数</h3><table><thead><tr><th align="center">函数</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">IF(value, t, f)</td><td align="center">如果<code>value</code>为<code>true</code>，则返回<code>t</code>，否则返回<code>f</code></td></tr><tr><td align="center">IFNULL(value1, value2)</td><td align="center">如果<code>value1</code>不为空，返回<code>value1</code>，否则返回<code>value2</code></td></tr><tr><td align="center">CASE WHEN [ val1 ] THEN [ res1 ] … ELSE [ default ] END</td><td align="center">如果<code>value1</code>为<code>true</code>，返回<code>res1</code>， …否则返回<code>default</code>默认值</td></tr><tr><td align="center">CASE [ expr ] WHEN [ val1 ] THEN [ res1 ] … ELSE [ default ] END</td><td align="center">如果<code>expr</code>的值等于<code>val1</code>， …否则返回<code>default</code>默认值</td></tr></tbody></table><h1 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ol><li>概念：约束是作用于表中字段上的规则，用于限制存储在表中的数据。</li><li>目的：保证数据库中数据的正确、有效性和完整性。</li><li>分类：</li></ol><table><thead><tr><th align="center">约束</th><th align="center">描述</th><th align="center">关键字</th></tr></thead><tbody><tr><td align="center">非空约束</td><td align="center">限制该字段的数据不能为<code>null</code></td><td align="center">NOT NULL</td></tr><tr><td align="center">唯一约束</td><td align="center">保证该字段的所有数据都是唯一、不重复的</td><td align="center">UNIQUE</td></tr><tr><td align="center">主键约束</td><td align="center">主键是一行数据的唯一标识，要求非空且唯一</td><td align="center">PRIMARY KEY</td></tr><tr><td align="center">默认约束</td><td align="center">保存数据时，如果未指定该字段的值，则采用默认值</td><td align="center">DEFAULT</td></tr><tr><td align="center">检查约束</td><td align="center">保证字段值满足某一条件</td><td align="center">CHECK</td></tr><tr><td align="center">外键约束</td><td align="center">用来让两张表的数据之间建立连接，保证数据的一致性和完整性</td><td align="center">FOREIGN KEY</td></tr></tbody></table><p>注：约束是作用于表中字段上的，可以在创建表/修改表的时候添加约束。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>例：创建一个<code>users</code>，其结构如下：</p><table><thead><tr><th align="center">字段名</th><th align="center">字段含义</th><th align="center">字段类型</th><th align="center">约束条件</th></tr></thead><tbody><tr><td align="center">id</td><td align="center"><code>ID</code>唯一标识</td><td align="center">int</td><td align="center">主键，并且自动增长</td></tr><tr><td align="center">name</td><td align="center">姓名</td><td align="center">varchar(10)</td><td align="center">不为空，并且唯一</td></tr><tr><td align="center">age</td><td align="center">年龄</td><td align="center">int</td><td align="center">大于0，并且小于等于120</td></tr><tr><td align="center">status</td><td align="center">状态</td><td align="center">char(1)</td><td align="center">如果没有指定该值，默认为1</td></tr><tr><td align="center">gender</td><td align="center">性别</td><td align="center">char(1)</td><td align="center">不为空</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> users (</span><br><span class="line">id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT COMMENT <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">name <span class="type">VARCHAR</span> ( <span class="number">10</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">UNIQUE</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">age <span class="type">INT</span> <span class="keyword">CHECK</span> ( age <span class="operator">&gt;</span> <span class="number">0</span> <span class="keyword">AND</span> age <span class="operator">&lt;=</span> <span class="number">120</span> ) COMMENT <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">staus <span class="type">CHAR</span> ( <span class="number">1</span> ) <span class="keyword">DEFAULT</span> <span class="string">&#x27;1&#x27;</span> COMMENT <span class="string">&#x27;状态&#x27;</span>,</span><br><span class="line">gender <span class="type">CHAR</span> ( <span class="number">1</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;性别&#x27;</span> </span><br><span class="line">) COMMENT <span class="string">&#x27;用户表&#x27;</span>;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E7%BA%A6%E6%9D%9F%E8%A1%A8%E5%88%9B%E5%BB%BA.jpg" alt="约束表创建"></p><h2 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h2><h3 id="创建外键"><a href="#创建外键" class="headerlink" title="创建外键"></a>创建外键</h3><p>外键用来让两张表之间建立连接，从而保证数据的一致性和完整性。</p><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">字段名 数据类型,</span><br><span class="line">...</span><br><span class="line">[ <span class="keyword">CONSTRAINT</span> ] [ 外键名称 ] <span class="keyword">FOREIGN</span> KEY ( 外键字段名 ) <span class="keyword">REFERENCES</span> 主表( 主表列名 )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> 外键名称 <span class="keyword">FOREIGN</span> KEY(外键字段名) <span class="keyword">REFERENCES</span> 主表(主表列名);</span><br></pre></td></tr></table></figure><p>例：将<code>worker</code>表和<code>depart</code>表进行连接，外键名字为<code>fk_worker_depart_部门编号</code>。</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/worker%E8%A1%A8.jpg" alt="worker表"></p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/depart%E8%A1%A8.jpg" alt="depart表"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> worker <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_worker_depart_部门编号 <span class="keyword">FOREIGN</span> KEY (部门编号) <span class="keyword">REFERENCES</span> depart (部门编号);</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E5%88%9B%E5%BB%BA%E5%A4%96%E9%94%AE.jpg" alt="创建外键"></p><h3 id="删除外键"><a href="#删除外键" class="headerlink" title="删除外键"></a>删除外键</h3><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> KEY 外键名称;</span><br></pre></td></tr></table></figure><p>例：删除外键<code>fk_worker_depart_部门编号</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> worker <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> KEY fk_worker_depart_部门编号;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E5%88%A0%E9%99%A4%E5%A4%96%E9%94%AE.jpg" alt="删除外键"></p><h2 id="删除-更新行为"><a href="#删除-更新行为" class="headerlink" title="删除/更新行为"></a>删除/更新行为</h2><table><thead><tr><th align="center">行为</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">NO ACTION</td><td align="center">当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新。（与<code>RESTRICT</code>一致）。</td></tr><tr><td align="center">RESTRICT</td><td align="center">当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新。（与<code>NO ACTION</code>一致）。</td></tr><tr><td align="center">CASCADE</td><td align="center">当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则也删除/更新外键在子表中的记录。</td></tr><tr><td align="center">SET NULL</td><td align="center">当在父表中删除对应记录时，首先检查该记录是否有对应外键，如果有则设置子表中该外键值为<code>NULL</code>（这就要求该外键允许取<code>NULL</code>）。</td></tr><tr><td align="center">SET DEFAULT</td><td align="center">父表有变更时，子表将外键列设置成一个默认的值（<code>lnnodb</code>不支持）</td></tr></tbody></table><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> 外键名称 <span class="keyword">FOREIGN</span> KEY (外键字段名) <span class="keyword">REFERENCES</span> 主表 (主表列名) <span class="keyword">ON</span> <span class="keyword">UPDATE</span> CASCADE <span class="keyword">ON</span> <span class="keyword">DELETE</span> CASCADE;</span><br></pre></td></tr></table></figure><h1 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h1><h2 id="多表关系"><a href="#多表关系" class="headerlink" title="多表关系"></a>多表关系</h2><p>项目开发中，在进行数据库表结构设计时，会根据业务需求及业务模块之间的关系，分析并设计表结构，由于业务之间相互关联，所以各个表结构之间也存在着各种联系，基本上分为三种。</p><ul><li>一对多（多对一）</li><li>多对多</li><li>一对一</li></ul><h3 id="一对多（多对一）"><a href="#一对多（多对一）" class="headerlink" title="一对多（多对一）"></a>一对多（多对一）</h3><p>案例：部门与员工的关系。</p><p>关系：一个部门对应多个员工，一个员工对应一个部门。</p><p>实现：在多的一方建立外键，指向一的一方的主键。</p><h3 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h3><p>案例：学生与课程的关系。</p><p>关系：一个学生可以选修多门课程，一门课程也可以供多个学生选择。</p><p>实现：建立第三张中间表，中间表至少包含两个外键，分别关联两方主键。</p><h3 id="多对一"><a href="#多对一" class="headerlink" title="多对一"></a>多对一</h3><p>案例：学生与课程的关系。</p><p>关系：一个学生可以选修多门课程，一门课程也可以供多个学生选择。</p><p>实现：建立第三张中间表，中间表至少包含两个外键，分别关联两方主键。</p><h3 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h3><p>案例：用户与用户详情的关系。</p><p>关系：一对一关系，多用于单表拆分，将一张表的基础字段放在一张表中，其他详情字段放在另一张表中，以提高操作效率。</p><p>实现：在任意一方加入外键，关联另外一方的主键，并设置外键为唯一的（<code>UNIQUE</code>）。</p><h2 id="多表查询概述"><a href="#多表查询概述" class="headerlink" title="多表查询概述"></a>多表查询概述</h2><p>指从多张表中查询数据。</p><p>笛卡尔积：笛卡尔乘积是指在数学中，两个集合<code>A</code>集合和<code>B</code>集合的所有组合情况。（在多表查询时，需要消除无效的笛卡尔积）</p><p>现在准备三张表：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/worker%E8%A1%A8.jpg" alt="worker表"></p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/depart%E8%A1%A8.jpg" alt="depart表"></p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/salary%E8%A1%A8.jpg" alt="salary表"></p><p>例：直接查询<code>worker</code>表和<code>depart</code>表的所有数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> worker, depart;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E7%AC%9B%E5%8D%A1%E5%B0%94%E7%A7%AF%E8%A1%A8.jpg" alt="笛卡尔积"></p><p>由上图可知，如果直接查询两个表，则会对其就笛卡尔积，数据量为两个表中的数据量相乘，因此我们需要用<code>WHERE</code>过滤掉不需要的笛卡尔积。</p><h2 id="多表查询分类"><a href="#多表查询分类" class="headerlink" title="多表查询分类"></a>多表查询分类</h2><h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><ul><li><p>内连接：相当于查询<code>A</code>、<code>B</code>交集部分数据。</p></li><li><p>外连接：</p><ul><li><p>左外连接：查询<strong>左表</strong>所有数据，以及两张表交集部分数据。</p></li><li><p>右外连接：查询<strong>右表</strong>所有数据，以及两张表交集部分数据。</p></li></ul></li><li><p>自连接：当前表与自身的链接查询，自连接必须使用表别名。</p></li><li><p>子查询</p></li></ul><h2 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h2><p>内连接查询的是两张表交集的部分。</p><h3 id="隐式内连接"><a href="#隐式内连接" class="headerlink" title="隐式内连接"></a>隐式内连接</h3><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">字段列表 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">表 <span class="number">1</span>,</span><br><span class="line">表 <span class="number">2</span> </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">条件...;</span><br></pre></td></tr></table></figure><p>例：查询每一个员工的姓名及关联的部门名称。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">USE factory;</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">worker.姓名,</span><br><span class="line">depart.部门名称 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">worker,</span><br><span class="line">depart </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">worker.部门编号 <span class="operator">=</span> depart.部门编号;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E9%9A%90%E5%BC%8F%E5%86%85%E8%BF%9E%E6%8E%A5.jpg" alt="隐式内连接"></p><h3 id="显式内连接"><a href="#显式内连接" class="headerlink" title="显式内连接"></a>显式内连接</h3><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">字段列表 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">表 <span class="number">1</span> [ <span class="keyword">INNER</span> ]</span><br><span class="line"><span class="keyword">JOIN</span> 表 <span class="number">2</span> <span class="keyword">ON</span> 连接条件...;</span><br></pre></td></tr></table></figure><p>例：查询每一个员工的姓名及关联的部门名称。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">USE factory;</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">worker.姓名,</span><br><span class="line">depart.部门名称 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">worker</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> depart <span class="keyword">ON</span> worker.部门编号 <span class="operator">=</span> depart.部门编号;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E9%9A%90%E5%BC%8F%E5%86%85%E8%BF%9E%E6%8E%A5.jpg" alt="显式内连接"></p><h2 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h2><p>左外连接和右外连接在数据中有<code>NULL</code>数据时才会有效果，左外连接会完全包含左表的信息，反之，右外连接完全包含右表的信息。</p><h3 id="左外连接"><a href="#左外连接" class="headerlink" title="左外连接"></a>左外连接</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">字段列表 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">表 <span class="number">1</span> <span class="keyword">LEFT</span> [ <span class="keyword">OUTER</span> ]</span><br><span class="line"><span class="keyword">JOIN</span> 表 <span class="number">2</span> <span class="keyword">ON</span> 条件...;</span><br></pre></td></tr></table></figure><p>相当于查询表1（左表）的所有数据，包含表1和表2交集部分的数据。</p><h3 id="右外连接"><a href="#右外连接" class="headerlink" title="右外连接"></a>右外连接</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">字段列表 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">表 <span class="number">1</span> <span class="keyword">RIGHT</span> [ <span class="keyword">OUTER</span> ]</span><br><span class="line"><span class="keyword">JOIN</span> 表 <span class="number">2</span> <span class="keyword">ON</span> 条件...;</span><br></pre></td></tr></table></figure><p>相当于查询表2（右表）的所有数据，包含表1和表2交集部分的数据。</p><h2 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h2><p>把一张表看作两张表，进行连接，表一定要起别名。</p><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">字段列表 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">表 A 别名 A</span><br><span class="line"><span class="keyword">JOIN</span> 表 A 别名 B <span class="keyword">ON</span> 条件...;</span><br></pre></td></tr></table></figure><p>注：自连接查询，可以是内连接查询，也可以是外连接查询。</p><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><p>概念：<code>SQL</code>语句中嵌套<code>SELECT</code>语法，称为嵌套查询，又称子查询。</p><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">表 <span class="number">1</span> </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">列 <span class="number">1</span> <span class="operator">=</span> ( <span class="keyword">SELECT</span> 列 <span class="number">1</span> <span class="keyword">FROM</span> 表 <span class="number">2</span> );</span><br></pre></td></tr></table></figure><p>注：子查询外部的语句可以是<code>INSERT</code>/<code>UPDATE</code>/<code>SELECT</code>的任何一个。</p><p>根据子查询结果不同，分为：</p><ul><li>标量子查询（子查询结果为单个值）</li><li>列子查询（子查询结果为一列）</li><li>行子查询（子查询结果为一行）</li><li>表子查询（子查询结果为多行多列）</li></ul><h2 id="标量子查询"><a href="#标量子查询" class="headerlink" title="标量子查询"></a>标量子查询</h2><p>子查询返回的结果是单个值（数字、字符串、日期等），最简单的形式，这种子查询称为标量子查询。</p><p>常用的操作符：<code>=</code> <code>&lt;&gt;</code> <code>&gt;</code> <code>&gt;=</code> <code>&lt;</code> <code>&lt;=</code></p><p>例：查询财务处的所有员工的信息。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">USE factory;</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">worker </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">部门编号 <span class="operator">=</span> ( <span class="keyword">SELECT</span> 部门编号 <span class="keyword">FROM</span> depart <span class="keyword">WHERE</span> 部门名称 <span class="operator">=</span> <span class="string">&#x27;财务处&#x27;</span> );</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E6%A0%87%E9%87%8F%E5%AD%90%E6%9F%A5%E8%AF%A2.jpg" alt="标量子查询"></p><h2 id="列子查询"><a href="#列子查询" class="headerlink" title="列子查询"></a>列子查询</h2><p>子查询返回的结果是一列（可以是多行），这种子查询称为列子查询。</p><p>常用的操作符：<code>IN</code>、<code>NOT IN</code>、<code>ANY</code>、<code>SOME</code>、<code>ALL</code></p><table><thead><tr><th align="center">操作符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">IN</td><td align="center">在指定的集合范围之内，多选一</td></tr><tr><td align="center">NOT IN</td><td align="center">不在指定的集合范围之内</td></tr><tr><td align="center">ANY</td><td align="center">子查询返回列表，有任意一个满足即可</td></tr><tr><td align="center">SOME</td><td align="center">与<code>ANY</code>等同，使用<code>SOME</code>的地方都可以使用<code>ANY</code></td></tr><tr><td align="center">ALL</td><td align="center">子查询返回列表的所有值都必须满足</td></tr></tbody></table><p>例：查询财务处和人事处的所有员工的信息。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">USE factory;</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">worker </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">部门编号 <span class="keyword">IN</span> ( <span class="keyword">SELECT</span> 部门编号 <span class="keyword">FROM</span> depart <span class="keyword">WHERE</span> 部门名称 <span class="operator">=</span> <span class="string">&#x27;财务处&#x27;</span> <span class="keyword">OR</span> 部门名称 <span class="operator">=</span> <span class="string">&#x27;人事处&#x27;</span> );</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E5%88%97%E5%AD%90%E6%9F%A5%E8%AF%A21.jpg" alt="列子查询"></p><p>例：查询比财务处所有人工资都高的员工信息。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">USE factory;</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">worker </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">职工号 <span class="keyword">IN</span> (</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">职工号 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">salary </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">工资 <span class="operator">&gt;</span> <span class="keyword">ALL</span> (</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">工资 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">salary </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">职工号 <span class="keyword">IN</span> (</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">职工号 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">worker </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">部门编号 <span class="operator">=</span> ( <span class="keyword">SELECT</span> 部门编号 <span class="keyword">FROM</span> depart <span class="keyword">WHERE</span> 部门名称 <span class="operator">=</span> <span class="string">&#x27;财务处&#x27;</span> ))));</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E5%88%97%E5%AD%90%E6%9F%A5%E8%AF%A22.jpg" alt="列子查询"></p><h2 id="行子查询"><a href="#行子查询" class="headerlink" title="行子查询"></a>行子查询</h2><p>子查询返回的结果是一行（可以是多列），这种子查询称为行子查询。</p><p>常用的操作符：<code>=</code> <code>&lt;&gt;</code> <code>IN</code> <code>NOT IN</code></p><p>例：查询工号为<code>2001</code>的员工的部门编号和性别都相同的人的员工信息。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">USE factory;</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">worker </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">(部门编号, 性别 ) <span class="operator">=</span> ( <span class="keyword">SELECT</span> 部门编号, 性别 <span class="keyword">FROM</span> worker <span class="keyword">WHERE</span> 职工号 <span class="operator">=</span> <span class="string">&#x27;2001&#x27;</span> );</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E8%A1%8C%E5%AD%90%E6%9F%A5%E8%AF%A2.jpg" alt="行子查询"></p><h2 id="表子查询"><a href="#表子查询" class="headerlink" title="表子查询"></a>表子查询</h2><p>子查询返回的结果是多行多列，这种子查询称为表子查询。</p><p>常用的操作符：<code>IN</code></p><p>例：查询工号为<code>1001</code>或<code>2001</code>的员工的部门编号和性别都相同的人的员工信息。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">USE factory;</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">worker </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">(部门编号, 性别 ) <span class="keyword">IN</span> ( <span class="keyword">SELECT</span> 部门编号, 性别 <span class="keyword">FROM</span> worker <span class="keyword">WHERE</span> 职工号 <span class="operator">=</span> <span class="string">&#x27;1001&#x27;</span> <span class="keyword">OR</span> 职工号 <span class="operator">=</span> <span class="string">&#x27;2001&#x27;</span> );</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E8%A1%A8%E5%AD%90%E6%9F%A5%E8%AF%A2.jpg" alt="表子查询"></p><h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><h2 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h2><p>视图（<code>View</code>）是一种虚拟存在的表。视图中的数据并不在数据库中实际存在，行和列数据来自定义视图的查询中使用的表，并且是在使用视图时动态生成的。</p><p>通俗的讲，视图只保存了查询的<code>SQL</code>逻辑，不保存查询结果。所以我们在创建视图的时候，主要的工作就落在创建这条<code>SQL</code>查询语句上。</p><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [ <span class="keyword">OR</span> REPLACE ] <span class="keyword">VIEW</span> 视图名称 [(列表名称)] <span class="keyword">AS</span> <span class="keyword">SELECT</span>语句 [ <span class="keyword">WITH</span> [ <span class="keyword">CASCADED</span> <span class="operator">|</span> <span class="keyword">LOCAL</span> ]] <span class="keyword">CHECK</span> OPTION;</span><br></pre></td></tr></table></figure><p>例：创建一个视图<code>emp_v_1</code>，存储<code>emp</code>表中<code>id</code>小于等于<code>10</code>的记录的<code>id</code>和<code>name</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">CREATE</span> </span><br><span class="line"><span class="keyword">OR</span> REPLACE <span class="keyword">VIEW</span> emp_v_1 <span class="keyword">AS</span> <span class="keyword">SELECT</span></span><br><span class="line">id,</span><br><span class="line">name </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">emp </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">id <span class="operator">&lt;=</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E5%88%9B%E5%BB%BA%E8%A7%86%E5%9B%BE.jpg" alt="创建视图"></p><h2 id="查询-1"><a href="#查询-1" class="headerlink" title="查询"></a>查询</h2><h3 id="查看创建视图语句"><a href="#查看创建视图语句" class="headerlink" title="查看创建视图语句"></a>查看创建视图语句</h3><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">VIEW</span> 视图名称;</span><br></pre></td></tr></table></figure><p>例：查询视图<code>emp_v_1</code>的创建语句。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">VIEW</span> emp_v_1;</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `emp_v_1` AS select `emp`.`id` AS `id`,`emp`.`name` AS `name` from `emp` where (`emp`.`id` &lt;= 10)</span><br></pre></td></tr></table></figure><h3 id="查看视图数据"><a href="#查看视图数据" class="headerlink" title="查看视图数据"></a>查看视图数据</h3><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">视图名称...;</span><br></pre></td></tr></table></figure><p>例：查询视图<code>emp_v_1</code>的数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">emp_v_1;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E6%9F%A5%E7%9C%8B%E8%A7%86%E5%9B%BE%E6%95%B0%E6%8D%AE.jpg" alt="查看视图数据"></p><h2 id="修改视图"><a href="#修改视图" class="headerlink" title="修改视图"></a>修改视图</h2><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [ <span class="keyword">OR</span> REPLACE ] <span class="keyword">VIEW</span> 视图名称 [(列表名称)] <span class="keyword">AS</span> <span class="keyword">SELECT</span>语句 [ <span class="keyword">WITH</span> [ <span class="keyword">CASCADED</span> <span class="operator">|</span> <span class="keyword">LOCAL</span> ]] <span class="keyword">CHECK</span> OPTION;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">VIEW</span> 视图名称 [(列名列表)] <span class="keyword">AS</span> <span class="keyword">SELECT</span>语句 [ <span class="keyword">WITH</span> [ <span class="keyword">CASCADED</span> <span class="operator">|</span> <span class="keyword">LOCAL</span> ] <span class="keyword">CHECK</span> OPTION ];</span><br></pre></td></tr></table></figure><p>例：修改视图<code>emp_v_1</code>，将其查询结果增加一条<code>workno</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">VIEW</span> emp_v_1 <span class="keyword">AS</span> <span class="keyword">SELECT</span></span><br><span class="line">id,</span><br><span class="line">NAME,</span><br><span class="line">workno </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">emp </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">id <span class="operator">&lt;=</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E4%BF%AE%E6%94%B9%E8%A7%86%E5%9B%BE.jpg" alt="修改视图"></p><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> [ IF <span class="keyword">EXISTS</span> ] 视图名称 [,视图名称]...;</span><br></pre></td></tr></table></figure><p>例：删除视图<code>emp_v_1</code>的数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> emp_v_1;</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DROP VIEW emp_v_1</span><br><span class="line">&gt; OK</span><br><span class="line">&gt; 时间: 0.011s</span><br></pre></td></tr></table></figure><h1 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h1><h2 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h2><p>存储过程是事先经过编译并存储在数据库中的一段<code>SQL</code>语句的集合，调用存储过程可以简化应用开发人员的很多工作，减少数据在数据库和应用服务器之间的传输，对于提高数据处理的效率是有好处的。</p><p>存储过程思想上很简单，就是数据库<code>SQL</code>语言层面的代码封装与重用。*</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>封装，复用</li><li>可以接收参数，也可以返回数据</li><li>减少网络交互，效率提升</li></ul><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="创建-1"><a href="#创建-1" class="headerlink" title="创建"></a>创建</h3><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> 存储过程名称 ([参数列表]) </span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SQL</span>语句</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p>例：创建一个存储过程<code>p1</code>，用来查询<code>emp</code>表中的记录条数。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> p1 () <span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="built_in">count</span>(<span class="operator">*</span>) </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">emp;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><h3 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h3><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CALL</span> 名称 ([参数]);</span><br></pre></td></tr></table></figure><p>例：调用存储过程<code>p1</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CALL</span> p1;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E8%B0%83%E7%94%A8%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B.jpg" alt="调用存储过程"></p><h3 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h3><p>查询某个存储过程的定义。</p><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> 存储过程名称;</span><br></pre></td></tr></table></figure><p>例：查看存储过程<code>p1</code>的定义。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> p1;</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE DEFINER=`root`@`localhost` PROCEDURE `p1`()</span><br><span class="line">BEGIN</span><br><span class="line">SELECT</span><br><span class="line">count(*) </span><br><span class="line">FROM</span><br><span class="line">emp;</span><br><span class="line">END</span><br></pre></td></tr></table></figure><h3 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h3><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> [ IF <span class="keyword">EXISTS</span> ] 存储过程名称;</span><br></pre></td></tr></table></figure><p>例：查看存储过程<code>p1</code>的定义。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">USE mydb;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span></span><br><span class="line">IF</span><br><span class="line"><span class="keyword">EXISTS</span> p1;</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; OK</span><br><span class="line">&gt; 时间: 0.019s</span><br></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="系统变量"><a href="#系统变量" class="headerlink" title="系统变量"></a>系统变量</h3><p>系统变量是<code>MYSQL</code>服务器提供，不是用户定义的，属于服务器层面。分为全局变量(<code>GLOBAL</code>)、会话变量(<code>SESSION</code>)。</p><h4 id="设置系统变量"><a href="#设置系统变量" class="headerlink" title="设置系统变量"></a>设置系统变量</h4><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> [ SESSION <span class="operator">|</span> <span class="keyword">GLOBAL</span> ] 系统变量名 <span class="operator">=</span> 值;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> @@[ SESSION <span class="operator">|</span> <span class="keyword">GLOBAL</span> ] 系统变量名 <span class="operator">=</span> 值;</span><br></pre></td></tr></table></figure><h3 id="用户定义变量"><a href="#用户定义变量" class="headerlink" title="用户定义变量"></a>用户定义变量</h3><p>用户定义变量是用户根据需要自己定义的变量，用户变量不用提前声明，在用的时候直接用<code>@变量名</code>使用就可以。其作用域为当前连接。</p><p>用户定义的变量无序对其进行声明或初始化，只不过获取到的值为<code>NULL</code>。</p><h4 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="variable">@var</span>_name <span class="operator">=</span> expr [, <span class="variable">@var</span>_name <span class="operator">=</span> expr ]...;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">字段名 <span class="keyword">INTO</span> <span class="variable">@var</span>_name </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">表名;</span><br></pre></td></tr></table></figure><p>例：定义变量<code>myname</code>和<code>age</code>，其值分别为<code>Bigglesworth</code>和<code>20</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="variable">@myname</span> <span class="operator">=</span> <span class="string">&#x27;Bigglesworth&#x27;</span>,</span><br><span class="line"><span class="variable">@myage</span> <span class="operator">=</span> <span class="number">20</span>;</span><br></pre></td></tr></table></figure><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="variable">@var</span>_name</span><br></pre></td></tr></table></figure><p>例：输出上面定义的两个变量。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="variable">@myname</span>,</span><br><span class="line"><span class="variable">@myage</span>;</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E4%BD%BF%E7%94%A8%E5%8F%98%E9%87%8F.jpg" alt="使用变量"></p><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><p>局部变量是根据需要定义的在局部生效的变量，访问之前，需要<code>DECLARE</code>声明。可用作存储过程内的局部变量和输入参数，局部变量的的范围是在其内声明的<code>BEGIN ... END</code>块。</p><h4 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h4><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> 变量名 变量类型 [ DEFAULT...];</span><br></pre></td></tr></table></figure><p>数据类型就是数据库字段类型：<code>INT</code>、<code>BIGINT</code>、<code>CHAR</code>、<code>VARCHAR</code>、<code>DATE</code>、<code>TIME</code>等。</p><h4 id="赋值-1"><a href="#赋值-1" class="headerlink" title="赋值"></a>赋值</h4><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> 变量名 <span class="operator">=</span> 值;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> 变量名 :<span class="operator">=</span> 值;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">字段名 <span class="keyword">INTO</span> 变量名 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">表名...;</span><br></pre></td></tr></table></figure><p>例：定义一个存储过程<code>p</code>，存储<code>emp</code>表格中所有人的年龄之和。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> p () <span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">age_sum <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">age_name <span class="type">VARCHAR</span> ( <span class="number">20</span> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> age_name <span class="operator">=</span> <span class="string">&#x27;年龄总和&#x27;</span>;</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="built_in">sum</span>( age ) <span class="keyword">INTO</span> age_sum </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">emp;</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">age_name,</span><br><span class="line">age_sum;</span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"><span class="keyword">CALL</span> p ();</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/%E4%BD%BF%E7%94%A8%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F.jpg" alt="使用局部变量"></p><h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">IF 条件 <span class="number">1</span> <span class="keyword">THEN</span></span><br><span class="line">...</span><br><span class="line">ELSEIF 条件 <span class="number">2</span> <span class="keyword">THEN</span> <span class="comment">-- 可选</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">ELSE</span> <span class="comment">-- 可选</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">END</span> IF;</span><br></pre></td></tr></table></figure><p>例：根据定义的分数<code>score</code>变量，判定当前分数对应的分数等级。</p><ol><li><code>score &gt;= 85</code>分，等级为优秀。</li><li><code>score &gt;= 60</code>分 且 <code>score &lt; 85</code>分，等级为及格。</li><li><code>score &lt; 60</code>分，等级为不及格。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> score()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> val <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">58</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> <span class="keyword">result</span> <span class="type">varchar</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">IF val <span class="operator">&gt;=</span> <span class="number">85</span> <span class="keyword">THEN</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">result</span> <span class="operator">=</span> <span class="string">&#x27;优秀&#x27;</span>;</span><br><span class="line">ELSEIF val <span class="operator">&gt;=</span> <span class="number">60</span> <span class="keyword">THEN</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">result</span> <span class="operator">=</span> <span class="string">&#x27;及格&#x27;</span>;</span><br><span class="line"><span class="keyword">ELSE</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">result</span> <span class="operator">=</span> <span class="string">&#x27;不及格&#x27;</span>;</span><br><span class="line"><span class="keyword">END</span> IF;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">result</span>;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> score();</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">不及格</span><br></pre></td></tr></table></figure><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><table><thead><tr><th align="center">类型</th><th align="center">含义</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">IN</td><td align="center">该类参数作为输入，也就是需要调用时传入值</td><td align="center">默认</td></tr><tr><td align="center">OUT</td><td align="center">该类参数作为输出，也就是该参数可以作为返回值</td><td align="center"></td></tr><tr><td align="center">INOUT</td><td align="center">既可以作为输入参数，也可以作为输出参数</td><td align="center"></td></tr></tbody></table><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> 存储过程名称 ([ <span class="keyword">IN</span> <span class="operator">/</span> <span class="keyword">OUT</span> <span class="operator">/</span> <span class="keyword">INOUT</span> 参数名 参数类型 ]) </span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="comment">-- SQL语句</span></span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p>例：根据传入的参数<code>val</code>，判定当前分数对应的分数等级并返回。</p><ol><li><code>score &gt;= 85</code>分，等级为优秀。</li><li><code>score &gt;= 60</code>分 且 <code>score &lt; 85</code>分，等级为及格。</li><li><code>score &lt; 60</code>分，等级为不及格。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> score(<span class="keyword">IN</span> val <span class="type">INT</span>, <span class="keyword">OUT</span> <span class="keyword">result</span> <span class="type">VARCHAR</span>(<span class="number">10</span>))</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"></span><br><span class="line">IF val <span class="operator">&gt;=</span> <span class="number">85</span> <span class="keyword">THEN</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">result</span> <span class="operator">=</span> <span class="string">&#x27;优秀&#x27;</span>;</span><br><span class="line">ELSEIF val <span class="operator">&gt;=</span> <span class="number">60</span> <span class="keyword">THEN</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">result</span> <span class="operator">=</span> <span class="string">&#x27;及格&#x27;</span>;</span><br><span class="line"><span class="keyword">ELSE</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">result</span> <span class="operator">=</span> <span class="string">&#x27;不及格&#x27;</span>;</span><br><span class="line"><span class="keyword">END</span> IF;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> score(<span class="number">68</span>, <span class="variable">@result</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@result</span>;</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">及格</span><br></pre></td></tr></table></figure><h2 id="while"><a href="#while" class="headerlink" title="while"></a>while</h2><p><code>while</code>循环是有条件的循环控制语句。满足条件后，再执行循环体中的<code>SQL</code>语句。</p><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">WHILE 条件 DO</span><br><span class="line"><span class="keyword">SQL</span>逻辑...</span><br><span class="line"><span class="keyword">END</span> WHILE;</span><br></pre></td></tr></table></figure><p>例：计算从<code>1</code>累加到<code>n</code>的值，<code>n</code>为传入的参数值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> s(<span class="keyword">IN</span> n <span class="type">INT</span>, <span class="keyword">OUT</span> ans <span class="type">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>; </span><br><span class="line"><span class="keyword">SET</span> ans <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">WHILE i <span class="operator">&lt;=</span> n DO</span><br><span class="line"><span class="keyword">SET</span> ans <span class="operator">=</span> ans <span class="operator">+</span> i;</span><br><span class="line"><span class="keyword">SET</span> i <span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">END</span> WHILE;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> s(<span class="number">10</span>, <span class="variable">@ans</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@ans</span>;</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">55</span><br></pre></td></tr></table></figure><h1 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h1><h2 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h2><p>触发器是与表有关的数据库对象，指在<code>insert</code>/<code>update</code>/<code>delete</code>之前或之后，触发并执行触发器中定义的<code>SQL</code>语句集合。触发器的这种特性可以协助应用在数据库端确保数据的完整性，日志记录，数据校验等操作。</p><p>使用别名<code>OLD</code>和<code>NEW</code>来引用触发器中发生变化的记录内容，这与其他的数据库是相似的。现在触发器还只支持行级触发，不支持语句级触发。</p><table><thead><tr><th align="center">触发器类型</th><th align="center">NEW和OLD</th></tr></thead><tbody><tr><td align="center">INSERT型触发器</td><td align="center">NEW表示将要或者已经新增的数据</td></tr><tr><td align="center">UPDATE型触发器</td><td align="center">OLD表示修改之前的数据，NEW表示将要或已经修改后的数据</td></tr><tr><td align="center">DELETE型触发器</td><td align="center">OLD表示将要或者已经删除的数据</td></tr></tbody></table><h2 id="触发器基础操作"><a href="#触发器基础操作" class="headerlink" title="触发器基础操作"></a>触发器基础操作</h2><h3 id="创建-2"><a href="#创建-2" class="headerlink" title="创建"></a>创建</h3><p>基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> trigger_name</span><br><span class="line">BEFORE<span class="operator">/</span>AFTER <span class="keyword">INSERT</span><span class="operator">/</span><span class="keyword">UPDATE</span><span class="operator">/</span><span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">ON</span> tbl_name <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span> <span class="comment">-- 行级触发器</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">trigger_stmt;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><h3 id="查看-1"><a href="#查看-1" class="headerlink" title="查看"></a>查看</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> TRIGGERS;</span><br></pre></td></tr></table></figure><h3 id="删除-2"><a href="#删除-2" class="headerlink" title="删除"></a>删除</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TRIGGER</span> [schema_name.]trigger_name;  <span class="comment">-- 如果没有指定schema_name，默认为当前数据库</span></span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 教程 </tag>
            
            <tag> MySQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础语法</title>
      <link href="/archives/d83aff49.html"/>
      <url>/archives/d83aff49.html</url>
      
        <content type="html"><![CDATA[<hr><h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World!"></a>Hello World!</h1><p>例：输出<code>Hello World!</code>。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello World!&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br></pre></td></tr></table></figure><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><p>注释是对代码的解释说明，计算机并不会执行。</p><h2 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h2><p>以<code>#</code>开头，<code>#</code>右边的所有文字当作说明，而不是真正要执行的程序，起辅助说明作用。  </p><p>例：输出<code>Hello World!</code>，后面需要有相应的注释。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello World!&quot;</span>)  <span class="comment">#输出Hello World!</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br></pre></td></tr></table></figure><h2 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h2><p>多行注释需要用三个单引号，即三个<code>&#39;</code>包裹起来。</p><p>例：书写一段多行注释，第一行为<code>比格沃斯</code>，第二行为<code>Bigglesworth</code>。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    比格沃斯</span></span><br><span class="line"><span class="string">    Bigglesworth</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h1><p>在代码中，被写下来的固定值，被称为字面量。  </p><h2 id="常用的值的类型"><a href="#常用的值的类型" class="headerlink" title="常用的值的类型"></a>常用的值的类型</h2><table><thead><tr><th align="center">类型</th><th align="center">描述</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">数字（Number）</td><td align="center"><strong>支持</strong><br>整数（int）<br>浮点数（float）<br>复数（complex）<br>布尔（bool）</td><td align="center">整数（int），如：10、-10<br>浮点数（float），如：13.14、-13.14<br>复数（complex），如：4+3j，以j结尾表示复数<br>布尔（float）表达现实生活中的逻辑，即真和假，<code>True</code>表示真，<code>False</code>表示假。<code>True</code>的本质是一个数字记作1，<code>False</code>记作0</td></tr><tr><td align="center">字符串（String）</td><td align="center">描述文本的一种数据类型</td><td align="center">字符串（String）是由任意数量的字符组成</td></tr><tr><td align="center">列表（List）</td><td align="center">有序的可变序列</td><td align="center">Python中使用最频繁的数据类型，可以有序记录一堆数据</td></tr><tr><td align="center">元组（Tuple）</td><td align="center">有序的不可变序列</td><td align="center">可有序记录一堆不可变的Python数据集合</td></tr><tr><td align="center">集合（Set）</td><td align="center">无序不重复集合</td><td align="center">可无序记录一堆不重复的Python数据集合</td></tr><tr><td align="center">字典（Dictionary）</td><td align="center">无序Key-Value集合</td><td align="center">可无序记录一堆Key-Value型的Python数据集合</td></tr></tbody></table><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>又称为文本，是由任意数量的字符，如中文、英文、各类符号、数字等组成。所以叫做字符的串。  </p><p>如：  </p><ul><li><p>“Bigglesworth”</p></li><li><p>“XXX的编号是：114514”</p></li><li><p>“今天是星期二”</p></li></ul><p>在Python中，字符串需要使用双引号<code>&quot;&quot;</code>包裹起来。  </p><p><strong>被引号包裹起来的均为字符串。</strong></p><h2 id="输出字面量"><a href="#输出字面量" class="headerlink" title="输出字面量"></a>输出字面量</h2><p>使用<code>print()</code>函数将字面量打印在屏幕上。  </p><p>例：分别输出<code>13.14</code>，<code>666</code>,<code>Bigglesworth</code>。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">13.14</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">666</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Bigglesworth&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果展示： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">13.14</span><br><span class="line">666</span><br><span class="line">Bigglesworth</span><br></pre></td></tr></table></figure><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>变量指的是在程序运行时，能储存计算结果或能表示值的抽象概念。  </p><p>简单来说，变量就是在程序运行时，记录数据用的。  </p><h2 id="变量的定义格式"><a href="#变量的定义格式" class="headerlink" title="变量的定义格式"></a>变量的定义格式</h2><p>格式：<code>变量名称 = 变量的值</code>  </p><p>每一个变量都有自己的名称，称之为：<strong>变量名也就是变量本身</strong>。  </p><p>每一个变量都有自己存储的值（内容），称之为：<strong>变量值</strong>。</p><p>赋值，表示将等号右侧的值，赋值给左侧的变量。  </p><p>例：定义一个变量<code>score</code>，其值为<code>13</code>，并将其输出。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">score = <span class="number">13</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;得分为：&quot;</span>, score)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">得分为： 13</span><br></pre></td></tr></table></figure><h2 id="变量运算"><a href="#变量运算" class="headerlink" title="变量运算"></a>变量运算</h2><p>变量可以直接当作其存储的内容进行运算。  </p><p>例：将<code>score</code>的值增加<code>2</code>并输出。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">score = <span class="number">13</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;得分为：&quot;</span>, score)</span><br><span class="line">score = score + <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;变化后的得分为：&quot;</span>, score)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">得分为： 13</span><br><span class="line">变化后的得分为： 15</span><br></pre></td></tr></table></figure><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="直接输出类型信息"><a href="#直接输出类型信息" class="headerlink" title="直接输出类型信息"></a>直接输出类型信息</h2><p>使用<code>type()</code>可以输出一个字面量或者变量的类型信息。  </p><p>例：分别输出<code>Bigglesworth</code>，<code>3.1415926</code>，<code>3+4j</code>的类型信息。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="string">&quot;Bigglesworth&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="number">3.1415926</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="number">3</span>+<span class="number">4j</span>))</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &#x27;str&#x27;&gt;</span><br><span class="line">&lt;class &#x27;float&#x27;&gt;</span><br><span class="line">&lt;class &#x27;complex&#x27;&gt;</span><br></pre></td></tr></table></figure><h2 id="存储类型信息结果"><a href="#存储类型信息结果" class="headerlink" title="存储类型信息结果"></a>存储类型信息结果</h2><p>可以使用一个变量用来存储<code>type()</code>的返回结果，该结果被称作<strong>返回值</strong>。  </p><p>例：利用<code>type()</code>获取<code>114514</code>的数据类型，将其存储在<code>Type</code>变量中并输出。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Type</span> = <span class="built_in">type</span>(<span class="number">114514</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="type">Type</span>)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &#x27;int&#x27;&gt;</span><br></pre></td></tr></table></figure><h2 id="查看变量中存储的数据类型"><a href="#查看变量中存储的数据类型" class="headerlink" title="查看变量中存储的数据类型"></a>查看变量中存储的数据类型</h2><p>例：定义一个变量<code>name</code>，其存储的内容为<code>Bigglesworth</code>，输出其数据类型。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;Bigglesworth&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(name)))</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &#x27;str&#x27;&gt;</span><br></pre></td></tr></table></figure><h1 id="数据类型的转换"><a href="#数据类型的转换" class="headerlink" title="数据类型的转换"></a>数据类型的转换</h1><h2 id="常见的转换语句"><a href="#常见的转换语句" class="headerlink" title="常见的转换语句"></a>常见的转换语句</h2><table><thead><tr><th align="center">语句（函数）</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">int(x)</td><td align="center">将x转换为一个整数</td></tr><tr><td align="center">float(x)</td><td align="center">将x转换为一个浮点数</td></tr><tr><td align="center">str(x)</td><td align="center">将对象x转换为字符串</td></tr></tbody></table><p>注：这三条语句均有返回值。</p><p>例：将字符串类型的<code>3.1415926</code>转换为浮点数类型。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">number = <span class="string">&quot;3.1415926&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(number), number)</span><br><span class="line">number = <span class="built_in">float</span>(number)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(number), number)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &#x27;str&#x27;&gt; 3.1415926</span><br><span class="line">&lt;class &#x27;float&#x27;&gt; 3.1415926</span><br></pre></td></tr></table></figure><p>注：</p><ul><li><p>可以将任何东西转换为字符串，但是字符串转成别的数据类型的时候需要注意是否合法，比如如果要将一个字符串转换为整型，则需要注意字符串内是否全都是数字。  </p></li><li><p>在整型转换为浮点型的时候，会默认加上一个<code>.0</code>，因为浮点类型默认带小数。  </p></li><li><p>在浮点型转换为整型的时候，会将小数点后的数据直接舍去。</p></li></ul><h1 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h1><h2 id="标识符的定义"><a href="#标识符的定义" class="headerlink" title="标识符的定义"></a>标识符的定义</h2><p>在Python程序中，我们可以给很多东西起名字，例如变量、函数、类等等，这些名字被统称为标识符，用来做内容的标识。</p><h2 id="标识符命名规则"><a href="#标识符命名规则" class="headerlink" title="标识符命名规则"></a>标识符命名规则</h2><p>命名规则主要有三点：  </p><ul><li><p>内容限定</p></li><li><p>大小写敏感</p></li><li><p>不可使用关键字</p></li></ul><h3 id="内容限定"><a href="#内容限定" class="headerlink" title="内容限定"></a>内容限定</h3><p>标识符命名中，只允许出现：  </p><ul><li><p>英文</p></li><li><p>中文</p></li><li><p>数字</p></li><li><p>下划线</p></li></ul><p>注意点：  </p><ul><li><p>虽然Python支持中文作为标识符，但是尽量不要去使用。</p></li><li><p>开头不可以是数字</p></li></ul><h3 id="大小写敏感"><a href="#大小写敏感" class="headerlink" title="大小写敏感"></a>大小写敏感</h3><p>两个标识符字母都一样，唯一的区别是字母的大小写不一样，那么也是可以正确区分的。  </p><h3 id="不可使用关键字"><a href="#不可使用关键字" class="headerlink" title="不可使用关键字"></a>不可使用关键字</h3><p>Python中有一系列单词，称之为关键字，关键字在Python中都有特定的用途，我们不可以使用它们作为标识符。  </p><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p>设<code>a=10</code>，<code>b=20</code></p><table><thead><tr><th align="center">运算符</th><th align="center">描述</th><th align="center">实例</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">加</td><td align="center">两个对象相加a + b输出结果30</td></tr><tr><td align="center">-</td><td align="center">减</td><td align="center">两个对象相减a - b输出结果-10</td></tr><tr><td align="center">*</td><td align="center">乘</td><td align="center">两个数相乘或是返回一个被重复若干次的字符串a * b输出结果200</td></tr><tr><td align="center">/</td><td align="center">除</td><td align="center">b / a输出结果2</td></tr><tr><td align="center">//</td><td align="center">取整除</td><td align="center">返回商的整数部分9//2输出结果4,9.0//2.0输出结果4.0</td></tr><tr><td align="center">%</td><td align="center">取余</td><td align="center">返回除法的余数b % a输出结果0</td></tr><tr><td align="center">**</td><td align="center">指数</td><td align="center">a**b为10的20次方</td></tr></tbody></table><p>例：计算上表中的实例。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">10</span></span><br><span class="line">b=<span class="number">20</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a + b =&quot;</span>, a + b)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a - b =&quot;</span>, a - b)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a * b =&quot;</span>, a * b)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;b / a =&quot;</span>, b / a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;9 // 2 =&quot;</span>, <span class="number">9</span> // <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;9.0 // 2.0 =&quot;</span>, <span class="number">9.0</span> // <span class="number">2.0</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;b % a =&quot;</span>, b % a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a ** b =&quot;</span>, a ** b)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a + b = 30</span><br><span class="line">a - b = -10</span><br><span class="line">a * b = 200</span><br><span class="line">b / a = 2.0</span><br><span class="line">9 // 2 = 4</span><br><span class="line">9.0 // 2.0 = 4.0</span><br><span class="line">b % a = 0</span><br><span class="line">a ** b = 100000000000000000000</span><br></pre></td></tr></table></figure><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><h3 id="基础赋值运算符"><a href="#基础赋值运算符" class="headerlink" title="基础赋值运算符"></a>基础赋值运算符</h3><table><thead><tr><th align="center">运算符</th><th align="center">描述</th><th align="center">实例</th></tr></thead><tbody><tr><td align="center">=</td><td align="center">赋值运算符</td><td align="center">把 = 右边的结果 赋值给 左边的变量</td></tr></tbody></table><h3 id="复合赋值运算符"><a href="#复合赋值运算符" class="headerlink" title="复合赋值运算符"></a>复合赋值运算符</h3><table><thead><tr><th align="center">运算符</th><th align="center">描述</th><th align="center">实例</th></tr></thead><tbody><tr><td align="center">+=</td><td align="center">加法赋值运算符</td><td align="center">c += a 等效于 c = c + a</td></tr><tr><td align="center">-=</td><td align="center">减法赋值运算符</td><td align="center">c -= a 等效于 c = c - a</td></tr><tr><td align="center">*=</td><td align="center">乘法赋值运算符</td><td align="center">c *= a 等效于 c = c * a</td></tr><tr><td align="center">/=</td><td align="center">除法赋值运算符</td><td align="center">c /= a 等效于 c = c / a</td></tr><tr><td align="center">%=</td><td align="center">取模赋值运算符</td><td align="center">c %= a 等效于 c = c % a</td></tr><tr><td align="center">**=</td><td align="center">幂赋值运算符</td><td align="center">c **= a 等效于 c = c ** a</td></tr><tr><td align="center">//=</td><td align="center">取整除赋值运算符</td><td align="center">c //= a 等效于 c = c // a</td></tr></tbody></table><h1 id="字符串扩展"><a href="#字符串扩展" class="headerlink" title="字符串扩展"></a>字符串扩展</h1><h2 id="字符串的三种定义方式"><a href="#字符串的三种定义方式" class="headerlink" title="字符串的三种定义方式"></a>字符串的三种定义方式</h2><p>字符串在Python中有多种定义形式：  </p><ol><li><p>单引号定义法：<code>name = &#39;Bigglesworth&#39;</code></p></li><li><p>双引号定义法：<code>name = &quot;Bigglesworth&quot;</code></p></li><li><p>三引号定义法：<code>name = &#39;&#39;&#39;Bigglesworth&#39;&#39;&#39;</code></p></li></ol><p>三引号定义法，和多行注释的写法一样，同样支持换行操作。  </p><p>使用变量接收它，它就是字符串。  </p><p>不使用变量去接收它，就可以作为多行注释使用。  </p><p>Python中基本上不区分单引号和双引号。  </p><h2 id="字符串的引号嵌套"><a href="#字符串的引号嵌套" class="headerlink" title="字符串的引号嵌套"></a>字符串的引号嵌套</h2><p>当字符串中有单引号或者双引号时，可以通过以下几种方法进行嵌套：  </p><ul><li><p>单引号定义法，可以内含双引号</p></li><li><p>双引号定义法，可以内含单引号</p></li><li><p>可以使用转义字符<code>\</code>来将引号解除效用，变成普通字符串</p></li></ul><p>例：将<code>&quot;My name is &#39;Bigglesworth&#39;&quot;</code>存储至变量<code>sentence</code>并输出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sentence = <span class="string">&quot;\&quot;My name is \&#x27;Bigglesworth\&#x27;\&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(sentence)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;My name is &#x27;Bigglesworth&#x27;&quot;</span><br></pre></td></tr></table></figure><h2 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h2><p>如果我们有两个字符串字面量，可以将其拼接成一个字符串，通过<code>+</code>号即可完成。  </p><p>例：将<code>My name is </code>和<code>Bigglesworth</code>拼接在一起。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;My name is &quot;</span> + <span class="string">&quot;Bigglesworth&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">My name is Bigglesworth</span><br></pre></td></tr></table></figure><p>字面量和变量或变量和变量之间会使用拼接。  </p><p>例：将<code>九磅十五便士</code>存入变量<code>money</code>中，利用字符串拼接输出<code>衬衫的价格为九磅十五便士</code>。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">money = <span class="string">&quot;九磅十五便士&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;衬衫的价格是&quot;</span> + money)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">衬衫的价格是九磅十五便士</span><br></pre></td></tr></table></figure><p>注：字符串不能与整数或者浮点数之类的进行拼接。</p><h2 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h2><h3 id="普通格式化"><a href="#普通格式化" class="headerlink" title="普通格式化"></a>普通格式化</h3><p>通过格式符号来进行占位，然后将变量（该变量可以是任意类型的变量）编程字符串放入占位的地方。  </p><p>常用的格式符号：  </p><table><thead><tr><th align="center">格式符号</th><th align="center">转化</th></tr></thead><tbody><tr><td align="center">%s</td><td align="center">将内容转换成字符串，放入占位位置</td></tr><tr><td align="center">%d</td><td align="center">将内容转换成整数，放入占位位置</td></tr><tr><td align="center">%f</td><td align="center">将内容转换成浮点型，放入占位位置</td></tr></tbody></table><p>例：输出<code>我的年龄是19岁，班级号为2001</code>，其中数字使用字符串格式化操作。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">19</span></span><br><span class="line">class_num = <span class="number">2001</span></span><br><span class="line">message = <span class="string">&quot;我的年龄是%d岁，班级号为%d&quot;</span> % (age, class_num)</span><br><span class="line"><span class="built_in">print</span>(message)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我的年龄是19岁，班级号为2001</span><br></pre></td></tr></table></figure><p>注：对于多个变量占位的情况，变量要用括号括起来，并按照占位的顺序填入。  </p><h3 id="快速格式化"><a href="#快速格式化" class="headerlink" title="快速格式化"></a>快速格式化</h3><p>语法：<code>f&quot;内容&#123;变量&#125;&quot;</code>  </p><p>例：将上述例子利用快速格式化进行输出。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">19</span></span><br><span class="line">class_num = <span class="number">2001</span></span><br><span class="line">message = <span class="string">f&quot;我的年龄是<span class="subst">&#123;age&#125;</span>岁，班级号为<span class="subst">&#123;class_num&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">print</span>(message)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我的年龄是<span class="number">19</span>岁，班级号为<span class="number">2001</span></span><br></pre></td></tr></table></figure><h2 id="格式化的精度控制"><a href="#格式化的精度控制" class="headerlink" title="格式化的精度控制"></a>格式化的精度控制</h2><p>我们可以使用辅助符号<code>m.n</code>来控制数据的宽度和精度。  </p><ul><li><p>m用来控制宽度，要求是数字（很少使用），设置的宽度小于数字自身，不生效</p></li><li><p>.n用来控制小数点精度，要求是数字，会进行小数的四舍五入</p></li></ul><p>示例：  </p><ul><li><p>%5d：表示将整数的宽度控制在5位，如数字11，被设置为5d，就会变成：<code>[空格][空格][空格]11</code>，用三个空格补足宽度。</p></li><li><p>%5.2f：表示将宽度控制为5，将小数点精度设置为2；小数点和小数部分也算入宽度计算。如，对11.345设置了%7.2f后，结果是：<code>[空格][空格]11.35</code>。2个空格补足宽度，小数部分限制2位精度后，四舍五入为.35</p></li><li><p>%.2f：表示不限制宽度，只设置小数点精度为2，如11.345设置%2.f后，结果为11.35.</p></li></ul><h2 id="表达式格式化"><a href="#表达式格式化" class="headerlink" title="表达式格式化"></a>表达式格式化</h2><p>表达式：一条具有明确执行结果的代码语句。  </p><p>在无需使用变量进行数据存储的时候，可以直接格式化表达式，简化代码。  </p><p>例：计算<code>2 * 5</code>的值。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;2 * 5的结果是：<span class="subst">&#123;<span class="number">2</span> * <span class="number">5</span>&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span> * <span class="number">5</span>的结果是：<span class="number">10</span></span><br></pre></td></tr></table></figure><h1 id="数据输出"><a href="#数据输出" class="headerlink" title="数据输出"></a>数据输出</h1><h2 id="字面量输出"><a href="#字面量输出" class="headerlink" title="字面量输出"></a>字面量输出</h2><p>直接输出要输出的内容。  </p><p>例：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">3.1415926</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Biggleswotrh&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3.1415926</span><br><span class="line">Biggleswotrh</span><br></pre></td></tr></table></figure><h2 id="变量输出"><a href="#变量输出" class="headerlink" title="变量输出"></a>变量输出</h2><p>可以直接输出一个变量的值。  </p><p>例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10086</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10086</span><br></pre></td></tr></table></figure><h2 id="end输出"><a href="#end输出" class="headerlink" title="end输出"></a>end输出</h2><p>一般情况下，直接利用<code>print</code>函数输出会默认换行，因此可以在<code>print()</code>的括号中的最后加上<code>, end = &#39;&#39;</code>，可以防止其自动换行，当然也可以在<code>end</code>里面加上内容，作为输出的结尾。  </p><p>例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Bigglesworth&quot;</span>, end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">3.14</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">6.28</span>, end = <span class="string">&#x27;a&#x27;</span>)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Bigglesworth3.14</span><br><span class="line">6.28a</span><br></pre></td></tr></table></figure><h2 id="加号拼接"><a href="#加号拼接" class="headerlink" title="加号拼接"></a>加号拼接</h2><p>该方法只针对于字符串，通过加号来对字符串进行拼接。  </p><p>例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">&quot;27.56&quot;</span></span><br><span class="line">float1 = <span class="number">27.56</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;数据为：&quot;</span> + str1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;数据为：&quot;</span> + <span class="built_in">str</span>(float1))</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">数据为：27.56</span><br><span class="line">数据为：27.56</span><br></pre></td></tr></table></figure><h2 id="format格式"><a href="#format格式" class="headerlink" title="format格式"></a>format格式</h2><p>利用<code>format</code>来进行输出，在<code>print</code>中用花括号进行占位，花括号中的值代表后面占位的字面量或者变量的顺序。  </p><p>例：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">27.56</span></span><br><span class="line">b = <span class="number">28.99</span></span><br><span class="line">c = <span class="number">29.66</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;数据为：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(b))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;abc的数据分别为：&#123;0&#125;，&#123;1&#125;，&#123;2&#125;&quot;</span>.<span class="built_in">format</span>(a, b, c))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;abc的数据分别为：&#123;1&#125;，&#123;0&#125;，&#123;2&#125;&quot;</span>.<span class="built_in">format</span>(a, b, c))</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">数据为：28.99</span><br><span class="line">abc的数据分别为：27.56，28.99，29.66</span><br><span class="line">abc的数据分别为：28.99，27.56，29.66</span><br></pre></td></tr></table></figure><h2 id="print-f”-”-用法"><a href="#print-f”-”-用法" class="headerlink" title="print(f”{}”)用法"></a>print(f”{}”)用法</h2><p>该用法在上述中提到过，与其使用方法一致。  </p><p>例：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">27.56</span></span><br><span class="line">b = <span class="number">28.99</span></span><br><span class="line">c = <span class="number">29.66</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;数据为：<span class="subst">&#123;a&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;abc的数据分别为：<span class="subst">&#123;a&#125;</span>，<span class="subst">&#123;b&#125;</span>，<span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">数据为：27.56</span><br><span class="line">abc的数据分别为：27.56，28.99，29.66</span><br></pre></td></tr></table></figure><h2 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h2><table><thead><tr><th align="center">字符</th><th align="center">含有</th></tr></thead><tbody><tr><td align="center">%s</td><td align="center">字符串</td></tr><tr><td align="center">%d</td><td align="center">有符号十进制整数，%06d表示输出的整数显示位数字，不足的地方使用0补全</td></tr><tr><td align="center">%f</td><td align="center">浮点数，%.2f表示小数点后只显示两位</td></tr><tr><td align="center">%%</td><td align="center">输出%</td></tr></tbody></table><p>该用法在上述中提到过，与其使用方法一致。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">19</span></span><br><span class="line">class_num = <span class="number">2001</span></span><br><span class="line">message = <span class="string">&quot;我的年龄是%d岁，班级号为%d&quot;</span> % (age, class_num)</span><br><span class="line"><span class="built_in">print</span>(message)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我的年龄是19岁，班级号为2001</span><br></pre></td></tr></table></figure><h1 id="数据输入"><a href="#数据输入" class="headerlink" title="数据输入"></a>数据输入</h1><h2 id="input-函数"><a href="#input-函数" class="headerlink" title="input()函数"></a>input()函数</h2><p>数据输入需要使用到<code>input()</code>函数，需要用一个变量来接收存储该语句获取的键盘输入数据。</p><p>例：输入名字并将其输出。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;What&#x27;s your name?&quot;</span>)</span><br><span class="line">name = <span class="built_in">input</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Oh, your name is <span class="subst">&#123;name&#125;</span>!&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">What&#x27;s your name?</span><br><span class="line"></span><br><span class="line">Bigglesworth</span><br><span class="line">Oh, your name is Bigglesworth!</span><br></pre></td></tr></table></figure><p>也可以直接把提示信息写在<code>input()</code>函数的括号内。  </p><p>例：将上面的例子中的<code>print</code>函数省略。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="built_in">input</span>(<span class="string">&quot;What&#x27;s your name?&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Oh, your name is <span class="subst">&#123;name&#125;</span>!&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">What&#x27;s your name?Bigglesworth</span><br><span class="line">Oh, your name is Bigglesworth!)</span><br></pre></td></tr></table></figure><p>注：<code>input</code>函数获取的是字符串类型。</p><p>例：从键盘输入两个数字，输出它们相加的结果。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入x&quot;</span>))</span><br><span class="line">y = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入y&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;x + y = <span class="subst">&#123;x + y&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">请输入x10</span><br><span class="line"></span><br><span class="line">请输入y20</span><br><span class="line">x + y = 30</span><br></pre></td></tr></table></figure><h2 id="split-函数"><a href="#split-函数" class="headerlink" title="split()函数"></a>split()函数</h2><p>在Python中，<code>input()</code>函数所接受的数据返回为一个<code>string</code>类型，如果一行中有多个数据的话，则需要使用<code>split()</code>函数进行切割，切割后返回一个列表（列表会在后续具体讲到）。  </p><p>例：在一行输入若干个数字，将其输出。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data = <span class="built_in">input</span>().split()</span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3 1 4 1 5 9 2 6</span><br><span class="line">[&#x27;3&#x27;, &#x27;1&#x27;, &#x27;4&#x27;, &#x27;1&#x27;, &#x27;5&#x27;, &#x27;9&#x27;, &#x27;2&#x27;, &#x27;6&#x27;]</span><br></pre></td></tr></table></figure><h1 id="布尔类型和比较运算符"><a href="#布尔类型和比较运算符" class="headerlink" title="布尔类型和比较运算符"></a>布尔类型和比较运算符</h1><h2 id="布尔类型的定义"><a href="#布尔类型的定义" class="headerlink" title="布尔类型的定义"></a>布尔类型的定义</h2><p>布尔类型的字面量：  </p><ul><li><p>True表示真（是、肯定）</p></li><li><p>False表示假（否，否定）</p></li></ul><p>定义变量存储布尔类型数据：  </p><p><code>变量名称 = 布尔类型字面量</code>  </p><p>布尔类型不仅可以自行定义，同时也可以使用比较运算符进行比较运算得到布尔类型的结果。  </p><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><table><thead><tr><th align="center">运算符</th><th align="center">描述</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center">==</td><td align="center">判断内容是否相等，满足为True，不满足为False</td><td align="center">如a=3,b=3，则(a == b)为True</td></tr><tr><td align="center">!=</td><td align="center">判断内容是否不相等，满足为True，不满足为False</td><td align="center">如a=1，b=3，则(a != b)为True</td></tr><tr><td align="center">&gt;</td><td align="center">判断运算符左侧内容是否大于右侧，满足为True，不满足为False</td><td align="center">如a=7,b=3，则(a &gt; b)为True</td></tr><tr><td align="center">&lt;</td><td align="center">判断运算符左侧内容是否小于右侧，满足为True，不满足为False</td><td align="center">如a=3,b=7，则(a &lt; b)为True</td></tr><tr><td align="center">&gt;=</td><td align="center">判断运算符左侧内容是否大于等于右侧，满足为True，不满足为False</td><td align="center">如a=3,b=3，则(a &gt;= b)为True</td></tr><tr><td align="center">&lt;=</td><td align="center">判断运算符左侧内容是否小于等于右侧，满足为True，不满足为False</td><td align="center">如a=3,b=3，则(a &lt;= b)为True</td></tr></tbody></table><p>注：首字母一定要大写。  </p><h1 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h1><h2 id="if语句的基本格式"><a href="#if语句的基本格式" class="headerlink" title="if语句的基本格式"></a>if语句的基本格式</h2><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 要判断的条件:</span><br><span class="line">    条件成立时，要做的事情</span><br></pre></td></tr></table></figure><p>注：</p><ul><li><p>Python是通过缩进来识别语句的归属的，所以第二行前要有四个空格，以此来说明这句话属于第一行的if语句。  </p></li><li><p>条件后面要有一个英文的冒号。</p></li><li><p>可以有不止一行要做的事情，只需要保证他们都有着相同的缩进即可。</p></li></ul><p>例：输入一个整数，判断它是否是偶数，是的话输出<code>Yes</code>。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span>:  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Yes&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">Yes</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><p>判断语句的结果，必须是布尔类型True或False，True会执行if内的代码语句，False则不会执行。  </p><h2 id="if-else语句"><a href="#if-else语句" class="headerlink" title="if else语句"></a>if else语句</h2><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件:</span><br><span class="line">    满足条件时要做的事</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    不满足条件时要做的事</span><br></pre></td></tr></table></figure><p>例：输入一个整数，判断它是否是偶数，是的话输出<code>Yes</code>，否则输出<code>No</code>。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span>:  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Yes&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;No&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">Yes</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">No</span><br></pre></td></tr></table></figure><h2 id="if-elif-else语句"><a href="#if-elif-else语句" class="headerlink" title="if elif else语句"></a>if elif else语句</h2><p>基本格式：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件<span class="number">1</span>::</span><br><span class="line">    条件<span class="number">1</span>满足时应做的事情</span><br><span class="line"><span class="keyword">elif</span> 条件<span class="number">2</span>:</span><br><span class="line">    条件<span class="number">2</span>满足时应做的事情</span><br><span class="line"><span class="keyword">elif</span> 条件N:</span><br><span class="line">    条件N满足时应做的事情</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    所有条件都不满足时应做的事情</span><br></pre></td></tr></table></figure><p>例：输入一个成绩，根据表格输出对应评价。  </p><table><thead><tr><th align="center">成绩</th><th align="center">评价</th></tr></thead><tbody><tr><td align="center">90~100</td><td align="center">优秀</td></tr><tr><td align="center">80~89</td><td align="center">良好</td></tr><tr><td align="center">70~79</td><td align="center">中等</td></tr><tr><td align="center">60~69</td><td align="center">及格</td></tr><tr><td align="center">0~59</td><td align="center">不及格</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">score = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">if</span> score &gt;= <span class="number">90</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;优秀&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> score &gt;= <span class="number">80</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;良好&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> score &gt;= <span class="number">70</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;中等&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> score &gt;= <span class="number">60</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;及格&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;不及格&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">73</span><br><span class="line">中等</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">43</span><br><span class="line">不及格</span><br></pre></td></tr></table></figure><h2 id="判断语句的嵌套"><a href="#判断语句的嵌套" class="headerlink" title="判断语句的嵌套"></a>判断语句的嵌套</h2><p>基本格式：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件<span class="number">1</span>:</span><br><span class="line">    满足条件<span class="number">1</span> 做的事情<span class="number">1</span></span><br><span class="line">    满足条件<span class="number">1</span> 做的事情<span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> 条件<span class="number">2</span>:</span><br><span class="line">        满足条件<span class="number">2</span> 做的事情<span class="number">1</span></span><br><span class="line">        满足条件<span class="number">2</span> 做的事情<span class="number">2</span></span><br></pre></td></tr></table></figure><p>第二个if，属于第一个if内，只有第一个if满足条件，才会执行第二个if。  </p><p>嵌套的关键点在于<strong>空格缩进</strong>，通过空格缩进，来决定语句之间的<strong>层次关系</strong>。  </p><p>例：输入三个数字，将它们按照从小到大的顺序输出。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入a&quot;</span>))</span><br><span class="line">b = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入b&quot;</span>))</span><br><span class="line">c = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入c&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> a &lt; b:</span><br><span class="line">    <span class="keyword">if</span> b &lt; c:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;a&#125;</span>&lt;<span class="subst">&#123;b&#125;</span>&lt;<span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> a &lt; c:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;a&#125;</span>&lt;<span class="subst">&#123;c&#125;</span>&lt;<span class="subst">&#123;b&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;c&#125;</span>&lt;<span class="subst">&#123;a&#125;</span>&lt;<span class="subst">&#123;b&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">if</span> a &lt; c:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;b&#125;</span>&lt;<span class="subst">&#123;a&#125;</span>&lt;<span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> b &lt; c:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;b&#125;</span>&lt;<span class="subst">&#123;c&#125;</span>&lt;<span class="subst">&#123;a&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;c&#125;</span>&lt;<span class="subst">&#123;b&#125;</span>&lt;<span class="subst">&#123;a&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">请输入a10</span><br><span class="line"></span><br><span class="line">请输入b5</span><br><span class="line"></span><br><span class="line">请输入c8</span><br><span class="line">5&lt;8&lt;10</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">请输入a9</span><br><span class="line"></span><br><span class="line">请输入b8</span><br><span class="line"></span><br><span class="line">请输入c7</span><br><span class="line">7&lt;8&lt;9</span><br></pre></td></tr></table></figure><h1 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h1><p>逻辑运算符一般在遇到复合问题时使用，例如：如果明天不下雨并且休息，我就出去玩。对于这个命题，就用到了且这个逻辑运算符。常见的逻辑运算符一共有如下三种，他们常用于判断和循环的条件内。  </p><table><thead><tr><th align="center">名称</th><th align="center">例子</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">逻辑与</td><td align="center">a and b</td><td align="center">当a和b都为True时，为True</td></tr><tr><td align="center">逻辑或</td><td align="center">a or b</td><td align="center">当a或b有一个为True时，为True</td></tr><tr><td align="center">逻辑非</td><td align="center">not a</td><td align="center">当a为False时，为True</td></tr></tbody></table><p>例：输入一个年份<code>year</code>，判断其是否为闰年，是闰年输出<code>Yes</code>，否则输出<code>No</code>。  </p><p><em>能够整除4且不能整除100的年份为闰年，或者能整除400的为闰年</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">year = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">if</span> year % <span class="number">4</span> == <span class="number">0</span> <span class="keyword">and</span> <span class="keyword">not</span> year % <span class="number">100</span> == <span class="number">0</span> <span class="keyword">or</span> year % <span class="number">400</span> == <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Yes&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;No&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2008</span><br><span class="line">Yes</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2100</span><br><span class="line">No</span><br></pre></td></tr></table></figure><h1 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h1><h2 id="while循环的基本格式"><a href="#while循环的基本格式" class="headerlink" title="while循环的基本格式"></a>while循环的基本格式</h2><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 条件:</span><br><span class="line">    条件满足时，做的事情<span class="number">1</span></span><br><span class="line">    条件满足时，做的事情<span class="number">2</span></span><br><span class="line">    条件满足时，做的事情<span class="number">3</span></span><br></pre></td></tr></table></figure><p>注：只要条件满足，就会无限循环执行。  </p><p>例：输出<code>0~9</code>的所有数字。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">10</span>:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td></tr></table></figure><p>注意点：  </p><ul><li><p>while的条件的结果需要是布尔类型，True表示继续循环，False表示结束循环</p></li><li><p>需要设置循环终止的条件，如i += 1配合i &lt; 10，就能确保10次后停下，否则将无限循环</p></li><li><p>空格缩进和if判断一样，都需要设置</p></li></ul><h2 id="while循环的嵌套应用"><a href="#while循环的嵌套应用" class="headerlink" title="while循环的嵌套应用"></a>while循环的嵌套应用</h2><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 条件<span class="number">1</span>:</span><br><span class="line">    条件<span class="number">1</span>满足时，做的事情<span class="number">1</span></span><br><span class="line">    条件<span class="number">1</span>满足时，做的事情<span class="number">2</span></span><br><span class="line">    条件<span class="number">1</span>满足时，做的事情<span class="number">3</span></span><br><span class="line">    <span class="keyword">while</span> 条件<span class="number">2</span>:</span><br><span class="line">        条件<span class="number">2</span>满足时，做的事情<span class="number">1</span></span><br><span class="line">        条件<span class="number">2</span>满足时，做的事情<span class="number">2</span></span><br><span class="line">        条件<span class="number">2</span>满足时，做的事情<span class="number">3</span></span><br></pre></td></tr></table></figure><p>例：输入一个正整数<code>n</code>，打印仅由<code>*</code>构成的<code>n</code>行直角三角形。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; n:</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> j &lt;= i:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;*&#x27;</span>, end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">*</span><br><span class="line">**</span><br><span class="line">***</span><br><span class="line">****</span><br><span class="line">*****</span><br></pre></td></tr></table></figure><h2 id="for循环的基础语法"><a href="#for循环的基础语法" class="headerlink" title="for循环的基础语法"></a>for循环的基础语法</h2><p>除了while循环语句外，Python同样提供了for循环语句。  </p><p>两者能完成的功能基本差不多，但仍有一些区别：  </p><ul><li><p>while循环的循环条件是自定义的，<strong>自行控制循环条件</strong></p></li><li><p>fore循环是一种“轮询”机制，是对一批内容进行<strong>逐个处理</strong></p></li></ul><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 临时变量 <span class="keyword">in</span> 待处理数据集:</span><br><span class="line">    循环满足条件时执行的代码</span><br></pre></td></tr></table></figure><h2 id="遍历字符串"><a href="#遍历字符串" class="headerlink" title="遍历字符串"></a>遍历字符串</h2><p>例：遍历<code>Bigglesworth</code>，并将变量的结果打印出来。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;Bigglesworth&quot;</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> name:  </span><br><span class="line">    <span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">B</span><br><span class="line">i</span><br><span class="line">g</span><br><span class="line">g</span><br><span class="line">l</span><br><span class="line">e</span><br><span class="line">s</span><br><span class="line">w</span><br><span class="line">o</span><br><span class="line">r</span><br><span class="line">t</span><br><span class="line">h</span><br></pre></td></tr></table></figure><p>for循环就是将被处理的数据内容挨个取出，赋值给变量。  </p><p>可以看出，for循环是将字符串的内容<strong>依次取出</strong>，所以，for循环也被称之为<strong>遍历循环</strong>。  </p><p>同while循环不同，for循环是无法定义循环条件的，只能从被处理的数据集中，依次取出内容进行处理。  </p><p>所以，理论上讲，Python的for循环无法构建无限循环（被处理的数据集不可能无限大）。  </p><h2 id="range语句"><a href="#range语句" class="headerlink" title="range语句"></a>range语句</h2><p>for循环语句，本质上是遍历：序列类型。  </p><p>我们可以通过<code>range</code>语句，获得一个简单的数字序列。  </p><h3 id="语法1"><a href="#语法1" class="headerlink" title="语法1"></a>语法1</h3><p><code>range(num)</code>  </p><p>获取一个从<code>0</code>开始，到<code>num</code>结束的数字序列（不包含<code>num</code>本身）  </p><p>如<code>range(5)</code>取得的数据是：<code>[0, 1, 2, 3, 4]</code>。  </p><h3 id="语法2"><a href="#语法2" class="headerlink" title="语法2"></a>语法2</h3><p><code>range(num1, num2)</code>  </p><p>获得一个从<code>num1</code>开始，到<code>num2</code>结束的数字序列（不含<code>num2</code>本身）  </p><p>如<code>range(5, 10)</code>取得的数据是：<code>[5, 6, 7, 8, 9]</code>。  </p><h3 id="语法3"><a href="#语法3" class="headerlink" title="语法3"></a>语法3</h3><p><code>range(num1, num2, step)</code>  </p><p>获得一个从<code>num1</code>开始，到<code>num2</code>结束的数字序列（不包含<code>num2</code>本身）  </p><p>数字之间的步长，以<code>step</code>为准（<code>step</code>默认是1）  </p><p>如<code>range(5, 10, 2)</code>取得的数据是：<code>[5, 7, 9]</code>。  </p><h2 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h2><p>for循环赋值的是临时变量，在编程规范上，作用范围（作用域），只限定在for循环内部。  </p><p>如果在for循环外部访问临时变量：  </p><ul><li><p>实际上是可以访问到的</p></li><li><p>在编程规范上，是不允许、不建议这么做的</p></li></ul><p>解决临时变量的方法是在全局变量的位置对其定义。  </p><h2 id="for循环的嵌套"><a href="#for循环的嵌套" class="headerlink" title="for循环的嵌套"></a>for循环的嵌套</h2><p>基本格式：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 临时变量 <span class="keyword">in</span> 待处理数据集（序列）:</span><br><span class="line">    循环满足条件应做的事情<span class="number">1</span></span><br><span class="line">    循环满足条件应做的事情<span class="number">2</span></span><br><span class="line">    循环满足条件应做的事情N</span><br><span class="line">        <span class="keyword">for</span> 临时变量 <span class="keyword">in</span> 待处理数据集（序列）:</span><br><span class="line">            循环满足条件应做的事情<span class="number">1</span></span><br><span class="line">            循环满足条件应做的事情<span class="number">2</span></span><br><span class="line">            循环满足条件应做的事情N</span><br></pre></td></tr></table></figure><p>例：输入一个数字<code>n</code>，求<code>1~n</code>中所有完数。  </p><p><em>完数：一个数字的所有真因子相加等于其本身，则该数字被称为完数。</em>  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>):</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, i):</span><br><span class="line">        <span class="keyword">if</span> i % j == <span class="number">0</span>:</span><br><span class="line">            count += j</span><br><span class="line">    <span class="keyword">if</span> count == i:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">100</span><br><span class="line">0</span><br><span class="line">6</span><br><span class="line">28</span><br></pre></td></tr></table></figure><h2 id="循环中断"><a href="#循环中断" class="headerlink" title="循环中断"></a>循环中断</h2><p>无论是while循环或者是for循环，都是重复性的执行特定操作。在这个重复过程中，会出现一切其它情况让我们不得不：  </p><ul><li><p>暂时跳过某次循环，直接进行下一次</p></li><li><p>提前退出循环，不再继续</p></li></ul><p>对于这种场景，Python提供了<code>continue</code>和<code>break</code>关键字用来对循环进行<strong>临时跳过</strong>和<strong>直接结束</strong>。</p><h3 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h3><p><code>continue</code>关键字用于<strong>中断本次</strong>循环，<strong>直接进入下一次</strong>循环。  </p><p><code>continue</code>可以用于<strong>for循环和while循环，效果一致</strong>。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">100</span>):</span><br><span class="line">    语句<span class="number">1</span></span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line">    语句<span class="number">2</span></span><br></pre></td></tr></table></figure><p>对于上面的这个例子中，在循环内，遇到<code>continue</code>就结束当次循环，进行下一次，所以语句2是不会执行的。  </p><p>应用场景：在循环中，因为某些原因，临时结束本次循环。  </p><p>例：输出<code>0~30</code>内的所有数字，跳过所有<code>5</code>的倍数。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">31</span>):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">5</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td></tr></table></figure><h3 id="break"><a href="#break" class="headerlink" title="break"></a>break</h3><p><code>break</code>关键字用于<strong>直接结束循环</strong>。  </p><p><code>break</code>可以用于<strong>for循环和while循环，效果一致</strong>。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">100</span>):</span><br><span class="line">    语句<span class="number">1</span></span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>对于上面这个例子。在循环内，遇到<code>break</code>就结束循环了，所以，执行了语句1后，直接执行语句3了。  </p><p>例：输出<code>0~30</code>内的所有数字，当遇到<code>10</code>的倍数时跳出循环，并输出<code>程序已结束</code>。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">31</span>):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">10</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;程序已结束&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">程序已结束</span><br></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h2><p>函数：是<strong>组织好的</strong>，<strong>可重复使用的</strong>，用来实现特定功能的<strong>代码段</strong>。  </p><p>例：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;Bigglesworth&quot;</span></span><br><span class="line">length = <span class="built_in">len</span>(name)</span><br><span class="line"><span class="built_in">print</span>(length)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">12</span><br></pre></td></tr></table></figure><p>在上述例子中，<code>len()</code>实现了对字符串的长度进行统计，可以随时进行调用，这是因为<code>len()</code>是Python中的内置函数，因此函数应该满如下几点：  </p><ul><li><p>是提前写好的</p></li><li><p>可以重复使用</p></li><li><p>实现某一种特定功能的代码段</p></li></ul><h2 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h2><p>基本格式：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">函数名</span>(<span class="params">传入参数</span>):</span><br><span class="line">    函数体</span><br><span class="line">    <span class="keyword">return</span> 返回值</span><br></pre></td></tr></table></figure><p>例：定义一个函数<code>Hello</code>，功能是输出<code>Hello World!</code>。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Hello</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello World!&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="函数的调用"><a href="#函数的调用" class="headerlink" title="函数的调用"></a>函数的调用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数名(参数)</span><br></pre></td></tr></table></figure><p>例：调用上一个例子中的函数。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Hello</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello World!&quot;</span>)</span><br><span class="line"></span><br><span class="line">Hello()</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br></pre></td></tr></table></figure><h2 id="函数注意事项"><a href="#函数注意事项" class="headerlink" title="函数注意事项"></a>函数注意事项</h2><ol><li><p>参数如不需要，可以省略</p></li><li><p>返回值如不需要，可以省略</p></li><li><p>函数必须先定义后使用</p></li></ol><h2 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h2><p>传入参数的功能是：在函数进行计算的时候，接受外部（调用时）提供的数据。  </p><p>例：定义一个加法函数，从键盘输入两个数字，将其传入加法函数，并输出结果。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;x + y&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">x = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">y = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">add(x, y)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line"></span><br><span class="line">6</span><br><span class="line">11</span><br></pre></td></tr></table></figure><ul><li><p>函数定义中，提供的<code>x</code>和<code>y</code>称之为：形式参数（形参），表示函数声明将要使用2个参数，参数之间使用逗号进行分隔</p></li><li><p>函数调用中，提供的<code>x</code>和<code>y</code>称之为：实际参数（实参），表示函数执行是时正使用的参数值，传入的时候，按照顺序传入数据，使用逗号分隔</p></li></ul><p><strong>传入参数的数量是不受限制的。</strong></p><h2 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h2><p>返回值指的就是在程序中函数完成事情后，最后给调用者的结果。  </p><p>基本格式：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">函数</span>(<span class="params">参数</span>):</span><br><span class="line">    函数体</span><br><span class="line">    <span class="keyword">return</span> 返回值</span><br><span class="line"></span><br><span class="line">变量 = 函数(参数)</span><br></pre></td></tr></table></figure><p>例：定义一个加法函数，传入两个参数，并将他们相加的结果作为返回值返回。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y</span>):</span><br><span class="line">    answer = x + y</span><br><span class="line">    <span class="keyword">return</span> answer</span><br><span class="line"></span><br><span class="line">a = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">b = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">result = add(a, b)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line"></span><br><span class="line">20</span><br><span class="line">30</span><br></pre></td></tr></table></figure><h2 id="None类型"><a href="#None类型" class="headerlink" title="None类型"></a>None类型</h2><p>如果函数中没有使用<code>return</code>语句返回数据，函数依然有返回值。  </p><p>Python中有一个特殊的字面量：<code>None</code>，其类型是：<code>&lt;class &#39;NoneType&#39;&gt;</code>。  </p><p>无返回值的函数，实际上就是返回了<code>None</code>这个字面量。</p><p>在判断中，<code>None</code>意味着假值。  </p><h2 id="函数的嵌套调用"><a href="#函数的嵌套调用" class="headerlink" title="函数的嵌套调用"></a>函数的嵌套调用</h2><p>所谓函数嵌套调用指的是一个函数里面又调用了另外一个函数。  </p><p>例：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun_b</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun_a</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    fun_b()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">fun_a()</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p>如果函数A中，调用了另外一个函数B，那么先把函数B中的任务都执行完毕之后才会回到上次函数A执行的位置。  </p><h2 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h2><p>变量<strong>作用域</strong>指的是变量的作用范围（变量在哪里可用，在哪里不可用）  </p><p>主要分为两类：局部变量和全局变量</p><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><p>所谓局部变量是定义在函数体内部的变量，即只在函数体内部生效。  </p><p>局部变量的作用：在函数体内部，临时保存数据，即当函数嗲用完成后，则销毁局部变量。  </p><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><p>所谓全局变量，指的是在函数体内、外都能生效的变量。  </p><h2 id="global关键字"><a href="#global关键字" class="headerlink" title="global关键字"></a>global关键字</h2><p>使用<code>global</code>关键字可以在函数内部声明变量为全局变量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">A</span>():</span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">B</span>():</span><br><span class="line">    num = <span class="number">500</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">C</span>():</span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line">    num = <span class="number">500</span></span><br><span class="line"></span><br><span class="line">A()</span><br><span class="line">B()</span><br><span class="line">A()</span><br><span class="line">C()</span><br><span class="line">A()</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">100</span><br><span class="line">100</span><br><span class="line">500</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">100</span><br><span class="line">100</span><br><span class="line">500</span><br></pre></td></tr></table></figure><h1 id="数据容器"><a href="#数据容器" class="headerlink" title="数据容器"></a>数据容器</h1><h2 id="list列表"><a href="#list列表" class="headerlink" title="list列表"></a>list列表</h2><h3 id="列表的定义"><a href="#列表的定义" class="headerlink" title="列表的定义"></a>列表的定义</h3><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义字面量</span></span><br><span class="line">[元素<span class="number">1</span>, 元素<span class="number">2</span>, 元素<span class="number">3</span>, 元素<span class="number">4</span>, ...]</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义变量</span></span><br><span class="line">变量名称 = [元素<span class="number">1</span>, 元素<span class="number">2</span>, 元素<span class="number">3</span>, 元素<span class="number">4</span>, ...]</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义空列表</span></span><br><span class="line">变量名称 = []</span><br><span class="line">变量名称 = <span class="built_in">list</span>()</span><br></pre></td></tr></table></figure><p>列表中的每一个数据，称之为元素。  </p><ul><li><p>以<code>[]</code>作为标识</p></li><li><p>列表内每一个元素之间用<code>,</code>逗号隔开</p></li></ul><p>注：<strong>列表可以一次存储多个数据，且可以为不同的数据类型，支持嵌套。</strong>  </p><p>例：定义一个列表<code>l</code>，存储的数据为<code>Bigglesworth</code>，<code>3.1415926</code>，<code>[1, 2, 3]</code>，输出该列表和它的类型。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="string">&#x27;Bigglesworth&#x27;</span>, <span class="number">3.1415926</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(l))</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;Bigglesworth&#x27;, 3.1415926, [1, 2, 3]]</span><br><span class="line">&lt;class &#x27;list&#x27;&gt;</span><br></pre></td></tr></table></figure><h3 id="list列表的下标索引"><a href="#list列表的下标索引" class="headerlink" title="list列表的下标索引"></a>list列表的下标索引</h3><p>基本格式：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">列表[下标索引]</span><br></pre></td></tr></table></figure><p>正向下标索引从<code>0</code>开始，反向下标索引从<code>-1</code>开始进行索引。  </p><p>例：定义一个列表<code>l</code>，其内容是圆周率小数点后<code>5</code>位，输出第一个元素和最后一个元素。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>]</span><br><span class="line"><span class="built_in">print</span>(l[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(l[-<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">9</span><br></pre></td></tr></table></figure><p>对于嵌套列表，同样地，下标索引也可以进行嵌套。  </p><p>例：定义一个列表<code>l</code>，存储<code>1~9</code>的数字，每三个分为一组，输出<code>5</code>。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">l = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line"><span class="built_in">print</span>(l[<span class="number">1</span>][<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><p>注意事项：要注意下标索引的取值范围，超出范围无法取出元素，并且会报错。  </p><h3 id="列表的常用操作"><a href="#列表的常用操作" class="headerlink" title="列表的常用操作"></a>列表的常用操作</h3><h4 id="列表的查询功能"><a href="#列表的查询功能" class="headerlink" title="列表的查询功能"></a>列表的查询功能</h4><p>查找指定元素在列表的下标，如果找不到，报错<code>ValueError</code>。  </p><p>基本格式：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">列表.index(元素)</span><br></pre></td></tr></table></figure><p>例：定义一个列表<code>l</code>，其内容是圆周率小数点后<code>5</code>位，分别查询是否存在元素<code>1</code>和<code>0</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>]</span><br><span class="line"><span class="built_in">print</span>(l.index(<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(l.index(<span class="number">0</span>))</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">ValueError: 0 is not in list</span><br></pre></td></tr></table></figure><h4 id="列表的修改功能"><a href="#列表的修改功能" class="headerlink" title="列表的修改功能"></a>列表的修改功能</h4><p>修改特定位置（索引）的元素值，直接对指定下标（正向、反向下标均可）的值进行重新赋值（修改）。    </p><p>基本格式：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">列表[下标] = 值</span><br></pre></td></tr></table></figure><p>例：定义一个列表<code>l</code>，其内容是<code>Bigglesworth</code>，将其改为<code>Areskey</code>。  </p><h4 id="插入元素"><a href="#插入元素" class="headerlink" title="插入元素"></a>插入元素</h4><p>在指定的下标位置，插入指定的元素。  </p><p>基本格式：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">列表.insert(下标, 元素)</span><br></pre></td></tr></table></figure><p>例：定义一个列表<code>l</code>，其内容是圆周率小数点后<code>5</code>位，在第<code>3</code>（即下标为<code>2</code>）位插入<code>999</code>。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>]</span><br><span class="line">l.insert(<span class="number">2</span>, <span class="number">999</span>)</span><br><span class="line"><span class="built_in">print</span>(l)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1, 4, 999, 1, 5, 9]</span><br></pre></td></tr></table></figure><h4 id="追加元素"><a href="#追加元素" class="headerlink" title="追加元素"></a>追加元素</h4><p>将指定元素，追加到列表的尾部。  </p><p>基本格式：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">列表.append(元素)</span><br></pre></td></tr></table></figure><p>例：定义一个列表<code>l</code>，其内容是圆周率小数点后<code>5</code>位，在最后追加一个新的元素<code>999</code>。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>]</span><br><span class="line">l.append(<span class="number">999</span>)</span><br><span class="line"><span class="built_in">print</span>(l)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1, 4, 1, 5, 9, 999]</span><br></pre></td></tr></table></figure><h4 id="追加多个元素"><a href="#追加多个元素" class="headerlink" title="追加多个元素"></a>追加多个元素</h4><p>将其他数据容器的内容取出，一次追加到列表尾部。  </p><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">列表.extend(其它数据容器)</span><br></pre></td></tr></table></figure><p>例：定义两个列表分别为<code>a</code>和<code>b</code>，<code>a</code>中的元素是<code>1</code>，<code>2</code>，<code>3</code>，<code>b</code>中的元素是<code>4</code>，<code>5</code>，<code>6</code>，将<code>b</code>列表合并到<code>a</code>列表中。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">a.extend(b)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1, 2, 3, 4, 5, 6]</span><br></pre></td></tr></table></figure><h4 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h4><p>基本格式：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#语法1：</span></span><br><span class="line"><span class="keyword">del</span> 列表[下标]</span><br><span class="line"><span class="comment">#语法2：</span></span><br><span class="line">列表.pop(下标)</span><br></pre></td></tr></table></figure><p>例：定义一个列表<code>l</code>，其内容是圆周率小数点后<code>5</code>位，用两种方式分别删除第一个元素和最后一个元素。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>]</span><br><span class="line"><span class="keyword">del</span> l[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line">l.pop(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(l)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[4, 1, 5, 9]</span><br><span class="line">[4, 1, 5]</span><br></pre></td></tr></table></figure><p>注意点：使用<code>pop</code>可以返回删除的元素。  </p><h4 id="删除第一个匹配项"><a href="#删除第一个匹配项" class="headerlink" title="删除第一个匹配项"></a>删除第一个匹配项</h4><p>删除某元素在列表中的第一个匹配项。</p><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">列表.remove(元素)</span><br></pre></td></tr></table></figure><p>例：定义一个列表<code>l</code>，其内容是圆周率小数点后<code>5</code>位，删除第一个出现的<code>1</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>]</span><br><span class="line">l.remove(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(l)</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[4, 1, 5, 9]</span><br></pre></td></tr></table></figure><h4 id="清空列表"><a href="#清空列表" class="headerlink" title="清空列表"></a>清空列表</h4><p>清空列表内容。</p><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">列表.clear()</span><br></pre></td></tr></table></figure><p>例：定义一个列表<code>l</code>，其内容是圆周率小数点后<code>5</code>位，将其清空。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>]</span><br><span class="line">l.clear()</span><br><span class="line"><span class="built_in">print</span>(l)</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[]</span><br></pre></td></tr></table></figure><h4 id="统计某个元素的数量"><a href="#统计某个元素的数量" class="headerlink" title="统计某个元素的数量"></a>统计某个元素的数量</h4><p>统计某元素在列表内的数量。</p><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">列表.count(元素)</span><br></pre></td></tr></table></figure><p>例：定义一个列表<code>l</code>，其内容是圆周率小数点后<code>5</code>位，统计其中元素<code>1</code>的数量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>]</span><br><span class="line"><span class="built_in">print</span>(l.count(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><h4 id="查找元素位置"><a href="#查找元素位置" class="headerlink" title="查找元素位置"></a>查找元素位置</h4><p>查找列表中某个元素第一次出现的下标，如果没有查到则报错<code>ValueError</code>。</p><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">列表.index(元素)</span><br></pre></td></tr></table></figure><p>例：定义一个列表<code>l</code>，其内容是圆周率小数点后<code>5</code>位，查找元素<code>1</code>的下标。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>]</span><br><span class="line"><span class="built_in">print</span>(l.index(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0</span><br></pre></td></tr></table></figure><h4 id="统计所有元素的数量"><a href="#统计所有元素的数量" class="headerlink" title="统计所有元素的数量"></a>统计所有元素的数量</h4><p>统计列表内有多少元素。</p><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">len</span>(列表)</span><br></pre></td></tr></table></figure><p>例：定义一个列表<code>l</code>，其内容是圆周率小数点后<code>5</code>位，统计其中一共有多少个元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(l))</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><table><thead><tr><th align="center">编号</th><th align="center">使用方式</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">列表.append(元素)</td><td align="center">向列表中追加一个元素</td></tr><tr><td align="center">2</td><td align="center">列表.extend(容器)</td><td align="center">将数据容器的内容依次取出，追加到列表尾部</td></tr><tr><td align="center">3</td><td align="center">列表.insert(下标, 元素)</td><td align="center">在指定下标处，插入指定的元素</td></tr><tr><td align="center">4</td><td align="center">del 列表(下标)</td><td align="center">删除列表指定下标元素</td></tr><tr><td align="center">5</td><td align="center">列表.pop(下标)</td><td align="center">删除列表指定下标元素</td></tr><tr><td align="center">6</td><td align="center">列表.remove(元素)</td><td align="center">从前向后，删除此元素第一个匹配项</td></tr><tr><td align="center">7</td><td align="center">列表.clear(元素)</td><td align="center">清空列表</td></tr><tr><td align="center">8</td><td align="center">列表.count(元素)</td><td align="center">统计此元素在列表中出现的次数</td></tr><tr><td align="center">9</td><td align="center">列表.index(元素)</td><td align="center">查找指定元素在列表中的下标<br>找不到报错<code>ValueError</code></td></tr><tr><td align="center">10</td><td align="center">len(列表)</td><td align="center">统计容器中有多少个元素</td></tr></tbody></table><h3 id="列表的特点"><a href="#列表的特点" class="headerlink" title="列表的特点"></a>列表的特点</h3><ul><li>可以容纳的元素数量上限为（2<sup>63</sup>-1，即9223372036854775807个）</li><li>可以容纳不同类型的元素（混装）</li><li>数据是有序存储的（有下标序号）</li><li>允许重复数据存在</li><li>可以修改（增加或删除元素等）</li></ul><h3 id="list列表的遍历"><a href="#list列表的遍历" class="headerlink" title="list列表的遍历"></a>list列表的遍历</h3><h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><p>基本格式：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">index = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> index &lt; <span class="built_in">len</span>(列表):</span><br><span class="line">    元素 = 列表[index]</span><br><span class="line">    对元素进行处理</span><br><span class="line">    index += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>例：定义一个列表<code>l</code>，其内容是圆周率小数点后<code>5</code>位，将这些元素依次输出，每两个元素之间用一个空格隔开。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>]</span><br><span class="line">index = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> index &lt; <span class="built_in">len</span>(l):</span><br><span class="line">    <span class="built_in">print</span>(l[index], end = <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    index += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 4 1 5 9 </span><br></pre></td></tr></table></figure><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 临时变量 <span class="keyword">in</span> 数据容器:</span><br><span class="line">    对临时变量进行处理</span><br></pre></td></tr></table></figure><p>例：定义一个列表<code>l</code>，其内容是圆周率小数点后<code>5</code>位，将这些元素依次输出，每两个元素之间用一个空格隔开。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>]</span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> l:</span><br><span class="line">    <span class="built_in">print</span>(element, end = <span class="string">&#x27; &#x27;</span>)</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 4 1 5 9 </span><br></pre></td></tr></table></figure><h2 id="tuple元组"><a href="#tuple元组" class="headerlink" title="tuple元组"></a>tuple元组</h2><h3 id="元组的定义"><a href="#元组的定义" class="headerlink" title="元组的定义"></a>元组的定义</h3><p>元组定义：定义元组使用<strong>小括号</strong>，且使用<strong>逗号</strong>隔开各个数据，数据可以是不同的数据类型。</p><p>基本格式：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义元组字面量</span></span><br><span class="line">(元素, 元素, ......, 元素)</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义元组变量</span></span><br><span class="line">变量名称 = (元素, 元素, ......, 元素)</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义空元组</span></span><br><span class="line">变量名称 = ()    <span class="comment">#方式1</span></span><br><span class="line">变量名称 = <span class="built_in">tuple</span>()    <span class="comment">#方式2</span></span><br></pre></td></tr></table></figure><p>例：定义一个元组<code>t</code>，存储的数据为<code>Bigglesworth</code>，<code>3.1415926</code>，<code>[1, 2, 3]</code>，输出该元组和它的类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="string">&#x27;Bigglesworth&#x27;</span>, <span class="number">3.14</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(t)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(t))</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(&#x27;Bigglesworth&#x27;, 3.14, [1, 2, 3])</span><br><span class="line">&lt;class &#x27;tuple&#x27;&gt;</span><br></pre></td></tr></table></figure><p><strong>注意点：如果元组内只有一个数据，这个数据后面要添加逗号。</strong></p><h3 id="tuple元组的下标索引"><a href="#tuple元组的下标索引" class="headerlink" title="tuple元组的下标索引"></a>tuple元组的下标索引</h3><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">元组[下标索引]</span><br></pre></td></tr></table></figure><p>正向下标索引从<code>0</code>开始，反向下标索引从<code>-1</code>开始进行索引。</p><p>例：定义一个元组<code>t</code>，其内容是圆周率小数点后<code>5</code>位，输出第一个元素和最后一个元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>)</span><br><span class="line"><span class="built_in">print</span>(t[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(t[-<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">9</span><br></pre></td></tr></table></figure><p>对于嵌套列表，同样地，下标索引也可以进行嵌套。</p><p>例：定义一个元组<code>t</code>，存储<code>1~9</code>的数字，每三个分为一组，输出<code>5</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t = ((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>), (<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>))</span><br><span class="line"><span class="built_in">print</span>(t[<span class="number">1</span>][<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><p>注意事项：要注意下标索引的取值范围，超出范围无法取出元素，并且会报错。</p><h3 id="元组的常用操作"><a href="#元组的常用操作" class="headerlink" title="元组的常用操作"></a>元组的常用操作</h3><h4 id="查找元素位置-1"><a href="#查找元素位置-1" class="headerlink" title="查找元素位置"></a>查找元素位置</h4><p>查找元组中某个元素第一次出现的下标，如果没有查到则报错<code>ValueError</code>。</p><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">元组.index(元素)</span><br></pre></td></tr></table></figure><p>例：定义一个元组<code>t</code>，其内容是圆周率小数点后<code>5</code>位，查找元素<code>1</code>的下标。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>)</span><br><span class="line"><span class="built_in">print</span>(t.index(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0</span><br></pre></td></tr></table></figure><h4 id="统计某个元素的数量-1"><a href="#统计某个元素的数量-1" class="headerlink" title="统计某个元素的数量"></a>统计某个元素的数量</h4><p>统计某元素在元组内的数量。</p><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">元组.count(元素)</span><br></pre></td></tr></table></figure><p>例：定义一个元组<code>t</code>，其内容是圆周率小数点后<code>5</code>位，统计其中元素<code>1</code>的数量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>)</span><br><span class="line"><span class="built_in">print</span>(t.count(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><h4 id="统计所有元素的数量-1"><a href="#统计所有元素的数量-1" class="headerlink" title="统计所有元素的数量"></a>统计所有元素的数量</h4><p>统计元组内有多少元素。</p><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">len</span>(元组)</span><br></pre></td></tr></table></figure><p>例：定义一个元组<code>t</code>，其内容是圆周率小数点后<code>5</code>位，统计其中一共有多少个元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(t))</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><table><thead><tr><th align="center">编号</th><th align="center">方法</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">index()</td><td align="center">查找某个数据，如果数据存在返回对应的下标，否则报错</td></tr><tr><td align="center">2</td><td align="center">count()</td><td align="center">统计某个数据在当前元组出现的次数</td></tr><tr><td align="center">3</td><td align="center">len(元组)</td><td align="center">统计元组内的元素个数</td></tr></tbody></table><h3 id="元组的特点"><a href="#元组的特点" class="headerlink" title="元组的特点"></a>元组的特点</h3><ul><li><p>可以容纳多个数据</p></li><li><p>可以容纳不同类型的数据（混装）</p></li><li><p>数据是有序存储的（下标索引）</p></li><li><p>允许重复数据存在</p></li><li><p>不可以修改（增加或删除元素等，但是可以修改内部<code>list</code>的内部元素）</p></li><li><p>支持<code>for</code>循环</p></li></ul><h2 id="srt字符串"><a href="#srt字符串" class="headerlink" title="srt字符串"></a>srt字符串</h2><h3 id="字符串的下标索引"><a href="#字符串的下标索引" class="headerlink" title="字符串的下标索引"></a>字符串的下标索引</h3><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串[下标索引]</span><br></pre></td></tr></table></figure><p>正向下标索引从<code>0</code>开始，反向下标索引从<code>-1</code>开始进行索引。</p><p>例：定义一个字符串<code>s</code>，其内容是圆周率小数点后<code>5</code>位，输出第一个元素和最后一个元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;14159&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(s[-<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">9</span><br></pre></td></tr></table></figure><h3 id="字符串的常用操作"><a href="#字符串的常用操作" class="headerlink" title="字符串的常用操作"></a>字符串的常用操作</h3><h4 id="查找元素位置-2"><a href="#查找元素位置-2" class="headerlink" title="查找元素位置"></a>查找元素位置</h4><p>查找字符串中某个字符串第一次出现的下标，如果没有查到则报错<code>ValueError</code>。</p><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">元组.index(元素)</span><br></pre></td></tr></table></figure><p>例：定义一个字符串<code>s</code>，存储的内容为<code>Hello World!</code>，输出<code>World</code>第一次出现的下标。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;Hello World!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s.index(<span class="string">&quot;World&quot;</span>))</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure><h4 id="字符串的替换"><a href="#字符串的替换" class="headerlink" title="字符串的替换"></a>字符串的替换</h4><p>将字符串内的全部：<code>字符串1</code>，替换为<code>字符串2</code>。</p><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串.replace(字符串<span class="number">1</span>, 字符串<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p><strong>注意点：不是修改字符串本身，而是得到了一个新的字符串。</strong></p><p>例：定义一个字符串<code>s1</code>，存储的内容为<code>Hello World!</code>，将<code>World</code>替换为<code>Bigglesworth</code>并赋值给<code>s2</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">&quot;Hello World!&quot;</span></span><br><span class="line">s2 = s1.replace(<span class="string">&quot;World&quot;</span>, <span class="string">&quot;Bigglesworth&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"><span class="built_in">print</span>(s2)</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br><span class="line">Hello Bigglesworth!</span><br></pre></td></tr></table></figure><h4 id="字符串的分割"><a href="#字符串的分割" class="headerlink" title="字符串的分割"></a>字符串的分割</h4><p>按照指定的分隔符字符串，将字符串划分为多个字符串，并存入列表对象中。</p><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串.split(分隔符字符串)</span><br></pre></td></tr></table></figure><p><strong>注意点：字符串本身不变，而是得到了一个列表对象。</strong></p><p>例：定义一个字符串<code>s</code>，存储的内容为<code>I have a dream!</code>，以空格为分隔符分割字符串，将得到的列表赋值给<code>l</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;I have a dream!&quot;</span></span><br><span class="line">l = s.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(l)</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;I&#x27;, &#x27;have&#x27;, &#x27;a&#x27;, &#x27;dream!&#x27;]</span><br></pre></td></tr></table></figure><h4 id="字符串的规整操作"><a href="#字符串的规整操作" class="headerlink" title="字符串的规整操作"></a>字符串的规整操作</h4><p>去掉字符串前面和后面的特定字符，如果没有指定，则去除空格。</p><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串.strip(<span class="string">&quot;字符串&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>注意点：不是修改字符串本身，而是得到了一个新的字符串，传入的字符是按照单个字符来计算的，而不是直接看字符串。</strong></p><p>例：定义一个字符串<code>s1</code>，存储的内容为<code> I have a dream! </code>，去除前后空格，将结果存储至<code>s2</code>并输出。定义一个字符串<code>str1</code>，存储的内容为<code>123456789132</code>，去除<code>123</code>，将结果存储至<code>str2</code>并输出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">&quot; I have a dream! &quot;</span></span><br><span class="line">s2 = s1.strip()</span><br><span class="line"><span class="built_in">print</span>(s2)</span><br><span class="line">str1 = <span class="string">&quot;123456789132&quot;</span></span><br><span class="line">str2 = str1.strip(<span class="string">&quot;123&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(str2)</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">I have a dream!</span><br><span class="line">456789</span><br></pre></td></tr></table></figure><h4 id="统计某个字符串出现的次数"><a href="#统计某个字符串出现的次数" class="headerlink" title="统计某个字符串出现的次数"></a>统计某个字符串出现的次数</h4><p>统计某个字符串在整个字符串中出现的次数。</p><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串.count(字符串)</span><br></pre></td></tr></table></figure><p>例：定义一个字符串<code>s</code>，其内容是<code>1231231234567</code>，统计字符串<code>123</code>的数量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&#x27;1231231234567&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s.count(<span class="string">&quot;123&quot;</span>))</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h4 id="计算字符串长度"><a href="#计算字符串长度" class="headerlink" title="计算字符串长度"></a>计算字符串长度</h4><p>计算字符串中一共有多少个字符。</p><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">len</span>(字符串)</span><br></pre></td></tr></table></figure><p>例：定义一个字符串<code>s</code>，其内容是<code>1231231234567</code>，计算字符串长度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&#x27;1231231234567&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(s))</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">13</span><br></pre></td></tr></table></figure><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><table><thead><tr><th align="center">编号</th><th align="center">操作</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">字符串[下标]</td><td align="center">根据下标索引取出特定位置字符</td></tr><tr><td align="center">2</td><td align="center">字符串.index(字符串)</td><td align="center">查找给定字符的第一个匹配项的下标</td></tr><tr><td align="center">3</td><td align="center">字符串.replace(字符串1, 字符串2)</td><td align="center">将字符串内的全部字符串1，替换为字符串2<br>不会修改原字符串，而是得到一个新的</td></tr><tr><td align="center">4</td><td align="center">字符串.split(字符串)</td><td align="center">按照给定字符串，对字符串进行分割<br>不会修改原字符串，而是得到一个新的列表</td></tr><tr><td align="center">5</td><td align="center">字符串.strip()<br>字符串.strip(字符串)</td><td align="center">移除首尾空格和换行符或指定字符串</td></tr><tr><td align="center">6</td><td align="center">字符串.count(字符串)</td><td align="center">统计字符串内某字符串的出现次数</td></tr><tr><td align="center">7</td><td align="center">len(字符串)</td><td align="center">统计字符串的字符个数</td></tr></tbody></table><h3 id="字符串的遍历"><a href="#字符串的遍历" class="headerlink" title="字符串的遍历"></a>字符串的遍历</h3><p>同列表、元组一样，字符串也支持<code>while</code>循环和<code>for</code>循环进行遍历。</p><h4 id="while循环-1"><a href="#while循环-1" class="headerlink" title="while循环"></a>while循环</h4><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">index = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> index &lt; <span class="built_in">len</span>(字符串):</span><br><span class="line">    字符 = 字符串[index]</span><br><span class="line">    对字符进行处理</span><br><span class="line">    index += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>例：定义一个字符串<code>s</code>，内容存储为<code>I have a dream.</code>，将它们依次输出中间用一个空格隔开。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;I have a dream.&quot;</span></span><br><span class="line">index = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> index &lt; <span class="built_in">len</span>(s):</span><br><span class="line">    <span class="built_in">print</span>(s[index], end = <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    index += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I   h a v e   a   d r e a m . </span><br></pre></td></tr></table></figure><h3 id="for循环-1"><a href="#for循环-1" class="headerlink" title="for循环"></a>for循环</h3><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 临时变量 <span class="keyword">in</span> 数据容器:</span><br><span class="line">    对临时变量进行处理</span><br></pre></td></tr></table></figure><p>例：定义一个字符串<code>s</code>，内容存储为<code>I have a dream.</code>，将它们依次输出中间用一个空格隔开。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;I have a dream.&quot;</span></span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> s:</span><br><span class="line">    <span class="built_in">print</span>(element, end = <span class="string">&#x27; &#x27;</span>)</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I   h a v e   a   d r e a m . </span><br></pre></td></tr></table></figure><h3 id="字符串的特点"><a href="#字符串的特点" class="headerlink" title="字符串的特点"></a>字符串的特点</h3><ul><li>只可以存储字符串</li><li>长度任意（取决于内存大小）</li><li>支持下标索引</li><li>允许重复字符串存在</li><li>不可以修改（增加或删除元素等）</li><li>支持for循环</li></ul><h2 id="序列的切片"><a href="#序列的切片" class="headerlink" title="序列的切片"></a>序列的切片</h2><h3 id="序列的定义"><a href="#序列的定义" class="headerlink" title="序列的定义"></a>序列的定义</h3><p>序列是指：内容连续、有序，可使用下标索引的一类数据容器。<strong>列表、元组、字符串，均可以视为序列。</strong></p><h3 id="序列的切片-1"><a href="#序列的切片-1" class="headerlink" title="序列的切片"></a>序列的切片</h3><p>序列支持切片，即从一个序列中，取出一个子序列。</p><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">序列[起始下标:结束下标:步长]</span><br></pre></td></tr></table></figure><p>表示从序列中，从指定位置开始，依次取出元素，到指定位置结束，得到一个新序列：</p><ul><li>起始下标表示从何处开始，可以留空，留空视作从头开始</li><li>结束下表（不含）表示何处结束，可以留空，留空视作截取到结尾</li><li>步长表示，依次取元素的间隔<ul><li>步长1表示，一个个取元素</li><li>步长2表示，每次跳过1个元素取</li><li>步长N表示，每次跳过N-1个元素取</li><li>步长为负数表示，反向取（注意，起始下标和结束下标也要反向标记）</li></ul></li></ul><p><strong>注意点：此操作不会影响序列本身，而是会得到一个新的序列。</strong></p><p>例：定义一个字符串<code>s</code>，其内容是<code>Hello World!</code>，分别输出前一半元素（向下取整），隔一个取一个，倒置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;Hello World!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s[:<span class="built_in">len</span>(s) // <span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(s[::<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(s[::-<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Hello </span><br><span class="line">HloWrd</span><br><span class="line">!dlroW olleH</span><br></pre></td></tr></table></figure><h2 id="set集合"><a href="#set集合" class="headerlink" title="set集合"></a>set集合</h2><h3 id="集合的定义"><a href="#集合的定义" class="headerlink" title="集合的定义"></a>集合的定义</h3><p>集合定义：定义集合使用<strong>花括号</strong>，且使用<strong>逗号</strong>隔开各个数据，数据可以是不同的数据类型。</p><p>基本格式：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义集合字面量</span></span><br><span class="line">&#123;元素, 元素, ......, 元素&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义集合变量</span></span><br><span class="line">变量名称 = &#123;元素, 元素, ......, 元素&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义空集合</span></span><br><span class="line">变量名称 = <span class="built_in">set</span>()</span><br></pre></td></tr></table></figure><p>例：定义一个集合<code>s</code>，存储的数据为<code>Bigglesworth</code>，<code>3.1415926</code>，<code>3.1415926</code>，输出该集合和它的类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = &#123;<span class="string">&quot;Bigglesworth&quot;</span>, <span class="number">3.1415926</span>, <span class="number">3.1415926</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(s))</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;3.1415926, &#x27;Bigglesworth&#x27;&#125;</span><br><span class="line">&lt;class &#x27;set&#x27;&gt;</span><br></pre></td></tr></table></figure><p><strong>注意点：数据类型是无序存储的，且不允许重复元素的存在。</strong></p><h3 id="集合的常用操作"><a href="#集合的常用操作" class="headerlink" title="集合的常用操作"></a>集合的常用操作</h3><p>首先，因为集合是无序的，所以集合<strong>不支持下标索引访问。</strong></p><h4 id="添加新元素"><a href="#添加新元素" class="headerlink" title="添加新元素"></a>添加新元素</h4><p>将指定元素添加到集合内，且集合本身被修改。</p><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">集合.add(<span class="string">&quot;元素&quot;</span>)</span><br></pre></td></tr></table></figure><p>例：定义一个集合<code>s</code>，存储的数据为<code>Bigglesworth</code>，<code>3.1415926</code>，<code>3.1415926</code>，将<code>Hello World!</code>添加至该集合。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">元组.index(元素)</span><br></pre></td></tr></table></figure><p>例：定义一个元组<code>t</code>，其内容是圆周率小数点后<code>5</code>位，查找元素<code>1</code>的下标。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = &#123;<span class="string">&quot;Bigglesworth&quot;</span>, <span class="number">3.1415926</span>, <span class="number">3.1415926</span>&#125;</span><br><span class="line">s.add(<span class="string">&quot;Hello World!&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;Hello World!&#x27;, 3.1415926, &#x27;Bigglesworth&#x27;&#125;</span><br></pre></td></tr></table></figure><h4 id="移除元素"><a href="#移除元素" class="headerlink" title="移除元素"></a>移除元素</h4><p>将指定元素从集合中移除。</p><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">集合.remove(<span class="string">&quot;元素&quot;</span>)</span><br></pre></td></tr></table></figure><p>例：定义一个集合<code>s</code>，存储的数据为<code>Bigglesworth</code>，<code>3.1415926</code>，<code>3.1415926</code>，将<code>3.1415926</code>移除。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = &#123;<span class="string">&quot;Bigglesworth&quot;</span>, <span class="number">3.1415926</span>, <span class="number">3.1415926</span>&#125;</span><br><span class="line">s.add(<span class="number">3.1415926</span>)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;3.1415926, &#x27;Bigglesworth&#x27;&#125;</span><br></pre></td></tr></table></figure><h4 id="从集合中随机取出元素"><a href="#从集合中随机取出元素" class="headerlink" title="从集合中随机取出元素"></a>从集合中随机取出元素</h4><p>从集合中随机取出一个元素。</p><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变量 = 集合.pop()</span><br></pre></td></tr></table></figure><p>例：定义一个集合<code>s</code>，存储的数据为<code>Bigglesworth</code>，<code>3.1415926</code>，<code>3.1415926</code>，利用<code>pop</code>随机取出一个元素，并将取出的元素赋值给<code>element</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s = &#123;<span class="string">&quot;Bigglesworth&quot;</span>, <span class="number">3.1415926</span>, <span class="number">3.1415926</span>&#125;</span><br><span class="line">element = s.pop()</span><br><span class="line"><span class="built_in">print</span>(element)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3.1415926</span><br><span class="line">&#123;&#x27;Bigglesworth&#x27;&#125;</span><br></pre></td></tr></table></figure><h4 id="清空集合"><a href="#清空集合" class="headerlink" title="清空集合"></a>清空集合</h4><p>清空集合内容。</p><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">集合.clear()</span><br></pre></td></tr></table></figure><p>例：定义一个集合<code>s</code>，存储的数据为<code>Bigglesworth</code>，<code>3.1415926</code>，<code>3.1415926</code>，将其清空。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = &#123;<span class="string">&quot;Bigglesworth&quot;</span>, <span class="number">3.1415926</span>, <span class="number">3.1415926</span>&#125;</span><br><span class="line">s.clear()</span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set()</span><br></pre></td></tr></table></figure><h4 id="求差集"><a href="#求差集" class="headerlink" title="求差集"></a>求差集</h4><p>取出两个集合的差集（前者有而后者没有的）。</p><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">集合 = 集合<span class="number">1.</span>difference(集合<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>例：定义两个集合<code>s1</code>和<code>s2</code>，<code>s1</code>中存储内容为十以内的奇数,<code>s2</code>中存储内容为十以内的质数，求二者差集，并赋值给<code>s3</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>&#125;</span><br><span class="line">s3 = s1.difference(s2)</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"><span class="built_in">print</span>(s2)</span><br><span class="line"><span class="built_in">print</span>(s3)</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;1, 3, 5, 7, 9&#125;</span><br><span class="line">&#123;2, 3, 5, 7&#125;</span><br><span class="line">&#123;1, 9&#125;</span><br></pre></td></tr></table></figure><h4 id="消除差集"><a href="#消除差集" class="headerlink" title="消除差集"></a>消除差集</h4><p>消除两个集合的差集，在第一个集合中删除与第二个集合相同的元素。</p><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">集合 = 集合<span class="number">1.</span>difference(集合<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>例：定义两个集合<code>s1</code>和<code>s2</code>，<code>s1</code>中存储内容为十以内的奇数,<code>s2</code>中存储内容为十以内的质数，消除差集。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>&#125;</span><br><span class="line">s1.difference_update(s2)</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"><span class="built_in">print</span>(s2)</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;1, 9&#125;</span><br><span class="line">&#123;2, 3, 5, 7&#125;</span><br></pre></td></tr></table></figure><h4 id="求并集"><a href="#求并集" class="headerlink" title="求并集"></a>求并集</h4><p>将两个集合组成一个新的集合。</p><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">集合 = 集合<span class="number">1.</span>union(集合<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>例：定义两个集合<code>s1</code>和<code>s2</code>，<code>s1</code>中存储内容为十以内的奇数,<code>s2</code>中存储内容为十以内的质数，求二者并集，并赋值给<code>s3</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>&#125;</span><br><span class="line">s3 = s1.difference(s2)</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"><span class="built_in">print</span>(s2)</span><br><span class="line"><span class="built_in">print</span>(s3)</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;1, 3, 5, 7, 9&#125;</span><br><span class="line">&#123;2, 3, 5, 7&#125;</span><br><span class="line">&#123;1, 2, 3, 5, 7, 9&#125; </span><br></pre></td></tr></table></figure><h4 id="统计所有元素的数量-2"><a href="#统计所有元素的数量-2" class="headerlink" title="统计所有元素的数量"></a>统计所有元素的数量</h4><p>统计集合元素数量。</p><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">len</span>(集合)</span><br></pre></td></tr></table></figure><p>例：定义一个集合<code>s</code>，存储的数据为<code>Bigglesworth</code>，<code>3.1415926</code>，<code>3.1415926</code>，统计其中的元素数量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = &#123;<span class="string">&quot;Bigglesworth&quot;</span>, <span class="number">3.1415926</span>, <span class="number">3.1415926</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(s))</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><h3 id="集合的遍历"><a href="#集合的遍历" class="headerlink" title="集合的遍历"></a>集合的遍历</h3><p>由于集合不支持下标索引，因此不能使用<code>while</code>循环进行遍历，只能使用<code>for</code>循环进行遍历。</p><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 临时变量 <span class="keyword">in</span> 数据容器:</span><br><span class="line">    对临时变量进行处理</span><br></pre></td></tr></table></figure><p>例：定义一个集合<code>s</code>，存储的内容为二十以内的质数，利用<code>for</code>循环进行遍历。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>&#125;</span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> s:</span><br><span class="line">    <span class="built_in">print</span>(element)</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">3</span><br><span class="line">5</span><br><span class="line">7</span><br><span class="line">11</span><br><span class="line">13</span><br><span class="line">17</span><br><span class="line">19</span><br></pre></td></tr></table></figure><h3 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h3><table><thead><tr><th align="center">编号</th><th align="center">使用方式</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">集合.add(元素)</td><td align="center">集合内添加一个元素</td></tr><tr><td align="center">2</td><td align="center">集合.remove(元素)</td><td align="center">移除集合内指定的元素</td></tr><tr><td align="center">3</td><td align="center">集合.pop()</td><td align="center">从集合中随机取出一个元素</td></tr><tr><td align="center">4</td><td align="center">集合.clear()</td><td align="center">将集合清空</td></tr><tr><td align="center">5</td><td align="center">集合1.difference(集合2)</td><td align="center">得到一个新集合，内含2个集合的差集<br>原有的两个集合内容不变</td></tr><tr><td align="center">6</td><td align="center">集合1.difference_update(集合2)</td><td align="center">在集合1中，删除集合2中存在的元素<br/>集合1被修改，集合2内容不变</td></tr><tr><td align="center">7</td><td align="center">集合1.union(集合2)</td><td align="center">得到一个新集合，内含2个集合的全部元素<br/>原有的两个集合内容不变</td></tr><tr><td align="center">8</td><td align="center">len(集合)</td><td align="center">得到一个整数，记录了集合的元素数量</td></tr></tbody></table><h3 id="集合的特点"><a href="#集合的特点" class="headerlink" title="集合的特点"></a>集合的特点</h3><ul><li>可以容纳多个数据</li><li>可以容纳不同类型的数据（混装）</li><li>数据是无序存储的（不支持下标索引）</li><li>不允许重复数据存在</li><li>可以修改（增加或删除元素等）</li><li>支持for循环</li></ul><h2 id="dic字典、映射"><a href="#dic字典、映射" class="headerlink" title="dic字典、映射"></a>dic字典、映射</h2><h3 id="字典的定义"><a href="#字典的定义" class="headerlink" title="字典的定义"></a>字典的定义</h3><p>字典定义：定义字典使用<strong>花括号</strong>，不过存储的元素是一个个的<strong>键值对</strong>。</p><p>基本格式：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义字典字面量</span></span><br><span class="line">&#123;key: value, key: value, ......, key: value&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义字典变量</span></span><br><span class="line">&#123;key: value, key: value, ......, key: value&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义空字典</span></span><br><span class="line">变量名称 = &#123;&#125;<span class="comment">#方式1</span></span><br><span class="line">变量名称 = <span class="built_in">dict</span>()<span class="comment">#方式2</span></span><br></pre></td></tr></table></figure><p>例：定义一个集合<code>d</code>，存储的数据为五以内的所有数字，其中如果是质数则标记为<code>1</code>，否则标记为<code>0</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="number">1</span>: <span class="number">0</span>, <span class="number">2</span>: <span class="number">1</span>, <span class="number">3</span>: <span class="number">1</span>, <span class="number">4</span>: <span class="number">0</span>, <span class="number">5</span>: <span class="number">1</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(d))</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;1: 0, 2: 1, 3: 1, 4: 0, 5: 1&#125;</span><br><span class="line">&lt;class &#x27;dict&#x27;&gt;</span><br></pre></td></tr></table></figure><p><strong>注意点：如果键相同，则只会保留一个。</strong></p><h3 id="字典数据的获取"><a href="#字典数据的获取" class="headerlink" title="字典数据的获取"></a>字典数据的获取</h3><p>字典统计和一样，不可以使用下标进行索引，但是字典可以通过<code>Key</code>值来取得对应的<code>Value</code>。</p><p>同时，字典的<code>key</code>和<code>Value</code>可以是任意数据类型（<code>Key</code>不可以为字典），那么就表明，字典是可以进行嵌套的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字典[Key]</span><br></pre></td></tr></table></figure><p>例：定义一个字典`dict，存储学生信息，并输出某条具体信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dic = &#123;<span class="string">&quot;Bigglesworth&quot;</span>: &#123;<span class="string">&quot;Math&quot;</span>: <span class="number">100</span>, <span class="string">&quot;Chinese&quot;</span>: <span class="number">90</span>&#125;, </span><br><span class="line">       <span class="string">&quot;Areskey&quot;</span>: &#123;<span class="string">&quot;English&quot;</span>: <span class="number">95</span>, <span class="string">&quot;History&quot;</span>: <span class="number">99</span>&#125;&#125;</span><br><span class="line"><span class="built_in">print</span>(dic[<span class="string">&quot;Bigglesworth&quot;</span>][<span class="string">&quot;Chinese&quot;</span>])</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">90</span><br></pre></td></tr></table></figure><h3 id="字典的常用操作"><a href="#字典的常用操作" class="headerlink" title="字典的常用操作"></a>字典的常用操作</h3><h4 id="添加新元素-1"><a href="#添加新元素-1" class="headerlink" title="添加新元素"></a>添加新元素</h4><p>字典被修改，增加了元素。</p><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字典[Key] = Value</span><br></pre></td></tr></table></figure><p>例：定义一个集合<code>d</code>，存储的数据为五以内的所有数字，其中如果是质数则标记为<code>1</code>，否则标记为<code>0</code>，添加新的键值对为<code>17</code>的对应关系。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="number">1</span>: <span class="number">0</span>, <span class="number">2</span>: <span class="number">1</span>, <span class="number">3</span>: <span class="number">1</span>, <span class="number">4</span>: <span class="number">0</span>, <span class="number">5</span>: <span class="number">1</span>&#125;</span><br><span class="line">d[<span class="number">17</span>] = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(d)</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;1: 0, 2: 1, 3: 1, 4: 0, 5: 1, 17: 1&#125;</span><br></pre></td></tr></table></figure><h4 id="更新元素"><a href="#更新元素" class="headerlink" title="更新元素"></a>更新元素</h4><p>字典被修改，元素被更新。</p><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字典[Key] = Value</span><br></pre></td></tr></table></figure><p><strong>注意点：字典<code>Key</code>不可以重复，所以对已经存在的<code>Key</code>执行上述操作，就是更新<code>Value</code>的值。</strong></p><p>例：定义一个集合<code>d</code>，存储的数据为五以内的所有数字，其中如果是质数则标记为<code>1</code>，否则标记为<code>0</code>，将<code>1</code>的值改为<code>3</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="number">1</span>: <span class="number">0</span>, <span class="number">2</span>: <span class="number">1</span>, <span class="number">3</span>: <span class="number">1</span>, <span class="number">4</span>: <span class="number">0</span>, <span class="number">5</span>: <span class="number">1</span>&#125;</span><br><span class="line">d[<span class="number">1</span>] = <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(d)</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;1: 3, 2: 1, 3: 1, 4: 0, 5: 1&#125;</span><br></pre></td></tr></table></figure><h4 id="删除元素-1"><a href="#删除元素-1" class="headerlink" title="删除元素"></a>删除元素</h4><p>获得指定<code>Key</code>的<code>Value</code>，同时字典被修改，指定<code>Key</code>的数据被删除。</p><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变量 = 字典.pop(Key)</span><br></pre></td></tr></table></figure><p>例：定义一个集合<code>d</code>，存储的数据为五以内的所有数字，其中如果是质数则标记为<code>1</code>，否则标记为<code>0</code>，将<code>3</code>的键值对删除并输出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="number">1</span>: <span class="number">0</span>, <span class="number">2</span>: <span class="number">1</span>, <span class="number">3</span>: <span class="number">1</span>, <span class="number">4</span>: <span class="number">0</span>, <span class="number">5</span>: <span class="number">1</span>&#125;</span><br><span class="line">value = d.pop(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(value)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">&#123;1: 0, 2: 1, 4: 0, 5: 1&#125;</span><br></pre></td></tr></table></figure><h4 id="清空字典"><a href="#清空字典" class="headerlink" title="清空字典"></a>清空字典</h4><p>清空字典中的所有元素。</p><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字典.clear()</span><br></pre></td></tr></table></figure><p>例：定义一个集合<code>d</code>，存储的数据为五以内的所有数字，其中如果是质数则标记为<code>1</code>，否则标记为<code>0</code>，将该字典清空。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="number">1</span>: <span class="number">0</span>, <span class="number">2</span>: <span class="number">1</span>, <span class="number">3</span>: <span class="number">1</span>, <span class="number">4</span>: <span class="number">0</span>, <span class="number">5</span>: <span class="number">1</span>&#125;</span><br><span class="line">d.clear()</span><br><span class="line"><span class="built_in">print</span>(d)</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="获取全部Key"><a href="#获取全部Key" class="headerlink" title="获取全部Key"></a>获取全部Key</h4><p>到字典中的全部<code>Key</code>。</p><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字典.keys()</span><br></pre></td></tr></table></figure><p>例：定义一个集合<code>d</code>，存储的数据为五以内的所有数字，其中如果是质数则标记为<code>1</code>，否则标记为<code>0</code>，获取该字典的全部<code>Key</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="number">1</span>: <span class="number">0</span>, <span class="number">2</span>: <span class="number">1</span>, <span class="number">3</span>: <span class="number">1</span>, <span class="number">4</span>: <span class="number">0</span>, <span class="number">5</span>: <span class="number">1</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(d.keys())</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict_keys([1, 2, 3, 4, 5])</span><br></pre></td></tr></table></figure><h4 id="统计字典的元素数量"><a href="#统计字典的元素数量" class="headerlink" title="统计字典的元素数量"></a>统计字典的元素数量</h4><p>共计字典中一共有多少个元素。</p><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">len</span>(字典)</span><br></pre></td></tr></table></figure><p>例：定义一个集合<code>d</code>，存储的数据为五以内的所有数字，其中如果是质数则标记为<code>1</code>，否则标记为<code>0</code>，统计一共有多少个元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="number">1</span>: <span class="number">0</span>, <span class="number">2</span>: <span class="number">1</span>, <span class="number">3</span>: <span class="number">1</span>, <span class="number">4</span>: <span class="number">0</span>, <span class="number">5</span>: <span class="number">1</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(d))</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><h3 id="字典的遍历"><a href="#字典的遍历" class="headerlink" title="字典的遍历"></a>字典的遍历</h3><p>可以利用<code>keys</code>函数来遍历整个字典。</p><p>例：定义一个集合<code>d</code>，存储的数据为五以内的所有数字，其中如果是质数则标记为<code>1</code>，否则标记为<code>0</code>，遍历整个字典。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="number">1</span>: <span class="number">0</span>, <span class="number">2</span>: <span class="number">1</span>, <span class="number">3</span>: <span class="number">1</span>, <span class="number">4</span>: <span class="number">0</span>, <span class="number">5</span>: <span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> d.keys():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;key&#125;</span>: <span class="subst">&#123;d[key]&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1: 0</span><br><span class="line">2: 1</span><br><span class="line">3: 1</span><br><span class="line">4: 0</span><br><span class="line">5: 1</span><br></pre></td></tr></table></figure><p><strong>注意点：其实不用这个函数直接写字典名也可以直接获取到字典的<code>Key</code>的。</strong></p><h3 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h3><table><thead><tr><th align="center">编号</th><th align="center">使用方式</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">字典[Key]</td><td align="center">获取指定Key对应的Value值</td></tr><tr><td align="center">2</td><td align="center">字典[Key] = Value</td><td align="center">添加或更新键值对</td></tr><tr><td align="center">3</td><td align="center">字典.pop(Key)</td><td align="center">取出Key对应的Value并在字典内删除此Key的键值对</td></tr><tr><td align="center">4</td><td align="center">字典.clear()</td><td align="center">清空字典</td></tr><tr><td align="center">5</td><td align="center">字典.keys()</td><td align="center">获取字典的全部Key，可用于for循环遍历字典</td></tr><tr><td align="center">6</td><td align="center">len(字典)</td><td align="center">计算字典内的元素数量</td></tr></tbody></table><h3 id="字典的特点"><a href="#字典的特点" class="headerlink" title="字典的特点"></a>字典的特点</h3><ul><li>可以容纳多个数据</li><li>可以容纳不同类型的数据（混装）</li><li>每一份数据都是键值对</li><li>可以通过Key获取到Value，Key不可以重复（重复会直接覆盖）</li><li>不支持下标索引</li><li>可以修改（增加或删除更新元素等）</li><li>支持for循环，不支持while循环</li></ul><h2 id="数据容器总结"><a href="#数据容器总结" class="headerlink" title="数据容器总结"></a>数据容器总结</h2><h3 id="数据容器分类"><a href="#数据容器分类" class="headerlink" title="数据容器分类"></a>数据容器分类</h3><ul><li><p>是否支持下标索引</p><ul><li>支持：列表、元组、字符串 - 序列类型</li><li>不支持：集合、字典 - 非序列类型</li></ul></li><li><p>是否支持重复元素</p><ul><li>支持：列表、元组、字符串 - 序列类型</li><li>不支持：集合、字典 - 非序列类型</li></ul></li><li><p>是否可以修改</p><ul><li>支持：列表、集合、字典</li><li>不支持：元组、字符串</li></ul></li></ul><h3 id="容器通用排序功能"><a href="#容器通用排序功能" class="headerlink" title="容器通用排序功能"></a>容器通用排序功能</h3><p>对容器进行指定方式的排序，一共两个参数，分别为要排序的容器和排序方式，默认<code>reverse</code>的值为<code>False</code>，表示从小到大排序，如果其值为<code>True</code>，则会变为从大到小排序。</p><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sorted</span>(容器, reverse = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>例：定义一个列表<code>l</code>，存储的数据为圆周率小数点后前十位，并将他们降序排序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line">l = <span class="built_in">sorted</span>(l, reverse = <span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(l)</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[1, 4, 1, 5, 9, 2, 6, 5, 3, 5]</span><br><span class="line">[9, 6, 5, 5, 5, 4, 3, 2, 1, 1]</span><br></pre></td></tr></table></figure><h1 id="函数进阶"><a href="#函数进阶" class="headerlink" title="函数进阶"></a>函数进阶</h1><h2 id="函数多返回值"><a href="#函数多返回值" class="headerlink" title="函数多返回值"></a>函数多返回值</h2><p>可以返回多个值。按照返回值的顺序，写对应顺序的多个变量接收即可，变量之间用逗号隔开，支持不同类型的数据<code>return</code>。</p><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>():</span><br><span class="line">    <span class="keyword">return</span> result1, result2</span><br><span class="line"></span><br><span class="line">x, y = fun()</span><br></pre></td></tr></table></figure><p>例：定义一个函数，从键盘中输入两个数字，返回他们相加和相减的结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> x + y, x - y</span><br><span class="line"></span><br><span class="line">a, b = <span class="built_in">input</span>().split()</span><br><span class="line">a = <span class="built_in">int</span>(a)</span><br><span class="line">b = <span class="built_in">int</span>(b)</span><br><span class="line">answer1, answer2 = fun(a, b)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;answer1&#125;</span> <span class="subst">&#123;answer2&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5 8</span><br><span class="line">13 -3</span><br></pre></td></tr></table></figure><h2 id="函数多种传参方式"><a href="#函数多种传参方式" class="headerlink" title="函数多种传参方式"></a>函数多种传参方式</h2><h3 id="位置参数"><a href="#位置参数" class="headerlink" title="位置参数"></a>位置参数</h3><p>调用函数时根据函数定义的<strong>参数位置</strong>来传递参数。</p><p>注意点：传递的参数和定义的参数的顺序及个数必须一致。</p><p>例：定义一个函数，其功能是传递基本信息然后输出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">information</span>(<span class="params">name, age, gender</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;姓名：<span class="subst">&#123;name&#125;</span> 年龄：<span class="subst">&#123;age&#125;</span> 性别：<span class="subst">&#123;gender&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">information(<span class="string">&quot;Bigglesworth&quot;</span>, <span class="number">20</span>, <span class="string">&quot;男&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">姓名：Bigglesworth 年龄：20 性别：男</span><br></pre></td></tr></table></figure><h3 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h3><p>函数调用时通过“键 = 值”形式传递参数。可以让函数更加清晰、容易使用，同时也清除了参数的顺序需求。</p><p>注意点：函数调用时，如果有位置参数时，位置参数必须在关键字参数的前面，但关键字参数之间不存在先后顺序。</p><p>例：定义一个函数，其功能是传递基本信息然后输出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">information</span>(<span class="params">name, age, gender</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;姓名：<span class="subst">&#123;name&#125;</span> 年龄：<span class="subst">&#123;age&#125;</span> 性别：<span class="subst">&#123;gender&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">information(<span class="string">&quot;Bigglesworth&quot;</span>, gender = <span class="string">&quot;男&quot;</span>, age = <span class="number">20</span>)</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">姓名：Bigglesworth 年龄：20 性别：男</span><br></pre></td></tr></table></figure><h3 id="缺省参数"><a href="#缺省参数" class="headerlink" title="缺省参数"></a>缺省参数</h3><p>缺省参数也叫默认参数，用于定义函数，为参数提供默认值，调用函数时可不穿该默认参数的值。</p><p>注意点：所有位置参数必须出现在默认参数前，包括函数定义和调用。函数调用时，如果为缺省参数传值则修改默认参数值，否则使用这个默认值。</p><p>例：定义一个函数，其功能是传递基本信息然后输出，其中，性别默认为男。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">information</span>(<span class="params">name, age, gender = <span class="string">&quot;男&quot;</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;姓名：<span class="subst">&#123;name&#125;</span> 年龄：<span class="subst">&#123;age&#125;</span> 性别：<span class="subst">&#123;gender&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">information(<span class="string">&quot;Bigglesworth&quot;</span>, <span class="number">20</span>)</span><br><span class="line">information(<span class="string">&quot;Areskey&quot;</span>, <span class="number">18</span>, <span class="string">&quot;女&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">姓名：Bigglesworth 年龄：20 性别：男</span><br><span class="line">姓名：Areskey 年龄：18 性别：女</span><br></pre></td></tr></table></figure><h3 id="不定长参数"><a href="#不定长参数" class="headerlink" title="不定长参数"></a>不定长参数</h3><p>不定长参数也可叫可变参数，用于不确定调用的时候会传递多少个参数（不传参也可以）的场景。不定长参数业可分为两种，分别是位置传递和关键字传递。</p><h4 id="位置传递"><a href="#位置传递" class="headerlink" title="位置传递"></a>位置传递</h4><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">*args</span>):</span><br><span class="line">    <span class="built_in">print</span>(args)</span><br></pre></td></tr></table></figure><p>注意点：传进的所有参数都会被<code>args</code>变量收集，它会根据传进参数的位置合并为一个元组<code>tuple</code>，<code>args</code>是元组类型，这就是<strong>位置传递</strong>。</p><p>例：定义一个函数，传递多个参数，并将其输出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">*args</span>):</span><br><span class="line">    <span class="built_in">print</span>(args)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(args))</span><br><span class="line">    </span><br><span class="line">fun(<span class="string">&quot;Bigglesworth&quot;</span>, <span class="number">20</span>, <span class="string">&quot;男&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(&#x27;Bigglesworth&#x27;, 20, &#x27;男&#x27;)</span><br><span class="line">&lt;class &#x27;tuple&#x27;&gt;</span><br></pre></td></tr></table></figure><h4 id="关键字传递"><a href="#关键字传递" class="headerlink" title="关键字传递"></a>关键字传递</h4><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">**kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(args)</span><br></pre></td></tr></table></figure><p>注意点：参数是“键 = 值”形式的情况下，所有的“键 = 值”都会被<code>kwargs</code>接受，同时会根据“键 = 值”组成字典。</p><p>例：定义一个函数，传递多个参数，并将其输出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">**kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(kwargs)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(kwargs))</span><br><span class="line">    </span><br><span class="line">fun(name = <span class="string">&quot;Bigglesworth&quot;</span>, age = <span class="number">20</span>, gender = <span class="string">&quot;男&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;name&#x27;: &#x27;Bigglesworth&#x27;, &#x27;age&#x27;: 20, &#x27;gender&#x27;: &#x27;男&#x27;&#125;</span><br><span class="line">&lt;class &#x27;dict&#x27;&gt;</span><br></pre></td></tr></table></figure><h2 id="lambda匿名函数"><a href="#lambda匿名函数" class="headerlink" title="lambda匿名函数"></a>lambda匿名函数</h2><ul><li><code>def</code>关键字，可以定义带有名称的函数</li><li><code>lambda</code>关键字，可以定义匿名函数（无名称）</li></ul><p>有名称的函数，可以基于名称重复使用。</p><p>无名称的匿名函数，只可临时使用一次。</p><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> 传入参数: 函数体（一行代码）</span><br></pre></td></tr></table></figure><p>注意点：<code>lambda</code>是关键字，表示定义匿名函数。传入参数表示匿名函数的形式参数，如：<code>x</code>，<code>y</code>表示接收2个形式参数。函数体，就是函数的执行逻辑，要注意的是只能写一行代码，无法写多行代码。</p><p>例：定义一个函数，接受其它函数输入。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">func</span>):</span><br><span class="line">    ans = func(<span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">    <span class="built_in">print</span>(ans)</span><br><span class="line">    </span><br><span class="line">fun(<span class="keyword">lambda</span> x, y: x * y)</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">30</span><br></pre></td></tr></table></figure><h1 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h1><h2 id="文件的读取"><a href="#文件的读取" class="headerlink" title="文件的读取"></a>文件的读取</h2><p>在<code>Python</code>中，使用<code>open</code>函数，可以打开一个已经存在的文件，或者创建一个新文件。</p><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">open</span>(name, mode, encoding)</span><br></pre></td></tr></table></figure><ul><li><code>name</code>：是要打开的目标文件名的字符串（可以包含文件所在的具体路径）</li><li><code>mode</code>：设置打开文件的模式（访问模式）：只读、写入、追加等。</li><li><code>encoding</code>：编码格式（推荐使用UTF-8）</li></ul><p>例：使用<code>UTF-8</code>的编码格式，只读文件<code>Test.txt</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;Test.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding = <span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(f)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(f))</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;_io.TextIOWrapper name=&#x27;Test.txt&#x27; mode=&#x27;r&#x27; encoding=&#x27;UTF-8&#x27;&gt;</span><br><span class="line">&lt;class &#x27;_io.TextIOWrapper&#x27;&gt;</span><br></pre></td></tr></table></figure><h2 id="mode常用的三种基础访问模式"><a href="#mode常用的三种基础访问模式" class="headerlink" title="mode常用的三种基础访问模式"></a>mode常用的三种基础访问模式</h2><table><thead><tr><th align="center">模式</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">r</td><td align="center">以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td></tr><tr><td align="center">w</td><td align="center">打开一个文件只用于写入。如果该文件已存在则打开文件，并从头开始编辑，<strong>原有内容会被删除</strong>。<br>如果该文件不存在，创建新文件。</td></tr><tr><td align="center">a</td><td align="center">打开一个文件用于追加。如果该文件已存在，<strong>新的内容将会被写入到已有内容之后。</strong><br>如果该文件不存在，创建新文件。</td></tr></tbody></table><h2 id="读操作相关方法"><a href="#读操作相关方法" class="headerlink" title="读操作相关方法"></a>读操作相关方法</h2><h3 id="读取固定长度"><a href="#读取固定长度" class="headerlink" title="读取固定长度"></a>读取固定长度</h3><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文件对象.read(num)</span><br></pre></td></tr></table></figure><p>其中，<code>num</code>表示要从文件中读取的数据的长度（单位是字节，这里认为<strong>一个汉字也是一个字节</strong>），如果没有传入<code>num</code>，那么就表示读取文件中所有的数据。</p><p>例：读取文件<code>Test.txt</code>，并输出其内容。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;Test.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding = <span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line">value = f.read(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(value)</span><br><span class="line">value = f.read()</span><br><span class="line"><span class="built_in">print</span>(value)</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hello</span><br><span class="line"> World!</span><br></pre></td></tr></table></figure><h3 id="读取整个文件"><a href="#读取整个文件" class="headerlink" title="读取整个文件"></a>读取整个文件</h3><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文件对象.readlines()</span><br></pre></td></tr></table></figure><p>可以按照行的方式把整个文件中的内容进行一次性读取，并且返回的是一个列表，其中每一行的数据为一个元素。</p><p>例：读取文件<code>Test.txt</code>，并输出其内容。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;Test.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding = <span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line">value = f.readlines()</span><br><span class="line"><span class="built_in">print</span>(value)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;Hello World!\n&#x27;, &#x27;My name is Bigglesworth!&#x27;]</span><br></pre></td></tr></table></figure><h3 id="读取一行内容"><a href="#读取一行内容" class="headerlink" title="读取一行内容"></a>读取一行内容</h3><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文件对象.readline()</span><br></pre></td></tr></table></figure><p>一次性读取一行内容。</p><p>例：利用<code>for</code>循环读取文件<code>Test.txt</code>，并输出其内容。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;Test.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding = <span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">    <span class="built_in">print</span>(line)</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br><span class="line"></span><br><span class="line">My name is Bigglesworth!</span><br></pre></td></tr></table></figure><h3 id="关闭文件"><a href="#关闭文件" class="headerlink" title="关闭文件"></a>关闭文件</h3><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文件对象.close()</span><br></pre></td></tr></table></figure><p>关闭文件对象，如果不关闭且程序没有停止运行，将会持续占用该文件。</p><p>例：读取文件<code>Test.txt</code>,读取之后关闭该文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;Test.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding = <span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">    <span class="built_in">print</span>(line)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br><span class="line"></span><br><span class="line">My name is Bigglesworth!</span><br></pre></td></tr></table></figure><h3 id="自动关闭文件"><a href="#自动关闭文件" class="headerlink" title="自动关闭文件"></a>自动关闭文件</h3><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(name, mode, encoding)<span class="keyword">as</span> f:</span><br><span class="line">    执行的操作</span><br></pre></td></tr></table></figure><p>可以在操作完成后自动关闭文件，避免遗忘掉手动关闭。</p><p>例：读取文件<code>Test.txt</code>,读取之后关闭该文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;Test.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding = <span class="string">&quot;UTF-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">        <span class="built_in">print</span>(line)</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br><span class="line"></span><br><span class="line">My name is Bigglesworth!</span><br></pre></td></tr></table></figure><h2 id="写操作相关方法"><a href="#写操作相关方法" class="headerlink" title="写操作相关方法"></a>写操作相关方法</h2><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#打开文件</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;Test.txt&quot;</span>, <span class="string">&quot;w&quot;</span>,  encoding = <span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#文件写入</span></span><br><span class="line">f.write(<span class="string">&quot;Hello World!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#内容刷新</span></span><br><span class="line">f.flush()</span><br></pre></td></tr></table></figure><p>注意点：</p><ul><li>直接调用<code>write</code>，内容并未真正写入文件，而是会积攒在程序的内存中，称之为缓冲区。</li><li>当调用<code>flush</code>的时候，内容会真正写入文件。</li><li>这样做是避免频繁的操作硬盘，导致效率下降（攒一堆，一次性写入磁盘）</li></ul><p>结果展示（文件中的结果）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br></pre></td></tr></table></figure><p>注意点：<code>close</code>功能内置了<code>flush</code>功能。文件存在的话，会将其中的东西全部清空后写入；文件不存在的话，会创建相应文件后写入。</p><h2 id="追加写入操作相关方法"><a href="#追加写入操作相关方法" class="headerlink" title="追加写入操作相关方法"></a>追加写入操作相关方法</h2><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#打开文件</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;Test.txt&quot;</span>, <span class="string">&quot;a&quot;</span>,  encoding = <span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#文件写入</span></span><br><span class="line">f.write(<span class="string">&quot;\nMy name is Bigglesworth!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#内容刷新</span></span><br><span class="line">f.flush()</span><br></pre></td></tr></table></figure><p>注意点：</p><ul><li><code>a</code>模式下，文件不存在会创建文件。</li><li><code>a</code>模式下，文件存在会在最后追加写入文件。</li></ul><p>结果展示（文件中原本有一句<code>Hello World!</code>）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hello World!My name is Bigglesworth!</span><br><span class="line">My name is Bigglesworth!</span><br></pre></td></tr></table></figure><p>注意点：<code>close</code>功能内置了<code>flush</code>功能。文件存在的话，会将其中的东西全部清空后写入；文件不存在的话，会创建相应文件后写入。</p><hr>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 教程 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL总结</title>
      <link href="/archives/86037912.html"/>
      <url>/archives/86037912.html</url>
      
        <content type="html"><![CDATA[<hr><h1 id="栈（stack）"><a href="#栈（stack）" class="headerlink" title="栈（stack）"></a>栈（stack）</h1><h2 id="基本定义"><a href="#基本定义" class="headerlink" title="基本定义"></a>基本定义</h2><p>栈（<code>stack</code>）又名堆栈，是一种只允许在同一端进行数据插入和删除操作的特殊线性表。  </p><h2 id="栈的相关概念"><a href="#栈的相关概念" class="headerlink" title="栈的相关概念"></a>栈的相关概念</h2><ul><li><p>栈顶（<code>top</code>）：表尾，栈中允许进行数据插入和删除的一端。</p></li><li><p>栈底（<code>bottom</code>）：表头，栈中不允许进行数据操作的一端。</p></li><li><p>入栈或进栈（<code>push</code>）：将数据插入栈顶。</p></li><li><p>出栈或退栈（<code>pop</code>）：将数据取出栈顶并删除。</p></li><li><p>栈上溢（<code>full</code>）：栈内空间已满时，仍进行入栈操作，是一种空间不足的出错状态。</p></li><li><p>栈下溢（<code>empty</code>）：栈内无数据时，仍进行出栈操作，是一种数据不足的出错状态。</p></li><li><p>空栈：元素个数为零的栈。</p></li></ul><h2 id="栈的常用操作"><a href="#栈的常用操作" class="headerlink" title="栈的常用操作"></a>栈的常用操作</h2><h3 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="构造stack容器"><a href="#构造stack容器" class="headerlink" title="构造stack容器"></a>构造stack容器</h3><p>基本语法：<code>stack &lt;Type&gt; s</code>  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stack &lt;<span class="type">int</span>&gt; s;  <span class="comment">//声明存储int类型数据的栈</span></span><br></pre></td></tr></table></figure><h3 id="返回栈顶元素"><a href="#返回栈顶元素" class="headerlink" title="返回栈顶元素"></a>返回栈顶元素</h3><p>基本语法：<code>s.top()</code>  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.<span class="built_in">top</span>();  <span class="comment">//返回栈顶元素</span></span><br></pre></td></tr></table></figure><h3 id="返回栈的大小"><a href="#返回栈的大小" class="headerlink" title="返回栈的大小"></a>返回栈的大小</h3><p>基本语法：<code>s.size()</code>  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.<span class="built_in">size</span>();  <span class="comment">//返回栈的大小</span></span><br></pre></td></tr></table></figure><h3 id="判断栈是否为空"><a href="#判断栈是否为空" class="headerlink" title="判断栈是否为空"></a>判断栈是否为空</h3><p>基本语法：<code>s.empty()</code>  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.<span class="built_in">empty</span>();  <span class="comment">//如果栈为空返回true，否则返回false</span></span><br></pre></td></tr></table></figure><h3 id="入栈操作"><a href="#入栈操作" class="headerlink" title="入栈操作"></a>入栈操作</h3><p>基本语法：<code>s.push(elem)</code>  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.<span class="built_in">push</span>(<span class="number">1</span>);  <span class="comment">//向栈顶插入元素1</span></span><br></pre></td></tr></table></figure><h3 id="出栈操作"><a href="#出栈操作" class="headerlink" title="出栈操作"></a>出栈操作</h3><p>基本语法：<code>s.pop()</code>  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s,<span class="built_in">pop</span>();  <span class="comment">//取出栈顶元素并将其删除</span></span><br></pre></td></tr></table></figure><h1 id="队列（queue）"><a href="#队列（queue）" class="headerlink" title="队列（queue）"></a>队列（queue）</h1><h2 id="基本定义-1"><a href="#基本定义-1" class="headerlink" title="基本定义"></a>基本定义</h2><p>队列是一种特殊的线性表，是一种<strong>先进先出</strong>的数据结构。它只允许在表的前端（<code>front</code>）进行删除操作，而在表的后端（<code>rear</code>）进行插入操作。进行插入操作的端称为队尾，进行删除操作的端称为队头。队列中没有元素时，称为空队列。</p><h2 id="栈的常用操作-1"><a href="#栈的常用操作-1" class="headerlink" title="栈的常用操作"></a>栈的常用操作</h2><h3 id="头文件-1"><a href="#头文件-1" class="headerlink" title="头文件"></a>头文件</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="构造queue容器"><a href="#构造queue容器" class="headerlink" title="构造queue容器"></a>构造queue容器</h3><p>基本语法：<code>queue &lt;Type&gt; q</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">queue &lt;<span class="type">int</span>&gt; q;  <span class="comment">//声明存储int类型数据的队列</span></span><br></pre></td></tr></table></figure><h3 id="返回队首元素"><a href="#返回队首元素" class="headerlink" title="返回队首元素"></a>返回队首元素</h3><p>基本语法：<code>q.front()</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">q.<span class="built_in">front</span>();  <span class="comment">//返回队首元素</span></span><br></pre></td></tr></table></figure><h3 id="返回队尾元素"><a href="#返回队尾元素" class="headerlink" title="返回队尾元素"></a>返回队尾元素</h3><p>基本语法：<code>q.back()</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">q.<span class="built_in">back</span>();  <span class="comment">//返回队尾元素</span></span><br></pre></td></tr></table></figure><h3 id="返回队列的大小"><a href="#返回队列的大小" class="headerlink" title="返回队列的大小"></a>返回队列的大小</h3><p>基本语法：<code>q.size()</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">q.<span class="built_in">size</span>();  <span class="comment">//返回队列的大小</span></span><br></pre></td></tr></table></figure><h3 id="判断队列是否为空"><a href="#判断队列是否为空" class="headerlink" title="判断队列是否为空"></a>判断队列是否为空</h3><p>基本语法：<code>q.empty()</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">q.<span class="built_in">empty</span>();  <span class="comment">//如果队列为空返回true，否则返回false</span></span><br></pre></td></tr></table></figure><h3 id="入队操作"><a href="#入队操作" class="headerlink" title="入队操作"></a>入队操作</h3><p>基本语法：<code>s.push(elem)</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.<span class="built_in">push</span>(<span class="number">1</span>);  <span class="comment">//向队尾添加元素1</span></span><br></pre></td></tr></table></figure><h3 id="出队操作"><a href="#出队操作" class="headerlink" title="出队操作"></a>出队操作</h3><p>基本语法：<code>s.pop()</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s,<span class="built_in">pop</span>();  <span class="comment">//从队尾移除第一个元素</span></span><br></pre></td></tr></table></figure><h1 id="pair"><a href="#pair" class="headerlink" title="pair"></a>pair</h1><h2 id="基本定义-2"><a href="#基本定义-2" class="headerlink" title="基本定义"></a>基本定义</h2><p><code>pair</code>可以将两个元素绑定在一起作为一个合成元素，可以节省编码时间。  </p><h2 id="栈的常用操作-2"><a href="#栈的常用操作-2" class="headerlink" title="栈的常用操作"></a>栈的常用操作</h2><h3 id="头文件-2"><a href="#头文件-2" class="headerlink" title="头文件"></a>头文件</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br></pre></td></tr></table></figure><p>由于<code>map</code>的内部实现中设计<code>pair</code>，就不需要额外再去添加<code>utility</code>头文件了。  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="构造pair容器"><a href="#构造pair容器" class="headerlink" title="构造pair容器"></a>构造pair容器</h3><p>基本语法：<code>pair &lt;Typename1,Typename2&gt; p</code>  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pair &lt;<span class="type">int</span>,<span class="type">float</span>&gt; p;</span><br><span class="line"><span class="comment">//pair有两个参数，分别对应first和second的数据类型，它们可以是任意基本数据类型或应用</span></span><br><span class="line"><span class="comment">//该代码定义了一个新的变量p，其两个参数分别为int和float类型</span></span><br></pre></td></tr></table></figure><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>基本语法：<code>pair &lt;Typename1,Typename2&gt; p(Value1,Value2)</code>  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pair &lt;<span class="type">int</span>,<span class="type">float</span>&gt; <span class="built_in">p</span>(<span class="number">100</span>,<span class="number">3.14</span>);</span><br><span class="line"><span class="comment">//用pair定义一个变量p，其两个参数分别是int和float类型，初始值为100和3.14</span></span><br></pre></td></tr></table></figure><h3 id="元素访问"><a href="#元素访问" class="headerlink" title="元素访问"></a>元素访问</h3><p>可以把<code>pair</code>定义过的东西看作一个二元结构体，该结构体中的两个元素分别是<code>first</code>和<code>second</code>，基本语法：<code>p.first</code> <code>p.first</code>  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pair &lt;<span class="type">int</span>, <span class="type">float</span>&gt; <span class="built_in">p</span>(<span class="number">100</span>, <span class="number">3.14</span>);</span><br><span class="line">cout &lt;&lt; p.first &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; p.second &lt;&lt; endl;  <span class="comment">//输出结果为100 3.14</span></span><br></pre></td></tr></table></figure><h3 id="对变量进行赋值"><a href="#对变量进行赋值" class="headerlink" title="对变量进行赋值"></a>对变量进行赋值</h3><p>如果使用<code>pair</code>定义了一个变量，对其赋值需要使用<code>make_pair</code>函数（利用结构体的写法分别对其first和second赋值也是可以的），基本语法：<code>make_pair(Value1,Value2)</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pair &lt;<span class="type">int</span>, <span class="type">float</span>&gt; p;  <span class="comment">//定义p</span></span><br><span class="line">p = <span class="built_in">make_pair</span>(<span class="number">100</span>, <span class="number">3.14</span>);  <span class="comment">//使用make_pair函数进行赋值</span></span><br><span class="line">cout &lt;&lt; p.first &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; p.second &lt;&lt; endl;  <span class="comment">//输出结果为100 3.14</span></span><br></pre></td></tr></table></figure><h3 id="比较大小"><a href="#比较大小" class="headerlink" title="比较大小"></a>比较大小</h3><p>两个<code>pair</code>类型之间可以进行大小比较，比较规则是先以<code>first</code>的大小作为标准，只有当<code>first</code>相等时才会判别<code>second</code>大小。</p><hr>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 教程 </tag>
            
            <tag> C++ </tag>
            
            <tag> STL </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>穷竭搜索</title>
      <link href="/archives/1857aa15.html"/>
      <url>/archives/1857aa15.html</url>
      
        <content type="html"><![CDATA[<hr><h1 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h1><p>在一个函数中再次调用该函数自身的行为叫做递归，这样的函数被称作递归函数。  </p><p>例如，想要编写一个阶乘的函数<code>int fact(int n)</code>，使用循环来实现是完全可以的。但是根据阶乘的递推式<code>n!=n×(n-1)!</code>，我们可以写成如下形式：  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fact</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!n)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> n * <span class="built_in">fact</span>(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">fact</span>(n));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在编写一个递归函数时，函数的停止条件是必须存在的。在刚刚的例子中，当<code>n=0</code>时<code>fact</code>并不是继续调用自身，而是直接返回<code>1</code>。  </p><p>如果没有这一条件存在，函数就会无限地递归下去，程序就会失控崩溃了。  </p><h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><p>栈（<code>Stack</code>）是支持<code>push</code>和<code>pop</code>两种操作的数据结构。<code>push</code>是在栈的顶端放入一组数据的操作。反之，<code>pop</code>是从其顶端取出一组数据的操作。因此，最后进入栈的一组数据可以最先被取出（这种行为被叫做<code>LIFO:Last In First Out</code>，即后进先出）。  </p><p>通过使用数组或者链表等结构可以很容易实现栈，同时，在<code>C++</code>标准库中，有相应的<code>STL</code>容器去完成该操作。  </p><p>函数调用的过程是通过使用栈实现的。因此，递归函数的递归过程也可以改用栈上的操作来实现。  </p><p>以下是使用<code>stack</code>的例子：  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; s;  <span class="comment">//声明存储int类型数据的栈</span></span><br><span class="line">    s.<span class="built_in">push</span>(<span class="number">1</span>);  <span class="comment">//将元素1压入栈  &#123;1&#125;</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, s.<span class="built_in">size</span>());  <span class="comment">//输出栈中元素的个数 1</span></span><br><span class="line">    <span class="keyword">if</span> (s.<span class="built_in">empty</span>())  <span class="comment">//判断栈是否为空  栈不为空</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;栈为空\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;栈不为空\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, s.<span class="built_in">top</span>());  <span class="comment">//返回栈顶元素</span></span><br><span class="line">    s.<span class="built_in">push</span>(<span class="number">2</span>);  <span class="comment">//将元素2压入栈  &#123;1,2&#125;</span></span><br><span class="line">    s.<span class="built_in">push</span>(<span class="number">3</span>);  <span class="comment">//将元素3压入栈  &#123;1,2,3&#125;</span></span><br><span class="line">    s.<span class="built_in">pop</span>();  <span class="comment">//从栈顶移除元素  &#123;1,2&#125;</span></span><br><span class="line">    s.<span class="built_in">pop</span>();  <span class="comment">//从栈顶移除元素  &#123;1&#125;</span></span><br><span class="line">    s.<span class="built_in">pop</span>();  <span class="comment">//从栈顶移除元素  &#123;&#125;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><p>队列（<code>Queue</code>）与栈一样支持<code>push</code>和<code>pop</code>两个操作。但与栈不同的是，<code>pop</code>完成的不是去除最顶端的元素，而是取出最底端的元素。也就是说最初放入的元素能够最先被取出（这种行为被叫做<code>FIFO:First In First Out</code>，即先进先出）。  </p><p>如同栈一样，队列也预先设置了相应的<code>STL</code>容器去实现这些操作。  </p><p>以下是使用<code>queue</code>的例子：  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; s;  <span class="comment">//声明存储int类型数据的队列</span></span><br><span class="line">    s.<span class="built_in">push</span>(<span class="number">1</span>);  <span class="comment">//将元素1放入队尾  &#123;1&#125;</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, s.<span class="built_in">size</span>());  <span class="comment">//输出队列中元素的个数 1</span></span><br><span class="line">    <span class="keyword">if</span> (s.<span class="built_in">empty</span>())  <span class="comment">//判断栈是否为空  队列不为空</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;队列为空\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;队列不为空\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, s.<span class="built_in">front</span>());  <span class="comment">//返回队首元素</span></span><br><span class="line">    s.<span class="built_in">push</span>(<span class="number">2</span>);  <span class="comment">//将元素2放入队尾  &#123;1,2&#125;</span></span><br><span class="line">    s.<span class="built_in">push</span>(<span class="number">3</span>);  <span class="comment">//将元素3放入队尾  &#123;1,2,3&#125;</span></span><br><span class="line">    s.<span class="built_in">pop</span>();  <span class="comment">//从队首移除元素  &#123;2,3&#125;</span></span><br><span class="line">    s.<span class="built_in">pop</span>();  <span class="comment">//从队首移除元素  &#123;3&#125;</span></span><br><span class="line">    s.<span class="built_in">pop</span>();  <span class="comment">//从队首移除元素  &#123;&#125;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="深度优先搜索"><a href="#深度优先搜索" class="headerlink" title="深度优先搜索"></a>深度优先搜索</h1><p>深度优先搜索（<code>DFS</code>，<code>Depth-First Search</code>）是搜索的手段之一。它从某个状态开始，不断地转移状态直到无法转移，然后回退到前一步的状态，继续转移到其他状态，如此不断重复，直至找到最终的解。例如求解数独，首先在某个格子内填入适当的数字，然后再继续在下一个格子内填入数字，如此继续下去。如果发现某个格子无解了，就放弃前一个格子上选择的数字，改用其他可行的数字。根据深度优先搜索的特点，采用递归函数实现比较简单。  </p><p>深度优先搜索从最开始的状态出发，遍历所有可以到达的状态。由此可以对所有的状态进行操作，或者列举出所有的状态。  </p><p><img src="/img/posts/%E7%A9%B7%E7%AB%AD%E6%90%9C%E7%B4%A2/DFS%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BB%E7%9A%84%E9%A1%BA%E5%BA%8F.png" alt="DFS状态转移的顺序"></p><h2 id="部分和问题"><a href="#部分和问题" class="headerlink" title="部分和问题"></a>部分和问题</h2><h3 id="测评链接"><a href="#测评链接" class="headerlink" title="测评链接"></a>测评链接</h3><p><a href="https://www.luogu.com.cn/problem/U221431">部分和问题</a></p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定整数a<sub>1</sub>、a<sub>2</sub>、…、a<sub>n</sub>，判断是否可以从中选出若干数，使它们的和恰好为<code>k</code>。  </p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>第一行有两个整数<code>n</code>和<code>k</code>，分别表示数字的个数。  </p><p>第二行有<code>n</code>个整数，表示给出的<code>n</code>个整数a<sub>i</sub>。  </p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p><code>Yes</code>或<code>No</code></p><h3 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h3><p><strong>输入 #1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4 13 </span><br><span class="line">1 2 4 7 </span><br></pre></td></tr></table></figure><p><strong>输出 #1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yes</span><br></pre></td></tr></table></figure><p><strong>输入 #2</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4 15 </span><br><span class="line">1 2 4 7 </span><br></pre></td></tr></table></figure><p><strong>输出 #2</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">No</span><br></pre></td></tr></table></figure><h3 id="限制条件"><a href="#限制条件" class="headerlink" title="限制条件"></a>限制条件</h3><ul><li><p>1 ≤ <code>n</code> ≤ 20</p></li><li><p>-10<sup>8</sup> ≤ a<sub>i</sub> ≤ 10<sup>8</sup></p></li><li><p>-10<sup>8</sup> ≤ <code>k</code> ≤ 10<sup>8</sup></p></li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>从a<sub>1</sub>开始按顺序决定每个数加或不加，在全部<code>n</code>个数都决定后再判断它们的和是不是<code>k</code>即可。因为状态数是2<sup>n+1</sup>，所以复杂度是O(2<sup>n</sup>)。  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, k;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> sum)</span>  <span class="comment">//已经从前i项得到了和sum，然后对于i项之后的数据进行处理</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//如果n项都计算过了，则返回结果</span></span><br><span class="line">    <span class="keyword">if</span> (i == n)</span><br><span class="line">        <span class="keyword">return</span> sum == k;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加上a[i]的情况</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">dfs</span>(i + <span class="number">1</span>, sum + a[i]))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不加a[i]的情况</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">dfs</span>(i + <span class="number">1</span>, sum))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果上述这三种情况都不行，则返回false</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//数据输入部分</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;k);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//主体部分</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Yes\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;No\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="广度优先搜索"><a href="#广度优先搜索" class="headerlink" title="广度优先搜索"></a>广度优先搜索</h1><p>广度优先搜索（<code>BFS</code>，<code>Breadth-First Search</code>）也是搜索的手段之一。它与深度优先搜索类似，从某个状态出发探索所有可以到达的状态。  </p><p>与深度优先搜索的不同之处在于搜索的顺序，广度优先搜索总是先搜索距离初始状态近的状态。也就是说，它是按照开始状态<code>-&gt;</code>只需<code>1</code>次转移就可以到达的所有状态<code>-&gt;</code>只需<code>2</code>次转移就可以到达的所有状态<code>-&gt;</code>……这样的顺序进行搜索。  </p><p>对于同一个状态，广度优先搜索只经过一次，因此复杂度O(状态数×转移的方式)。  </p><p><img src="/img/posts/%E7%A9%B7%E7%AB%AD%E6%90%9C%E7%B4%A2/BFS%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BB%E7%9A%84%E9%A1%BA%E5%BA%8F.png" alt="BFS状态转移的顺序"></p><p>深度优先搜索（隐式地）利用了栈进行计算，而广度优先搜索则利用了队列。搜索时首先将初始状态添加到队列里，此后从队列的最前端不断取出状态，把从该状态可以转移到的状态中尚未访问过的部分加入队列，如此往复，直至队列被取空或找到了问题的解。通过观察这个队列，我们就可以知道所有的状态都是按照距初始状态由近及远的顺序遍历的。  </p><h2 id="迷宫最短路径"><a href="#迷宫最短路径" class="headerlink" title="迷宫最短路径"></a>迷宫最短路径</h2><h3 id="测评链接-1"><a href="#测评链接-1" class="headerlink" title="测评链接"></a>测评链接</h3><p><a href="https://www.luogu.com.cn/problem/U221540">迷宫的最短路径</a></p><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个大小为<code>N×M</code>的迷宫。迷宫由通道和墙壁组成，每一步可以向邻接的上下左右四格的通道移动。  </p><p>请求出从起点到终点所需的最小步数。  </p><p><strong>本题假定从起点一定可以移动到终点。</strong></p><h3 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h3><p>第一行有两个整数<code>N</code>和<code>M</code>，分别表示迷宫的行数和列数。</p><p>接下来<code>N</code>行，每行<code>M</code>个字符，<code>#</code>表示墙壁，<code>.</code>表示通道，<code>S</code>表示起点，<code>G</code>表示终点。  </p><h3 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h3><p>一个整数表示从起点到终点所需的最小步数。  </p><h3 id="输入输出样例-1"><a href="#输入输出样例-1" class="headerlink" title="输入输出样例"></a>输入输出样例</h3><p><strong>输入 #1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">10 10</span><br><span class="line">#S######.#</span><br><span class="line">......#..#</span><br><span class="line">.#.##.##.#</span><br><span class="line">.#........</span><br><span class="line">##.##.####</span><br><span class="line">....#....#</span><br><span class="line">.#######.#</span><br><span class="line">....#.....</span><br><span class="line">.####.###.</span><br><span class="line">....#...G#</span><br></pre></td></tr></table></figure><p><strong>输出 #1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">22</span><br></pre></td></tr></table></figure><h3 id="限制条件-1"><a href="#限制条件-1" class="headerlink" title="限制条件"></a>限制条件</h3><ul><li>2 ≤ <code>N</code>,<code>M</code> ≤ 100</li></ul><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><p>广度优先搜索按照距开始状态由近及远的顺序进行搜索，因此可以很容易地用来求最短路径、最少操作之类问题的答案。这个问题中，状态仅仅是目前所在位置的坐标，因此可以构造成<code>pair</code>或者编码成<code>int</code>来表达状态。转移的方式为四方向移动，状态数与迷宫大小是相等的，所以时间复杂度是O(4×N×M)=O(N×M)。  </p><p>在广度优先搜索中，只要将已经访问过的状态用标记管理起来，就可以很好地做到由近及远的搜索。这个问题中由于要求最短距离，因此使用<code>d[N][M]</code>数组把最短距离保存起来。初始距离全部都是0，这样只需特别判定起点，即可分辨出到达的位置和未到达的位置，气到了标记作用。  </p><p>因为要向4个不同方向移动，用二维数组<code>dir[4][2]</code>表示四个方向向量，通过循环就可以实现四个方向移动的遍历。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//由于位置是一个二元坐标，因此使用pair来定义可以节省编码时间</span></span><br><span class="line"><span class="keyword">typedef</span> pair &lt;<span class="type">int</span>, <span class="type">int</span>&gt; P;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">105</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> N, M;  <span class="comment">//用来存储地图的大小</span></span><br><span class="line"><span class="type">int</span> sx, sy;  <span class="comment">//用来存储起点坐标</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> d[MAXN][MAXN];  <span class="comment">//用来存储每个位置到起点的最近距离</span></span><br><span class="line"><span class="type">char</span> maze[MAXN][MAXN];  <span class="comment">//用来存储整个地图</span></span><br><span class="line"><span class="type">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123; &#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125; &#125;;  <span class="comment">//用来存储各个方向，分别为左上右下</span></span><br><span class="line"></span><br><span class="line">queue &lt;P&gt; q;  <span class="comment">//BFS需要使用队列，因此定义一个队列</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//数据输入部分</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;N, &amp;M);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= M; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; maze[i][j];</span><br><span class="line">            <span class="keyword">if</span> (maze[i][j] == <span class="string">&#x27;S&#x27;</span>)  <span class="comment">//记录起点坐标</span></span><br><span class="line">            &#123;</span><br><span class="line">                sx = i;</span><br><span class="line">                sy = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//主体部分</span></span><br><span class="line">    q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(sx, sy));  <span class="comment">//将起点放入队列</span></span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>())  <span class="comment">//只要队列不为空就持续循环</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//将左上右下四个位置放入队列</span></span><br><span class="line">        <span class="type">int</span> x = q.<span class="built_in">front</span>().first, y = q.<span class="built_in">front</span>().second;</span><br><span class="line">        <span class="keyword">if</span> (maze[x + dir[<span class="number">0</span>][<span class="number">0</span>]][y + dir[<span class="number">0</span>][<span class="number">1</span>]] == <span class="string">&#x27;G&#x27;</span>)  <span class="comment">//如果到达终点</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, d[x][y] + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (maze[x + dir[<span class="number">0</span>][<span class="number">0</span>]][y + dir[<span class="number">0</span>][<span class="number">1</span>]] == <span class="string">&#x27;.&#x27;</span> &amp;&amp; d[x + dir[<span class="number">0</span>][<span class="number">0</span>]][y + dir[<span class="number">0</span>][<span class="number">1</span>]] == <span class="number">0</span>)  <span class="comment">//左</span></span><br><span class="line">        &#123;</span><br><span class="line">            q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(x + dir[<span class="number">0</span>][<span class="number">0</span>], y + dir[<span class="number">0</span>][<span class="number">1</span>]));  <span class="comment">//将新位置加入队列</span></span><br><span class="line">            d[x + dir[<span class="number">0</span>][<span class="number">0</span>]][y + dir[<span class="number">0</span>][<span class="number">1</span>]] = d[x][y] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (maze[x + dir[<span class="number">1</span>][<span class="number">0</span>]][y + dir[<span class="number">1</span>][<span class="number">1</span>]] == <span class="string">&#x27;G&#x27;</span>)  <span class="comment">//如果到达终点</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, d[x][y] + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (maze[x + dir[<span class="number">1</span>][<span class="number">0</span>]][y + dir[<span class="number">1</span>][<span class="number">1</span>]] == <span class="string">&#x27;.&#x27;</span> &amp;&amp; d[x + dir[<span class="number">1</span>][<span class="number">0</span>]][y + dir[<span class="number">1</span>][<span class="number">1</span>]] == <span class="number">0</span>)  <span class="comment">//上</span></span><br><span class="line">        &#123;</span><br><span class="line">            q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(x + dir[<span class="number">1</span>][<span class="number">0</span>], y + dir[<span class="number">1</span>][<span class="number">1</span>]));  <span class="comment">//将新位置加入队列</span></span><br><span class="line">            d[x + dir[<span class="number">1</span>][<span class="number">0</span>]][y + dir[<span class="number">1</span>][<span class="number">1</span>]] = d[x][y] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (maze[x + dir[<span class="number">2</span>][<span class="number">0</span>]][y + dir[<span class="number">2</span>][<span class="number">1</span>]] == <span class="string">&#x27;G&#x27;</span>)  <span class="comment">//如果到达终点</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, d[x][y] + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (maze[x + dir[<span class="number">2</span>][<span class="number">0</span>]][y + dir[<span class="number">2</span>][<span class="number">1</span>]] == <span class="string">&#x27;.&#x27;</span> &amp;&amp; d[x + dir[<span class="number">2</span>][<span class="number">0</span>]][y + dir[<span class="number">2</span>][<span class="number">1</span>]] == <span class="number">0</span>)  <span class="comment">//右</span></span><br><span class="line">        &#123;</span><br><span class="line">            q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(x + dir[<span class="number">2</span>][<span class="number">0</span>], y + dir[<span class="number">2</span>][<span class="number">1</span>]));  <span class="comment">//将新位置加入队列</span></span><br><span class="line">            d[x + dir[<span class="number">2</span>][<span class="number">0</span>]][y + dir[<span class="number">2</span>][<span class="number">1</span>]] = d[x][y] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (maze[x + dir[<span class="number">3</span>][<span class="number">0</span>]][y + dir[<span class="number">3</span>][<span class="number">1</span>]] == <span class="string">&#x27;G&#x27;</span>)  <span class="comment">//如果到达终点</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, d[x][y] + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (maze[x + dir[<span class="number">3</span>][<span class="number">0</span>]][y + dir[<span class="number">3</span>][<span class="number">1</span>]] == <span class="string">&#x27;.&#x27;</span> &amp;&amp; d[x + dir[<span class="number">3</span>][<span class="number">0</span>]][y + dir[<span class="number">3</span>][<span class="number">1</span>]] == <span class="number">0</span>)  <span class="comment">//下</span></span><br><span class="line">        &#123;</span><br><span class="line">            q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(x + dir[<span class="number">3</span>][<span class="number">0</span>], y + dir[<span class="number">3</span>][<span class="number">1</span>]));  <span class="comment">//将新位置加入队列</span></span><br><span class="line">            d[x + dir[<span class="number">3</span>][<span class="number">0</span>]][y + dir[<span class="number">3</span>][<span class="number">1</span>]] = d[x][y] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//弹出</span></span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="深度优先搜索与广度优先搜索比较"><a href="#深度优先搜索与广度优先搜索比较" class="headerlink" title="深度优先搜索与广度优先搜索比较"></a>深度优先搜索与广度优先搜索比较</h1><p>二者都会生成所有能够遍历到的状态，因此需要对所有的状态进行处理时二者都是可行的。但是递归函数可以很简短地编写，而且状态的管理也更简单，所以大多数情况下还是用深度优先搜索实现。反之，在求取最短路径时深度优先搜索需要反复经过同样的状态，所以此时还是使用广度优先搜索为好。  </p><p>广度优先搜索会把状态逐个假如队列，因此通常需要与状态数成正比的内存空间。反之，深度优先搜索是与最大的递归深度成正比的。一般与状态数相比，递归的深度并不会太大，所以可以认为深度优先搜索更加节省内存。  </p><h1 id="剪枝"><a href="#剪枝" class="headerlink" title="剪枝"></a>剪枝</h1><p>顾名思义，穷竭搜索会把所有可能的解全都检查一遍，当解空间非常大时，复杂度也会相应变大。比如<code>n</code>个元素进行排列时状态数共有<code>n!</code>个，时间复杂度也就成了O(n!)。这样的话，即使<code>n=15</code>计算也很难较早终止。这里简单介绍一下此类情形要如何进行优化。  </p><p>深度优先搜索时，有时早已明确地知道从当前状态无论如何转移都不会存在解。这种情况下，不再继续搜索而是直接跳过，这一方法被称作剪枝。  </p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 递归函数 </tag>
            
            <tag> 队列 </tag>
            
            <tag> 广度优先搜索 </tag>
            
            <tag> 剪枝 </tag>
            
            <tag> 深度优先搜索 </tag>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML语法</title>
      <link href="/archives/25e991bb.html"/>
      <url>/archives/25e991bb.html</url>
      
        <content type="html"><![CDATA[<hr><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="由来"><a href="#由来" class="headerlink" title="由来"></a>由来</h2><p>        HTML的英文全称是 Hyper Text Markup Language，即超文本标记语言。HTML是由Web的发明者 Tim Berners-Lee和同事 Daniel W. Connolly于1990年创立的一种标记语言，它是标准通用化标记语言SGML的应用。用HTML编写的超文本文档称为HTML文档，它能独立于各种操作系统平台(如UNIX， Windows等)。使用HTML，将所需要表达的信息按某种规则写成HTML文件，通过专用的浏览器来识别，并将这些HTML文件“翻译”成可以识别的信息，即现在所见到的网页。<br>        自1990年以来，HTML就一直被用作万维网的信息表示语言，使用HTML描述的文件需要通过web浏览器显示出效果。HTML是一种建立网页文件的语言，通过标记式的指令(Tag)，将影像、声音、图片、文字动画、影视等内容显示出来。事实上，每一个HTML文档都是一种静态的网页文件，这个文件里面包含了HTML指令代码，这些指令代码并不是一种程序语言，只是一种排版网页中资料显示位置的标记结构语言，易学易懂，非常简单。HTML的普遍应用就是带来了超文本的技术―通过单击鼠标从一个主题跳转到另一个主题，从一个页面跳转到另一个页面，与世界各地主机的文件链接超文本传输协议规定了浏览器在运行HTML文档时所遵循的规则和进行的操作。HTTP的制定使浏览器在运行超文本时有了统一的规则和标准。<br>        万维网（world wide web，简称www）上的一个超媒体文档称之为一个页面（外语：page）。作为一个组织或者个人在万维网上放置开始点的页面称为主页（外语：Homepage）或首页，主页中通常包括有指向其他相关页面或其他节点的指针（超级链接），所谓超级链接，就是一种统一资源定位器（Uniform Resource Locator，外语缩写：URL）指针，通过激活（点击）它，可使浏览器方便地获取新的网页。这也是HTML获得广泛应用的最重要的原因之一。在逻辑上将视为一个整体的一系列页面的有机集合称为网站（Website或Site）。超文本标记语言（英文缩写：HTML）是为“网页创建和其它可在网页浏览器中看到的信息”设计的一种标记语言。<br>        网页的本质就是超文本标记语言，通过结合使用其他的Web技术（如：脚本语言、公共网关接口、组件等），可以创造出功能强大的网页。因而，超文本标记语言是万维网（Web）编程的基础，也就是说万维网是建立在超文本基础之上的。超文本标记语言之所以称为超文本标记语言，是因为文本中包含了所谓“超级链接”点。  </p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>        超文本标记语言是标准通用标记语言下的一个应用，也是一种规范，一种标准，它通过标记符号来标记要显示的网页中的各个部分。网页文件本身是一种文本文件，通过在文本文件中添加标记符，可以告诉浏览器如何显示其中的内容（如：文字如何处理，画面如何安排，图片如何显示等）。浏览器按顺序阅读网页文件，然后根据标记符解释和显示其标记的内容，对书写出错的标记将不指出其错误，且不停止其解释执行过程，编制者只能通过显示效果来分析出错原因和出错部位。但需要注意的是，对于不同的浏览器，对同一标记符可能会有不完全相同的解释，因而可能会有不同的显示效果。  </p><h1 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h1><p>我使用的开发工具是<code>Visual Studio Code</code>  </p><p>下载链接：<a href="https://code.visualstudio.com/">Visual Studio Code官网</a></p><h1 id="常用浏览器及其内核"><a href="#常用浏览器及其内核" class="headerlink" title="常用浏览器及其内核"></a>常用浏览器及其内核</h1><table><thead><tr><th align="center">浏览器</th><th align="center">内核</th></tr></thead><tbody><tr><td align="center">谷歌(Chrome)</td><td align="center">Blink</td></tr><tr><td align="center">火狐（Firefox）</td><td align="center">Gecko</td></tr><tr><td align="center">Safair</td><td align="center">Wenkit</td></tr><tr><td align="center">Opera</td><td align="center">Blink</td></tr><tr><td align="center">IE</td><td align="center">Trident</td></tr></tbody></table><p>这里推荐使用<strong>谷歌浏览器(Chrome)（Blink）</strong></p><h1 id="Visual-Studio-Code-简介"><a href="#Visual-Studio-Code-简介" class="headerlink" title="Visual Studio Code 简介"></a>Visual Studio Code 简介</h1><p>        Visual Studio Code（简称“VS Code”  ）是Microsoft在2015年4月30日Build开发者大会上正式宣布一个运行于 Mac OS X、Windows和 Linux 之上的，针对于编写现代Web和云应用的跨平台源代码编辑器，  可在桌面上运行，并且可用于Windows，macOS和Linux。它具有对JavaScript，TypeScript和Node.js的内置支持，并具有丰富的其他语言（例如C++，C＃，Java，Python，PHP，Go）和运行时（例如.NET和Unity）扩展的生态系统。  </p><h1 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h1><p>VS Code可以安装许多插件，为了更方便地书写和调试代码，这里推荐几个插件。  </p><h2 id="简体中文插件"><a href="#简体中文插件" class="headerlink" title="简体中文插件"></a>简体中文插件</h2><p>VS Code默认是英文界面，使用该插件可以将软件内的所有语言改成中文。  </p><p>插件名：<code>Chinese (Simplified) (简体中文) Language Pack for Visual Studio Code</code></p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%E6%8F%92%E4%BB%B6.png" alt="简体中文插件"></p><h2 id="默认浏览器打开插件"><a href="#默认浏览器打开插件" class="headerlink" title="默认浏览器打开插件"></a>默认浏览器打开插件</h2><p>由于我们调试的时候需要使用浏览器进行运行，但是每次打开浏览器又会非常麻烦，因此安装该插件可以直接使用快捷键进行打开，节省了大量的时间。  </p><p>快捷键：<code>Alt + B</code>  </p><p>插件名：<code>Open In Default Browser</code></p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E9%BB%98%E8%AE%A4%E6%B5%8F%E8%A7%88%E5%99%A8%E6%89%93%E5%BC%80%E6%8F%92%E4%BB%B6.png" alt="默认浏览器打开插件"></p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>首先将谷歌浏览器设置为默认浏览器，然后创建一个后缀名为<code>html</code>的文件，使用VS Code打开文件所在的文件夹。  </p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E5%88%9D%E5%A7%8B%E7%95%8C%E9%9D%A2.png" alt="初始界面"></p><h1 id="HTML基本骨架"><a href="#HTML基本骨架" class="headerlink" title="HTML基本骨架"></a>HTML基本骨架</h1><p>输入一个叹号（<code>!</code>）然后摁回车键可以得到一段初始化好的代码 ，这段代码被称为HTML基本骨架</p><p>注意一定要是英文的叹号。  </p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E5%88%9D%E5%A7%8B%E4%BB%A3%E7%A0%81.png" alt="初始代码"> </p><h1 id="基本骨架含义"><a href="#基本骨架含义" class="headerlink" title="基本骨架含义"></a>基本骨架含义</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span>  <span class="comment">&lt;!-- 一种通用标记语言的文档类型声明，告诉标准通用标记语言解析器，应当使用什么文档类型来进行解析 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span>  <span class="comment">&lt;!-- 定义语言的种类，其中en表示English，表示英文网页 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>  <span class="comment">&lt;!-- 表示网页头部的部分 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span>  <span class="comment">&lt;!-- 通过charset属性来规定HTML文档应该使用哪种字符编码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span>  <span class="comment">&lt;!-- 代表标签网页的标题，即标签页的名字 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>  <span class="comment">&lt;!-- 代表网页的主体 --&gt;</span></span><br><span class="line">    Hello world!  <span class="comment">&lt;!-- 网页的内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以使用快捷键<code>Alt + B</code>在浏览器中打开，切记在运行之前需要使用快捷键<code>Ctrl + S</code>进行保存。</p><p>结果展示：  </p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/Hello.png" alt="Hello world!"></p><h1 id="双标签与单标签"><a href="#双标签与单标签" class="headerlink" title="双标签与单标签"></a>双标签与单标签</h1><p>标签一共分为两种，一种叫做双标签，另一种叫单标签。  </p><p>双标签：前部分叫开始标签，后部分叫结束标签，两部分之间包裹内容。  </p><p>例：  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>双标签演示<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br></pre></td></tr></table></figure><p>单标签：自成一体，无法包裹内容  </p><p>例：  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h1><h2 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h2><p>指目录下的绝对位置，可直接到达目标位置，通常从盘符开始的路径。</p><p>例：<code>E:/Workspaces/hexo/themes/butterfly/source/img/posts/HTML语法/HTML语法/img/壁纸.jpg</code></p><h2 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h2><p>同级目录：<code>./</code>   </p><p>下级目录：<code>文件夹名/</code>   </p><p>上级目录：<code>../</code>  </p><p>例：<code>img/壁纸.jpg</code></p><h1 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h1><p>属性指的是标签的属性，需要借助标签进行设置。  </p><p>属性的注意点：  </p><ul><li><p>标签的属性写在开始标签内部</p></li><li><p>标签上可以同时存在多个属性</p></li><li><p>属性之间以空格隔开</p></li><li><p>标签名与属性之间必须以空格隔开</p></li><li><p>属性之间没有顺序之分</p></li></ul><p>例：  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/壁纸.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;图片加载失败&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中<code>img</code>是标签，<code>src</code>和<code>alt</code>均为属性，而引号里面的东西为属性的值，即属性值。  </p><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><p>注释内容一般是给开发者看的，并不会显示在实际的网页中，基本写法是用<code>&lt;!-- --&gt;</code>将注释内容包裹起来。  </p><p>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注释内容 --&gt;</span></span><br></pre></td></tr></table></figure><h1 id="标题标签"><a href="#标题标签" class="headerlink" title="标题标签"></a>标题标签</h1><p>标题分为1~6级别标题，重要程度依次递减，基本写法是用<code>&lt;h1&gt; &lt;/h1&gt;</code>将标题内容包裹起来，其中h后面的数字表示标题的级别，最多可以写到6。  </p><p>特点：</p><ul><li><p>文字默认加粗</p></li><li><p>依次减小</p></li><li><p>独占一行</p></li></ul><p>例：书写1~6级标题  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>二级标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>三级标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>四级标题<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h5</span>&gt;</span>五级标题<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h6</span>&gt;</span>六级标题<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E6%A0%87%E9%A2%98%E6%A0%87%E7%AD%BE.png" alt="标题标签"></p><h1 id="段落标签"><a href="#段落标签" class="headerlink" title="段落标签"></a>段落标签</h1><p>一个段落，分段显示，基本写法是用<code>&lt;p&gt; &lt;/p&gt;</code>将段落内容包裹起来。  </p><p>特点：</p><ul><li><p>段落之间存在间隙</p></li><li><p>独占一行</p></li></ul><p>例：使用段落标签书写I have a dream前三段  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>I am happy to join with you today in what will go down in history as the greatest demonstration for freedom in the history of our nation.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Five score years ago, a great American, in whose symbolic shadow we stand today, signed the Emancipation Proclamation. This momentous decree came as a great beacon light of hope to millions of Negro slaves who had been seared in the flames of withering injustice. It came as a joyous daybreak to end the long night of bad captivity.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>But one hundred years later, the Negro still is not free. One hundred years later, the life of the Negro is still sadly crippled by the manacles of segregation and the chains of discrimination. One hundred years later, the Negro lives on a lonely island of poverty in the midst of a vast ocean of material prosperity. One hundred years later, the Negro is still languished in the corners of American society and finds himself an exile in his own land. And so we&#x27;ve come here today to dramatize a shameful condition.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E6%AE%B5%E8%90%BD%E6%A0%87%E7%AD%BE.png" alt="段落标签"></p><h1 id="换行标签"><a href="#换行标签" class="headerlink" title="换行标签"></a>换行标签</h1><p>强制换行，基本写法是直接写一个<code>&lt;br&gt;</code>  。</p><p>特点：  </p><ul><li><p>单标签</p></li><li><p>让文字强制换行</p></li></ul><p>例：书写I have a dream前三段，并且每段间隔三行  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>I am happy to join with you today in what will go down in history as the greatest demonstration for freedom in the history of our nation.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Five score years ago, a great American, in whose symbolic shadow we stand today, signed the Emancipation Proclamation. This momentous decree came as a great beacon light of hope to millions of Negro slaves who had been seared in the flames of withering injustice. It came as a joyous daybreak to end the long night of bad captivity.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>But one hundred years later, the Negro still is not free. One hundred years later, the life of the Negro is still sadly crippled by the manacles of segregation and the chains of discrimination. One hundred years later, the Negro lives on a lonely island of poverty in the midst of a vast ocean of material prosperity. One hundred years later, the Negro is still languished in the corners of American society and finds himself an exile in his own land. And so we&#x27;ve come here today to dramatize a shameful condition.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E6%8D%A2%E8%A1%8C%E6%A0%87%E7%AD%BE.png" alt="换行标签"></p><h1 id="水平线标签"><a href="#水平线标签" class="headerlink" title="水平线标签"></a>水平线标签</h1><p>主题的分割转换，基本写法是直接写一个<code>&lt;hr&gt;</code>。</p><p>特点：  </p><ul><li><p>单标签</p></li><li><p>在页面中显示一条水平线</p></li></ul><p>例：书写I have a dream前三段，并且每段使用一个水平线隔开  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>I am happy to join with you today in what will go down in history as the greatest demonstration for freedom in the history of our nation.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Five score years ago, a great American, in whose symbolic shadow we stand today, signed the Emancipation Proclamation. This momentous decree came as a great beacon light of hope to millions of Negro slaves who had been seared in the flames of withering injustice. It came as a joyous daybreak to end the long night of bad captivity.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>But one hundred years later, the Negro still is not free. One hundred years later, the life of the Negro is still sadly crippled by the manacles of segregation and the chains of discrimination. One hundred years later, the Negro lives on a lonely island of poverty in the midst of a vast ocean of material prosperity. One hundred years later, the Negro is still languished in the corners of American society and finds himself an exile in his own land. And so we&#x27;ve come here today to dramatize a shameful condition.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E6%B0%B4%E5%B9%B3%E7%BA%BF%E6%A0%87%E7%AD%BE.png" alt="水平线标签"></p><h1 id="文本格式化标签"><a href="#文本格式化标签" class="headerlink" title="文本格式化标签"></a>文本格式化标签</h1><p>主要功能：  </p><ol><li><p>文字加粗  <code>&lt;b&gt; &lt;/b&gt;</code>    <code>&lt;strong&gt; &lt;/strong&gt;</code></p></li><li><p>下划线  <code>&lt;u&gt; &lt;/u&gt;</code>    <code>&lt;ins&gt; &lt;/ins&gt;</code></p></li><li><p>倾斜  <code>&lt;i&gt; &lt;/i&gt;</code>    <code>&lt;em&gt; &lt;/em&gt;</code></p></li><li><p>删除线  <code>&lt;s&gt; &lt;/s&gt;</code>    <code>&lt;del&gt; &lt;/del&gt;</code></p></li></ol><p>长的标签是为了突出重要性，用来强调语境，视觉效果上是完全相同的。  </p><p>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">b</span>&gt;</span>加粗<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">strong</span>&gt;</span>加粗<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">u</span>&gt;</span>下划线<span class="tag">&lt;/<span class="name">u</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ins</span>&gt;</span>下划线<span class="tag">&lt;/<span class="name">ins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span>&gt;</span>倾斜<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">em</span>&gt;</span>倾斜<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">s</span>&gt;</span>删除线<span class="tag">&lt;/<span class="name">s</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">del</span>&gt;</span>删除线<span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E6%96%87%E6%9C%AC%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%A0%87%E7%AD%BE.png" alt="文本格式化标签"></p><h1 id="图片标签"><a href="#图片标签" class="headerlink" title="图片标签"></a>图片标签</h1><p>在网页中显示图片，基本写法是<code>&lt;img src=&quot;&quot; alt=&quot;&quot;&gt;</code>。  </p><p>特点：  </p><ul><li><p>单标签</p></li><li><p><code>img</code>标签如果要展示对应的效果，需要借助标签的属性进行设置。</p></li></ul><p>属性：  </p><ul><li><p><code>src</code>：添加图片的路径，从而显示图片</p></li><li><p><code>alt</code>：图片加载失败时进行文本替换</p></li><li><p><code>title</code>：鼠标悬停时显示文字</p></li><li><p><code>width</code>和<code>height</code>：表示图片的宽度和高度，如果只设置一个，将会自动比例缩放（图片不会变形），默认单位为像素（px）</p></li></ul><p>例：添加一张相对路径为<code>img/壁纸.jpg</code>的图片，加载失败显示文字为“图片加载失败”，鼠标悬停文字为“壁纸”，宽度和高度分别是800和500  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/壁纸.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;图片加载失败&quot;</span> <span class="attr">title</span>=<span class="string">&quot;壁纸&quot;</span> <span class="attr">width</span>=<span class="string">&quot;800&quot;</span> <span class="attr">height</span>=<span class="string">&quot;500&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E5%9B%BE%E7%89%87%E6%A0%87%E7%AD%BE.png" alt="图片标签"></p><h1 id="音频标签"><a href="#音频标签" class="headerlink" title="音频标签"></a>音频标签</h1><p>在页面中插入音频，基本写法是<code>&lt;audio src=&quot;&quot;&gt;&lt;/audio&gt;</code>。  </p><p>属性：  </p><ul><li><p><code>src</code>：添加音频的路径</p></li><li><p><code>controls</code>：显示播放的控件</p></li><li><p><code>autoplay</code>：自动播放（部分浏览器不支持）</p></li><li><p><code>loop</code>：循环播放</p></li></ul><p>例：添加一个相对路径为<code>audio/Aimer - LAST STARDUST.mp3</code>的音频，添加显示播放的控件，设置为自动播放，循环播放  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;audio/Aimer - LAST STARDUST.mp3&quot;</span> <span class="attr">controls</span> <span class="attr">autoplay</span> <span class="attr">loop</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E9%9F%B3%E9%A2%91%E6%A0%87%E7%AD%BE.png" alt="音频标签"></p><h1 id="视频标签"><a href="#视频标签" class="headerlink" title="视频标签"></a>视频标签</h1><p>在页面中插入视频，基本写法是<code>&lt;video src=&quot;&quot;&gt;&lt;/video&gt;</code>。  </p><p>属性：  </p><ul><li><p><code>src</code>：添加视频的路径</p></li><li><p><code>controls</code>：显示播放的控件</p></li><li><p><code>autoplay</code>：自动播放（谷歌浏览器中需要配合<code>muted</code>实现静音播放）</p></li><li><p><code>loop</code>：循环播放</p></li><li><p><code>width</code>和<code>height</code>：控制宽度和高度</p></li></ul><p>例：添加一个相对路径为<code>video/CG.mp4</code>的音频，添加显示播放的控件，设置为自动静音播放，循环播放，宽度和高度设置为800和500</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;video/CG.mp4&quot;</span> <span class="attr">controls</span> <span class="attr">autoplay</span> <span class="attr">muted</span> <span class="attr">loop</span> <span class="attr">width</span>=<span class="string">&quot;800&quot;</span> <span class="attr">height</span>=<span class="string">&quot;500&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E8%A7%86%E9%A2%91%E6%A0%87%E7%AD%BE.png" alt="视频标签"></p><h1 id="链接标签"><a href="#链接标签" class="headerlink" title="链接标签"></a>链接标签</h1><p>点击之后，从一个页面跳转至另外一个页面，基本写法是<code>&lt;a href=&quot;&quot;&gt;&lt;/a&gt;</code>其中<code>href</code>后面写跳转到的链接，两个标签之间写显示的文字。  </p><p>在实际开发过程中，可能遇到链接还没有制作的过程，因此可以在<code>href</code>后面写<code>#</code>作为空链接进行占位。  </p><p>属性：</p><ul><li><code>target</code>：有两个属性值<ul><li><p><code>_self</code>：默认值，在当前窗口中跳转（覆盖原网页）</p></li><li><p>·_blank`：在新窗口中跳转（保留原网页）</p></li></ul></li></ul><p>例：制作两个链接，分别在当前窗口跳转和在新窗口中跳转，跳转地址均为该博客  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://big-worth.github.io/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_self&quot;</span>&gt;</span>当前窗口跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://big-worth.github.io/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>新窗口跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E9%93%BE%E6%8E%A5%E6%A0%87%E7%AD%BE.png" alt="链接标签"></p><h1 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h1><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p>在网页中表示一组无顺序之分的列表。  </p><p>标签名：</p><ul><li><p><code>ul</code>：表示无序列表的整体，用于包裹<code>li</code>标签</p></li><li><p><code>li</code>：表示无序列表的每一项，用于包含每一行的内容</p></li></ul><p>显示特点：列表的每一项前默认显示圆点标识。  </p><p>注意点：<code>ul</code>标签中只允许包含<code>li</code>标签，<code>li</code>标签可以包含任意内容。</p><p>例：制作一个无序列表，内容是从星期一至星期日  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>星期一<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>星期二<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>星期三<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>星期四<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>星期五<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>星期六<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>星期日<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果显示：  </p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E6%97%A0%E5%BA%8F%E5%88%97%E8%A1%A8.png" alt="无序列表"></p><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><p>在网页中表示一组有顺序之分的列表。  </p><p>标签名：</p><ul><li><p><code>ol</code>：表示有序列表的整体，用于包裹<code>li</code>标签</p></li><li><p><code>li</code>：表示有序列表的每一项，用于包含每一行的内容</p></li></ul><p>显示特点：列表的每一项前默认显示序号标识。  </p><p>注意点：<code>ol</code>标签中只允许包含<code>li</code>标签，<code>li</code>标签可以包含任意内容。  </p><p>例：制作一个有序列表，内容是从星期一至星期日</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>星期一<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>星期二<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>星期三<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>星期四<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>星期五<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>星期六<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>星期日<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果显示：  </p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E6%9C%89%E5%BA%8F%E5%88%97%E8%A1%A8.png" alt="有序列表"></p><h2 id="自定义列表"><a href="#自定义列表" class="headerlink" title="自定义列表"></a>自定义列表</h2><p>在网页的导航中通常会使用自定义列表实现。  </p><p>标签名：  </p><ul><li><p><code>dl</code>：表示自定义列表的整体，用于包裹<code>dt</code>和<code>dd</code>标签</p></li><li><p><code>dt</code>：表示自定义列表的主题</p></li><li><p><code>dd</code>：表示自定义列表的针对主题的每一项内容</p></li></ul><p>显示特点：<code>dd</code>前会默认显示缩进效果。  </p><p>注意点：<code>dl</code>标签中只允许包含<code>dt</code>和<code>dd</code>标签，<code>dt</code>和<code>dd</code>标签可以包含任意内容。</p><p>例：制作一个自定义列表，分为工作日和休息日，工作日中包括星期一到星期五，休息日中包括星期六到星期日  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>工作日<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>星期一<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>星期二<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>星期三<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>星期四<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>星期五<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>休息日<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>星期六<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>星期日<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%97%E8%A1%A8.png" alt="自定义列表"></p><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><h2 id="标签名与属性"><a href="#标签名与属性" class="headerlink" title="标签名与属性"></a>标签名与属性</h2><p>在网页中以列的单元格的方式整齐展示的数据。  </p><p>标签名：  </p><ul><li><p><code>table</code>：表格整体，可以用于包裹多个<code>tr</code></p></li><li><p><code>tr</code>：表示每行，可用于包裹<code>td</code></p></li><li><p><code>td</code>：表格单元格，可用于包裹内容</p></li></ul><p>注意点：标签的嵌套关系为<code>table</code>&gt;<code>tr</code>&gt;<code>td</code>。  </p><p>属性：  </p><ul><li><p><code>border</code>：属性值为数字，表示边框的宽度</p></li><li><p><code>width</code>：属性值为数字，表示表格的宽度</p></li><li><p><code>height</code>：属性值为数字，表示表格的高度</p></li></ul><p>注意点：在实际开发中一般使用CSS设置表格的样式。</p><h2 id="标题与表头单元格"><a href="#标题与表头单元格" class="headerlink" title="标题与表头单元格"></a>标题与表头单元格</h2><p>在表格中表示整体大标题和一行小标题。  </p><p>标签名：  </p><ul><li><p><code>caption</code>：表格大标题，表示表格整体的大标题，默认在表格整体顶部居中位置显示</p></li><li><p><code>th</code>：表头单元格，表示一行小标题，通常用于表格第一行，默认内部文字加粗并居中显示</p></li></ul><p>注意点：<code>caption</code>标签写在<code>table</code>标签内部，<code>th</code>标签写在<code>th</code>标签内部（用于替换<code>td</code>标签）  </p><h2 id="表格的结构标签"><a href="#表格的结构标签" class="headerlink" title="表格的结构标签"></a>表格的结构标签</h2><p>让表格的内容结构分组，突出表格的不同成分（头部、主题、底部），使语义更加清晰。  </p><p>标签名：  </p><ul><li><p><code>thead</code>： 表格头部</p></li><li><p><code>tbody</code>：表格主体</p></li><li><p><code>foot</code>：表格底部</p></li></ul><h2 id="合并单元格"><a href="#合并单元格" class="headerlink" title="合并单元格"></a>合并单元格</h2><p>跨行合并（垂直合并成一个）  </p><p>跨列合并（水平合并成一个）  </p><p>合并单元格的步骤：  </p><ol><li><p>明确合并哪几个单元格</p></li><li><p>通过左上原则，确定保留谁：</p><ol><li><p>上下合并：只保留最上的，删除其他</p></li><li><p>左右合并：只保留最左的，删除其他</p></li></ol></li><li><p>给保留的单元格设置：跨行合并（<code>rowspan</code>）或者跨列合并（<code>colspan</code>）</p></li></ol><p>属性：  </p><ul><li><p><code>rowspan</code>：属性值表示合并单元格的个数，跨行合并，将多行的单元格垂直合并</p></li><li><p><code>colspan</code>：属性值表示合并单元格的个数，跨列合并，将多列的单元格水平合并</p></li></ul><p>注意点：只有一个结构标签中的单元格才能合并，不能跨结构合并标签（不能跨<code>thead</code> <code>tbody</code> <code>tfoot</code>）  </p><p>例：使用结构标签制作一个乘法表，表头为“九九乘法表”并加粗，并将剩下的没有数据的格子进行合并，边框宽度为1，最后一行用字母表示  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">caption</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>九九乘法表<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span> <span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>1<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>2<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>3<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>4<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>5<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>6<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>7<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>8<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>9<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;9&quot;</span>&gt;</span>1*1=1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1*2=2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;8&quot;</span>&gt;</span>2*2=4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1*3=3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2*3=6<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;7&quot;</span>&gt;</span>3*3=9<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1*4=4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2*4=8<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>3*4=12<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;6&quot;</span>&gt;</span>4*4=16<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>5<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1*5=5<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2*5=10<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>3*5=15<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>4*5=20<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;5&quot;</span>&gt;</span>5*5=25<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>6<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1*6=6<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2*6=12<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>3*6=18<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>4*6=24<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>5*6=30<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;4&quot;</span>&gt;</span>6*6=36<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>7<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1*7=7<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2*7=14<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>3*7=21<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>4*7=28<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>5*7=35<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>6*7=42<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span>7*7=49<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>8<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1*8=8<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2*8=16<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>3*8=24<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>4*8=32<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>5*8=40<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>6*8=48<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>7*8=56<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>8*8=64<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>9<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1*9=9<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2*9=18<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>3*9=27<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>4*9=36<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>5*9=45<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>6*9=54<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>7*9=63<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>8*9=72<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;1&quot;</span>&gt;</span>9*9=81<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">td</span>&gt;</span> <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">td</span>&gt;</span>a<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">td</span>&gt;</span>b<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">td</span>&gt;</span>c<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">td</span>&gt;</span>d<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">td</span>&gt;</span>e<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">td</span>&gt;</span>f<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">td</span>&gt;</span>g<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">td</span>&gt;</span>h<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">td</span>&gt;</span>i<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E8%A1%A8%E6%A0%BC.png" alt="表格"></p><h1 id="input系列标签"><a href="#input系列标签" class="headerlink" title="input系列标签"></a>input系列标签</h1><h2 id="input标签"><a href="#input标签" class="headerlink" title="input标签"></a>input标签</h2><p>在网页中显示收集用户信息的表单，标签名为<code>input</code>，基本写法是<code>&lt;input type=&quot;text&quot;&gt;</code>。  </p><p>属性值：  </p><ul><li><p><code>text</code>：文本框，用于输入单行文本</p></li><li><p><code>password</code>：密码框，用于输入密码</p></li><li><p><code>radio</code>：单选框，用于多选一的情况</p></li><li><p><code>checkbox</code>：多选框，用于多选多的情况</p></li><li><p><code>file</code>：文件选择，用于之后上传文件</p></li><li><p><code>submit</code>：提交按钮，用于提交</p></li><li><p><code>reset</code>：重置按钮，用于重置</p></li><li><p><code>button</code>：普通按钮，默认无功能，之后配合<code>js</code>添加功能</p></li></ul><h2 id="文本框（text-password）系列标签"><a href="#文本框（text-password）系列标签" class="headerlink" title="文本框（text password）系列标签"></a>文本框（text password）系列标签</h2><p>在网页中显示输入单行文本的表单控件。  </p><p>属性：  </p><ul><li><p><code>placeholder</code>：占位符。提示用户输入内容的文本</p></li><li><p><code>value</code>：初始值。会在文本框初始时显示</p></li></ul><p>例：制作一个文本框，提示信息为“账号”，制作一个密码框，提示信息为“密码”  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;账号&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;密码&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E6%96%87%E6%9C%AC%E6%A1%86%E7%B3%BB%E5%88%97%E6%A0%87%E7%AD%BE.png" alt="文本框系列标签"></p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E6%96%87%E6%9C%AC%E6%A1%86%E7%B3%BB%E5%88%97%E6%A0%87%E7%AD%BE%E8%BE%93%E5%85%A5%E5%B1%95%E7%A4%BA.png" alt="文本框系列标签输入展示"></p><h2 id="单选框（radio）系列标签"><a href="#单选框（radio）系列标签" class="headerlink" title="单选框（radio）系列标签"></a>单选框（radio）系列标签</h2><p>在网页中显示多选一的单选表单控件。  </p><p>属性：  </p><ul><li><p><code>name</code>：分组。有相同属性的单选框为一组，一组中同时只能有一个被选中</p></li><li><p><code>checked</code>：默认选中</p></li></ul><p>注意点：<code>name</code>属性对于单选框有分组功能，有相同<code>name</code>属性值的单选框为一组，一组中只能同时有一个被选中。  </p><p>例：制作一个单选框，内容是性别，一共三个选项，分别是男，女，保密，默认选择保密  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    性别： </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>男 </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>女 </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">checked</span>&gt;</span>保密</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E5%8D%95%E9%80%89%E6%A1%86%E7%B3%BB%E5%88%97%E6%A0%87%E7%AD%BE.png" alt="单选框系列标签"></p><h2 id="多选框（checkbox）系列标签"><a href="#多选框（checkbox）系列标签" class="headerlink" title="多选框（checkbox）系列标签"></a>多选框（checkbox）系列标签</h2><p>在网页中显示多选多的多选表单控件。</p><p>属性：</p><ul><li><p><code>name</code>：分组。有相同属性的单选框为一组，一组可以有多个被选中</p></li><li><p><code>checked</code>：默认选中</p></li></ul><p>注意点：<code>name</code>属性对于单选框有分组功能，有相同<code>name</code>属性值的单选框为一组，一组中可以同时有多个被选中。  </p><p>例：制作一个多选框，内容是爱好，设置五个爱好，分别是运动，唱歌，画画，睡觉，其他，其中其他后面需要跟一个文本框，提示信息为其他爱好，默认选择为运动</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    爱好： </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">checked</span>&gt;</span>运动 </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>唱歌 </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>画画 </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>睡觉 </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>其他 </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;其他爱好&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E5%A4%9A%E9%80%89%E6%A1%86%E7%B3%BB%E5%88%97%E6%A0%87%E7%AD%BE.png" alt="多选框系列标签"></p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E5%A4%9A%E9%80%89%E6%A1%86%E7%B3%BB%E5%88%97%E6%A0%87%E7%AD%BE%E8%BE%93%E5%85%A5%E5%B1%95%E7%A4%BA.png" alt="多选框系列标签输入展示"></p><h2 id="文件选择（file）"><a href="#文件选择（file）" class="headerlink" title="文件选择（file）"></a>文件选择（file）</h2><p>在网页中显示文件选择的表单控件。  </p><p>属性：  </p><ul><li><code>multiple</code>：多文件选择</li></ul><p>例：制作一个文件上传控件，设置为多文件选择  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E6%96%87%E4%BB%B6%E9%80%89%E6%8B%A9.png" alt="文件选择"></p><h2 id="按钮（button）"><a href="#按钮（button）" class="headerlink" title="按钮（button）"></a>按钮（button）</h2><p>在网页中显示不用功能的按钮表单控件。</p><p>属性值：  </p><ul><li><p><code>submit</code>：提交按钮。点击之后提交数据给后端服务器</p></li><li><p><code>reset</code>：重置按钮。点击之后恢复表单默认值</p></li><li><p><code>button</code>：普通按钮。默认无功能，之后配合<code>js</code>添加功能</p></li></ul><p>属性：  </p><ul><li><code>value</code>：替换按钮上的文字</li></ul><p>注意点：如果需要实现以上按钮功能，需要配合<code>form</code>标签使用  </p><p><code>form</code>标签使用方法：用<code>form</code>标签把表单标签一起包裹起来即可。  </p><p>属性：  </p><ul><li><code>value</code>：设置按钮名字</li></ul><p>注意点：谷歌浏览器<code>button</code>按钮默认是提交按钮。  </p><p>还可以使用<code>button</code>标签，<code>button</code>标签是双标签，更便于包裹其他内容：文字、图片等。  </p><p>例：制作一个个人信息表单，并能够实现上传重置等功能。  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        姓名： </span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;姓名&quot;</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        性别： </span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>男 </span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>女</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">checked</span>&gt;</span>保密</span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        爱好： </span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">checked</span>&gt;</span>运动 </span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>唱歌 </span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>画画 </span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>睡觉 </span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>其他 </span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">其他爱好</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传信息&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重置信息&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;默认为上传按钮&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>上传信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span>重置信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>默认为上传按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E6%8C%89%E9%92%AE.png" alt="按钮"></p><h2 id="下拉菜单（select）按钮"><a href="#下拉菜单（select）按钮" class="headerlink" title="下拉菜单（select）按钮"></a>下拉菜单（select）按钮</h2><p>在网页中提供多个选择项的下拉菜单表单控件。  </p><p>标签名：  </p><ul><li><p><code>select</code>：下拉菜单的整体</p></li><li><p><code>option</code>：下拉菜单的每一项</p></li></ul><p>属性：  </p><ul><li><code>selected</code>：下拉菜单的默认选中</li></ul><p>例：制作一个时间下拉菜单，内容是星期一到星期五，默认选择星期三  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>星期一<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>星期二<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">selected</span>&gt;</span>星期三<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>星期四<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>星期五<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E4%B8%8B%E6%8B%89%E8%8F%9C%E5%8D%95%E6%8C%89%E9%92%AE.png" alt="下拉菜单按钮"></p><h1 id="文本域标签（textarea）"><a href="#文本域标签（textarea）" class="headerlink" title="文本域标签（textarea）"></a>文本域标签（textarea）</h1><p>在网页中提供可输入多行文本的表单控件，基本写法是<code>&lt;textarea name=&quot;&quot; id=&quot;&quot; cols=&quot;30&quot; rows=&quot;10&quot;&gt;&lt;/textarea&gt;</code>。  </p><p>属性：  </p><ul><li><p><code>clos</code>：规定了文本域内可见宽度</p></li><li><p><code>rows</code>：规定了文本域内可见行数</p></li></ul><p>注意点：右下角可以拖拽改变大小，实际开发时针对于样式效果推荐<code>CSS</code>设置。  </p><p>例：制作一个文本域标签，宽度为20，行数为10  </p><p>结果展示：  </p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E6%96%87%E6%9C%AC%E5%9F%9F%E6%A0%87%E7%AD%BE.png" alt="文本域标签"></p><h1 id="label标签"><a href="#label标签" class="headerlink" title="label标签"></a>label标签</h1><p>常用于绑定内容与表单标签的关系，可以实现点击文本也可以选中单选框多选框，基本写法是<code>&lt;label for=&quot;&quot;&gt;&lt;/label&gt;</code>。  </p><ol><li><p>使用方法1</p><ol><li><p>使用<code>label</code>标签把内容（如文本）包裹起来</p></li><li><p>在表单标签上添加<code>id</code>属性</p></li><li><p>在<code>label</code>标签的<code>for</code>属性中设置对应的<code>id</code>属性值</p></li></ol></li><li><p>使用方法2</p><ol><li><p>直接用<code>label</code>标签把内容（如文本）和表单标签一起包裹起来</p></li><li><p>需要把<code>label</code>标签的<code>for</code>属性删除即可</p></li></ol></li></ol><p>例：制作一个性别选择，分别使用两种方法为男和女两个选项添加<code>label</code>标签  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    性别：</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">id</span>=<span class="string">&quot;male&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;male&quot;</span>&gt;</span> 男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>&gt;</span> 女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/label%E6%A0%87%E7%AD%BE.png" alt="label标签"></p><h1 id="无语义标签"><a href="#无语义标签" class="headerlink" title="无语义标签"></a>无语义标签</h1><p>实际开发网页时会大量频繁使用<code>div</code>和<code>span</code>这两个无语义的布局标签，基本写法是<code>&lt;div&gt;&lt;/div&gt;</code>和<code>&lt;span&gt;&lt;/span&gt;</code>。  </p><p>标签：  </p><ul><li><p><code>div</code>标签：一行只显示一个（独占一行）</p></li><li><p><code>span</code>标签：一行可以显示多个</p></li></ul><h1 id="有语义标签（手机端网页）"><a href="#有语义标签（手机端网页）" class="headerlink" title="有语义标签（手机端网页）"></a>有语义标签（手机端网页）</h1><p>在<code>HTML5</code>新版本中，退出了一些有语义的布局标签供开发者使用。  </p><p>标签名：  </p><ul><li><p><code>header</code>：网页头部</p></li><li><p><code>nav</code>：网页导航</p></li><li><p><code>footer</code>：网页底部</p></li><li><p><code>aside</code>：网页侧边栏</p></li><li><p><code>section</code>：网页区块</p></li><li><p><code>article</code>：网页文章</p></li></ul><p>注意点：以上标签显示特点和<code>div</code>一致，但是比<code>div</code>多了不同的语义。  </p><h1 id="实体字符"><a href="#实体字符" class="headerlink" title="实体字符"></a>实体字符</h1><p>因为很多符号不能直接表示出来，因此需要使用实体字符进行代替。  </p><table><thead><tr><th align="center">显示结果</th><th align="center">描述</th><th align="center">实体名称</th><th align="center">实体编号</th></tr></thead><tbody><tr><td align="center"></td><td align="center">空格</td><td align="center"><code>&amp;nbsp;</code></td><td align="center">&#160;</td></tr><tr><td align="center">&lt;</td><td align="center">小于号</td><td align="center"><code>&amp;lt;</code></td><td align="center">&#60;</td></tr><tr><td align="center">&gt;</td><td align="center">大于号</td><td align="center"><code>&amp;gt;</code></td><td align="center">&#62;</td></tr><tr><td align="center">&amp;</td><td align="center">和号</td><td align="center"><code>&amp;amp;</code></td><td align="center">&#38;</td></tr><tr><td align="center">“</td><td align="center">引号</td><td align="center"><code>&amp;quot;</code></td><td align="center">&#34;</td></tr><tr><td align="center">‘</td><td align="center">撇号</td><td align="center"><code>&amp;apos;</code> (IE不支持)</td><td align="center">&#39;</td></tr><tr><td align="center">￠</td><td align="center">分（cent）</td><td align="center"><code>&amp;cent;</code></td><td align="center">&#162;</td></tr><tr><td align="center">£</td><td align="center">镑（pound）</td><td align="center"><code>&amp;pound;</code></td><td align="center">&#163;</td></tr><tr><td align="center">¥</td><td align="center">元（yen）</td><td align="center"><code>&amp;yen;</code></td><td align="center">&#165;</td></tr><tr><td align="center">€</td><td align="center">欧元（euro）</td><td align="center"><code>&amp;euro;</code></td><td align="center">&#8364;</td></tr><tr><td align="center">§</td><td align="center">小节</td><td align="center"><code>&amp;sect;</code></td><td align="center">&#167;</td></tr><tr><td align="center">©</td><td align="center">版权（copyright）</td><td align="center"><code>&amp;copy;</code></td><td align="center">&#169;</td></tr><tr><td align="center">®</td><td align="center">注册商标</td><td align="center"><code>&amp;reg;</code></td><td align="center">&#174;</td></tr><tr><td align="center">™</td><td align="center">商标</td><td align="center"><code>&amp;trade;</code></td><td align="center">&#8482;</td></tr><tr><td align="center">×</td><td align="center">乘号</td><td align="center"><code>&amp;times;</code></td><td align="center">&#215;</td></tr><tr><td align="center">÷</td><td align="center">除号</td><td align="center"><code>&amp;divide;</code></td><td align="center">&#247;</td></tr></tbody></table><p>使用过程中需要输入实体名称。  </p><p>例：制作一个版权符号  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    ©</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><img src="/img/posts/HTML%E8%AF%AD%E6%B3%95/%E5%AE%9E%E4%BD%93%E5%AD%97%E7%AC%A6.png" alt="实体字符"></p><hr>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 教程 </tag>
            
            <tag> HTML </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二打一（斗地主）计算机博弈</title>
      <link href="/archives/765139d6.html"/>
      <url>/archives/765139d6.html</url>
      
        <content type="html"><![CDATA[<hr><h1 id="二打一扑克牌项目规则"><a href="#二打一扑克牌项目规则" class="headerlink" title="二打一扑克牌项目规则"></a>二打一扑克牌项目规则</h1><h2 id="官方网站"><a href="#官方网站" class="headerlink" title="官方网站"></a>官方网站</h2><p>全国计算机博弈大赛官网链接：</p><p><a href="http://computergames.caai.cn/">计算机博弈官网</a>  </p><p>二打一扑克牌项目规则官网链接：  </p><p><a href="http://computergames.caai.cn/jsgz10.html">二打一规则官网</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>二打一，民间俗称斗地主，因玩法简单、娱乐性强已成为国内最受喜爱的牌类游戏之一。2013年正式成为国家体育总局认定的正式比赛项目之一。本规则是根据中国机器博弈专业委员会主办的全国大学生计算机博弈大赛的需要，参考人民体育出版社《中国二打一扑克竞赛规则》并结合JJ斗地主、百度百科、维基百科、联众游戏、腾讯游戏等网站文献编写完成。  </p><h2 id="术语约定"><a href="#术语约定" class="headerlink" title="术语约定"></a>术语约定</h2><h3 id="局"><a href="#局" class="headerlink" title="局"></a>局</h3><p>一副牌(编码见附表1)包括发牌、叫牌、出牌、记分的博弈过程，称为一局。  </p><h3 id="轮"><a href="#轮" class="headerlink" title="轮"></a>轮</h3><p>三个参赛选手共坐一桌完成的若干局构成一轮。  </p><h3 id="牌型"><a href="#牌型" class="headerlink" title="牌型"></a>牌型</h3><p>  玩家一次出牌的牌张组合（见附表2）。主要包括火箭、炸弹和普通牌型。</p><h3 id="春天与反春天"><a href="#春天与反春天" class="headerlink" title="春天与反春天"></a>春天与反春天</h3><p>地主所有牌出完，其它两家一张都未出，称为“春天”。  </p><p>其它两家中有一家先出完牌，地主只出过一手牌，“反春天”。  </p><h2 id="一局牌的比赛过程"><a href="#一局牌的比赛过程" class="headerlink" title="一局牌的比赛过程"></a>一局牌的比赛过程</h2><p>一局牌需三个玩家（按方位西0、南1、东2区分）参与。过程包括发牌、叫牌、出牌和计分4步骤完成。通过叫牌，一个玩家成为地主（庄家），其余两个玩家作为农民（防守方）与地主对抗。以某一玩家率先出尽手中牌来结束牌局判定胜负，并计算本局小分。  </p><h3 id="发牌"><a href="#发牌" class="headerlink" title="发牌"></a>发牌</h3><p>一副牌54张，每个玩家发17张，剩余3张作为底牌，在地主未确定之前所有玩家不能看底牌，待地主确定后，亮出底牌并将其归于地主。  </p><h3 id="叫牌"><a href="#叫牌" class="headerlink" title="叫牌"></a>叫牌</h3><p>每轮从西家（0）开始叫牌，并按出牌的顺序轮流进行，每人叫一次牌。叫牌时可以叫“1分”，“2分”，“3分”或“不叫（0）”。后叫牌者只能叫比前面叫过的分数都高或者不叫。如果有牌手叫分后，另外两人选择不叫或有牌手叫到“3分”则结束叫牌，叫牌结束后所叫分值最大的牌手确定为地主。如果三位牌手均选择不叫则视为完成一局，各家本局不得分。确定地主后，底牌亮出并发给地主。  </p><h3 id="出牌"><a href="#出牌" class="headerlink" title="出牌"></a>出牌</h3><p>每局由庄家先出，按逆时针顺序玩家依次出牌或过牌不出。后续跟牌者须按照同样牌型和张数进行跟牌，也可出炸弹或者火箭，后面的出牌必须大于前一手出牌。如果连续两家不出则最后出牌者可领出任意合法牌型。</p><p>出牌大小的比较：  </p><p>对于单牌，自大到小的牌张分值次序为<code>大王、小王、2、A、K、Q、J、10、9、8、7、6、5、4、3</code>。各花色之间无大小的区别。  </p><p>对于组合牌，除火箭及炸弹外，必须牌型与张数均相同时方可进行比较。其中对牌、三条、单顺、双顺、三顺以最大牌张比较大小；三带一、三顺带牌、四带二仅按其中三条、三顺、四条的牌张比较大小，与带牌大小无关。  </p><p>火箭大于炸弹，火箭及炸弹均大于其他牌型，炸弹之间按牌张大小进行比较。</p><h3 id="记分"><a href="#记分" class="headerlink" title="记分"></a>记分</h3><p>一局牌打完之后，双方小分计算方法如下：  </p><p>地主得分=2×胜负参数×100×底分×倍数<br>农民得分=胜负参数×100×底分×倍数<br>胜负参数：胜利方为1，失败方为-1；<br>底分：叫牌时的1、2、3分；<br>倍数：初始为1。<br>本局打出过炸弹则倍数×(1+炸弹个数)。（为减少分数波动程度，避免运气因素影响高技术牌手发挥，因此不采用2n算法）<br>打出火箭，倍数×2<br>打出“春天”，倍数×2<br>打出“反春天”，倍数×2</p><h2 id="协议使用事例"><a href="#协议使用事例" class="headerlink" title="协议使用事例"></a>协议使用事例</h2><p>下表示例为南方位选手与平台交互信息一例</p><table><thead><tr><th align="center">序号</th><th align="center">平台发送信息</th><th align="center">AI应答信息</th><th align="center">信息内容</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">DOUDIZHUVER 1.0</td><td align="center"></td><td align="center">协议版本号</td></tr><tr><td align="center">2</td><td align="center"></td><td align="center">NAME hrbust</td><td align="center">选手名称</td></tr><tr><td align="center">3</td><td align="center">INFO 1,4,1,6,9,2100,15</td><td align="center"></td><td align="center">轮局信息</td></tr><tr><td align="center">4</td><td align="center"></td><td align="center">OK INFO</td><td align="center">应答轮局信息</td></tr><tr><td align="center">5</td><td align="center">DEAL B0,4,5,7,9,10,17,21,25,<br>33,34,39,41,43,44,45,46</td><td align="center"></td><td align="center">发牌信息 <br>(不换行)</td></tr><tr><td align="center">6</td><td align="center"></td><td align="center">OK DEAL</td><td align="center">应答发牌信息</td></tr><tr><td align="center">7</td><td align="center">BID A1</td><td align="center"></td><td align="center">西方位叫牌转播</td></tr><tr><td align="center">8</td><td align="center"></td><td align="center">OK BID</td><td align="center">应答叫牌转播</td></tr><tr><td align="center">9</td><td align="center">BID WHAT</td><td align="center"></td><td align="center">询问南方位叫牌</td></tr><tr><td align="center">10</td><td align="center"></td><td align="center">BID B3</td><td align="center">应答叫牌询问</td></tr><tr><td align="center">11</td><td align="center">BID C0</td><td align="center"></td><td align="center">东方位叫牌转播</td></tr><tr><td align="center">12</td><td align="center"></td><td align="center">OK BID</td><td align="center">应答叫牌转播</td></tr><tr><td align="center">13</td><td align="center">LEFTOVER B27,48,53</td><td align="center"></td><td align="center">底牌信息与交付</td></tr><tr><td align="center">14</td><td align="center"></td><td align="center">OK LEFTOVER</td><td align="center">应答底牌信息</td></tr><tr><td align="center">15</td><td align="center">PLAY WHAT</td><td align="center"></td><td align="center">询问出牌</td></tr><tr><td align="center">16</td><td align="center"></td><td align="center">PLAY B0,4,5,7</td><td align="center">应答出牌询问</td></tr><tr><td align="center">17</td><td align="center">PLAY C-1</td><td align="center"></td><td align="center">东方位出牌转播</td></tr><tr><td align="center">18</td><td align="center"></td><td align="center">OK PLAY</td><td align="center">应答出牌转播</td></tr><tr><td align="center">19</td><td align="center">PLAY A12,13,14,20</td><td align="center"></td><td align="center">西方位出牌转播</td></tr><tr><td align="center">20</td><td align="center"></td><td align="center">OK PLAY</td><td align="center">应答出牌转播</td></tr><tr><td align="center">21</td><td align="center">PLAY WHAT</td><td align="center"></td><td align="center">询问出牌</td></tr><tr><td align="center"></td><td align="center">……</td><td align="center">……</td><td align="center">重复到一方出尽</td></tr><tr><td align="center">n</td><td align="center">GAMEOVER C</td><td align="center"></td><td align="center">赢家信息</td></tr><tr><td align="center">n+1</td><td align="center"></td><td align="center">OK GAMEOVER</td><td align="center">应答赢家信息</td></tr></tbody></table><h2 id="协议指令解释"><a href="#协议指令解释" class="headerlink" title="协议指令解释"></a>协议指令解释</h2><p>注意：以下一条指令中如含多张牌编码，应按升序排列<br>1． DOUDIZHUVER ver<br>裁判告知选手所采用的协议版本号，当前为1.0<br>例如：DOUDIZHUVER 1.0<br>2． NAME player<br>选手回复姓名。<br>例如：NAME hrbust<br>3． INFO turnid,turncount,roundid,roundcount,upcount,maxscore,time<br>裁判告知选手当前轮局信息<br>turnid为当前轮序号<br>turncount为总轮数，暂定4轮，视参赛选手人数可赛前调整<br>roundid为当前局序号<br>roundcount为每轮总局数，暂定6局，视参赛选手人数可赛前调整<br>upcount为本轮可晋级到下一轮的选手数，视比赛进程可赛前调整<br>maxscore为封顶分数，暂定2100，视参赛选手人数可赛前调整<br>time为 AI引擎应答时间限制，单位秒，暂定为15，视比赛进程可赛前调整<br>例如：INFO 1,4,1,6,9,2100,15<br>4． OK INFO<br>选手应答轮局信息，无可变参数<br>5．DEAL dC1,C2,C3,C4,C5,C6,C7,C8,C9,C10,C11,C12,C13,C14,C15,C16,C17<br>裁判告知选手方位和发牌编码<br>d为A时表示选手为西方位，d为B时表示选手为南方位，d为C时表示选手为东方位<br>Ci为发给选手的纸牌编码，参见附表1，各牌编码间用逗号分隔<br>例如：DEAL B0,4,5,7,9,10,17,21,25,33,34,39,41,43,44,45,46<br>6．OK DEAL<br>选手应答发牌信息，无可变参数<br>7．BID dW<br>裁判转发其它选手叫牌信息<br>d为A时表示该选手为西，d为B时表示该选手为南，d为C时表示该选手为东<br>W为0表示不叫，1表示1分，2表示2分，3表示3分<br>例如：BID A1<br>8．OK BID<br>选手应答叫牌信息，无可变参数<br>9．BID WHAT<br>裁判询问选手叫牌，无可变参数<br>10．BID dW<br>选手应答叫牌询问<br>d为A时表示该选手为西，d为B时表示该选手为南，d为C时表示该选手为东<br>W为0表示不叫，1表示1分，2表示2分，3表示3分<br>例如：BID B3<br>11．LEFTOVER dC1,C2,C3 <br>裁判通知底牌信息，含地主方位和牌编码<br>d为A时表示地主为西，d为B时表示地主为南，d为C时表示地主为东<br>Ci为发给地主的底牌编码，参见附表1，各牌编码间用逗号分隔<br>12．OK LEFTOVER<br>选手应答底牌信息，无可变参数<br>13．PLAY WHAT<br>裁判询问选手出牌，无可变参数<br>14．PLAY dC1,C2,…,Cn<br>选手应答裁判出牌询问<br>d为A时表示选手为西，d为B时表示选手为南，d为C时表示选手为东<br>Ci为选手出牌编码，参见附表1，各牌编码间用逗号分隔<br>如果C0为-1，表示弃权不出牌<br>例如：PLAY B0,4,5,7 或 PLAY C-1<br>如果d与引擎方位相同且C0为-1。表示判定引擎所在方位本次因无可出牌张自动PASS。<br>15．PLAY dC1,C2,…,Cn<br>裁判转发其它选手出牌信息，参数含义见上一指令。<br>16．OK PLAY<br>选手应答裁判出牌转发信息，无可变参数<br>17．GAMEOVER d<br>裁判告知本局最先出尽手中牌的赢家方位<br>d为A表示赢家为西，d为B表示赢家为南，d为C表示赢家为东<br>18．OK GAMEOVER<br>选手应答裁判本局赢家信息，无可变参数<br>19．ERROR d<br>裁判转发选手异常错误信息，本局结束<br>d为A表示异常选手为西，d为B表示异常选手为南，d为C表示异常选手为东<br>20．OK ERROR<br>选手应答裁判异常错误信息，无可变参数<br>提示：<br>1．选手引擎程序可通过标准输入输出流（例如cin和cout）以行为单位接受和发送指令。<br>2．指令和参数之间以一个空格分隔。<br>3．竞赛平台可发出的指令类型为：DOUDIZHUVER、INFO、DEAL、BID、LEFTOVER、PLAY、GAMEOVER和ERROR,选手引擎程序可发出的指令类型为：NAME、BID、PLAY和OK。</p><h2 id="赛制"><a href="#赛制" class="headerlink" title="赛制"></a>赛制</h2><h3 id="预赛"><a href="#预赛" class="headerlink" title="预赛"></a>预赛</h3><p>        初赛进行4轮，每轮6局，最后取前9名选手晋级决赛（轮数和局数可根据当年报名参赛队数赛前适度调整）。每局采用同场牌（每张桌打相同的牌）。赛前按种子选手优先及抽签方法确定第一轮选手桌号和方位，之后各轮按积分采用瑞士编排座位。<br>        初赛场分方案：<br>        每轮小分封顶值为350*局数，底线值为-350*局数。每轮结束后，选手按当前所在方向名次获得初赛场分，各方向积分最低者，得1场分，各方向积分每前进1名加1场分，如果其小分低于底线分数再减1场分，如果其小分高于封顶分数再加1场分。如果多人小分相同时，则他们均分其应得的场分。小分高于封顶值时按封顶值记录，其他情况按实际积分记录。<br>        晋级与淘汰：<br>        第2轮比赛结束后取前18名进入下一轮<br>        第3轮比赛结束后取前12名进入下一轮<br>        第4轮比赛结束后取前9名进入决赛<br>        场积分均值：总队数除以6取整+1，例如21个队，该值为INT(21/6)+1=4<br>        轮空处理：首轮轮空选手由抽签决定，之后各方向名次最后者抽签决定轮空，但每名选手在全部赛事中只轮空一次。轮空者获得场分均值+1，6副牌时小分得2100。<br>        迟到处理：选手5分钟内不能到场或开局，本轮按弃权处理，扣弃权者2倍场分均值，另外两家各得场分均值。小分按本场局数*350计。</p><h3 id="决赛"><a href="#决赛" class="headerlink" title="决赛"></a>决赛</h3><p>        决赛采用复式循环赛赛制（决赛9人以下，含9人）：<br>        带分规则：初赛（瑞士移位赛）晋级名单第1名带5.6比赛分，之后每个名次少带0.7比赛分，第8名带0.7比赛分，第9名无带分。<br>        进行4轮，每轮6局，按积分排定名次。（轮数和局数也可能根据进程，赛前调节）<br>        座位编排：采用固定编排，每名选手与其他8名对手相都遇于一次，按预赛瑞士积分赛的名次入座。<br>        积分计算：每桌打相同的牌，每副牌的三个结果中，同方向得分最高的选手获得4比赛分，居中者获得2比赛分，最低者获得0比赛分。得分相同者分享其应得的比赛分。<br>        轮空处理：轮空者在轮空牌副得到2.5比赛分。<br>        迟到处理：选手5分钟内不能到场或开局，本轮按弃权处理，扣弃权者6场分，另外两家各得3分。  </p><h3 id="名次排定及平分处理"><a href="#名次排定及平分处理" class="headerlink" title="名次排定及平分处理"></a>名次排定及平分处理</h3><p>        预赛：排定名次时先比较总场分，再比较总小分。小分仍相同者按抽签决定名次。<br>        决赛：排定名次时先比较总场分，如总场分相同以瑞士移位赛的名次为准。</p><h2 id="竞赛行为准则和处罚方法"><a href="#竞赛行为准则和处罚方法" class="headerlink" title="竞赛行为准则和处罚方法"></a>竞赛行为准则和处罚方法</h2><p>        1．参赛程序必须按照协议与组委会提供的统一平台系统进行通信，不得通过平台以外途径获取信息。<br>        2．一轮比赛进程中不能更换对手、程序、参数；各轮之间可以更换对手、程序、参数。<br>        3．因该项目同时含有合作和对抗性质，为保障竞赛公平性，每校只能有一只队伍参赛。参赛队必须确保操作员按比赛指定位置及时到位开始比赛，任何场次迟到或超时，按相应规则处罚。<br>        4．同一个队伍如果在一轮比赛中出现3局或以上失误或错误时，则取消比赛资格。<br>        5．超时处理<br>        因为比赛进程比较紧凑，需要各桌选手严格按照比赛进程完成各轮比赛。<br>        选手及引擎与平台单次交互时间应在15秒钟内，如果超过时限，按超时错误处理，本局进程到此结束，计分规则为：<br>        （1）如果在底牌分发前产生超时，由超时方支付相应另外两个玩家每人350分（即封顶分除以局数）。<br>        （2）如果在底牌分发后产生超时，按底牌归属后各玩家组成的炸弹总数计算炸弹数（不含春天和反春天），如果地主超时，则支付另外两个玩家每人(炸弹总数+1)<em>叫牌分</em>100，如果含火箭则再乘2；如果农民超时，则支付另一农民(炸弹总数+1)<em>叫牌分</em>100,如果含火箭则再乘2，支付地主为另一农民分数的双倍。</p><h2 id="附表"><a href="#附表" class="headerlink" title="附表"></a>附表</h2><h3 id="附表1-牌编码"><a href="#附表1-牌编码" class="headerlink" title="附表1 牌编码"></a>附表1 牌编码</h3><table><thead><tr><th align="center">编码</th><th align="center">花色点数</th><th align="center">编码</th><th align="center">花色点数</th><th align="center">编码</th><th align="center">花色点数</th><th align="center">编码</th><th align="center">花色点数</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">♥3</td><td align="center">1</td><td align="center">♦3</td><td align="center">2</td><td align="center">♠3</td><td align="center">3</td><td align="center">♣3</td></tr><tr><td align="center">4</td><td align="center">♥4</td><td align="center">5</td><td align="center">♦4</td><td align="center">6</td><td align="center">♠4</td><td align="center">7</td><td align="center">♣4</td></tr><tr><td align="center">8</td><td align="center">♥5</td><td align="center">9</td><td align="center">♦5</td><td align="center">10</td><td align="center">♠5</td><td align="center">11</td><td align="center">♣5</td></tr><tr><td align="center">12</td><td align="center">♥6</td><td align="center">13</td><td align="center">♦6</td><td align="center">14</td><td align="center">♠6</td><td align="center">15</td><td align="center">♣6</td></tr><tr><td align="center">16</td><td align="center">♥7</td><td align="center">17</td><td align="center">♦7</td><td align="center">18</td><td align="center">♠7</td><td align="center">19</td><td align="center">♣7</td></tr><tr><td align="center">20</td><td align="center">♥8</td><td align="center">21</td><td align="center">♦8</td><td align="center">22</td><td align="center">♠8</td><td align="center">23</td><td align="center">♣8</td></tr><tr><td align="center">24</td><td align="center">♥9</td><td align="center">25</td><td align="center">♦9</td><td align="center">26</td><td align="center">♠9</td><td align="center">27</td><td align="center">♣9</td></tr><tr><td align="center">28</td><td align="center">♥10</td><td align="center">29</td><td align="center">♦10</td><td align="center">30</td><td align="center">♠10</td><td align="center">31</td><td align="center">♣10</td></tr><tr><td align="center">32</td><td align="center">♥J</td><td align="center">33</td><td align="center">♦J</td><td align="center">34</td><td align="center">♠J</td><td align="center">35</td><td align="center">♣J</td></tr><tr><td align="center">36</td><td align="center">♥Q</td><td align="center">37</td><td align="center">♦Q</td><td align="center">38</td><td align="center">♠Q</td><td align="center">39</td><td align="center">♣Q</td></tr><tr><td align="center">40</td><td align="center">♥K</td><td align="center">41</td><td align="center">♦K</td><td align="center">42</td><td align="center">♠K</td><td align="center">43</td><td align="center">♣K</td></tr><tr><td align="center">44</td><td align="center">♥A</td><td align="center">45</td><td align="center">♦A</td><td align="center">46</td><td align="center">♠A</td><td align="center">47</td><td align="center">♣A</td></tr><tr><td align="center">48</td><td align="center">♥2</td><td align="center">49</td><td align="center">♦2</td><td align="center">50</td><td align="center">♠2</td><td align="center">51</td><td align="center">♣2</td></tr><tr><td align="center">52</td><td align="center">小王</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">53</td><td align="center">大王</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h3 id="附表2-牌型"><a href="#附表2-牌型" class="headerlink" title="附表2 牌型"></a>附表2 牌型</h3><p>        火箭大于炸弹和普通牌型、炸弹大于普通牌型。为避免牌型解释二义性，牌型按附表2顺序依次比较，首次匹配成功则确定为该牌型，不再向下匹配。<br>        所带牌点数可以相同，即444+555+7+7，或555+666+99+99也为合法，牌型6、10、11带牌之间点数可以不连续。</p><table><thead><tr><th align="center">编号</th><th align="center">牌型</th><th align="center">描述和备注</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">弃权</td><td align="center">无出牌</td></tr><tr><td align="center">1</td><td align="center">火箭</td><td align="center">双王（大王和小王），最大的牌型</td></tr><tr><td align="center">2</td><td align="center">炸弹</td><td align="center">四张同点数牌（型如AAAA）</td></tr><tr><td align="center">3</td><td align="center">单牌</td><td align="center">一张单牌（型如A）</td></tr><tr><td align="center">4</td><td align="center">对牌</td><td align="center">点数相同的两张牌（型如AA）</td></tr><tr><td align="center">5</td><td align="center">三条</td><td align="center">点数相同的三张牌（型如AAA）</td></tr><tr><td align="center">6</td><td align="center">三带一</td><td align="center">三条带一张单牌或一对牌。（型如：AAA+B或AAA+BB）</td></tr><tr><td align="center">7</td><td align="center">单顺</td><td align="center">五张或更多的连续单牌不包括2和王（型如：ABCDE或ABCDE…）</td></tr><tr><td align="center">8</td><td align="center">双顺</td><td align="center">三对或更多的连续对牌不包括2和王（型如：AABBCC或AABBCC..）</td></tr><tr><td align="center">9</td><td align="center">三顺</td><td align="center">二个或更多的连续三条不包括2和王（型如：AAABBB或AAABBBCCC…）</td></tr><tr><td align="center">10</td><td align="center">三顺带牌</td><td align="center">三顺带同数量的单牌或同数量的对牌（型如：AAABBB+C+D或AAABBB+CC+DD或AAABBB… +…+Y+Z或AAABBB… +…+YY+ZZ）</td></tr><tr><td align="center">11</td><td align="center">四带二</td><td align="center">四张同点数牌带2张单牌或2对牌（型如AAAA+B+C或AAAA+BB+CC）</td></tr><tr><td align="center">-1</td><td align="center">非法牌型</td><td align="center">以上牌型以外的牌张组合</td></tr></tbody></table><h1 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h1><p>资源链接： <a href="https://github.com/Big-worth/DDZ.git">https://github.com/Big-worth/DDZ.git</a>  </p><p>使用Git Bash的命令行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/Big-worth/DDZ.git DDZ</span><br></pre></td></tr></table></figure><p>沈阳航空航天大学计算机博弈——二打一讲解：  </p><p><a href="https://www.bilibili.com/video/BV1Z64y1u7u5">讲解视频</a></p><h1 id="代码修改指南"><a href="#代码修改指南" class="headerlink" title="代码修改指南"></a>代码修改指南</h1><h2 id="初始化准备工作"><a href="#初始化准备工作" class="headerlink" title="初始化准备工作"></a>初始化准备工作</h2><p>本文所使用的的环境是<code>Visual Studio 2019</code>，使用其他版本可能会有一定差别。  </p><p>首先打开<code>Visual Studio 2019</code>，将DDZ中的源代码文件夹中的头文件和源文件分别放入相应位置。  </p><p><img src="/img/posts/%E4%BA%8C%E6%89%93%E4%B8%80%EF%BC%88%E6%96%97%E5%9C%B0%E4%B8%BB%EF%BC%89%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8D%9A%E5%BC%88/%E6%96%87%E4%BB%B6%E5%AF%BC%E5%85%A5.png" alt="文件导入"></p><h2 id="修改SDL检查"><a href="#修改SDL检查" class="headerlink" title="修改SDL检查"></a>修改SDL检查</h2><p>点击项目-&gt;属性-&gt;C/C++-&gt;SDL检查改成否。</p><p><img src="/img/posts/%E4%BA%8C%E6%89%93%E4%B8%80%EF%BC%88%E6%96%97%E5%9C%B0%E4%B8%BB%EF%BC%89%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8D%9A%E5%BC%88/SDL%E6%A3%80%E6%9F%A5.png" alt="SDL检查"></p><h2 id="修改队伍名"><a href="#修改队伍名" class="headerlink" title="修改队伍名"></a>修改队伍名</h2><p><code>02.cpp</code>文件中的第一行表示队名，将引号中的名字更改成自己队伍的名字即可。  </p><h2 id="叫分函数"><a href="#叫分函数" class="headerlink" title="叫分函数"></a>叫分函数</h2><p>位于<code>02.cpp</code>的1122行~1194行  </p><p>叫分的原理是根据手牌好坏来决定叫多少分，会对起始的17张牌进行估值，最后选择叫几分。  </p><p><code>iMyBid</code>变量存储的是最后要叫的分数（当然也可以自定义变量，只需要保证最后是<code>int</code>类型，并且函数最下方返回的是这个变量就可以了）。  </p><p><code>sum</code>变量存储的是手牌的估值，最后根据手牌的估值来抉择叫几分。</p><p><code>count</code>变量存储的是临时的叫分数，最后将这个值传给<code>iMyBid</code>（其实并没什么用，可以直接改变<code>iMyBid</code>的值）。</p><p>最开始需要先统计出手牌分别是什么，每张牌都有一个对应的编号，如下图。  </p><p><img src="/img/posts/%E4%BA%8C%E6%89%93%E4%B8%80%EF%BC%88%E6%96%97%E5%9C%B0%E4%B8%BB%EF%BC%89%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8D%9A%E5%BC%88/%E7%BC%96%E5%8F%B7.jpg" alt="编号"></p><p>示例代码中的<code>first_hand_cards</code>数组用来记录初始17张牌，接下来在1134行~1137行开始统计手牌（相当于记牌器，有一说一，这个记牌器挺烂的，建议自己写一个好一点的，统计每张牌各有多少张的那种），<code>pDdz-&gt;iOnHand</code>数组记录的是初始手牌的每张牌编号。</p><p>1139行~1159行是估值部分（这段可以完全自由发挥），根据每种牌型来计算估值是多少，将估值累积进<code>sum</code>变量中。举个栗子：如果同时有大小王那么可以给<code>sum</code>+个<code>5</code>分。估值都是自己设定的，可以很大也可以很小，比如你认为炸弹价值很高就可以设置的高一点，炸弹价值没那么高就可以低一点。一般来讲，可以计算炸弹，<code>A</code>和<code>2</code>的数量，三带，顺子这几个的估值就可以了（示例代码不支持出双顺，但是能够对别人打出的双顺打出正确的出牌）。  </p><p>1161行~1177行可以不用怎么改，根据<code>sum</code>的值去改变<code>count</code>的值，来抉择叫多少分，<code>sum</code>的值就是手牌好坏的评判标准，一般来讲，值越大，那么手牌越好，可以叫的分数越高。  </p><p>1180行~1188行的作用是判断其余几家的叫分是否大于等于自家叫分，比如上家叫了<code>2</code>分，那么自家就不能叫<code>1</code>分，只能改叫<code>0</code>分（也就是不叫），这段代码的作用就是防止乱叫分。原代码用的<code>goto</code>，这么写的话可能会产生许多不可抗力，建议把这段改掉，不用<code>goto</code>去写。</p><h2 id="出牌函数"><a href="#出牌函数" class="headerlink" title="出牌函数"></a>出牌函数</h2><p>56行~74行是根据自家所在的不同位置来选择不同的出牌策略，比如地主的上家可以打得激进一点，来抑制地主出牌。但实际上这样工作量非常大，没这个必要，因此可以让三家都用同一种出牌策略（即调用同一个函数）。</p><p>然后再找到你选用的那个函数，底下可能会有一个（有两个有，一个没有）“在轮次少于<code>22</code>手数时不出大牌”的一段代码，一定要把这段代码注释掉（当然，你给它改出来也行）。这段代码是因为在牌局前期可能不一定非要出大牌，比如说上家出了3334，而你手里只有<code>2223</code>能够压住上家的牌，不过因为是在牌局早期，所以希望尽可能留住大牌，这种时候往往会选择不出。但是这段代码是有的<code>bug</code>的，很有可能导致在你先手的时候不出，导致三家<code>PASS</code>的<code>bug</code>，也就是三家都没有出牌，会直接判负。所以这部分及以下的代码需要全部注释掉。  </p><p><code>CalCardsValue</code>函数就是计算估值的函数。这个函数的原理是会枚举出每一种合法情况，然后会假定已经打出这组牌，去计算剩余牌的估值，然后选择剩余手牌估值最大的情况。</p><p>这段也需要一个记牌器去记录你的手牌情况，原代码的记牌器挺蠢的，建议重新写一个，可以和叫分函数的记牌器用一个。  </p><p><code>sum_count</code>用来记录拿掉一组牌之后剩余手牌的估值（也可以换成其他变量，只需要保证最后return的变量是你用来记录估值的变量就可以了）。  </p><p>剩下的部分的估值策略和叫分函数的估值策略一样但不完全一样，根据维持手牌估值最大的原则，所以需要把想要先出的牌的估值设置的低一些，比如我想优先出单牌而不是优先出炸弹，那么就需要把每个炸弹的估值设置的高一点；或者想先出顺子，那么就需要把顺子的估值设置的比单牌还低，那样就会优先出顺子了。同时也可以考虑一下手牌数量的问题，就是每有一张手牌扣多少估值，这样可以优先打出更多的牌。最后还需要考虑一下手牌打空的情况，当手牌可以直接完全打空的时候，那么此时估值应该设置为最大（自己没牌就赢了那肯定这么出）。需要计算估值的东西可以自己想，大体上和叫分函数里考虑的东西一样，可以考虑得更细致一些。  </p><p>上述估值策略存在一个明显的问题，举个栗子：当你手里有<code>34567</code>的牌型的时候，上家打了一张<code>3</code>，通过这种估值策略会导致拆掉顺子打出一张<code>4</code>从而保证手牌估值最大。  </p><p>如果希望更严谨亿点的话，可以在手牌数量剩的很少的时候改变一下估值策略（即让自己的手牌保持估值更小的做法），众所周知，手牌少的时候一般是拍剧后期，因此可以优先出大牌来争夺牌权，当然这并不一定是最优方式，因此当手牌剩余很少的时候可以改变一下出牌策略。  </p><p>还有一个需要注意的问题，这段的估值非常重要，如果出现越界的话，会导致出现很多<code>bug</code>，比如说出的牌不符合牌型；如果估值估得不够严谨或者不够细致，很有可能出现吃不起的<code>bug</code>（具体表现为把上家的牌抢过来再打一遍），一般来讲这个<code>bug</code>都是因为估值估反了，或者是不够细致，这种错误是最常见的也是最难改的。</p><h1 id="平台的使用"><a href="#平台的使用" class="headerlink" title="平台的使用"></a>平台的使用</h1><p>DDZ文件中的<code>斗地主博弈对战平台与示例引擎.rar</code>和<code>斗地主示例引擎源程序与测试平台2015-04-06E.rar</code>均为平台文件，这里推荐使用前者，操作相对来说较为简单。  </p><p><img src="img/posts/%E4%BA%8C%E6%89%93%E4%B8%80%EF%BC%88%E6%96%97%E5%9C%B0%E4%B8%BB%EF%BC%89%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8D%9A%E5%BC%88/%E5%B9%B3%E5%8F%B0%E6%96%87%E4%BB%B6%E5%A4%B9.png" alt="平台文件夹"></p><p>解压之后打开新平台文件夹  </p><p><img src="/img/posts/%E4%BA%8C%E6%89%93%E4%B8%80%EF%BC%88%E6%96%97%E5%9C%B0%E4%B8%BB%EF%BC%89%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8D%9A%E5%BC%88/%E6%96%B0%E5%B9%B3%E5%8F%B0%E6%96%87%E4%BB%B6%E5%A4%B9.png" alt="新平台文件夹"></p><p>打开<code>斗地主博弈对战平台2015-09-12C</code>文件  </p><p>在代码写完之后进行编译，找到这个代码存储的位置，里面有一个是<code>Debug</code>的文件夹，再点进去有一个生成的<code>exe</code>文件。找到这个文件的位置之后记一下路径，接着打开平台，点击博弈模式-&gt;训练模式。</p><p><img src="/img/posts/%E4%BA%8C%E6%89%93%E4%B8%80%EF%BC%88%E6%96%97%E5%9C%B0%E4%B8%BB%EF%BC%89%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8D%9A%E5%BC%88/%E5%B9%B3%E5%8F%B0.png" alt="平台"></p><p>分别选择<code>AI_西</code> <code>AI_南</code> <code>AI_东</code>，找到刚刚记下路径的<code>exe</code>文件，打开文件。为了更好地测试，可以把底下的停顿时间调的长一点。</p><p><img src="/img/posts/%E4%BA%8C%E6%89%93%E4%B8%80%EF%BC%88%E6%96%97%E5%9C%B0%E4%B8%BB%EF%BC%89%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8D%9A%E5%BC%88/%E8%AE%AD%E7%BB%83%E6%A8%A1%E5%BC%8F.png" alt="训练模式"></p><p>点击牌套数据-&gt;随机产生，最后牌局设定-&gt;开始牌局，就可以看到牌局情况了。  </p><p><img src="/img/posts/%E4%BA%8C%E6%89%93%E4%B8%80%EF%BC%88%E6%96%97%E5%9C%B0%E4%B8%BB%EF%BC%89%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8D%9A%E5%BC%88/%E5%BC%80%E5%A7%8B%E7%89%8C%E5%B1%80.png" alt="开始牌局"></p><hr>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> 人工智能 </tag>
            
            <tag> C++ </tag>
            
            <tag> 斗地主 </tag>
            
            <tag> 计算机博弈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown扩展语法</title>
      <link href="/archives/c677b245.html"/>
      <url>/archives/c677b245.html</url>
      
        <content type="html"><![CDATA[<hr><h1 id="扩展语法"><a href="#扩展语法" class="headerlink" title="扩展语法"></a>扩展语法</h1><p>基本语法能够应付大多数情况下的日常需求，但是对于一些人来说还不够，因此引入了扩展语法。  </p><p>点击链接可查看Markdown官方文档：</p><p><a href="https://markdown.com.cn/" title="Markdown官方文档">Markdown官方文档</a></p><p>点击链接可使用在线Markdown编辑器：</p><p><a href="https://markdown.com.cn/editor/" title="在线markdown编辑器">在线markdown编辑器</a></p><h1 id="Markdown扩展语法可用性"><a href="#Markdown扩展语法可用性" class="headerlink" title="Markdown扩展语法可用性"></a>Markdown扩展语法可用性</h1><p>并非所有Markdown应用程序都支持扩展语法元素，因此需要检查时是否够使用。  </p><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><p>添加表格时，需要使用三个及以上的连字符（<code>---</code>）创建每列表格的标题，并使用管道(<code>|</code>)来分隔每一列。  </p><p>可以通过在标题行中的连字符的左侧，右侧或两侧添加冒号（<code>:</code>），将列中的文本对齐到左侧，右侧或中心。  </p><p>例：制作一个一周七天的天气变化表  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">| 日期  | 天气  |</span><br><span class="line">| --- | --- |</span><br><span class="line">| 周一  | 晴   |</span><br><span class="line">| 周二  | 阴   |</span><br><span class="line">| 周三  | 多云  |</span><br><span class="line">| 周四  | 小雨  |</span><br><span class="line">| 周五  | 阴   |</span><br><span class="line">| 周六  | 暴雨  |</span><br><span class="line">| 周日  | 晴   |</span><br></pre></td></tr></table></figure><p>结果展示：  </p><table><thead><tr><th align="center">日期</th><th align="center">天气</th></tr></thead><tbody><tr><td align="center">周一</td><td align="center">晴</td></tr><tr><td align="center">周二</td><td align="center">阴</td></tr><tr><td align="center">周三</td><td align="center">多云</td></tr><tr><td align="center">周四</td><td align="center">小雨</td></tr><tr><td align="center">周五</td><td align="center">阴</td></tr><tr><td align="center">周六</td><td align="center">暴雨</td></tr><tr><td align="center">周日</td><td align="center">晴</td></tr></tbody></table><h1 id="围栏代码块"><a href="#围栏代码块" class="headerlink" title="围栏代码块"></a>围栏代码块</h1><p>通过使用三个反引号（<code>```</code>）或三个波浪号（<code>~~~</code>）来创建一个受保护的围栏代码块。  </p><p>还可以在第一行的反引号后面加上一种语言，从而自动识别并进行高亮。  </p><p>例：写一个C语言的输出Hello world!  </p><p>结果展示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello world&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="定义列表"><a href="#定义列表" class="headerlink" title="定义列表"></a>定义列表</h1><p>创建定义列表，需要在第一行键入术语，在下一行键入一个冒号，后面跟一个空格和定义。  </p><p>例：创建一个有关“比格沃斯”的定义列表  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">比格沃斯</span><br><span class="line">: 一只猫猫</span><br></pre></td></tr></table></figure><p>结果展示：  </p><dl><dt>比格沃斯</dt><dd>一只猫猫</dd></dl><h1 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h1><p>在单词前后使用两个波浪号（<code>~~</code>）从而实现删除线的效果。  </p><p>例：在比格沃斯上加上删除线  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~比格沃斯~~</span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><del>比格沃斯</del>  </p><h1 id="任务列表语法"><a href="#任务列表语法" class="headerlink" title="任务列表语法"></a>任务列表语法</h1><p>可以创建带有复选框的项目列表，复选框将显示在内容旁边。  </p><p>创建任务列表需要在任务列表之前添加破折号（<code>-</code>）和方括号（<code>[ ]</code>），并在（<code>[ ]</code>）前面加上空格（注：方括号中间有一个空格）。  </p><p>要选择一个复选框，需要在方括号（<code>[ ]</code>）之间添加x，即最后的样式为（<code>[x]</code>）。  </p><p>例：制作一个每日任务表  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> [x] 吃早饭</span><br><span class="line"><span class="bullet">-</span> [ ] 学习</span><br><span class="line"><span class="bullet">-</span> [ ] 跑步</span><br><span class="line"><span class="bullet">-</span> [x] 摸鱼</span><br></pre></td></tr></table></figure><p>结果展示：  </p><ul><li><p><input checked="" disabled="" type="checkbox">  吃早饭</p></li><li><p><input disabled="" type="checkbox">  学习</p></li><li><p><input disabled="" type="checkbox">  跑步</p></li><li><p><input checked="" disabled="" type="checkbox">  摸鱼</p></li></ul><h1 id="使用Emoji表情"><a href="#使用Emoji表情" class="headerlink" title="使用Emoji表情"></a>使用Emoji表情</h1><h2 id="复制和粘贴表情符号"><a href="#复制和粘贴表情符号" class="headerlink" title="复制和粘贴表情符号"></a>复制和粘贴表情符号</h2><p>在大多数情况下，可以直接复制符号表情并将其粘贴到文档中。  </p><p>Emoji表情链接：  </p><p><a href="https://emojipedia.org/">表情网站</a>  </p><p>注：如果使用的是静态网站生成器，需要确保HTML页面编码为UTF-8。</p><p>例：利用该方法复制粘贴水晶球表情  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">🔮</span><br></pre></td></tr></table></figure><p>结果展示：  </p><p>🔮  </p><h2 id="使用表情符号简码"><a href="#使用表情符号简码" class="headerlink" title="使用表情符号简码"></a>使用表情符号简码</h2><p>可以通过键入表情符号短代码来插入表情符号。  </p><p>书写格式是以冒号开头和结尾，并包含表情符号的名称。  </p><p>例：利用表情符号简码来插入表情张噢鞥，其符号简码为<code>crystal_ball</code>  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:crystal<span class="emphasis">_ball:</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><p>:crystal_ball:</p><h1 id="自动网址链接"><a href="#自动网址链接" class="headerlink" title="自动网址链接"></a>自动网址链接</h1><p>直接输入链接地址Markdown处理器会将其自动转换为链接。  </p><p>例：将该博客转换为链接  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://big-worth.github.io/</span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><a href="https://big-worth.github.io/">https://big-worth.github.io/</a></p><h1 id="禁用自动URL链接"><a href="#禁用自动URL链接" class="headerlink" title="禁用自动URL链接"></a>禁用自动URL链接</h1><p>如果不希望自动转换为链接，可以通过使用反引号的代码来删除该链接。  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">`https://big-worth.github.io/`</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><code>https://big-worth.github.io/</code></p><hr>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> 笔记 </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown基本语法</title>
      <link href="/archives/3c50d03d.html"/>
      <url>/archives/3c50d03d.html</url>
      
        <content type="html"><![CDATA[<hr><h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><p>Markdown是一种轻量级标记语言，排版语法简洁，让人们更多地关注内容本身而非排版。它使用易读易写的纯文本格式编写文档，可与HTML混编，可导出 HTML、PDF 以及本身的 .md 格式的文件。因简洁、高效、易读、易写，Markdown被大量使用，如Github、Wikipedia、简书等。  </p><p>点击链接可查看Markdown官方文档：</p><p><a href="https://markdown.com.cn/" title="Markdown官方文档">Markdown官方文档</a></p><p>点击链接可使用在线Markdown编辑器：  </p><p><a href="https://markdown.com.cn/editor/" title="在线markdown编辑器">在线markdown编辑器</a></p><h1 id="标题语法"><a href="#标题语法" class="headerlink" title="标题语法"></a>标题语法</h1><p>要创建标题，在单词或短语前面添加井号 (<code>#</code>) 。<code>#</code> 的数量代表了标题的级别，最多可以添加六级标题。  </p><p>注意<code>#</code>和后面的内容之间需要有一个空格。  </p><p>例：添加三个 <code>#</code>表示创建一个三级标题</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">### 三级标题</span></span><br></pre></td></tr></table></figure><h1 id="段落语法"><a href="#段落语法" class="headerlink" title="段落语法"></a>段落语法</h1><p>创建段落时，需要使用一个空白行进行分隔。  </p><p>例：书写I have a dream的前三段</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">I am happy to join with you today in what will go down in history as the greatest demonstration for freedom in the history of our nation.  </span><br><span class="line"></span><br><span class="line">Five score years ago, a great American, in whose symbolic shadow we stand today, signed the Emancipation Proclamation. This momentous decree came as a great beacon light of hope to millions of Negro slaves who had been seared in the flames of withering injustice. It came as a joyous daybreak to end the long night of bad captivity.</span><br><span class="line"></span><br><span class="line">But one hundred years later, the Negro still is not free. One hundred years later, the life of the Negro is still sadly crippled by the manacles of segregation and the chains of discrimination. One hundred years later, the Negro lives on a lonely island of poverty in the midst of a vast ocean of material prosperity. One hundred years later, the Negro is still languished in the corners of American society and finds himself an exile in his own land. And so we&#x27;ve come here today to dramatize a shameful condition.</span><br></pre></td></tr></table></figure><p>结果展示：  </p><p>I am happy to join with you today in what will go down in history as the greatest demonstration for freedom in the history of our nation.</p><p>Five score years ago, a great American, in whose symbolic shadow we stand today, signed the Emancipation Proclamation. This momentous decree came as a great beacon light of hope to millions of Negro slaves who had been seared in the flames of withering injustice. It came as a joyous daybreak to end the long night of bad captivity.</p><p>But one hundred years later, the Negro still is not free. One hundred years later, the life of the Negro is still sadly crippled by the manacles of segregation and the chains of discrimination. One hundred years later, the Negro lives on a lonely island of poverty in the midst of a vast ocean of material prosperity. One hundred years later, the Negro is still languished in the corners of American society and finds himself an exile in his own land. And so we’ve come here today to dramatize a shameful condition.  </p><h1 id="换行语法"><a href="#换行语法" class="headerlink" title="换行语法"></a>换行语法</h1><p>在一行的末尾添加两个或多个空格，然后按回车键,即可创建一个换行。</p><h1 id="强调语法"><a href="#强调语法" class="headerlink" title="强调语法"></a>强调语法</h1><h2 id="粗体（Bold）"><a href="#粗体（Bold）" class="headerlink" title="粗体（Bold）"></a>粗体（Bold）</h2><p>通过将文本设置为粗体或斜体来强调其重要性。  </p><p>在文本前后各加两个星号或者下划线可实现粗体效果。  </p><p>例：加粗文本“好耶！”</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">**好耶!**</span>  </span><br><span class="line"><span class="strong">__好耶！__</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><strong>好耶!</strong>   </p><p><strong>好耶！</strong></p><h2 id="斜体（Italic）"><a href="#斜体（Italic）" class="headerlink" title="斜体（Italic）"></a>斜体（Italic）</h2><p>在文本前后各加一个星号或者下划线可实现斜体效果。  </p><p>例：倾斜文本“好耶！”</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">*好耶!*</span>  </span><br><span class="line"><span class="emphasis">_好耶！_</span></span><br></pre></td></tr></table></figure><p>结果展示：</p><p><em>好耶！</em></p><p><em>好耶！</em></p><h1 id="引用语法"><a href="#引用语法" class="headerlink" title="引用语法"></a>引用语法</h1><h2 id="块引用"><a href="#块引用" class="headerlink" title="块引用"></a>块引用</h2><p>要创建块引用，需要在段落前添加一个 <code>&gt;</code> 符号。  </p><p>例：引用“No one breather who is worthier.”  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; No one breather who is worthier.</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><blockquote><p>No one breather who is worthier.  </p></blockquote><h2 id="多个段落的块引用"><a href="#多个段落的块引用" class="headerlink" title="多个段落的块引用"></a>多个段落的块引用</h2><p>块引用可以包含多个段落。为段落之间的空白行添加一个 <code>&gt;</code> 符号。</p><p>例：引用I have a dream的前两段</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; I am happy to join with you today in what will go down in history as the greatest demonstration for freedom in the history of our nation.  </span></span><br><span class="line"><span class="quote">&gt; </span></span><br><span class="line"><span class="quote">&gt; Five score years ago, a great American, in whose symbolic shadow we stand today, signed the Emancipation Proclamation. This momentous decree came as a great beacon light of hope to millions of Negro slaves who had been seared in the flames of withering injustice. It came as a joyous daybreak to end the long night of bad captivity.</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><blockquote><p>I am happy to join with you today in what will go down in history as the greatest demonstration for freedom in the history of our nation.  </p><p>Five score years ago, a great American, in whose symbolic shadow we stand today, signed the Emancipation Proclamation. This momentous decree came as a great beacon light of hope to millions of Negro slaves who had been seared in the flames of withering injustice. It came as a joyous daybreak to end the long night of bad captivity.</p></blockquote><h2 id="嵌套块引用"><a href="#嵌套块引用" class="headerlink" title="嵌套块引用"></a>嵌套块引用</h2><p>块引用可以嵌套。在要嵌套的段落前添加一个 <code>&gt;&gt;</code> 符号。  </p><p>例：引用I have a dream的前两段，其中嵌套第二段  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; I am happy to join with you today in what will go down in history as the greatest demonstration for freedom in the history of our nation.  </span></span><br><span class="line"><span class="quote">&gt; </span></span><br><span class="line"><span class="quote">&gt;&gt; Five score years ago, a great American, in whose symbolic shadow we stand today, signed the Emancipation Proclamation. This momentous decree came as a great beacon light of hope to millions of Negro slaves who had been seared in the flames of withering injustice. It came as a joyous daybreak to end the long night of bad captivity.</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><blockquote><p>I am happy to join with you today in what will go down in history as the greatest demonstration for freedom in the history of our nation.  </p><blockquote><p>Five score years ago, a great American, in whose symbolic shadow we stand today, signed the Emancipation Proclamation. This momentous decree came as a great beacon light of hope to millions of Negro slaves who had been seared in the flames of withering injustice. It came as a joyous daybreak to end the long night of bad captivity.</p></blockquote></blockquote><h2 id="带有其他元素的块引用"><a href="#带有其他元素的块引用" class="headerlink" title="带有其他元素的块引用"></a>带有其他元素的块引用</h2><p>块引用可以包含其他 Markdown 格式的元素，但是并非所有元素都可以使用。</p><h1 id="列表语法"><a href="#列表语法" class="headerlink" title="列表语法"></a>列表语法</h1><p>可以将多个条目组织成有序或无序列表。  </p><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><p>创建有序列表，需要在列表项前添加数字并紧跟一个英文句点，记得加一个空格。数字不必按照数学顺序排列，但是列表是从数字1开始起始的（如果起始数字是5，则从5开始编号）。  </p><p>例：创建一个有序列表，内容是星期一到星期五  </p><blockquote><p>第一种写法</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 星期一</span><br><span class="line"><span class="bullet">2.</span> 星期二</span><br><span class="line"><span class="bullet">3.</span> 星期三</span><br><span class="line"><span class="bullet">4.</span> 星期四</span><br><span class="line"><span class="bullet">5.</span> 星期五</span><br></pre></td></tr></table></figure><blockquote><p>第二种写法</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 星期一</span><br><span class="line"><span class="bullet">1.</span> 星期二</span><br><span class="line"><span class="bullet">1.</span> 星期三</span><br><span class="line"><span class="bullet">1.</span> 星期四</span><br><span class="line"><span class="bullet">1.</span> 星期五</span><br></pre></td></tr></table></figure><blockquote><p>第三种写法</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 星期一</span><br><span class="line"><span class="bullet">4.</span> 星期二</span><br><span class="line"><span class="bullet">1.</span> 星期三</span><br><span class="line"><span class="bullet">5.</span> 星期四</span><br><span class="line"><span class="bullet">9.</span> 星期五</span><br></pre></td></tr></table></figure><p>结果展示：  </p><ol><li>星期一</li><li>星期二</li><li>星期三</li><li>星期四</li><li>星期五</li></ol><h2 id="嵌套有序列表"><a href="#嵌套有序列表" class="headerlink" title="嵌套有序列表"></a>嵌套有序列表</h2><p>如果想制作一个嵌套的有序列表，可以在列表的某一项的下一行进行缩进，然后再创建一个有序列表。  </p><p>例：创建一个有序列表，内容是星期一到星期五,从3号开始标号，星期三中嵌套星期六和星期日  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">3.</span> 星期一</span><br><span class="line"><span class="bullet">1.</span> 星期二</span><br><span class="line"><span class="bullet">4.</span> 星期三</span><br><span class="line"><span class="bullet">    1.</span> 星期六</span><br><span class="line"><span class="bullet">    5.</span> 星期日</span><br><span class="line"><span class="bullet">9.</span> 星期四</span><br><span class="line"><span class="bullet">2.</span> 星期五</span><br></pre></td></tr></table></figure><p>结果展示：  </p><ol start="3"><li>星期一</li><li>星期二</li><li>星期三<ol><li>星期六</li><li>星期日</li></ol></li><li>星期四</li><li>星期五</li></ol><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p>创建无序列表，需要在每个列表项前面添加破折号 (-)、星号 (*) 或加号 (+) ，接着加一个空格。缩进一个或多个列表项可创建嵌套列表。  </p><p>例：创建一个无序列表，内容是星期一到星期五</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 星期一</span><br><span class="line"><span class="bullet">-</span> 星期二</span><br><span class="line"><span class="bullet">-</span> 星期三</span><br><span class="line"><span class="bullet">-</span> 星期四</span><br><span class="line"><span class="bullet">-</span> 星期五</span><br></pre></td></tr></table></figure><p>结果展示：</p><ul><li>星期一</li><li>星期二</li><li>星期三</li><li>星期四</li><li>星期五</li></ul><h1 id="代码语法"><a href="#代码语法" class="headerlink" title="代码语法"></a>代码语法</h1><h2 id="代码单词"><a href="#代码单词" class="headerlink" title="代码单词"></a>代码单词</h2><p>要将单词或短语表示为代码，需要将其包裹在反引号(`)中。  </p><p>例：将Bigglesworth表示为代码  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">`Bigglesworth`</span></span><br></pre></td></tr></table></figure><p>结果展示：</p><p><code>Bigglesworth</code>  </p><h2 id="转义反引号"><a href="#转义反引号" class="headerlink" title="转义反引号"></a>转义反引号</h2><p>如果要表示为代码的单词或短语中包含一个或多个反引号，则可以通过将单词或短语包裹在双反引号(``)中。  </p><p>例：  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">`` `</span>code<span class="code">` `</span>`</span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><code>`code`</code></p><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>创建代码块，需要将代码块的每一行缩进至少四个空格或一个制表符。</p><p>例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h1 id="分隔线语法"><a href="#分隔线语法" class="headerlink" title="分隔线语法"></a>分隔线语法</h1><p>分隔线语法需要在单独一行上使用三个或多个星号 (<code>***</code>)、破折号 (<code>---</code>) 或下划线 (<code>___</code>) ，并且不能包含其他内容。</p><p>例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"><span class="strong">**<span class="emphasis">*</span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="section">---</span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="section">___</span></span></span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><hr><hr><hr><h1 id="链接语法"><a href="#链接语法" class="headerlink" title="链接语法"></a>链接语法</h1><h2 id="Title链接"><a href="#Title链接" class="headerlink" title="Title链接"></a>Title链接</h2><p>链接文本放在中括号内，链接地址放在后面的括号中，链接title可选。  </p><p>title是鼠标悬停时显示的文字</p><p>超链接Markdown语法代码：<code>[超链接显示名](超链接地址 &quot;超链接title&quot;)</code>  </p><p>例：制作一个到该博客的超链接  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">Bigglesworth</span>](<span class="link">https://big-worth.github.io/ &quot;比格沃斯的博客&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><a href="https://big-worth.github.io/" title="比格沃斯的博客">Bigglesworth</a></p><h2 id="网址和Email地址"><a href="#网址和Email地址" class="headerlink" title="网址和Email地址"></a>网址和Email地址</h2><p>使用尖括号可以很方便地把URL或者email地址变成可点击的链接。  </p><p>例：将<a href="mailto:&#66;&#x69;&#x67;&#x67;&#x6c;&#x65;&#115;&#119;&#111;&#x72;&#x74;&#x68;&#x37;&#x40;&#x31;&#x36;&#x33;&#x2e;&#99;&#x6f;&#109;">&#66;&#x69;&#x67;&#x67;&#x6c;&#x65;&#115;&#119;&#111;&#x72;&#x74;&#x68;&#x37;&#x40;&#x31;&#x36;&#x33;&#x2e;&#99;&#x6f;&#109;</a>邮箱制作成链接  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">&lt;Bigglesworth7@163.com&gt;</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><a href="mailto:&#66;&#105;&#x67;&#x67;&#x6c;&#x65;&#x73;&#x77;&#x6f;&#x72;&#116;&#x68;&#55;&#64;&#49;&#54;&#51;&#46;&#x63;&#x6f;&#109;">&#66;&#105;&#x67;&#x67;&#x6c;&#x65;&#x73;&#x77;&#x6f;&#x72;&#116;&#x68;&#55;&#64;&#49;&#54;&#51;&#46;&#x63;&#x6f;&#109;</a>  </p><h2 id="带格式化的链接"><a href="#带格式化的链接" class="headerlink" title="带格式化的链接"></a>带格式化的链接</h2><p>可以使用强调语法来修饰链接  </p><h1 id="图片语法"><a href="#图片语法" class="headerlink" title="图片语法"></a>图片语法</h1><h2 id="本地图片"><a href="#本地图片" class="headerlink" title="本地图片"></a>本地图片</h2><p>要添加图像，使用感叹号 (<code>!</code>), 然后在方括号增加替代文本，图片链接放在圆括号里，括号里的链接后可以增加一个可选的图片标题文本。  </p><p>title是鼠标悬停时显示的文字</p><p>插入图片Markdown语法代码：<code>![图片alt](图片链接 &quot;图片title&quot;)</code>。</p><p>例：插入一张文件路径为<code>E:/Workspaces/hexo/themes/butterfly/source/img/index_img/index_img.jpg</code>名字为壁纸的图片</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">壁纸</span>](<span class="link">E:/Workspaces/hexo/themes/butterfly/source/img/index_img/index_img.jpg &quot;海琴烟&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果展示：  </p><p><img src="/img/index_img/index_img.jpg" alt="壁纸" title="壁纸"></p><h2 id="链接图片"><a href="#链接图片" class="headerlink" title="链接图片"></a>链接图片</h2><p>将图像的Markdown 括在方括号中，然后将链接添加在圆括号中。  </p><p>例：插入图片<code>E:/Workspaces/hexo/themes/butterfly/source/img/index_img/archive_img.jpg</code>并链接到该博客  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">![链接</span>](<span class="link">E:/Workspaces/hexo/themes/butterfly/source/img/index_img/archive_img.jpg</span>)](<span class="link">https://big-worth.github.io/</span>) </span><br></pre></td></tr></table></figure><p>结果展示：</p><p><a href="https://big-worth.github.io/"><img src="/img/index_img/archive_img.jpg" alt="链接"></a> </p><h1 id="转义字符语法"><a href="#转义字符语法" class="headerlink" title="转义字符语法"></a>转义字符语法</h1><p>要显示原本用于格式化的字符，需要在字符前面添加反斜杠字符<code>\</code>。  </p><p>例：书写*  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\<span class="emphasis">*</span></span><br></pre></td></tr></table></figure><p>结果展示：  </p><p>*  </p><hr>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> 笔记 </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
